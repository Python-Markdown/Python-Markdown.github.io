{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python-Markdown \u00b6 This is a Python implementation of John Gruber\u2019s Markdown . It is almost completely compliant with the reference implementation, though there are a few very minor differences . See John\u2019s Syntax Documentation for the syntax rules. To get started, see the installation instructions , the library reference , and the command line interface . Goals \u00b6 The Python-Markdown project is developed with the following goals in mind: Maintain a Python library (with an optional CLI wrapper) suited to use in web server environments (never raise an exception, never write to stdout, etc.) as an implementation of the markdown parser that follows the syntax rules and the behavior of the original (markdown.pl) implementation as reasonably as possible (see differences for a few exceptions). Provide an Extension API which makes it possible to change and/or extend the behavior of the parser. Note This is not a CommonMark implementation ; nor is it trying to be! Python-Markdown was developed long before the CommonMark specification was released and has always (mostly) followed the syntax rules and behavior of the original reference implementation. No accommodations have been made to address the changes which CommonMark has suggested. It is recommended that you look elsewhere if you want an implementation which follows the CommonMark specification. Features \u00b6 In addition to the basic markdown syntax, Python-Markdown supports the following features: International Input Python-Markdown will accept input in any language supported by Unicode including bi-directional text. In fact the test suite includes documents written in Russian and Arabic. Extensions Various extensions are provided (including extra ) to change and/or extend the base syntax. Additionally, a public Extension API is available to write your own extensions. Output Formats Python-Markdown can output documents with either HTML or XHTML style tags. See the Library Reference for details. Command Line Interface In addition to being a Python Library, a command line script is available for your convenience. Differences \u00b6 While Python-Markdown strives to fully implement markdown as described in the syntax rules , the rules can be interpreted in different ways and different implementations occasionally vary in their behavior (see the Babelmark FAQ for some examples). Known and intentional differences found in Python-Markdown are summarized below: Middle-Word Emphasis Python-Markdown defaults to ignoring middle-word emphasis (and strong emphasis). In other words, some_long_filename.txt will not become some<em>long</em>filename.txt . This can be switched off if desired. See the Legacy EM Extension for details. Indentation/Tab Length The syntax rules clearly state that when a list item consists of multiple paragraphs, \u201ceach subsequent paragraph in a list item must be indented by either 4 spaces or one tab\u201d (emphasis added). However, many implementations do not enforce this rule and allow less than 4 spaces of indentation. The implementers of Python-Markdown consider it a bug to not enforce this rule. This applies to any block level elements nested in a list, including paragraphs, sub-lists, blockquotes, code blocks, etc. They must always be indented by at least four spaces (or one tab) for each level of nesting. In the event that one would prefer different behavior, tab_length can be set to whatever length is desired. Be warned however, as this will affect indentation for all aspects of the syntax (including root level code blocks). Alternatively, a third party extension may offer a solution that meets your needs. Consecutive Lists While the syntax rules are not clear on this, many implementations (including the original) do not end one list and start a second list when the list marker (asterisks, pluses, hyphens, and numbers) changes. For consistency, Python-Markdown maintains the same behavior with no plans to change in the foreseeable future. That said, the Sane List Extension is available to provide a less surprising behavior. Support \u00b6 You may report bugs, ask for help, and discuss various other issues on the bug tracker .","title":"Python-Markdown"},{"location":"#python-markdown","text":"This is a Python implementation of John Gruber\u2019s Markdown . It is almost completely compliant with the reference implementation, though there are a few very minor differences . See John\u2019s Syntax Documentation for the syntax rules. To get started, see the installation instructions , the library reference , and the command line interface .","title":"Python-Markdown"},{"location":"#goals","text":"The Python-Markdown project is developed with the following goals in mind: Maintain a Python library (with an optional CLI wrapper) suited to use in web server environments (never raise an exception, never write to stdout, etc.) as an implementation of the markdown parser that follows the syntax rules and the behavior of the original (markdown.pl) implementation as reasonably as possible (see differences for a few exceptions). Provide an Extension API which makes it possible to change and/or extend the behavior of the parser. Note This is not a CommonMark implementation ; nor is it trying to be! Python-Markdown was developed long before the CommonMark specification was released and has always (mostly) followed the syntax rules and behavior of the original reference implementation. No accommodations have been made to address the changes which CommonMark has suggested. It is recommended that you look elsewhere if you want an implementation which follows the CommonMark specification.","title":"Goals"},{"location":"#features","text":"In addition to the basic markdown syntax, Python-Markdown supports the following features: International Input Python-Markdown will accept input in any language supported by Unicode including bi-directional text. In fact the test suite includes documents written in Russian and Arabic. Extensions Various extensions are provided (including extra ) to change and/or extend the base syntax. Additionally, a public Extension API is available to write your own extensions. Output Formats Python-Markdown can output documents with either HTML or XHTML style tags. See the Library Reference for details. Command Line Interface In addition to being a Python Library, a command line script is available for your convenience.","title":"Features"},{"location":"#differences","text":"While Python-Markdown strives to fully implement markdown as described in the syntax rules , the rules can be interpreted in different ways and different implementations occasionally vary in their behavior (see the Babelmark FAQ for some examples). Known and intentional differences found in Python-Markdown are summarized below: Middle-Word Emphasis Python-Markdown defaults to ignoring middle-word emphasis (and strong emphasis). In other words, some_long_filename.txt will not become some<em>long</em>filename.txt . This can be switched off if desired. See the Legacy EM Extension for details. Indentation/Tab Length The syntax rules clearly state that when a list item consists of multiple paragraphs, \u201ceach subsequent paragraph in a list item must be indented by either 4 spaces or one tab\u201d (emphasis added). However, many implementations do not enforce this rule and allow less than 4 spaces of indentation. The implementers of Python-Markdown consider it a bug to not enforce this rule. This applies to any block level elements nested in a list, including paragraphs, sub-lists, blockquotes, code blocks, etc. They must always be indented by at least four spaces (or one tab) for each level of nesting. In the event that one would prefer different behavior, tab_length can be set to whatever length is desired. Be warned however, as this will affect indentation for all aspects of the syntax (including root level code blocks). Alternatively, a third party extension may offer a solution that meets your needs. Consecutive Lists While the syntax rules are not clear on this, many implementations (including the original) do not end one list and start a second list when the list marker (asterisks, pluses, hyphens, and numbers) changes. For consistency, Python-Markdown maintains the same behavior with no plans to change in the foreseeable future. That said, the Sane List Extension is available to provide a less surprising behavior.","title":"Differences"},{"location":"#support","text":"You may report bugs, ask for help, and discuss various other issues on the bug tracker .","title":"Support"},{"location":"authors/","text":"Primary Authors \u00b6 Waylan Limberg @waylan is the current maintainer of the code and has written much of the current code base, including a complete refactor of the core for version 2.0. He started out by authoring many of the available extensions and later was asked to join Yuri, where he began fixing numerous bugs, adding documentation and making general improvements to the existing code base. Dmitry Shachnev @mitya57 joined the team after providing a number of helpful patches and has been assisting with maintenance, reviewing pull requests and ticket triage. Isaac Muse @facelessuser joined the team after providing a number of helpful patches and has been assisting with maintenance, reviewing pull requests and ticket triage. Yuri Takhteyev Yuri wrote most of the code found in version 1.x while procrastinating his Ph.D. Various pieces of his code still exist, most notably the basic structure. Manfed Stienstra Manfed wrote the original version of the script and is responsible for various parts of the existing code base. Artem Yunusov Artem, who as part of a 2008 GSoC project, refactored inline patterns, replaced the NanoDOM with ElementTree support and made various other improvements. David Wolever David refactored the extension API and made other improvements as he helped to integrate Markdown into Dr.Project. Other Contributors \u00b6 The incomplete list of individuals below have provided patches or otherwise contributed to the project prior to the project being hosted on GitHub. See the GitHub commit log for a list of recent contributors. We would like to thank everyone who has contributed to the project in any way. Eric Abrahamsen Jeff Balogh Sergej Chodarev Chris Clark Tiago Cogumbreiro Kjell Magne Fauske G. Clark Haynes Daniel Krech Steward Midwinter Jack Miller Neale Pickett Paul Stansifer John Szakmeister Malcolm Tredinnick Ben Wilson and many others who helped by reporting bugs","title":"Authors"},{"location":"authors/#primary-authors","text":"Waylan Limberg @waylan is the current maintainer of the code and has written much of the current code base, including a complete refactor of the core for version 2.0. He started out by authoring many of the available extensions and later was asked to join Yuri, where he began fixing numerous bugs, adding documentation and making general improvements to the existing code base. Dmitry Shachnev @mitya57 joined the team after providing a number of helpful patches and has been assisting with maintenance, reviewing pull requests and ticket triage. Isaac Muse @facelessuser joined the team after providing a number of helpful patches and has been assisting with maintenance, reviewing pull requests and ticket triage. Yuri Takhteyev Yuri wrote most of the code found in version 1.x while procrastinating his Ph.D. Various pieces of his code still exist, most notably the basic structure. Manfed Stienstra Manfed wrote the original version of the script and is responsible for various parts of the existing code base. Artem Yunusov Artem, who as part of a 2008 GSoC project, refactored inline patterns, replaced the NanoDOM with ElementTree support and made various other improvements. David Wolever David refactored the extension API and made other improvements as he helped to integrate Markdown into Dr.Project.","title":"Primary Authors"},{"location":"authors/#other-contributors","text":"The incomplete list of individuals below have provided patches or otherwise contributed to the project prior to the project being hosted on GitHub. See the GitHub commit log for a list of recent contributors. We would like to thank everyone who has contributed to the project in any way. Eric Abrahamsen Jeff Balogh Sergej Chodarev Chris Clark Tiago Cogumbreiro Kjell Magne Fauske G. Clark Haynes Daniel Krech Steward Midwinter Jack Miller Neale Pickett Paul Stansifer John Szakmeister Malcolm Tredinnick Ben Wilson and many others who helped by reporting bugs","title":"Other Contributors"},{"location":"changelog/","text":"Python-Markdown Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . See the Contributing Guide for details. [3.6] \u2013 2024-03-14 \u00b6 Changed \u00b6 Refactor TOC Sanitation \u00b6 All postprocessors are now run on heading content. Footnote references are now stripped from heading content. Fixes #660 . A more robust striptags is provided to convert headings to plain text. Unlike, the markupsafe implementation, HTML entities are not unescaped. The plain text name , rich html , and unescaped raw data-toc-label are saved to toc_tokens , allowing users to access the full rich text content of the headings directly from toc_tokens . The value of data-toc-label is sanitized separate from heading content before being written to name . This fixes a bug which allowed markup through in certain circumstances. To access the raw unsanitized data, retrieve the value from token['data-toc-label'] directly. An html.unescape call is made just prior to calling slugify so that slugify only operates on Unicode characters. Note that html.unescape is not run on name , html , or data-toc-label . The functions get_name and stashedHTML2text defined in the toc extension are both deprecated . Instead, third party extensions should use some combination of the new functions run_postprocessors , render_inner_html and striptags . Fixed \u00b6 Include scripts/*.py in the generated source tarballs ( #1430 ). Ensure lines after heading in loose list are properly detabbed ( #1443 ). Give smarty tree processor higher priority than toc ( #1440 ). Permit carets ( ^ ) and square brackets ( ] ) but explicitly exclude backslashes ( \\ ) from abbreviations ( #1444 ). In attribute lists ( attr_list , fenced_code ), quoted attribute values are now allowed to contain curly braces ( } ) ( #1414 ). [3.5.2] \u2013 2024-01-10 \u00b6 Fixed \u00b6 Fix type annotations for convertFile - it accepts only bytes-based buffers. Also remove legacy checks from Python 2 ( #1400 ) Remove legacy import needed only in Python 2 ( #1403 ) Fix typo that left the attribute AdmonitionProcessor.content_indent unset ( #1404 ) Fix edge-case crash in InlineProcessor with AtomicString ( #1406 ). Fix edge-case crash in codehilite with an empty code tag ( #1405 ). Improve and expand type annotations in the code base ( #1401 ). Fix handling of bogus comments ( #1425 ). [3.5.1] \u2013 2023-10-31 \u00b6 Fixed \u00b6 Fix a performance problem with HTML extraction where large HTML input could trigger quadratic line counting behavior ( #1392 ). Improve and expand type annotations in the code base ( #1394 ). [3.5] \u2013 2023-10-06 \u00b6 Added \u00b6 Add permalink_leading configuration option to the toc extension ( #1339 ) \u00b6 A new boolean option permalink_leading controls the position of the permanent link anchors generated with permalink . Setting permalink_leading to True will cause the links to be inserted at the start of the header, before any other header content. The default behavior for permalink is to append permanent links to the header, placing them after all other header content. Changed \u00b6 Add support for cPython version 3.12 (and PyPy 3.10) and drop support for Python version 3.7 ( #1357 ). Refactor changelog to use the format defined at https://keepachangelog.com/ . Update the list of empty HTML tags ( #1353 ). Add customizable TOC title class to TOC extension ( #1293 ). Add API documentation of the code base which is generated by mkdocstrings ( #1220 ). Fixed \u00b6 Fix a corner case in admonitions where if an indented code block was provided as the first block, the output would be malformed ( #1329 ). [3.4.4] \u2013 2023-07-25 \u00b6 Fixed \u00b6 Add a special case for initial 's to smarty extension ( #1305 ). Unescape any backslash escaped inline raw HTML ( #1358 ). Unescape backslash escaped TOC token names ( #1360 ). [3.4.3] \u2013 2023-03-23 \u00b6 Fixed \u00b6 Restore console script ( #1327 ). [3.4.2] \u2013 2023-03-22 \u00b6 Fixed \u00b6 Officially support Python 3.11. Improve standalone * and _ parsing ( #1300 ). Consider <html> HTML tag a block-level element ( #1309 ). Switch from setup.py to pyproject.toml . [3.4.1] \u2013 2022-07-15 \u00b6 Fixed \u00b6 Fix an import issue with importlib.util ( #1274 ). [3.4] \u2013 2022-07-15 \u00b6 Changed \u00b6 The tables extension now uses a style attribute instead of an align attribute for alignment. \u00b6 The HTML4 spec specifically deprecates the use of the align attribute and it does not appear at all in the HTML5 spec . Therefore, by default, the tables extension will now use the style attribute (setting just the text-align property) in td and th blocks. The former behavior is available by setting the use_align_attribute configuration option to True when enabling the extension. For example, to configure the old align behavior: from markdown.extensions.tables import TableExtension markdown.markdown(src, extensions=[TableExtension(use_align_attribute=True)]) Backslash unescaping moved to Treeprocessor ( #1131 ). \u00b6 Unescaping backslash escapes has been moved to a Treeprocessor, which enables proper HTML escaping during serialization. However, it is recognized that various third-party extensions may be calling the old class at postprocessors.UnescapePostprocessor . Therefore, the old class remains in the code base, but has been deprecated and will be removed in a future release. The new class treeprocessors.UnescapeTreeprocessor should be used instead. Previously deprecated objects have been removed \u00b6 Various objects were deprecated in version 3.0 and began raising deprecation warnings (see the version 3.0 release notes for details). Any of those objects which remained in version 3.3 have been removed from the code base in version 3.4 and will now raise errors. The relevant objects are listed below. Deprecated Object Replacement Object markdown.version markdown.__version__ markdown.version_info markdown.__version_info__ markdown.util.etree xml.etree.ElementTree markdown.util.string_type str markdown.util.text_type str markdown.util.int2str chr markdown.util.iterrange range markdown.util.isBlockLevel markdown.Markdown().is_block_level markdown.util.Processor().markdown markdown.util.Processor().md markdown.util.Registry().__setitem__ markdown.util.Registry().register markdown.util.Registry().__delitem__ markdown.util.Registry().deregister markdown.util.Registry().add markdown.util.Registry().register In addition, the md_globals parameter of Markdown.extensions.Extension.extendMarkdown() is no longer recognized as a valid parameter and will raise an error if provided. Added \u00b6 Some new configuration options have been added to the footnotes extension ( #1218 ): Small refactor of the BACKLINK_TITLE option; The use of format() instead of \u201cold\u201d %d formatter allows one to specify text without the need to have the number of the footnote in it (like footnotes on Wikipedia for example). The modification is backward compatible so no configuration change is required. Addition of a new option SUPERSCRIPT_TEXT that allows one to specify a custom placeholder for the footnote itself in the text. Ex: [{}] will give <sup>[1]</sup> , ({}) will give <sup>(1)</sup> , or by default, the current behavior: <sup>1</sup> . The Table of Contents extension now accepts a toc_class parameter which can be used to set the CSS class(es) on the <div> that contains the Table of Contents ( #1224 ). The CodeHilite extension now supports a pygments_formatter option that can be set to a custom formatter class ( #1187 ). If pygments_formatter is set to a string (ex: 'html' ), Pygments\u2019 default formatter by that name is used. If pygments_formatter is set to a formatter class (or any callable which returns a formatter instance), then an instance of that class is used. The formatter class is now passed an additional option, lang_str , to denote the language of the code block ( #1258 ). While Pygments\u2019 built-in formatters will ignore the option, a custom formatter assigned to the pygments_formatter option can make use of the lang_str to include the code block\u2019s language in the output. Fixed \u00b6 Extension entry-points are only loaded if needed ( #1216 ). Added additional checks to the <pre><code> handling of PrettifyTreeprocessor ( #1261 , #1263 ). Fix XML deprecation warnings. [3.3.7] \u2013 2022-05-05 \u00b6 Fixed \u00b6 Disallow square brackets in reference link ids ( #1209 ). Retain configured pygments_style after first code block ( #1240 ). Ensure fenced code attributes are properly escaped ( #1247 ). [3.3.6] \u2013 2021-11-17 \u00b6 Fixed \u00b6 Fix a dependency issue ( #1195 , #1196 ). [3.3.5] \u2013 2021-11-16 \u00b6 Fixed \u00b6 Make the slugify_unicode function not remove diacritical marks ( #1118 ). Fix [toc] detection when used with nl2br extension ( #1160 ). Re-use compiled regex for block level checks ( #1169 ). Don\u2019t process shebangs in fenced code blocks when using CodeHilite ( #1156 ). Improve email address validation for Automatic Links ( #1165 ). Ensure <summary> tags are parsed correctly ( #1079 ). Support Python 3.10 ( #1124 ). [3.3.4] \u2013 2021-02-24 \u00b6 Fixed \u00b6 Properly parse unclosed tags in code spans ( #1066 ). Properly parse processing instructions in md_in_html ( #1070 ). Properly parse code spans in md_in_html ( #1069 ). Preserve text immediately before an admonition ( #1092 ). Simplified regex for HTML placeholders ( #928 ) addressing ( #932 ). Ensure permalinks and anchorlinks are not restricted by toc_depth ( #1107 ). Fix corner cases with lists under admonitions ( #1102 ). [3.3.3] \u2013 2020-10-25 \u00b6 Fixed \u00b6 Unify all block-level tags ( #1047 ). Fix issue where some empty elements would have text rendered as None when using md_in_html ( #1049 ). Avoid catastrophic backtracking in hr regex ( #1055 ). Fix hr HTML handling ( #1053 ). [3.3.2] \u2013 2020-10-19 \u00b6 Fixed \u00b6 Properly parse inline HTML in md_in_html ( #1040 & #1045 ). Avoid crashing when md_in_html fails ( #1040 ). [3.3.1] \u2013 2020-10-12 \u00b6 Fixed \u00b6 Correctly parse raw script and style tags ( #1036 ). Ensure consistent class handling by fenced_code and codehilite ( #1032 ). [3.3] \u2013 2020-10-06 \u00b6 Changed \u00b6 The prefix language- is now prepended to all language classes by default on code blocks. \u00b6 The HTML5 spec recommends that the class defining the language of a code block be prefixed with language- . Therefore, by default, both the fenced_code and codehilite extensions now prepend the prefix when code highlighting is disabled. If you have previously been including the prefix manually in your fenced code blocks, then you will not want a second instance of the prefix. Similarly, if you are using a third party syntax highlighting tool which does not recognize the prefix, or requires a different prefix, then you will want to redefine the prefix globally using the lang_prefix configuration option of either the fenced_code or codehilite extensions. For example, to configure fenced_code to not apply any prefix (the previous behavior), set the option to an empty string: from markdown.extensions.fenced_code import FencedCodeExtension markdown.markdown(src, extensions=[FencedCodeExtension(lang_prefix='')]) Note When code highlighting is enabled , the output from Pygments is used unaltered. Currently, Pygments does not provide an option to include the language class in the output, let alone prefix it. Therefore, any language prefix is only applied when syntax highlighting is disabled. Attribute Lists are more strict ( #898 ). \u00b6 Empty curly braces are now completely ignored by the Attribute List extension. Previously, the extension would recognize them as attribute lists and remove them from the document. Therefore, it is no longer necessary to backslash escape a set of curly braces which are empty or only contain whitespace. Despite not being documented, previously an attribute list could be defined anywhere within a table cell and get applied to the cell ( <td> element). Now the attribute list must be defined at the end of the cell content and must be separated from the rest of the content by at least one space. This makes it easy to differentiate between attribute lists defined on inline elements within a cell and the attribute list for the cell itself. It is also more consistent with how attribute lists are defined on other types of elements. The extension has also added support for defining attribute lists on table header cells ( <th> elements) in the same manner as data cells ( <td> elements). In addition, the documentation for the extensions received an overhaul. The features ( #987 ) and limitations ( #965 ) of the extension are now fully documented. Added \u00b6 All Pygments\u2019 options are now available for syntax highlighting ( #816 ). The Codehilite extension now accepts any options which Pygments supports as global configuration settings on the extension. Fenced Code Blocks will accept any of the same options on individual code blocks. Any of the previously supported aliases to Pygments\u2019 options continue to be supported at this time. However, it is recommended that the Pygments option names be used directly to ensure continued compatibility in the future. Fenced Code Blocks now work with Attribute Lists when syntax highlighting is disabled. Any random HTML attribute can be defined and set on the <code> tag of fenced code blocks when the attr_list extension is enabled ( #816 ). The HTML parser has been completely replaced. The new HTML parser is built on Python\u2019s html.parser.HTMLParser , which alleviates various bugs and simplify maintenance of the code ( #803 , #830 ). The Markdown in HTML extension has been rebuilt on the new HTML Parser, which drastically simplifies it. Note that raw HTML elements with a markdown attribute defined are now converted to ElementTree Elements and are rendered by the serializer. Various bugs have been fixed ( #803 , #595 , #780 , and #1012 ). Link reference parsing, abbreviation reference parsing and footnote reference parsing has all been moved from preprocessors to blockprocessors , which allows them to be nested within other block level elements. Specifically, this change was necessary to maintain the current behavior in the rebuilt Markdown in HTML extension. A few random edge-case bugs (see the included tests) were resolved in the process ( #803 ). An alternate function markdown.extensions.headerid.slugify_unicode has been included with the Table of Contents extension which supports Unicode characters in table of contents slugs. The old markdown.extensions.headerid.slugify method which removes non-ASCII characters remains the default. Import and pass markdown.extensions.headerid.slugify_unicode to the slugify configuration option to use the new behavior. Support was added for Python 3.9 and dropped for Python 3.5. Fixed \u00b6 Document how to pass configuration options to Extra ( #1019 ). Fix HR which follows strong em ( #897 ). Support short reference image links ( #894 ). Avoid a RecursionError from deeply nested blockquotes ( #799 ). Fix issues with complex emphasis ( #979 ). Fix unescaping of HTML characters <> in CodeHilite ( #990 ). Fix complex scenarios involving lists and admonitions ( #1004 ). Fix complex scenarios with nested ordered and unordered lists in a definition list ( #918 ). [3.2.2] \u2013 2020-05-08 \u00b6 Fixed \u00b6 Add checklinks tox environment to ensure all links in documentation are good. Refactor extension API documentation ( #729 ). Load entry_points (for extensions) only once using importlib.metadata . Do not double escape entities in TOC. Correctly report if an extension raises a TypeError ( #939 ). Raise a KeyError when attempting to delete a nonexistent key from the extension registry ( #939 ). Remove import of packaging (or pkg_resources fallback) entirely. Remove setuptools as a run-time dependency ( install_required ). [3.2.1] \u2013 2020-02-12 \u00b6 Fixed \u00b6 The name property in toc_tokens from the TOC extension now escapes HTML special characters ( < , > , and & ). [3.2] \u2013 2020-02-07 \u00b6 Changed \u00b6 Drop support for Python 2.7 \u00b6 Python 2.7 reaches end-of-life on 2020-01-01 and Python-Markdown 3.2 has dropped support for it. Please upgrade to Python 3, or use Python-Markdown 3.1. em and strong inline processor changes \u00b6 In order to fix issue #792 , em / strong inline processors were refactored. This translated into removing many of the existing inline processors that handled this logic: em_strong strong emphasis strong2 emphasis These processors were replaced with two new ones: em_strong em_strong2 The legacy_em extension was also modified with new, refactored logic and simply overrides the em_strong2 inline processor. CodeHilite now always wraps with <code> tags \u00b6 Before, the HTML generated by CodeHilite looked like: - <pre><code>foo = 'bar'</code></pre> if you were not using Pygments. - <pre>foo = 'bar'</pre> if you were using Pygments. To make the cases more consistent (and adhere to many Markdown specifications and HTML code block markup suggestions), CodeHilite will now always additionally wrap code with <code> tags. See #862 for more details. This change does not alter the Python-Markdown API, but users relying on the old markup will find their output now changed. Internally, this change relies on the Pygments 2.4, so you must be using at least that version to see this effect. Users with earlier Pygments versions will continue to see the old behavior. markdown.util.etree deprecated \u00b6 Previously, Python-Markdown was using either the xml.etree.cElementTree module or the xml.etree.ElementTree module, based on their availability. In modern Python versions, the former is a deprecated alias for the latter. Thus, the compatibility layer is deprecated and extensions are advised to use xml.etree.ElementTree directly. Importing markdown.util.etree will raise a DeprecationWarning beginning in version 3.2 and may be removed in a future release. Therefore, extension developers are encouraged to replace from markdown.util import etree with import xml.etree.ElementTree as etree in their code. Added \u00b6 Some new configuration options have been added to the toc extension: The anchorlink_class and permalink_class options allow class(es) to be assigned to the anchorlink and permalink respectively. This allows using icon fonts from CSS for the links. Therefore, an empty string passed to permalink now generates an empty permalink . Previously no permalink would have been generated. ( #776 ) The permalink_title option allows the title attribute of a permalink to be set to something other than the default English string Permanent link . ( #877 ) Document thread safety ( #812 ). Markdown parsing in HTML has been exposed via a separate extension called md_in_html . Add support for Python 3.8. Fixed \u00b6 HTML tag placeholders are no longer included in .toc_tokens ( #899 ). Unescape backslash-escaped characters in TOC ids ( #864 ). Refactor bold and italic logic in order to solve complex nesting issues ( #792 ). Always wrap CodeHilite code in code tags ( #862 ). [3.1.1] \u2013 2019-05-20 \u00b6 Fixed \u00b6 Fixed import failure in setup.py when the source directory is not on sys.path ( #823 ). Prefer public packaging module to pkg_resources\u2019 private copy of it ( #825 ). [3.1] \u2013 2019-03-25 \u00b6 Changed \u00b6 markdown.version and markdown.version_info deprecated \u00b6 Historically, version numbers were acquired via the attributes markdown.version and markdown.version_info . As of 3.0, a more standardized approach is being followed and versions are acquired via the markdown.__version__ and markdown.__version_info__ attributes. As of 3.1 the legacy attributes will raise a DeprecationWarning if they are accessed. In a future release the legacy attributes will be removed. Added \u00b6 A Contributing Guide has been added ( #732 ). A new configuration option to set the footnote separator has been added. Also, the rel and rev attributes have been removed from footnotes as they are not valid in HTML5. The refs and backrefs classes already exist and serve the same purpose ( #723 ). A new option for toc_depth to set not only the bottom section level, but also the top section level. A string consisting of two digits separated by a hyphen in between ( \"2-5\" ), defines the top ( t ) and the bottom ( b ) ( <ht>..<hb> ). A single integer still defines the bottom section level ( <h1>..<hb> ) only. ( #787 ). Fixed \u00b6 Update CLI to support PyYAML 5.1. Overlapping raw HTML matches no longer leave placeholders behind ( #458 ). Emphasis patterns now recognize newline characters as whitespace ( #783 ). Version format had been updated to be PEP 440 compliant ( #736 ). Block level elements are defined per instance, not as class attributes ( #731 ). Double escaping of block code has been eliminated ( #725 ). Problems with newlines in references has been fixed ( #742 ). Escaped # are now handled in header syntax ( #762 ). [3.0.1] \u2013 2018-09-28 \u00b6 Fixed \u00b6 Brought back the version and version_info variables ( #709 ). Added support for hexadecimal HTML entities ( #712 ). [3.0] \u2013 2018-09-21 \u00b6 Changed \u00b6 enable_attributes keyword deprecated \u00b6 The enable_attributes keyword is deprecated in version 3.0 and will be ignored. Previously the keyword was True by default and enabled an undocumented way to define attributes on document elements. The feature has been removed from version 3.0. As most users did not use the undocumented feature, it should not affect most users. For the few who did use the feature, it can be enabled by using the Legacy Attributes extension. smart_emphasis keyword and smart_strong extension deprecated \u00b6 The smart_emphasis keyword is deprecated in version 3.0 and will be ignored. Previously the keyword was True by default and caused the parser to ignore middle-word emphasis. Additionally, the optional smart_strong extension provided the same behavior for strong emphasis. Both of those features are now part of the default behavior, and the Legacy Emphasis extension is available to disable that behavior. output_formats simplified to html and xhtml . \u00b6 The output_formats keyword now only accepts two options: html and xhtml Note that if (x)html1 , (x)html4 or (x)html5 are passed in, the number is stripped and ignored. safe_mode and html_replacement_text keywords deprecated \u00b6 Both safe_mode and the associated html_replacement_text keywords are deprecated in version 3.0 and will be ignored. The so-called \u201csafe mode\u201d was never actually \u201csafe\u201d which has resulted in many people having a false sense of security when using it. As an alternative, the developers of Python-Markdown recommend that any untrusted content be passed through an HTML sanitizer (like Bleach ) after being converted to HTML by markdown. In fact, Bleach Whitelist provides a curated list of tags, attributes, and styles suitable for filtering user-provided HTML using bleach. If your code previously looked like this: html = markdown.markdown(text, safe_mode=True) Then it is recommended that you change your code to read something like this: import bleach from bleach_whitelist import markdown_tags, markdown_attrs html = bleach.clean(markdown.markdown(text), markdown_tags, markdown_attrs) If you are not interested in sanitizing untrusted text, but simply desire to escape raw HTML, then that can be accomplished through an extension which removes HTML parsing: from markdown.extensions import Extension class EscapeHtml(Extension): def extendMarkdown(self, md): md.preprocessors.deregister('html_block') md.inlinePatterns.deregister('html') html = markdown.markdown(text, extensions=[EscapeHtml()]) As the HTML would not be parsed with the above Extension, then the serializer will escape the raw HTML, which is exactly what happened in previous versions with safe_mode=\"escape\" . Positional arguments deprecated \u00b6 Positional arguments on the markdown.Markdown() class are deprecated as are all except the text argument on the markdown.markdown() wrapper function. Using positional arguments will raise an error. Only keyword arguments should be used. For example, if your code previously looked like this: html = markdown.markdown(text, [SomeExtension()]) Then it is recommended that you change it to read something like this: html = markdown.markdown(text, extensions=[SomeExtension()]) Note This change is being made as a result of deprecating \"safe_mode\" as the safe_mode argument was one of the positional arguments. When that argument is removed, the two arguments following it will no longer be at the correct position. It is recommended that you always use keywords when they are supported for this reason. Extension name behavior has changed \u00b6 In previous versions of Python-Markdown, the built-in extensions received special status and did not require the full path to be provided. Additionally, third party extensions whose name started with \"mdx_\" received the same special treatment. This is no longer the case. Support has been added for extensions to define an entry point . An entry point is a string name which can be used to point to an Extension class. The built-in extensions now have entry points which match the old short names. And any third-party extensions which define entry points can now get the same behavior. See the documentation for each specific extension to find the assigned name. If an extension does not define an entry point, then the full path to the extension must be used. See the documentation for a full explanation of the current behavior. Extension configuration as part of extension name deprecated \u00b6 The previously documented method of appending the extension configuration options as a string to the extension name is deprecated and will raise an error. The extension_configs keyword should be used instead. See the documentation for a full explanation of the current behavior. HeaderId extension deprecated \u00b6 The HeaderId Extension is deprecated and will raise an error if specified. Use the Table of Contents Extension instead, which offers most of the features of the HeaderId Extension and more (support for meta data is missing). Extension authors who have been using the slugify and unique functions defined in the HeaderId Extension should note that those functions are now defined in the Table of Contents extension and should adjust their import statements accordingly ( from markdown.extensions.toc import slugify, unique ). Homegrown OrderedDict has been replaced with a purpose-built Registry \u00b6 All processors and patterns now get \u201cregistered\u201d to a Registry . A backwards compatible shim is included so that existing simple extensions should continue to work. A DeprecationWarning will be raised for any code which calls the old API. Markdown class instance references. \u00b6 Previously, instances of the Markdown class were represented as any one of md , md_instance , or markdown . This inconsistency made it difficult when developing extensions, or just maintaining the existing code. Now, all instances are consistently represented as md . The old attributes on class instances still exist, but raise a DeprecationWarning when accessed. Also on classes where the instance was optional, the attribute always exists now and is simply None if no instance was provided (previously the attribute would not exist). markdown.util.isBlockLevel deprecated \u00b6 The markdown.util.isBlockLevel function is deprecated and will raise a DeprecationWarning . Instead, extensions should use the isBlockLevel method of the Markdown class instance. Additionally, a list of block level elements is defined in the block_level_elements attribute of the Markdown class which extensions can access to alter the list of elements which are treated as block level elements. md_globals keyword deprecated from extension API \u00b6 Previously, the extendMarkdown method of a markdown.extensions.Extension subclasses accepted an md_globals keyword, which contained the value returned by Python\u2019s globals() built-in function. As all of the configuration is now held within the Markdown class instance, access to the globals is no longer necessary and any extensions which expect the keyword will raise a DeprecationWarning . A future release will raise an error. markdown.version and markdown.version_info deprecated \u00b6 Historically, version numbers were acquired via the attributes markdown.version and markdown.version_info . Moving forward, a more standardized approach is being followed and versions are acquired via the markdown.__version__ and markdown.__version_info__ attributes. The legacy attributes are still available to allow distinguishing versions between the legacy Markdown 2.0 series and the Markdown 3.0 series, but in the future the legacy attributes will be removed. Added new, more flexible InlineProcessor class \u00b6 A new InlineProcessor class handles inline processing much better and allows for more flexibility. The new InlineProcessor classes no longer utilize unnecessary pretext and post-text captures. New class can accept the buffer that is being worked on and manually process the text without regular expressions and return new replacement bounds. This helps us to handle links in a better way and handle nested brackets and logic that is too much for regular expression. Added \u00b6 A new testing framework is included as a part of the Markdown library, which can also be used by third party extensions. A new toc_depth parameter has been added to the Table of Contents Extension . A new toc_tokens attribute has been added to the Markdown class by the Table of Contents Extension , which contains the raw tokens used to build the Table of Contents. Users can use this to build their own custom Table of Contents rather than needing to parse the HTML available on the toc attribute of the Markdown class. When the Table of Contents Extension is used in conjunction with the Attribute Lists Extension and a data-toc-label attribute is defined on a header, the content of the data-toc-label attribute is now used as the content of the Table of Contents item for that header. Additional CSS class names can be appended to Admonitions . Previous Releases \u00b6 For information on prior releases, see their changelogs: 2.x and earlier","title":"Changelog"},{"location":"changelog/#python-markdown-changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . See the Contributing Guide for details.","title":"Python-Markdown Changelog"},{"location":"changelog/#36-2024-03-14","text":"","title":"[3.6] &ndash; 2024-03-14"},{"location":"changelog/#changed","text":"","title":"Changed"},{"location":"changelog/#refactor-toc-sanitation","text":"All postprocessors are now run on heading content. Footnote references are now stripped from heading content. Fixes #660 . A more robust striptags is provided to convert headings to plain text. Unlike, the markupsafe implementation, HTML entities are not unescaped. The plain text name , rich html , and unescaped raw data-toc-label are saved to toc_tokens , allowing users to access the full rich text content of the headings directly from toc_tokens . The value of data-toc-label is sanitized separate from heading content before being written to name . This fixes a bug which allowed markup through in certain circumstances. To access the raw unsanitized data, retrieve the value from token['data-toc-label'] directly. An html.unescape call is made just prior to calling slugify so that slugify only operates on Unicode characters. Note that html.unescape is not run on name , html , or data-toc-label . The functions get_name and stashedHTML2text defined in the toc extension are both deprecated . Instead, third party extensions should use some combination of the new functions run_postprocessors , render_inner_html and striptags .","title":"Refactor TOC Sanitation"},{"location":"changelog/#fixed","text":"Include scripts/*.py in the generated source tarballs ( #1430 ). Ensure lines after heading in loose list are properly detabbed ( #1443 ). Give smarty tree processor higher priority than toc ( #1440 ). Permit carets ( ^ ) and square brackets ( ] ) but explicitly exclude backslashes ( \\ ) from abbreviations ( #1444 ). In attribute lists ( attr_list , fenced_code ), quoted attribute values are now allowed to contain curly braces ( } ) ( #1414 ).","title":"Fixed"},{"location":"changelog/#352-2024-01-10","text":"","title":"[3.5.2] &ndash; 2024-01-10"},{"location":"changelog/#fixed_1","text":"Fix type annotations for convertFile - it accepts only bytes-based buffers. Also remove legacy checks from Python 2 ( #1400 ) Remove legacy import needed only in Python 2 ( #1403 ) Fix typo that left the attribute AdmonitionProcessor.content_indent unset ( #1404 ) Fix edge-case crash in InlineProcessor with AtomicString ( #1406 ). Fix edge-case crash in codehilite with an empty code tag ( #1405 ). Improve and expand type annotations in the code base ( #1401 ). Fix handling of bogus comments ( #1425 ).","title":"Fixed"},{"location":"changelog/#351-2023-10-31","text":"","title":"[3.5.1] &ndash; 2023-10-31"},{"location":"changelog/#fixed_2","text":"Fix a performance problem with HTML extraction where large HTML input could trigger quadratic line counting behavior ( #1392 ). Improve and expand type annotations in the code base ( #1394 ).","title":"Fixed"},{"location":"changelog/#35-2023-10-06","text":"","title":"[3.5] &ndash; 2023-10-06"},{"location":"changelog/#added","text":"","title":"Added"},{"location":"changelog/#add-permalink_leading-configuration-option-to-the-toc-extension-1339","text":"A new boolean option permalink_leading controls the position of the permanent link anchors generated with permalink . Setting permalink_leading to True will cause the links to be inserted at the start of the header, before any other header content. The default behavior for permalink is to append permanent links to the header, placing them after all other header content.","title":"Add permalink_leading configuration option to the toc extension (#1339)"},{"location":"changelog/#changed_1","text":"Add support for cPython version 3.12 (and PyPy 3.10) and drop support for Python version 3.7 ( #1357 ). Refactor changelog to use the format defined at https://keepachangelog.com/ . Update the list of empty HTML tags ( #1353 ). Add customizable TOC title class to TOC extension ( #1293 ). Add API documentation of the code base which is generated by mkdocstrings ( #1220 ).","title":"Changed"},{"location":"changelog/#fixed_3","text":"Fix a corner case in admonitions where if an indented code block was provided as the first block, the output would be malformed ( #1329 ).","title":"Fixed"},{"location":"changelog/#344-2023-07-25","text":"","title":"[3.4.4] &ndash; 2023-07-25"},{"location":"changelog/#fixed_4","text":"Add a special case for initial 's to smarty extension ( #1305 ). Unescape any backslash escaped inline raw HTML ( #1358 ). Unescape backslash escaped TOC token names ( #1360 ).","title":"Fixed"},{"location":"changelog/#343-2023-03-23","text":"","title":"[3.4.3] &ndash; 2023-03-23"},{"location":"changelog/#fixed_5","text":"Restore console script ( #1327 ).","title":"Fixed"},{"location":"changelog/#342-2023-03-22","text":"","title":"[3.4.2] &ndash; 2023-03-22"},{"location":"changelog/#fixed_6","text":"Officially support Python 3.11. Improve standalone * and _ parsing ( #1300 ). Consider <html> HTML tag a block-level element ( #1309 ). Switch from setup.py to pyproject.toml .","title":"Fixed"},{"location":"changelog/#341-2022-07-15","text":"","title":"[3.4.1] &ndash; 2022-07-15"},{"location":"changelog/#fixed_7","text":"Fix an import issue with importlib.util ( #1274 ).","title":"Fixed"},{"location":"changelog/#34-2022-07-15","text":"","title":"[3.4] &ndash; 2022-07-15"},{"location":"changelog/#changed_2","text":"","title":"Changed"},{"location":"changelog/#the-tables-extension-now-uses-a-style-attribute-instead-of-an-align-attribute-for-alignment","text":"The HTML4 spec specifically deprecates the use of the align attribute and it does not appear at all in the HTML5 spec . Therefore, by default, the tables extension will now use the style attribute (setting just the text-align property) in td and th blocks. The former behavior is available by setting the use_align_attribute configuration option to True when enabling the extension. For example, to configure the old align behavior: from markdown.extensions.tables import TableExtension markdown.markdown(src, extensions=[TableExtension(use_align_attribute=True)])","title":"The tables extension now uses a style attribute instead of an align attribute for alignment."},{"location":"changelog/#backslash-unescaping-moved-to-treeprocessor-1131","text":"Unescaping backslash escapes has been moved to a Treeprocessor, which enables proper HTML escaping during serialization. However, it is recognized that various third-party extensions may be calling the old class at postprocessors.UnescapePostprocessor . Therefore, the old class remains in the code base, but has been deprecated and will be removed in a future release. The new class treeprocessors.UnescapeTreeprocessor should be used instead.","title":"Backslash unescaping moved to Treeprocessor (#1131)."},{"location":"changelog/#previously-deprecated-objects-have-been-removed","text":"Various objects were deprecated in version 3.0 and began raising deprecation warnings (see the version 3.0 release notes for details). Any of those objects which remained in version 3.3 have been removed from the code base in version 3.4 and will now raise errors. The relevant objects are listed below. Deprecated Object Replacement Object markdown.version markdown.__version__ markdown.version_info markdown.__version_info__ markdown.util.etree xml.etree.ElementTree markdown.util.string_type str markdown.util.text_type str markdown.util.int2str chr markdown.util.iterrange range markdown.util.isBlockLevel markdown.Markdown().is_block_level markdown.util.Processor().markdown markdown.util.Processor().md markdown.util.Registry().__setitem__ markdown.util.Registry().register markdown.util.Registry().__delitem__ markdown.util.Registry().deregister markdown.util.Registry().add markdown.util.Registry().register In addition, the md_globals parameter of Markdown.extensions.Extension.extendMarkdown() is no longer recognized as a valid parameter and will raise an error if provided.","title":"Previously deprecated objects have been removed"},{"location":"changelog/#added_1","text":"Some new configuration options have been added to the footnotes extension ( #1218 ): Small refactor of the BACKLINK_TITLE option; The use of format() instead of \u201cold\u201d %d formatter allows one to specify text without the need to have the number of the footnote in it (like footnotes on Wikipedia for example). The modification is backward compatible so no configuration change is required. Addition of a new option SUPERSCRIPT_TEXT that allows one to specify a custom placeholder for the footnote itself in the text. Ex: [{}] will give <sup>[1]</sup> , ({}) will give <sup>(1)</sup> , or by default, the current behavior: <sup>1</sup> . The Table of Contents extension now accepts a toc_class parameter which can be used to set the CSS class(es) on the <div> that contains the Table of Contents ( #1224 ). The CodeHilite extension now supports a pygments_formatter option that can be set to a custom formatter class ( #1187 ). If pygments_formatter is set to a string (ex: 'html' ), Pygments\u2019 default formatter by that name is used. If pygments_formatter is set to a formatter class (or any callable which returns a formatter instance), then an instance of that class is used. The formatter class is now passed an additional option, lang_str , to denote the language of the code block ( #1258 ). While Pygments\u2019 built-in formatters will ignore the option, a custom formatter assigned to the pygments_formatter option can make use of the lang_str to include the code block\u2019s language in the output.","title":"Added"},{"location":"changelog/#fixed_8","text":"Extension entry-points are only loaded if needed ( #1216 ). Added additional checks to the <pre><code> handling of PrettifyTreeprocessor ( #1261 , #1263 ). Fix XML deprecation warnings.","title":"Fixed"},{"location":"changelog/#337-2022-05-05","text":"","title":"[3.3.7] &ndash; 2022-05-05"},{"location":"changelog/#fixed_9","text":"Disallow square brackets in reference link ids ( #1209 ). Retain configured pygments_style after first code block ( #1240 ). Ensure fenced code attributes are properly escaped ( #1247 ).","title":"Fixed"},{"location":"changelog/#336-2021-11-17","text":"","title":"[3.3.6] &ndash; 2021-11-17"},{"location":"changelog/#fixed_10","text":"Fix a dependency issue ( #1195 , #1196 ).","title":"Fixed"},{"location":"changelog/#335-2021-11-16","text":"","title":"[3.3.5] &ndash; 2021-11-16"},{"location":"changelog/#fixed_11","text":"Make the slugify_unicode function not remove diacritical marks ( #1118 ). Fix [toc] detection when used with nl2br extension ( #1160 ). Re-use compiled regex for block level checks ( #1169 ). Don\u2019t process shebangs in fenced code blocks when using CodeHilite ( #1156 ). Improve email address validation for Automatic Links ( #1165 ). Ensure <summary> tags are parsed correctly ( #1079 ). Support Python 3.10 ( #1124 ).","title":"Fixed"},{"location":"changelog/#334-2021-02-24","text":"","title":"[3.3.4] &ndash; 2021-02-24"},{"location":"changelog/#fixed_12","text":"Properly parse unclosed tags in code spans ( #1066 ). Properly parse processing instructions in md_in_html ( #1070 ). Properly parse code spans in md_in_html ( #1069 ). Preserve text immediately before an admonition ( #1092 ). Simplified regex for HTML placeholders ( #928 ) addressing ( #932 ). Ensure permalinks and anchorlinks are not restricted by toc_depth ( #1107 ). Fix corner cases with lists under admonitions ( #1102 ).","title":"Fixed"},{"location":"changelog/#333-2020-10-25","text":"","title":"[3.3.3] &ndash; 2020-10-25"},{"location":"changelog/#fixed_13","text":"Unify all block-level tags ( #1047 ). Fix issue where some empty elements would have text rendered as None when using md_in_html ( #1049 ). Avoid catastrophic backtracking in hr regex ( #1055 ). Fix hr HTML handling ( #1053 ).","title":"Fixed"},{"location":"changelog/#332-2020-10-19","text":"","title":"[3.3.2] &ndash; 2020-10-19"},{"location":"changelog/#fixed_14","text":"Properly parse inline HTML in md_in_html ( #1040 & #1045 ). Avoid crashing when md_in_html fails ( #1040 ).","title":"Fixed"},{"location":"changelog/#331-2020-10-12","text":"","title":"[3.3.1] &ndash; 2020-10-12"},{"location":"changelog/#fixed_15","text":"Correctly parse raw script and style tags ( #1036 ). Ensure consistent class handling by fenced_code and codehilite ( #1032 ).","title":"Fixed"},{"location":"changelog/#33-2020-10-06","text":"","title":"[3.3] &ndash; 2020-10-06"},{"location":"changelog/#changed_3","text":"","title":"Changed"},{"location":"changelog/#the-prefix-language-is-now-prepended-to-all-language-classes-by-default-on-code-blocks","text":"The HTML5 spec recommends that the class defining the language of a code block be prefixed with language- . Therefore, by default, both the fenced_code and codehilite extensions now prepend the prefix when code highlighting is disabled. If you have previously been including the prefix manually in your fenced code blocks, then you will not want a second instance of the prefix. Similarly, if you are using a third party syntax highlighting tool which does not recognize the prefix, or requires a different prefix, then you will want to redefine the prefix globally using the lang_prefix configuration option of either the fenced_code or codehilite extensions. For example, to configure fenced_code to not apply any prefix (the previous behavior), set the option to an empty string: from markdown.extensions.fenced_code import FencedCodeExtension markdown.markdown(src, extensions=[FencedCodeExtension(lang_prefix='')]) Note When code highlighting is enabled , the output from Pygments is used unaltered. Currently, Pygments does not provide an option to include the language class in the output, let alone prefix it. Therefore, any language prefix is only applied when syntax highlighting is disabled.","title":"The prefix language- is now prepended to all language classes by default on code blocks."},{"location":"changelog/#attribute-lists-are-more-strict-898","text":"Empty curly braces are now completely ignored by the Attribute List extension. Previously, the extension would recognize them as attribute lists and remove them from the document. Therefore, it is no longer necessary to backslash escape a set of curly braces which are empty or only contain whitespace. Despite not being documented, previously an attribute list could be defined anywhere within a table cell and get applied to the cell ( <td> element). Now the attribute list must be defined at the end of the cell content and must be separated from the rest of the content by at least one space. This makes it easy to differentiate between attribute lists defined on inline elements within a cell and the attribute list for the cell itself. It is also more consistent with how attribute lists are defined on other types of elements. The extension has also added support for defining attribute lists on table header cells ( <th> elements) in the same manner as data cells ( <td> elements). In addition, the documentation for the extensions received an overhaul. The features ( #987 ) and limitations ( #965 ) of the extension are now fully documented.","title":"Attribute Lists are more strict (#898)."},{"location":"changelog/#added_2","text":"All Pygments\u2019 options are now available for syntax highlighting ( #816 ). The Codehilite extension now accepts any options which Pygments supports as global configuration settings on the extension. Fenced Code Blocks will accept any of the same options on individual code blocks. Any of the previously supported aliases to Pygments\u2019 options continue to be supported at this time. However, it is recommended that the Pygments option names be used directly to ensure continued compatibility in the future. Fenced Code Blocks now work with Attribute Lists when syntax highlighting is disabled. Any random HTML attribute can be defined and set on the <code> tag of fenced code blocks when the attr_list extension is enabled ( #816 ). The HTML parser has been completely replaced. The new HTML parser is built on Python\u2019s html.parser.HTMLParser , which alleviates various bugs and simplify maintenance of the code ( #803 , #830 ). The Markdown in HTML extension has been rebuilt on the new HTML Parser, which drastically simplifies it. Note that raw HTML elements with a markdown attribute defined are now converted to ElementTree Elements and are rendered by the serializer. Various bugs have been fixed ( #803 , #595 , #780 , and #1012 ). Link reference parsing, abbreviation reference parsing and footnote reference parsing has all been moved from preprocessors to blockprocessors , which allows them to be nested within other block level elements. Specifically, this change was necessary to maintain the current behavior in the rebuilt Markdown in HTML extension. A few random edge-case bugs (see the included tests) were resolved in the process ( #803 ). An alternate function markdown.extensions.headerid.slugify_unicode has been included with the Table of Contents extension which supports Unicode characters in table of contents slugs. The old markdown.extensions.headerid.slugify method which removes non-ASCII characters remains the default. Import and pass markdown.extensions.headerid.slugify_unicode to the slugify configuration option to use the new behavior. Support was added for Python 3.9 and dropped for Python 3.5.","title":"Added"},{"location":"changelog/#fixed_16","text":"Document how to pass configuration options to Extra ( #1019 ). Fix HR which follows strong em ( #897 ). Support short reference image links ( #894 ). Avoid a RecursionError from deeply nested blockquotes ( #799 ). Fix issues with complex emphasis ( #979 ). Fix unescaping of HTML characters <> in CodeHilite ( #990 ). Fix complex scenarios involving lists and admonitions ( #1004 ). Fix complex scenarios with nested ordered and unordered lists in a definition list ( #918 ).","title":"Fixed"},{"location":"changelog/#322-2020-05-08","text":"","title":"[3.2.2] &ndash; 2020-05-08"},{"location":"changelog/#fixed_17","text":"Add checklinks tox environment to ensure all links in documentation are good. Refactor extension API documentation ( #729 ). Load entry_points (for extensions) only once using importlib.metadata . Do not double escape entities in TOC. Correctly report if an extension raises a TypeError ( #939 ). Raise a KeyError when attempting to delete a nonexistent key from the extension registry ( #939 ). Remove import of packaging (or pkg_resources fallback) entirely. Remove setuptools as a run-time dependency ( install_required ).","title":"Fixed"},{"location":"changelog/#321-2020-02-12","text":"","title":"[3.2.1] &ndash; 2020-02-12"},{"location":"changelog/#fixed_18","text":"The name property in toc_tokens from the TOC extension now escapes HTML special characters ( < , > , and & ).","title":"Fixed"},{"location":"changelog/#32-2020-02-07","text":"","title":"[3.2] &ndash; 2020-02-07"},{"location":"changelog/#changed_4","text":"","title":"Changed"},{"location":"changelog/#drop-support-for-python-27","text":"Python 2.7 reaches end-of-life on 2020-01-01 and Python-Markdown 3.2 has dropped support for it. Please upgrade to Python 3, or use Python-Markdown 3.1.","title":"Drop support for Python 2.7"},{"location":"changelog/#em-and-strong-inline-processor-changes","text":"In order to fix issue #792 , em / strong inline processors were refactored. This translated into removing many of the existing inline processors that handled this logic: em_strong strong emphasis strong2 emphasis These processors were replaced with two new ones: em_strong em_strong2 The legacy_em extension was also modified with new, refactored logic and simply overrides the em_strong2 inline processor.","title":"em and strong inline processor changes"},{"location":"changelog/#codehilite-now-always-wraps-with-code-tags","text":"Before, the HTML generated by CodeHilite looked like: - <pre><code>foo = 'bar'</code></pre> if you were not using Pygments. - <pre>foo = 'bar'</pre> if you were using Pygments. To make the cases more consistent (and adhere to many Markdown specifications and HTML code block markup suggestions), CodeHilite will now always additionally wrap code with <code> tags. See #862 for more details. This change does not alter the Python-Markdown API, but users relying on the old markup will find their output now changed. Internally, this change relies on the Pygments 2.4, so you must be using at least that version to see this effect. Users with earlier Pygments versions will continue to see the old behavior.","title":"CodeHilite now always wraps with &lt;code&gt; tags"},{"location":"changelog/#markdownutiletree-deprecated","text":"Previously, Python-Markdown was using either the xml.etree.cElementTree module or the xml.etree.ElementTree module, based on their availability. In modern Python versions, the former is a deprecated alias for the latter. Thus, the compatibility layer is deprecated and extensions are advised to use xml.etree.ElementTree directly. Importing markdown.util.etree will raise a DeprecationWarning beginning in version 3.2 and may be removed in a future release. Therefore, extension developers are encouraged to replace from markdown.util import etree with import xml.etree.ElementTree as etree in their code.","title":"markdown.util.etree deprecated"},{"location":"changelog/#added_3","text":"Some new configuration options have been added to the toc extension: The anchorlink_class and permalink_class options allow class(es) to be assigned to the anchorlink and permalink respectively. This allows using icon fonts from CSS for the links. Therefore, an empty string passed to permalink now generates an empty permalink . Previously no permalink would have been generated. ( #776 ) The permalink_title option allows the title attribute of a permalink to be set to something other than the default English string Permanent link . ( #877 ) Document thread safety ( #812 ). Markdown parsing in HTML has been exposed via a separate extension called md_in_html . Add support for Python 3.8.","title":"Added"},{"location":"changelog/#fixed_19","text":"HTML tag placeholders are no longer included in .toc_tokens ( #899 ). Unescape backslash-escaped characters in TOC ids ( #864 ). Refactor bold and italic logic in order to solve complex nesting issues ( #792 ). Always wrap CodeHilite code in code tags ( #862 ).","title":"Fixed"},{"location":"changelog/#311-2019-05-20","text":"","title":"[3.1.1] &ndash; 2019-05-20"},{"location":"changelog/#fixed_20","text":"Fixed import failure in setup.py when the source directory is not on sys.path ( #823 ). Prefer public packaging module to pkg_resources\u2019 private copy of it ( #825 ).","title":"Fixed"},{"location":"changelog/#31-2019-03-25","text":"","title":"[3.1] &ndash; 2019-03-25"},{"location":"changelog/#changed_5","text":"","title":"Changed"},{"location":"changelog/#markdownversion-and-markdownversion_info-deprecated","text":"Historically, version numbers were acquired via the attributes markdown.version and markdown.version_info . As of 3.0, a more standardized approach is being followed and versions are acquired via the markdown.__version__ and markdown.__version_info__ attributes. As of 3.1 the legacy attributes will raise a DeprecationWarning if they are accessed. In a future release the legacy attributes will be removed.","title":"markdown.version and markdown.version_info deprecated"},{"location":"changelog/#added_4","text":"A Contributing Guide has been added ( #732 ). A new configuration option to set the footnote separator has been added. Also, the rel and rev attributes have been removed from footnotes as they are not valid in HTML5. The refs and backrefs classes already exist and serve the same purpose ( #723 ). A new option for toc_depth to set not only the bottom section level, but also the top section level. A string consisting of two digits separated by a hyphen in between ( \"2-5\" ), defines the top ( t ) and the bottom ( b ) ( <ht>..<hb> ). A single integer still defines the bottom section level ( <h1>..<hb> ) only. ( #787 ).","title":"Added"},{"location":"changelog/#fixed_21","text":"Update CLI to support PyYAML 5.1. Overlapping raw HTML matches no longer leave placeholders behind ( #458 ). Emphasis patterns now recognize newline characters as whitespace ( #783 ). Version format had been updated to be PEP 440 compliant ( #736 ). Block level elements are defined per instance, not as class attributes ( #731 ). Double escaping of block code has been eliminated ( #725 ). Problems with newlines in references has been fixed ( #742 ). Escaped # are now handled in header syntax ( #762 ).","title":"Fixed"},{"location":"changelog/#301-2018-09-28","text":"","title":"[3.0.1] &ndash; 2018-09-28"},{"location":"changelog/#fixed_22","text":"Brought back the version and version_info variables ( #709 ). Added support for hexadecimal HTML entities ( #712 ).","title":"Fixed"},{"location":"changelog/#30-2018-09-21","text":"","title":"[3.0] &ndash; 2018-09-21"},{"location":"changelog/#changed_6","text":"","title":"Changed"},{"location":"changelog/#enable_attributes-keyword-deprecated","text":"The enable_attributes keyword is deprecated in version 3.0 and will be ignored. Previously the keyword was True by default and enabled an undocumented way to define attributes on document elements. The feature has been removed from version 3.0. As most users did not use the undocumented feature, it should not affect most users. For the few who did use the feature, it can be enabled by using the Legacy Attributes extension.","title":"enable_attributes keyword deprecated"},{"location":"changelog/#smart_emphasis-keyword-and-smart_strong-extension-deprecated","text":"The smart_emphasis keyword is deprecated in version 3.0 and will be ignored. Previously the keyword was True by default and caused the parser to ignore middle-word emphasis. Additionally, the optional smart_strong extension provided the same behavior for strong emphasis. Both of those features are now part of the default behavior, and the Legacy Emphasis extension is available to disable that behavior.","title":"smart_emphasis keyword and smart_strong extension deprecated"},{"location":"changelog/#output_formats-simplified-to-html-and-xhtml","text":"The output_formats keyword now only accepts two options: html and xhtml Note that if (x)html1 , (x)html4 or (x)html5 are passed in, the number is stripped and ignored.","title":"output_formats simplified to html and xhtml."},{"location":"changelog/#safe_mode-and-html_replacement_text-keywords-deprecated","text":"Both safe_mode and the associated html_replacement_text keywords are deprecated in version 3.0 and will be ignored. The so-called \u201csafe mode\u201d was never actually \u201csafe\u201d which has resulted in many people having a false sense of security when using it. As an alternative, the developers of Python-Markdown recommend that any untrusted content be passed through an HTML sanitizer (like Bleach ) after being converted to HTML by markdown. In fact, Bleach Whitelist provides a curated list of tags, attributes, and styles suitable for filtering user-provided HTML using bleach. If your code previously looked like this: html = markdown.markdown(text, safe_mode=True) Then it is recommended that you change your code to read something like this: import bleach from bleach_whitelist import markdown_tags, markdown_attrs html = bleach.clean(markdown.markdown(text), markdown_tags, markdown_attrs) If you are not interested in sanitizing untrusted text, but simply desire to escape raw HTML, then that can be accomplished through an extension which removes HTML parsing: from markdown.extensions import Extension class EscapeHtml(Extension): def extendMarkdown(self, md): md.preprocessors.deregister('html_block') md.inlinePatterns.deregister('html') html = markdown.markdown(text, extensions=[EscapeHtml()]) As the HTML would not be parsed with the above Extension, then the serializer will escape the raw HTML, which is exactly what happened in previous versions with safe_mode=\"escape\" .","title":"safe_mode and html_replacement_text keywords deprecated"},{"location":"changelog/#positional-arguments-deprecated","text":"Positional arguments on the markdown.Markdown() class are deprecated as are all except the text argument on the markdown.markdown() wrapper function. Using positional arguments will raise an error. Only keyword arguments should be used. For example, if your code previously looked like this: html = markdown.markdown(text, [SomeExtension()]) Then it is recommended that you change it to read something like this: html = markdown.markdown(text, extensions=[SomeExtension()]) Note This change is being made as a result of deprecating \"safe_mode\" as the safe_mode argument was one of the positional arguments. When that argument is removed, the two arguments following it will no longer be at the correct position. It is recommended that you always use keywords when they are supported for this reason.","title":"Positional arguments deprecated"},{"location":"changelog/#extension-name-behavior-has-changed","text":"In previous versions of Python-Markdown, the built-in extensions received special status and did not require the full path to be provided. Additionally, third party extensions whose name started with \"mdx_\" received the same special treatment. This is no longer the case. Support has been added for extensions to define an entry point . An entry point is a string name which can be used to point to an Extension class. The built-in extensions now have entry points which match the old short names. And any third-party extensions which define entry points can now get the same behavior. See the documentation for each specific extension to find the assigned name. If an extension does not define an entry point, then the full path to the extension must be used. See the documentation for a full explanation of the current behavior.","title":"Extension name behavior has changed"},{"location":"changelog/#extension-configuration-as-part-of-extension-name-deprecated","text":"The previously documented method of appending the extension configuration options as a string to the extension name is deprecated and will raise an error. The extension_configs keyword should be used instead. See the documentation for a full explanation of the current behavior.","title":"Extension configuration as part of extension name deprecated"},{"location":"changelog/#headerid-extension-deprecated","text":"The HeaderId Extension is deprecated and will raise an error if specified. Use the Table of Contents Extension instead, which offers most of the features of the HeaderId Extension and more (support for meta data is missing). Extension authors who have been using the slugify and unique functions defined in the HeaderId Extension should note that those functions are now defined in the Table of Contents extension and should adjust their import statements accordingly ( from markdown.extensions.toc import slugify, unique ).","title":"HeaderId extension deprecated"},{"location":"changelog/#homegrown-ordereddict-has-been-replaced-with-a-purpose-built-registry","text":"All processors and patterns now get \u201cregistered\u201d to a Registry . A backwards compatible shim is included so that existing simple extensions should continue to work. A DeprecationWarning will be raised for any code which calls the old API.","title":"Homegrown OrderedDict has been replaced with a purpose-built Registry"},{"location":"changelog/#markdown-class-instance-references","text":"Previously, instances of the Markdown class were represented as any one of md , md_instance , or markdown . This inconsistency made it difficult when developing extensions, or just maintaining the existing code. Now, all instances are consistently represented as md . The old attributes on class instances still exist, but raise a DeprecationWarning when accessed. Also on classes where the instance was optional, the attribute always exists now and is simply None if no instance was provided (previously the attribute would not exist).","title":"Markdown class instance references."},{"location":"changelog/#markdownutilisblocklevel-deprecated","text":"The markdown.util.isBlockLevel function is deprecated and will raise a DeprecationWarning . Instead, extensions should use the isBlockLevel method of the Markdown class instance. Additionally, a list of block level elements is defined in the block_level_elements attribute of the Markdown class which extensions can access to alter the list of elements which are treated as block level elements.","title":"markdown.util.isBlockLevel deprecated"},{"location":"changelog/#md_globals-keyword-deprecated-from-extension-api","text":"Previously, the extendMarkdown method of a markdown.extensions.Extension subclasses accepted an md_globals keyword, which contained the value returned by Python\u2019s globals() built-in function. As all of the configuration is now held within the Markdown class instance, access to the globals is no longer necessary and any extensions which expect the keyword will raise a DeprecationWarning . A future release will raise an error.","title":"md_globals keyword deprecated from extension API"},{"location":"changelog/#markdownversion-and-markdownversion_info-deprecated_1","text":"Historically, version numbers were acquired via the attributes markdown.version and markdown.version_info . Moving forward, a more standardized approach is being followed and versions are acquired via the markdown.__version__ and markdown.__version_info__ attributes. The legacy attributes are still available to allow distinguishing versions between the legacy Markdown 2.0 series and the Markdown 3.0 series, but in the future the legacy attributes will be removed.","title":"markdown.version and markdown.version_info deprecated"},{"location":"changelog/#added-new-more-flexible-inlineprocessor-class","text":"A new InlineProcessor class handles inline processing much better and allows for more flexibility. The new InlineProcessor classes no longer utilize unnecessary pretext and post-text captures. New class can accept the buffer that is being worked on and manually process the text without regular expressions and return new replacement bounds. This helps us to handle links in a better way and handle nested brackets and logic that is too much for regular expression.","title":"Added new, more flexible InlineProcessor class"},{"location":"changelog/#added_5","text":"A new testing framework is included as a part of the Markdown library, which can also be used by third party extensions. A new toc_depth parameter has been added to the Table of Contents Extension . A new toc_tokens attribute has been added to the Markdown class by the Table of Contents Extension , which contains the raw tokens used to build the Table of Contents. Users can use this to build their own custom Table of Contents rather than needing to parse the HTML available on the toc attribute of the Markdown class. When the Table of Contents Extension is used in conjunction with the Attribute Lists Extension and a data-toc-label attribute is defined on a header, the content of the data-toc-label attribute is now used as the content of the Table of Contents item for that header. Additional CSS class names can be appended to Admonitions .","title":"Added"},{"location":"changelog/#previous-releases","text":"For information on prior releases, see their changelogs: 2.x and earlier","title":"Previous Releases"},{"location":"cli/","text":"Using Python-Markdown on the Command Line \u00b6 While Python-Markdown is primarily a python library, a command line script is included as well. While there are many other command line implementations of Markdown, you may not have them installed, or you may prefer to use Python-Markdown\u2019s various extensions. Generally, you will want to have the Markdown library fully installed on your system to run the command line script. See the Installation instructions for details. Python-Markdown\u2019s command line script takes advantage of Python\u2019s -m flag. Therefore, assuming the python executable is on your system path, use the following format: python -m markdown [options] [args] That will run the module as a script with the options and arguments provided. At its most basic usage, one would simply pass in a file name as the only argument: python -m markdown input_file.txt Piping input and output (on STDIN and STDOUT ) is fully supported as well. For example: echo \"Some **Markdown** text.\" | python -m markdown > output.html Use the --help option for a list all available options and arguments: python -m markdown --help If you don\u2019t want to call the python executable directly (using the -m flag), follow the instructions below to use a wrapper script: Setup \u00b6 Upon installation, the markdown_py script will have been copied to your Python \u201cScripts\u201d directory. Different systems require different methods to ensure that any files in the Python \u201cScripts\u201d directory are on your system path. Windows : Assuming a default install of Python on Windows, your \u201cScripts\u201d directory is most likely something like C:\\\\Python37\\Scripts . Verify the location of your \u201cScripts\u201d directory and add it to you system path. Calling markdown_py from the command line will call the wrapper batch file markdown_py.bat in the \"Scripts\" directory created during install. *nix (Linux, OSX, BSD, Unix, etc.): As each *nix distribution is different and we can\u2019t possibly document all of them here, we\u2019ll provide a few helpful pointers: Some systems will automatically install the script on your path. Try it and see if it works. Just run markdown_py from the command line. Other systems may maintain a separate \u201cScripts\u201d (\u201cbin\u201d) directory which you need to add to your path. Find it (check with your distribution) and either add it to your path or make a symbolic link to it from your path. If you are sure markdown_py is on your path, but it still is not being found, check the permissions of the file and make sure it is executable. As an alternative, you could just cd into the directory which contains the source distribution, and run it from there. However, remember that your markdown text files will not likely be in that directory, so it is much more convenient to have markdown_py on your path. Note Python-Markdown uses \"markdown_py\" as a script name because the Perl implementation has already taken the more obvious name \u201cmarkdown\u201d. Additionally, the default Python configuration on some systems would cause a script named \"markdown.py\" to fail by importing itself rather than the markdown library. Therefore, the script has been named \"markdown_py\" as a compromise. If you prefer a different name for the script on your system, it is suggested that you create a symbolic link to markdown_py with your preferred name. Usage \u00b6 To use markdown_py from the command line, run it as markdown_py input_file.txt or markdown_py input_file.txt > output_file.html For a complete list of options, run markdown_py --help Using Extensions \u00b6 To load a Python-Markdown extension from the command line use the -x (or --extension ) option. The extension module must be on your PYTHONPATH (see the Extension API for details). The extension can then be invoked by the name assigned to an entry point or using Python\u2019s dot notation to point to an extension For example, to load an extension with the assigned entry point name myext , run the following command: python -m markdown -x myext input.txt And to load an extension with Python\u2019s dot notation: python -m markdown -x path.to.module:MyExtClass input.txt To load multiple extensions, specify an -x option for each extension: python -m markdown -x myext -x path.to.module:MyExtClass input.txt If the extension supports configuration options (see the documentation for the extension you are using to determine what settings it supports, if any), you can pass them in as well: python -m markdown -x myext -c config.yml input.txt The -c (or --extension_configs ) option accepts a file name. The file must be in either the YAML or JSON format and contain YAML or JSON data that would map to a Python Dictionary in the format required by the extension_configs keyword of the markdown.Markdown class. Therefore, the file config.yaml referenced in the above example might look like this: myext: option1: 'value1' option2: True Similarly, a JSON configuration file might look like this: { \"myext\": { \"option1\": \"value1\", \"option2\": \"value2\" } } Note that while the --extension_configs option does specify the myext extension, you still need to load the extension with the -x option, or the configuration for that extension will be ignored. Further, if an extension requires a value that cannot be parsed in JSON (for example a reference to a function), one has to use a YAML configuration file. The --extension_configs option will only support YAML configuration files if PyYAML is installed on your system. JSON should work with no additional dependencies. The format of your configuration file is automatically detected.","title":"Command Line"},{"location":"cli/#using-python-markdown-on-the-command-line","text":"While Python-Markdown is primarily a python library, a command line script is included as well. While there are many other command line implementations of Markdown, you may not have them installed, or you may prefer to use Python-Markdown\u2019s various extensions. Generally, you will want to have the Markdown library fully installed on your system to run the command line script. See the Installation instructions for details. Python-Markdown\u2019s command line script takes advantage of Python\u2019s -m flag. Therefore, assuming the python executable is on your system path, use the following format: python -m markdown [options] [args] That will run the module as a script with the options and arguments provided. At its most basic usage, one would simply pass in a file name as the only argument: python -m markdown input_file.txt Piping input and output (on STDIN and STDOUT ) is fully supported as well. For example: echo \"Some **Markdown** text.\" | python -m markdown > output.html Use the --help option for a list all available options and arguments: python -m markdown --help If you don\u2019t want to call the python executable directly (using the -m flag), follow the instructions below to use a wrapper script:","title":"Using Python-Markdown on the Command Line"},{"location":"cli/#setup","text":"Upon installation, the markdown_py script will have been copied to your Python \u201cScripts\u201d directory. Different systems require different methods to ensure that any files in the Python \u201cScripts\u201d directory are on your system path. Windows : Assuming a default install of Python on Windows, your \u201cScripts\u201d directory is most likely something like C:\\\\Python37\\Scripts . Verify the location of your \u201cScripts\u201d directory and add it to you system path. Calling markdown_py from the command line will call the wrapper batch file markdown_py.bat in the \"Scripts\" directory created during install. *nix (Linux, OSX, BSD, Unix, etc.): As each *nix distribution is different and we can\u2019t possibly document all of them here, we\u2019ll provide a few helpful pointers: Some systems will automatically install the script on your path. Try it and see if it works. Just run markdown_py from the command line. Other systems may maintain a separate \u201cScripts\u201d (\u201cbin\u201d) directory which you need to add to your path. Find it (check with your distribution) and either add it to your path or make a symbolic link to it from your path. If you are sure markdown_py is on your path, but it still is not being found, check the permissions of the file and make sure it is executable. As an alternative, you could just cd into the directory which contains the source distribution, and run it from there. However, remember that your markdown text files will not likely be in that directory, so it is much more convenient to have markdown_py on your path. Note Python-Markdown uses \"markdown_py\" as a script name because the Perl implementation has already taken the more obvious name \u201cmarkdown\u201d. Additionally, the default Python configuration on some systems would cause a script named \"markdown.py\" to fail by importing itself rather than the markdown library. Therefore, the script has been named \"markdown_py\" as a compromise. If you prefer a different name for the script on your system, it is suggested that you create a symbolic link to markdown_py with your preferred name.","title":"Setup"},{"location":"cli/#usage","text":"To use markdown_py from the command line, run it as markdown_py input_file.txt or markdown_py input_file.txt > output_file.html For a complete list of options, run markdown_py --help","title":"Usage"},{"location":"cli/#using-extensions","text":"To load a Python-Markdown extension from the command line use the -x (or --extension ) option. The extension module must be on your PYTHONPATH (see the Extension API for details). The extension can then be invoked by the name assigned to an entry point or using Python\u2019s dot notation to point to an extension For example, to load an extension with the assigned entry point name myext , run the following command: python -m markdown -x myext input.txt And to load an extension with Python\u2019s dot notation: python -m markdown -x path.to.module:MyExtClass input.txt To load multiple extensions, specify an -x option for each extension: python -m markdown -x myext -x path.to.module:MyExtClass input.txt If the extension supports configuration options (see the documentation for the extension you are using to determine what settings it supports, if any), you can pass them in as well: python -m markdown -x myext -c config.yml input.txt The -c (or --extension_configs ) option accepts a file name. The file must be in either the YAML or JSON format and contain YAML or JSON data that would map to a Python Dictionary in the format required by the extension_configs keyword of the markdown.Markdown class. Therefore, the file config.yaml referenced in the above example might look like this: myext: option1: 'value1' option2: True Similarly, a JSON configuration file might look like this: { \"myext\": { \"option1\": \"value1\", \"option2\": \"value2\" } } Note that while the --extension_configs option does specify the myext extension, you still need to load the extension with the -x option, or the configuration for that extension will be ignored. Further, if an extension requires a value that cannot be parsed in JSON (for example a reference to a function), one has to use a YAML configuration file. The --extension_configs option will only support YAML configuration files if PyYAML is installed on your system. JSON should work with no additional dependencies. The format of your configuration file is automatically detected.","title":"Using Extensions"},{"location":"contributing/","text":"Contributing to Python-Markdown \u00b6 The following is a set of guidelines for contributing to Python-Markdown and its extensions, which are hosted in the Python-Markdown Organization on GitHub. These are mostly guidelines, not rules. Use your best judgment, and feel free to propose changes to this document in a pull request. Code of Conduct \u00b6 This project and everyone participating in it is governed by the Python-Markdown Code of Conduct . By participating, you are expected to uphold this code. Please report unacceptable behavior to python.markdown@gmail.com . Project Organization \u00b6 The core Python-Markdown code base and any built-in extensions are hosted in the Python-Markdown/markdown project on GitHub. Other extensions maintained by the Python-Markdown project may be hosted as separate repositories in the Python-Markdown Organization on GitHub and must follow best practices for third-party extensions. The Python-Markdown/markdown project is organized as follows: Branch master should generally be stable and release-ready at all times. Version branches should be used for bug-fixes back-ported to the most recent PATCH release. No other branches should be created. Any other branches which exist are preserved for historical reasons only. Issues \u00b6 Feature requests, bug reports, usage questions, and other issues can all be raised on the GitHub issue tracker . When describing issues try to phrase your ticket in terms of the behavior you think needs to change rather than the code you think needs to change. Make sure you\u2019re running the latest version of Python-Markdown before reporting an issue. Search the issue list first for related items. Be sure to check closed issues and pull requests. GitHub\u2019s search only checks open issues by default. You may want to check the syntax rules and/or Babelmark to confirm that your expectations align with the rules and/or other implementations of Markdown. If reporting a syntax bug, you must provide the minimal input which exhibits the behavior, the actual output and the output you expected. All three items must be provided as textual code blocks (screen-shots are not helpful). It may also be helpful to point to the syntax rules which specifically address the area of concern. Feature requests will often be closed with a recommendation that they be implemented as third party extensions outside of the core Python-Markdown library. Keeping new feature requests implemented as third party extensions allows us to keep the maintenance overhead of Python-Markdown to a minimum, so that the focus can be on continued stability, bug fixes, and documentation. If you intend to submit a fix for your bug or provide an implementation of your feature request, it is not necessary to first open an issue. You can report a bug or make a feature request as part of a pull request. Of course, if you want to receive feedback on how to implement a bug-fix or feature before submitting a solution, then it would be appropriate to open an issue first and ask your questions there. Having your issue closed does not necessarily mean the end of a discussion. If you believe your issue has been closed incorrectly, explain why and we\u2019ll consider if it needs to be reopened. Pull Requests \u00b6 A pull request often represents the start of a discussion, and does not necessarily need to be the final, finished submission. In fact, if you discover an issue and intend to provide a fix for it, there is no need to open an issue first. You can report the issue and provide the fix together in a pull request. All pull requests should be made from your personal fork of the library hosted in your personal GitHub account. Do not create branches on the Python-Markdown/markdown project for pull requests. All pull requests should be implemented in a new branch with a unique name. Remember that if you have an outstanding pull request, pushing new commits to the related branch of your GitHub repository will also automatically update the pull request. It may help to review GitHub\u2019s documentation on Creating a pull request from a fork . If you are providing a fix for a previously reported issue, you must reference the issue in your commit message. Be sure to prefix the reference with one of GitHub\u2019s action words which will automatically close the issue when the pull request is merged. For example, fixes #42 and closes #42 would be acceptable, whereas ref #42 would not. Of course, if merging a pull request should not cause an issue to be closed, then the action word should not be included when referencing that issue. Before being accepted, each pull request must include the applicable code, new tests of all new features, updated tests for any changed features, documentation updates, and an appropriate update to the changelog. All changes must follow the applicable style guides. Failure to meet any one of the requirements is likely to delay any serious consideration of your pull request and may even cause it to be closed. Of course, if you are in the early stages of development, you may include a note in the pull request acknowledging that it is incomplete along with a request for feedback. Pull requests will generally not be accepted if any tests are failing. Therefore, it is recommended that you run the tests before submitting your pull request. After making a pull request, check the build status in the GitHub interface to ensure that all tests are running as expected. If any checks fail, you may push additional commits to your branch. GitHub will add those commits to the pull request and rerun the checks. It is generally best not to squash multiple commits and force-push your changes to a pull request. Instead, the maintainers would like to be able to follow the series of commits along with the discussion about those changes as they progress over time. If your pull request is accepted, it will be squashed at that time if deemed appropriate. Style Guides \u00b6 In an effort to maintain consistency, Python-Markdown adheres to the following style guides in its code and documentation. A pull request may be rejected if it fails to match the relevant style guides. Code Style Guide \u00b6 Except as noted below, all pull requests should follow Python\u2019s standard PEP8 Style Guide and are run through Flake8 to ensure that the style guide is followed. Legacy code which does not follow the guidelines should only be updated if and when other changes (bug fix, feature addition, etc.) are being made to that section of code. While new features should be given names that follow modern Python naming conventions, existing names should be preserved to avoid backward incompatible changes. Line length is limited to a maximum of 119 characters. When a line of code does not fit within the line length limit, continuation lines should align elements wrapped inside parentheses, brackets and braces using a hanging indent . When using a hanging indent there should be no arguments on the first line and further indentation should be used to clearly distinguish itself as a continuation line. The closing parenthesis, bracket or brace should be on a line by itself and should line up under the first character of the line that starts the multi-line construct. my_list = [ 1, 2, 3, 4, 5, 6, ] result = some_function_that_takes_arguments( 'a', 'b', 'c', 'd', 'e', 'f', ) When the conditional part of an if -statement is long enough to require that it be written across multiple lines, extra indentation should be included on the conditional continuation line. if (this_is_one_thing and that_is_another_thing): do_something() Documentation Style Guide \u00b6 Documentation should be in American English. The tone of the documentation should be simple, plain, objective and well-balanced where possible. Keep paragraphs reasonably short. With the exception of code blocks, limit line length to 79 characters. You may want to use your editor\u2019s tools to automatically hard wrap lines of text. Don\u2019t use abbreviations such as \u2018e.g.\u2019 but instead use the long form, such as \u2018For example\u2019. The documentation is built from the Markdown source files in the docs directory by the MkDocs static site generator. In addition to the basic Markdown syntax, the following extensions are supported: extra , admonition , smarty , codehilite , and toc . There are a few conventions you should follow when working on the documentation. Headers \u00b6 Headers should use the hash style. For example: ## Some important topic The underline style should not be used. Don\u2019t do this: Some important topic ==================== Links \u00b6 Links should always use the reference style, with the referenced hyperlinks kept at the end of the document. Here is a link to [some other thing][other-thing]. More text... [other-thing]: http://example.com/other/thing This style helps keep the documentation source consistent and readable. If you are linking to another document within Python-Markdown\u2019s documentation, you should use a relative link, and link to the .md suffix. If applicable, it is preferred that the link includes a hash fragment pointing to the specific section of the page. For example: [authentication]: reference.md#Markdown Linking in this style ensures that the links work when browsing the documentation on GitHub. If your Markdown editor makes links clickable, they will work there as well. When the documentation is built, these links will be converted into regular links which point to the built HTML pages. Notes and Warnings \u00b6 If you want to draw attention to a note or warning, use the syntax defined in Python-Markdown\u2019s Admonition Extension : !!! note This is the content of the note. Changelog \u00b6 Any commit/pull request which changes the behavior of the Markdown library in any way must include an entry in the changelog. If a change only alters the documentation or tooling for the project, then an entry in the changelog is not necessary. The current changelog can be found at docs/changelog.md . The current changelog follows the format defined at keepachangelog.com . The description of each change should include a reference to the relevant GitHub issue in the format #123 (where 123 is the issue number). Edits to the changelog should generally add entries to the [unreleased] version at the top of the log. A pull request should not alter an entry for a previously released version, unless it is editing an error in the notes for that version, or is otherwise expressly deemed appropriate by the project maintainers. The current changelog should only document the changes for one MAJOR release and its various MINOR and PATCH releases (see Versions for an explanation of MAJOR, MINOR, and PATCH releases). Older versions from previous series of releases can be found in the archive at docs/change_log/ and may follow a different format. Note that the archived changelogs are not in the site navigation and are only linked from the Previous Releases section of the current changelog. Commit Message Style Guide \u00b6 Use the present tense (\u201cAdd feature\u201d not \u201cAdded feature\u201d). Use the imperative mood (\u201cMove item to\u2026\u201d not \u201cMoves item to\u2026\u201d). Limit the first line to 72 characters or less. Reference issues and pull requests liberally after the first line. Include a summary of the changes/additions made without replicating the content of the documentation or changelog. This is where an explanation of the choices made should be found. References to issues and pull requests should only provide the context in which a choice was made. However, the commit should be able to stand on its own. Development Environment \u00b6 To start developing on Python-Markdown is it best to create a fork of the project on GitHub. After cloning your fork to your local system, you will want to configure a remote that points to the upstream repository so that you can sync changes made in the original repository with your fork. It is recommended that all development be done from within a Python virtual environment , which isolates any experimental code from the general system. To create a virtual environment, use the following command from the root of the local working copy of your GitHub fork: virtualenv venv That creates a virtual environment which is contained in the venv directory within your local working copy. Note that the repository is configured so that git will ignore any files within a directory named venv or ENV for this very reason. On Posix systems (Linux, BSD, MacOS, etc.), use the following command to activate the environment: source venv/bin/activate On Windows, use this command instead: venv/Scripts/activate See the User Guide for more information on using virtual environments. To be able to run the Markdown library directly while working on it, install the working copy into the environment in Development Mode after activating the virtual environment for the first time: pip install -e . Now any saved changes will immediately be available within the virtual environment. You can run the command line script with the following command: python -m markdown Before building the documentation for the first time, you will need to install some optional dependencies with the command: pip install -e .[docs] To build the documentation and serve it locally on a development server, run: mkdocs serve Then point your browser at http://127.0.0.1:8000/ . For a complete list of options available, view MkDocs\u2019 help with the command: mkdocs --help Before running tests for the first time, you will need to install some optional dependencies with the command: pip install -e .[testing] And you can directly run the tests with: python -m unittest discover tests To get a coverage report after running the tests, use these commands instead: coverage run --source=markdown -m unittest discover tests coverage report --show-missing Note Some tests require the PyTidyLib library, which depends on the HTML Tidy library. If you do not have PyTidyLib installed, the tests which depend upon it will be skipped. Given the difficulty in installing the HTML Tidy library on many systems, you may choose to leave both libraries uninstalled and depend on the continuous integration server to run those tests when you submit a pull request. The above setup will only run tests against the code in one version of Python. However, Python-Markdown supports multiple versions of Python. Therefore, a tox configuration is included in the repository, which includes test environments for all supported Python versions, a Flake8 test environment, and a spellchecker for the documentation. While it is generally fine to leave those tests for the continuous integration server to run when a pull request is submitted, for more advanced changes, you may want to run those tests locally. To do so, simply install tox: pip install tox Then, to run all configured test environments, simply call the command tox with no arguments. See help ( tox -h ) for more options. Note The tox environments expect that some dependencies are already installed on your system. For example, by default, any Python version specific environment will fail if that version of Python is not installed. Additionally, the tox environments assume that the HTML Tidy library is installed and may fail when attempting to install PyTidyLib if it is not. Finally, the spellchecker environment requires aspell and the aspell-en dictionary to be installed. Unfortunately, installing those dependencies may differ significantly from system to system and is outside the scope of this guide. See Also Python-Markdown provides test tools which simply test Markdown syntax. Understanding those tools will often help in understanding why a test may be failing. Versions \u00b6 Python-Markdown follows Semantic Versioning and uses the MAJOR.MINOR.PATCH[.dev#|a#|b#|rc#] format for identifying releases. The status of the master branch should always be identified in the __version_info__ tuple defined in markdown/__meta__.py . The contents of that tuple will automatically be converted into a normalized version which conforms to PEP 440 . Each time the version is changed, the continuous integration server will run a test to ensure that the current version is in a valid normalized format. Version Status \u00b6 A MAJOR version is in development status when the MINOR version is 0 , the PATCH version is 0 , and the version includes a dev segment. A MINOR version is in development status when the MINOR version is not 0 , the PATCH version is 0 , and the version includes a dev segment. At all other times, the code is considered stable and release-ready. MAJOR and MINOR releases may or may not get pre-releases (alpha, beta, release candidate, etc.) at the discretion of the project maintainers. Version Workflow \u00b6 Bug fixes may be merged from a pull request to the master branch at any time so long as all tests pass, including one or more new tests which would have failed prior to the change. New features and backward incompatible changes may only be merged to the master branch when the MAJOR and/or MINOR version is in development status pursuant to Semantic Versioning . A separate commit to the master branch should be made to bump up the MAJOR and/or MINOR version and set development status. Only then will any pull requests implementing new features or backward incompatible changes be accepted. If a bug fix is deemed to be important and the master branch is in development status, a back-port of the fix should be committed to a version branch. If the appropriate version branch does not exist, then it should be created and a pull request back-porting the fix made against that branch. The version branch should be named with the most recently released MINOR version. For example, if the master branch is at 3.1.dev0 and the most recent MINOR release was 3.0.4 , then the version branch would be named 3.0 and any releases from that branch would increment the PATCH version only ( 3.0.5 , 3.0.6 \u2026). Release Process \u00b6 When a new release is being prepared, the release manager should follow the following steps: Verify that all outstanding issues and pull requests related to the release have been resolved. Confirm that the changelog has been updated and indicate the date and version of the new release. Update the version defined in markdown/__meta__.py . Build a local copy of the documentation, browse through the pages and confirm that no obvious issues exist with the documentation. Create a pull request with a commit message in the following format: Bump version to X.X.X After all checks have passed, merge the pull request. Create a git tag with the new version as the tag name and push to the Python-Markdown/markdown repository. The new tag should trigger a GitHub workflow which will automatically deploy the release to PyPI and update the documentation. In the event that the deployment fails, the following steps can be taken to deploy manually: Deploy the release to PyPI with the command make deploy . Deploy an update to the documentation using MkDocs . The following example assumes that local clones of the Python-Markdown/markdown and Python-Markdown/Python-Markdown.github.io repositories are in sibling directories named markdown and Python-Markdown.github.io respectively. cd Python-Markdown.github.io mkdocs gh-deploy --config-file ../markdown/mkdocs.yml --remote-branch master Issue and Pull Request Labels \u00b6 Below are the labels used to track and manages issues and pull requests. The labels are loosely grouped by their purpose, but it is not necessary for every issue to have a label from every group, and an issue may have more than one label from the same group. Type of Issue or Pull Request \u00b6 Label name Description bug Bug report. feature Feature request. support Support request. process Discussions regarding policies and development process. Category of Issue or Pull Request \u00b6 Label name Description core Related to the core parser code. extension Related to one or more of the included extensions. docs Related to the project documentation. Status of Issue \u00b6 Label name Description more-info-needed More information needs to be provided. needs-confirmation The alleged behavior needs to be confirmed. needs-decision A decision needs to be made regarding request. confirmed Confirmed bug report or approved feature request. someday-maybe Approved low priority request. duplicate The issue has been previously reported. wontfix The issue will not be fixed for the stated reasons. invalid Invalid report (user error, upstream issue, etc). 3rd-party Should be implemented as a third party extension. Status of Pull Request \u00b6 Label name Description work-in-progress A partial solution. More changes will be coming. needs-review Needs to be reviewed and/or approved. requires-changes Awaiting updates after a review. approved The pull request is ready to be merged. rejected The pull request is rejected for the stated reasons. /* GitHub Label Styles */ code.label { color: #000000; font-weight: 600; line-height: 15px; display: inline-block; padding: 4px 6px; } code.bug { background-color: #c45b46; } code.feature { background-color: #7b17d8; color: #ffffff; } code.support { background-color: #efbe62; } code.process { background-color: #eec9ff; } code.core { background-color: #0b02e1; color: #ffffff; } code.extension { background-color: #709ad8; } code.docs { background-color: #b2ffeb; } code.approved { background-color: #beed6d; } code.low { background-color: #dddddd; } code.pending { background-color: #f0f49a; } code.rejected { background-color: #f7c7be; }","title":"Contributing to Python-Markdown"},{"location":"contributing/#contributing-to-python-markdown","text":"The following is a set of guidelines for contributing to Python-Markdown and its extensions, which are hosted in the Python-Markdown Organization on GitHub. These are mostly guidelines, not rules. Use your best judgment, and feel free to propose changes to this document in a pull request.","title":"Contributing to Python-Markdown"},{"location":"contributing/#code-of-conduct","text":"This project and everyone participating in it is governed by the Python-Markdown Code of Conduct . By participating, you are expected to uphold this code. Please report unacceptable behavior to python.markdown@gmail.com .","title":"Code of Conduct"},{"location":"contributing/#project-organization","text":"The core Python-Markdown code base and any built-in extensions are hosted in the Python-Markdown/markdown project on GitHub. Other extensions maintained by the Python-Markdown project may be hosted as separate repositories in the Python-Markdown Organization on GitHub and must follow best practices for third-party extensions. The Python-Markdown/markdown project is organized as follows: Branch master should generally be stable and release-ready at all times. Version branches should be used for bug-fixes back-ported to the most recent PATCH release. No other branches should be created. Any other branches which exist are preserved for historical reasons only.","title":"Project Organization"},{"location":"contributing/#issues","text":"Feature requests, bug reports, usage questions, and other issues can all be raised on the GitHub issue tracker . When describing issues try to phrase your ticket in terms of the behavior you think needs to change rather than the code you think needs to change. Make sure you\u2019re running the latest version of Python-Markdown before reporting an issue. Search the issue list first for related items. Be sure to check closed issues and pull requests. GitHub\u2019s search only checks open issues by default. You may want to check the syntax rules and/or Babelmark to confirm that your expectations align with the rules and/or other implementations of Markdown. If reporting a syntax bug, you must provide the minimal input which exhibits the behavior, the actual output and the output you expected. All three items must be provided as textual code blocks (screen-shots are not helpful). It may also be helpful to point to the syntax rules which specifically address the area of concern. Feature requests will often be closed with a recommendation that they be implemented as third party extensions outside of the core Python-Markdown library. Keeping new feature requests implemented as third party extensions allows us to keep the maintenance overhead of Python-Markdown to a minimum, so that the focus can be on continued stability, bug fixes, and documentation. If you intend to submit a fix for your bug or provide an implementation of your feature request, it is not necessary to first open an issue. You can report a bug or make a feature request as part of a pull request. Of course, if you want to receive feedback on how to implement a bug-fix or feature before submitting a solution, then it would be appropriate to open an issue first and ask your questions there. Having your issue closed does not necessarily mean the end of a discussion. If you believe your issue has been closed incorrectly, explain why and we\u2019ll consider if it needs to be reopened.","title":"Issues"},{"location":"contributing/#pull-requests","text":"A pull request often represents the start of a discussion, and does not necessarily need to be the final, finished submission. In fact, if you discover an issue and intend to provide a fix for it, there is no need to open an issue first. You can report the issue and provide the fix together in a pull request. All pull requests should be made from your personal fork of the library hosted in your personal GitHub account. Do not create branches on the Python-Markdown/markdown project for pull requests. All pull requests should be implemented in a new branch with a unique name. Remember that if you have an outstanding pull request, pushing new commits to the related branch of your GitHub repository will also automatically update the pull request. It may help to review GitHub\u2019s documentation on Creating a pull request from a fork . If you are providing a fix for a previously reported issue, you must reference the issue in your commit message. Be sure to prefix the reference with one of GitHub\u2019s action words which will automatically close the issue when the pull request is merged. For example, fixes #42 and closes #42 would be acceptable, whereas ref #42 would not. Of course, if merging a pull request should not cause an issue to be closed, then the action word should not be included when referencing that issue. Before being accepted, each pull request must include the applicable code, new tests of all new features, updated tests for any changed features, documentation updates, and an appropriate update to the changelog. All changes must follow the applicable style guides. Failure to meet any one of the requirements is likely to delay any serious consideration of your pull request and may even cause it to be closed. Of course, if you are in the early stages of development, you may include a note in the pull request acknowledging that it is incomplete along with a request for feedback. Pull requests will generally not be accepted if any tests are failing. Therefore, it is recommended that you run the tests before submitting your pull request. After making a pull request, check the build status in the GitHub interface to ensure that all tests are running as expected. If any checks fail, you may push additional commits to your branch. GitHub will add those commits to the pull request and rerun the checks. It is generally best not to squash multiple commits and force-push your changes to a pull request. Instead, the maintainers would like to be able to follow the series of commits along with the discussion about those changes as they progress over time. If your pull request is accepted, it will be squashed at that time if deemed appropriate.","title":"Pull Requests"},{"location":"contributing/#style-guides","text":"In an effort to maintain consistency, Python-Markdown adheres to the following style guides in its code and documentation. A pull request may be rejected if it fails to match the relevant style guides.","title":"Style Guides"},{"location":"contributing/#code-style-guide","text":"Except as noted below, all pull requests should follow Python\u2019s standard PEP8 Style Guide and are run through Flake8 to ensure that the style guide is followed. Legacy code which does not follow the guidelines should only be updated if and when other changes (bug fix, feature addition, etc.) are being made to that section of code. While new features should be given names that follow modern Python naming conventions, existing names should be preserved to avoid backward incompatible changes. Line length is limited to a maximum of 119 characters. When a line of code does not fit within the line length limit, continuation lines should align elements wrapped inside parentheses, brackets and braces using a hanging indent . When using a hanging indent there should be no arguments on the first line and further indentation should be used to clearly distinguish itself as a continuation line. The closing parenthesis, bracket or brace should be on a line by itself and should line up under the first character of the line that starts the multi-line construct. my_list = [ 1, 2, 3, 4, 5, 6, ] result = some_function_that_takes_arguments( 'a', 'b', 'c', 'd', 'e', 'f', ) When the conditional part of an if -statement is long enough to require that it be written across multiple lines, extra indentation should be included on the conditional continuation line. if (this_is_one_thing and that_is_another_thing): do_something()","title":"Code Style Guide"},{"location":"contributing/#documentation-style-guide","text":"Documentation should be in American English. The tone of the documentation should be simple, plain, objective and well-balanced where possible. Keep paragraphs reasonably short. With the exception of code blocks, limit line length to 79 characters. You may want to use your editor\u2019s tools to automatically hard wrap lines of text. Don\u2019t use abbreviations such as \u2018e.g.\u2019 but instead use the long form, such as \u2018For example\u2019. The documentation is built from the Markdown source files in the docs directory by the MkDocs static site generator. In addition to the basic Markdown syntax, the following extensions are supported: extra , admonition , smarty , codehilite , and toc . There are a few conventions you should follow when working on the documentation.","title":"Documentation Style Guide"},{"location":"contributing/#headers","text":"Headers should use the hash style. For example: ## Some important topic The underline style should not be used. Don\u2019t do this: Some important topic ====================","title":"Headers"},{"location":"contributing/#links","text":"Links should always use the reference style, with the referenced hyperlinks kept at the end of the document. Here is a link to [some other thing][other-thing]. More text... [other-thing]: http://example.com/other/thing This style helps keep the documentation source consistent and readable. If you are linking to another document within Python-Markdown\u2019s documentation, you should use a relative link, and link to the .md suffix. If applicable, it is preferred that the link includes a hash fragment pointing to the specific section of the page. For example: [authentication]: reference.md#Markdown Linking in this style ensures that the links work when browsing the documentation on GitHub. If your Markdown editor makes links clickable, they will work there as well. When the documentation is built, these links will be converted into regular links which point to the built HTML pages.","title":"Links"},{"location":"contributing/#notes-and-warnings","text":"If you want to draw attention to a note or warning, use the syntax defined in Python-Markdown\u2019s Admonition Extension : !!! note This is the content of the note.","title":"Notes and Warnings"},{"location":"contributing/#changelog","text":"Any commit/pull request which changes the behavior of the Markdown library in any way must include an entry in the changelog. If a change only alters the documentation or tooling for the project, then an entry in the changelog is not necessary. The current changelog can be found at docs/changelog.md . The current changelog follows the format defined at keepachangelog.com . The description of each change should include a reference to the relevant GitHub issue in the format #123 (where 123 is the issue number). Edits to the changelog should generally add entries to the [unreleased] version at the top of the log. A pull request should not alter an entry for a previously released version, unless it is editing an error in the notes for that version, or is otherwise expressly deemed appropriate by the project maintainers. The current changelog should only document the changes for one MAJOR release and its various MINOR and PATCH releases (see Versions for an explanation of MAJOR, MINOR, and PATCH releases). Older versions from previous series of releases can be found in the archive at docs/change_log/ and may follow a different format. Note that the archived changelogs are not in the site navigation and are only linked from the Previous Releases section of the current changelog.","title":"Changelog"},{"location":"contributing/#commit-message-style-guide","text":"Use the present tense (\u201cAdd feature\u201d not \u201cAdded feature\u201d). Use the imperative mood (\u201cMove item to\u2026\u201d not \u201cMoves item to\u2026\u201d). Limit the first line to 72 characters or less. Reference issues and pull requests liberally after the first line. Include a summary of the changes/additions made without replicating the content of the documentation or changelog. This is where an explanation of the choices made should be found. References to issues and pull requests should only provide the context in which a choice was made. However, the commit should be able to stand on its own.","title":"Commit Message Style Guide"},{"location":"contributing/#development-environment","text":"To start developing on Python-Markdown is it best to create a fork of the project on GitHub. After cloning your fork to your local system, you will want to configure a remote that points to the upstream repository so that you can sync changes made in the original repository with your fork. It is recommended that all development be done from within a Python virtual environment , which isolates any experimental code from the general system. To create a virtual environment, use the following command from the root of the local working copy of your GitHub fork: virtualenv venv That creates a virtual environment which is contained in the venv directory within your local working copy. Note that the repository is configured so that git will ignore any files within a directory named venv or ENV for this very reason. On Posix systems (Linux, BSD, MacOS, etc.), use the following command to activate the environment: source venv/bin/activate On Windows, use this command instead: venv/Scripts/activate See the User Guide for more information on using virtual environments. To be able to run the Markdown library directly while working on it, install the working copy into the environment in Development Mode after activating the virtual environment for the first time: pip install -e . Now any saved changes will immediately be available within the virtual environment. You can run the command line script with the following command: python -m markdown Before building the documentation for the first time, you will need to install some optional dependencies with the command: pip install -e .[docs] To build the documentation and serve it locally on a development server, run: mkdocs serve Then point your browser at http://127.0.0.1:8000/ . For a complete list of options available, view MkDocs\u2019 help with the command: mkdocs --help Before running tests for the first time, you will need to install some optional dependencies with the command: pip install -e .[testing] And you can directly run the tests with: python -m unittest discover tests To get a coverage report after running the tests, use these commands instead: coverage run --source=markdown -m unittest discover tests coverage report --show-missing Note Some tests require the PyTidyLib library, which depends on the HTML Tidy library. If you do not have PyTidyLib installed, the tests which depend upon it will be skipped. Given the difficulty in installing the HTML Tidy library on many systems, you may choose to leave both libraries uninstalled and depend on the continuous integration server to run those tests when you submit a pull request. The above setup will only run tests against the code in one version of Python. However, Python-Markdown supports multiple versions of Python. Therefore, a tox configuration is included in the repository, which includes test environments for all supported Python versions, a Flake8 test environment, and a spellchecker for the documentation. While it is generally fine to leave those tests for the continuous integration server to run when a pull request is submitted, for more advanced changes, you may want to run those tests locally. To do so, simply install tox: pip install tox Then, to run all configured test environments, simply call the command tox with no arguments. See help ( tox -h ) for more options. Note The tox environments expect that some dependencies are already installed on your system. For example, by default, any Python version specific environment will fail if that version of Python is not installed. Additionally, the tox environments assume that the HTML Tidy library is installed and may fail when attempting to install PyTidyLib if it is not. Finally, the spellchecker environment requires aspell and the aspell-en dictionary to be installed. Unfortunately, installing those dependencies may differ significantly from system to system and is outside the scope of this guide. See Also Python-Markdown provides test tools which simply test Markdown syntax. Understanding those tools will often help in understanding why a test may be failing.","title":"Development Environment"},{"location":"contributing/#versions","text":"Python-Markdown follows Semantic Versioning and uses the MAJOR.MINOR.PATCH[.dev#|a#|b#|rc#] format for identifying releases. The status of the master branch should always be identified in the __version_info__ tuple defined in markdown/__meta__.py . The contents of that tuple will automatically be converted into a normalized version which conforms to PEP 440 . Each time the version is changed, the continuous integration server will run a test to ensure that the current version is in a valid normalized format.","title":"Versions"},{"location":"contributing/#version-status","text":"A MAJOR version is in development status when the MINOR version is 0 , the PATCH version is 0 , and the version includes a dev segment. A MINOR version is in development status when the MINOR version is not 0 , the PATCH version is 0 , and the version includes a dev segment. At all other times, the code is considered stable and release-ready. MAJOR and MINOR releases may or may not get pre-releases (alpha, beta, release candidate, etc.) at the discretion of the project maintainers.","title":"Version Status"},{"location":"contributing/#version-workflow","text":"Bug fixes may be merged from a pull request to the master branch at any time so long as all tests pass, including one or more new tests which would have failed prior to the change. New features and backward incompatible changes may only be merged to the master branch when the MAJOR and/or MINOR version is in development status pursuant to Semantic Versioning . A separate commit to the master branch should be made to bump up the MAJOR and/or MINOR version and set development status. Only then will any pull requests implementing new features or backward incompatible changes be accepted. If a bug fix is deemed to be important and the master branch is in development status, a back-port of the fix should be committed to a version branch. If the appropriate version branch does not exist, then it should be created and a pull request back-porting the fix made against that branch. The version branch should be named with the most recently released MINOR version. For example, if the master branch is at 3.1.dev0 and the most recent MINOR release was 3.0.4 , then the version branch would be named 3.0 and any releases from that branch would increment the PATCH version only ( 3.0.5 , 3.0.6 \u2026).","title":"Version Workflow"},{"location":"contributing/#release-process","text":"When a new release is being prepared, the release manager should follow the following steps: Verify that all outstanding issues and pull requests related to the release have been resolved. Confirm that the changelog has been updated and indicate the date and version of the new release. Update the version defined in markdown/__meta__.py . Build a local copy of the documentation, browse through the pages and confirm that no obvious issues exist with the documentation. Create a pull request with a commit message in the following format: Bump version to X.X.X After all checks have passed, merge the pull request. Create a git tag with the new version as the tag name and push to the Python-Markdown/markdown repository. The new tag should trigger a GitHub workflow which will automatically deploy the release to PyPI and update the documentation. In the event that the deployment fails, the following steps can be taken to deploy manually: Deploy the release to PyPI with the command make deploy . Deploy an update to the documentation using MkDocs . The following example assumes that local clones of the Python-Markdown/markdown and Python-Markdown/Python-Markdown.github.io repositories are in sibling directories named markdown and Python-Markdown.github.io respectively. cd Python-Markdown.github.io mkdocs gh-deploy --config-file ../markdown/mkdocs.yml --remote-branch master","title":"Release Process"},{"location":"contributing/#issue-and-pull-request-labels","text":"Below are the labels used to track and manages issues and pull requests. The labels are loosely grouped by their purpose, but it is not necessary for every issue to have a label from every group, and an issue may have more than one label from the same group.","title":"Issue and Pull Request Labels"},{"location":"contributing/#type-of-issue-or-pull-request","text":"Label name Description bug Bug report. feature Feature request. support Support request. process Discussions regarding policies and development process.","title":"Type of Issue or Pull Request"},{"location":"contributing/#category-of-issue-or-pull-request","text":"Label name Description core Related to the core parser code. extension Related to one or more of the included extensions. docs Related to the project documentation.","title":"Category of Issue or Pull Request"},{"location":"contributing/#status-of-issue","text":"Label name Description more-info-needed More information needs to be provided. needs-confirmation The alleged behavior needs to be confirmed. needs-decision A decision needs to be made regarding request. confirmed Confirmed bug report or approved feature request. someday-maybe Approved low priority request. duplicate The issue has been previously reported. wontfix The issue will not be fixed for the stated reasons. invalid Invalid report (user error, upstream issue, etc). 3rd-party Should be implemented as a third party extension.","title":"Status of Issue"},{"location":"contributing/#status-of-pull-request","text":"Label name Description work-in-progress A partial solution. More changes will be coming. needs-review Needs to be reviewed and/or approved. requires-changes Awaiting updates after a review. approved The pull request is ready to be merged. rejected The pull request is rejected for the stated reasons. /* GitHub Label Styles */ code.label { color: #000000; font-weight: 600; line-height: 15px; display: inline-block; padding: 4px 6px; } code.bug { background-color: #c45b46; } code.feature { background-color: #7b17d8; color: #ffffff; } code.support { background-color: #efbe62; } code.process { background-color: #eec9ff; } code.core { background-color: #0b02e1; color: #ffffff; } code.extension { background-color: #709ad8; } code.docs { background-color: #b2ffeb; } code.approved { background-color: #beed6d; } code.low { background-color: #dddddd; } code.pending { background-color: #f0f49a; } code.rejected { background-color: #f7c7be; }","title":"Status of Pull Request"},{"location":"install/","text":"Installing Python-Markdown \u00b6 The Easy Way \u00b6 The easiest way to install Python-Markdown is simply to type the following command from the command line: pip install markdown That\u2019s it! You\u2019re ready to use Python-Markdown. Enjoy! For more detailed instructions on installing Python packages, see the Installing Packages tutorial in the Python Packaging User Guide . Using the Git Repository \u00b6 If you\u2019re the type that likes to live on the edge, you may want to keep up with the latest additions and bug fixes in the repository between releases. Python-Markdown is maintained in a Git repository on GitHub.com. To get a copy of Python-Markdown from the repository do the following from the command line: pip install git+https://github.com/Python-Markdown/markdown.git","title":"Installation"},{"location":"install/#installing-python-markdown","text":"","title":"Installing Python-Markdown"},{"location":"install/#the-easy-way","text":"The easiest way to install Python-Markdown is simply to type the following command from the command line: pip install markdown That\u2019s it! You\u2019re ready to use Python-Markdown. Enjoy! For more detailed instructions on installing Python packages, see the Installing Packages tutorial in the Python Packaging User Guide .","title":"The Easy Way"},{"location":"install/#git","text":"If you\u2019re the type that likes to live on the edge, you may want to keep up with the latest additions and bug fixes in the repository between releases. Python-Markdown is maintained in a Git repository on GitHub.com. To get a copy of Python-Markdown from the repository do the following from the command line: pip install git+https://github.com/Python-Markdown/markdown.git","title":"Using the Git Repository"},{"location":"reference/","text":"Using Markdown as a Python Library \u00b6 First and foremost, Python-Markdown is intended to be a python library module used by various projects to convert Markdown syntax into HTML. The Basics \u00b6 To use markdown as a module: import markdown html = markdown.markdown(your_text_string) The Details \u00b6 Python-Markdown provides two public functions ( markdown.markdown and markdown.markdownFromFile ) both of which wrap the public class markdown.Markdown . If you\u2019re processing one document at a time, these functions will serve your needs. However, if you need to process multiple documents, it may be advantageous to create a single instance of the markdown.Markdown class and pass multiple documents through it. If you do use a single instance though, make sure to call the reset method appropriately ( see below ). markdown.markdown(text [, **kwargs]) \u00b6 The following options are available on the markdown.markdown function: text The source Unicode string. (required) Important Python-Markdown expects a Unicode string as input (some simple ASCII binary strings may work only by coincidence) and returns output as a Unicode string. Do not pass binary strings to it! If your input is encoded, (e.g. as UTF-8), it is your responsibility to decode it. For example: with open(\"some_file.txt\", \"r\", encoding=\"utf-8\") as input_file: text = input_file.read() html = markdown.markdown(text) If you want to write the output to disk, you must encode it yourself: with open(\"some_file.html\", \"w\", encoding=\"utf-8\", errors=\"xmlcharrefreplace\") as output_file: output_file.write(html) extensions A list of extensions. Python-Markdown provides an API for third parties to write extensions to the parser adding their own additions or changes to the syntax. A few commonly used extensions are shipped with the markdown library. See the extension documentation for a list of available extensions. The list of extensions may contain instances of extensions and/or strings of extension names. extensions=[MyExtClass(), 'myext', 'path.to.my.ext:MyExtClass'] Note The preferred method is to pass in an instance of an extension. Strings should only be used when it is impossible to import the Extension Class directly (from the command line or in a template). When passing in extension instances, each class instance must be a subclass of markdown.extensions.Extension and any configuration options should be defined when initiating the class instance rather than using the extension_configs keyword. For example: from markdown.extensions import Extension class MyExtClass(Extension): # define your extension here... markdown.markdown(text, extensions=[MyExtClass(option='value')]) If an extension name is provided as a string, the string must either be the registered entry point of any installed extension or the importable path using Python\u2019s dot notation. See the documentation specific to an extension for the string name assigned to an extension as an entry point. Simply include the defined name as a string in the list of extensions. For example, if an extension has the name myext assigned to it and the extension is properly installed, then do the following: markdown.markdown(text, extensions=['myext']) If an extension does not have a registered entry point, Python\u2019s dot notation may be used instead. The extension must be installed as a Python module on your PYTHONPATH. Generally, a class should be specified in the name. The class must be at the end of the name and be separated by a colon from the module. Therefore, if you were to import the class like this: from path.to.module import MyExtClass Then load the extension as follows: markdown.markdown(text, extensions=['path.to.module:MyExtClass']) If only one extension is defined within a module and the module includes a makeExtension function which returns an instance of the extension, then the class name is not necessary. For example, in that case one could do extensions=['path.to.module'] . Check the documentation for a specific extension to determine if it supports this feature. When loading an extension by name (as a string), you can only pass in configuration settings to the extension by using the extension_configs keyword. See Also See the documentation of the Extension API for assistance in creating extensions. extension_configs A dictionary of configuration settings for extensions. Any configuration settings will only be passed to extensions loaded by name (as a string). When loading extensions as class instances, pass the configuration settings directly to the class when initializing it. Note The preferred method is to pass in an instance of an extension, which does not require use of the extension_configs keyword at all. See the extensions keyword for details. The dictionary of configuration settings must be in the following format: extension_configs = { 'extension_name_1': { 'option_1': 'value_1', 'option_2': 'value_2' }, 'extension_name_2': { 'option_1': 'value_1' } } When specifying the extension name, be sure to use the exact same string as is used in the extensions keyword to load the extension. Otherwise, the configuration settings will not be applied to the extension. In other words, you cannot use the entry point in on place and Python dot notation in the other. While both may be valid for a given extension, they will not be recognized as being the same extension by Markdown. See the documentation specific to the extension you are using for help in specifying configuration settings for that extension. output_format : Format of output. Supported formats are: \"xhtml\" : Outputs XHTML style tags. Default . \"html\" : Outputs HTML style tags. The values can be in either lowercase or uppercase. tab_length : Length of tabs in the source. Default: 4 markdown.markdownFromFile (**kwargs) \u00b6 With a few exceptions, markdown.markdownFromFile accepts the same options as markdown.markdown . It does not accept a text (or Unicode) string. Instead, it accepts the following required options: input (required) The source text file. input may be set to one of three options: a string which contains a path to a readable file on the file system, a readable file-like object, or None (default) which will read from stdin . output The target which output is written to. output may be set to one of three options: a string which contains a path to a writable file on the file system, a writable file-like object, or None (default) which will write to stdout . encoding The encoding of the source text file. Defaults to \"utf-8\" . The same encoding will always be used for input and output. The xmlcharrefreplace error handler is used when encoding the output. Note This is the only place that decoding and encoding of Unicode takes place in Python-Markdown. If this rather naive solution does not meet your specific needs, it is suggested that you write your own code to handle your encoding/decoding needs. markdown.Markdown([**kwargs]) \u00b6 The same options are available when initializing the markdown.Markdown class as on the markdown.markdown function, except that the class does not accept a source text string on initialization. Rather, the source text string must be passed to one of two instance methods. Warning Instances of the markdown.Markdown class are only thread safe within the thread they were created in. A single instance should not be accessed from multiple threads. Markdown.convert(source) \u00b6 The source text must meet the same requirements as the text argument of the markdown.markdown function. You should also use this method if you want to process multiple strings without creating a new instance of the class for each string. md = markdown.Markdown() html1 = md.convert(text1) html2 = md.convert(text2) Depending on which options and/or extensions are being used, the parser may need its state reset between each call to convert . html1 = md.convert(text1) md.reset() html2 = md.convert(text2) To make this easier, you can also chain calls to reset together: html3 = md.reset().convert(text3) Markdown.convertFile(**kwargs) \u00b6 The arguments of this method are identical to the arguments of the same name on the markdown.markdownFromFile function ( input , output , and encoding ). As with the convert method, this method should be used to process multiple files without creating a new instance of the class for each document. State may need to be reset between each call to convertFile as is the case with convert .","title":"Library Reference"},{"location":"reference/#using-markdown-as-a-python-library","text":"First and foremost, Python-Markdown is intended to be a python library module used by various projects to convert Markdown syntax into HTML.","title":"Using Markdown as a Python Library"},{"location":"reference/#the-basics","text":"To use markdown as a module: import markdown html = markdown.markdown(your_text_string)","title":"The Basics"},{"location":"reference/#the-details","text":"Python-Markdown provides two public functions ( markdown.markdown and markdown.markdownFromFile ) both of which wrap the public class markdown.Markdown . If you\u2019re processing one document at a time, these functions will serve your needs. However, if you need to process multiple documents, it may be advantageous to create a single instance of the markdown.Markdown class and pass multiple documents through it. If you do use a single instance though, make sure to call the reset method appropriately ( see below ).","title":"The Details"},{"location":"reference/#markdown","text":"The following options are available on the markdown.markdown function: text The source Unicode string. (required) Important Python-Markdown expects a Unicode string as input (some simple ASCII binary strings may work only by coincidence) and returns output as a Unicode string. Do not pass binary strings to it! If your input is encoded, (e.g. as UTF-8), it is your responsibility to decode it. For example: with open(\"some_file.txt\", \"r\", encoding=\"utf-8\") as input_file: text = input_file.read() html = markdown.markdown(text) If you want to write the output to disk, you must encode it yourself: with open(\"some_file.html\", \"w\", encoding=\"utf-8\", errors=\"xmlcharrefreplace\") as output_file: output_file.write(html) extensions A list of extensions. Python-Markdown provides an API for third parties to write extensions to the parser adding their own additions or changes to the syntax. A few commonly used extensions are shipped with the markdown library. See the extension documentation for a list of available extensions. The list of extensions may contain instances of extensions and/or strings of extension names. extensions=[MyExtClass(), 'myext', 'path.to.my.ext:MyExtClass'] Note The preferred method is to pass in an instance of an extension. Strings should only be used when it is impossible to import the Extension Class directly (from the command line or in a template). When passing in extension instances, each class instance must be a subclass of markdown.extensions.Extension and any configuration options should be defined when initiating the class instance rather than using the extension_configs keyword. For example: from markdown.extensions import Extension class MyExtClass(Extension): # define your extension here... markdown.markdown(text, extensions=[MyExtClass(option='value')]) If an extension name is provided as a string, the string must either be the registered entry point of any installed extension or the importable path using Python\u2019s dot notation. See the documentation specific to an extension for the string name assigned to an extension as an entry point. Simply include the defined name as a string in the list of extensions. For example, if an extension has the name myext assigned to it and the extension is properly installed, then do the following: markdown.markdown(text, extensions=['myext']) If an extension does not have a registered entry point, Python\u2019s dot notation may be used instead. The extension must be installed as a Python module on your PYTHONPATH. Generally, a class should be specified in the name. The class must be at the end of the name and be separated by a colon from the module. Therefore, if you were to import the class like this: from path.to.module import MyExtClass Then load the extension as follows: markdown.markdown(text, extensions=['path.to.module:MyExtClass']) If only one extension is defined within a module and the module includes a makeExtension function which returns an instance of the extension, then the class name is not necessary. For example, in that case one could do extensions=['path.to.module'] . Check the documentation for a specific extension to determine if it supports this feature. When loading an extension by name (as a string), you can only pass in configuration settings to the extension by using the extension_configs keyword. See Also See the documentation of the Extension API for assistance in creating extensions. extension_configs A dictionary of configuration settings for extensions. Any configuration settings will only be passed to extensions loaded by name (as a string). When loading extensions as class instances, pass the configuration settings directly to the class when initializing it. Note The preferred method is to pass in an instance of an extension, which does not require use of the extension_configs keyword at all. See the extensions keyword for details. The dictionary of configuration settings must be in the following format: extension_configs = { 'extension_name_1': { 'option_1': 'value_1', 'option_2': 'value_2' }, 'extension_name_2': { 'option_1': 'value_1' } } When specifying the extension name, be sure to use the exact same string as is used in the extensions keyword to load the extension. Otherwise, the configuration settings will not be applied to the extension. In other words, you cannot use the entry point in on place and Python dot notation in the other. While both may be valid for a given extension, they will not be recognized as being the same extension by Markdown. See the documentation specific to the extension you are using for help in specifying configuration settings for that extension. output_format : Format of output. Supported formats are: \"xhtml\" : Outputs XHTML style tags. Default . \"html\" : Outputs HTML style tags. The values can be in either lowercase or uppercase. tab_length : Length of tabs in the source. Default: 4","title":"markdown.markdown"},{"location":"reference/#markdownFromFile","text":"With a few exceptions, markdown.markdownFromFile accepts the same options as markdown.markdown . It does not accept a text (or Unicode) string. Instead, it accepts the following required options: input (required) The source text file. input may be set to one of three options: a string which contains a path to a readable file on the file system, a readable file-like object, or None (default) which will read from stdin . output The target which output is written to. output may be set to one of three options: a string which contains a path to a writable file on the file system, a writable file-like object, or None (default) which will write to stdout . encoding The encoding of the source text file. Defaults to \"utf-8\" . The same encoding will always be used for input and output. The xmlcharrefreplace error handler is used when encoding the output. Note This is the only place that decoding and encoding of Unicode takes place in Python-Markdown. If this rather naive solution does not meet your specific needs, it is suggested that you write your own code to handle your encoding/decoding needs.","title":"markdown.markdownFromFile"},{"location":"reference/#Markdown","text":"The same options are available when initializing the markdown.Markdown class as on the markdown.markdown function, except that the class does not accept a source text string on initialization. Rather, the source text string must be passed to one of two instance methods. Warning Instances of the markdown.Markdown class are only thread safe within the thread they were created in. A single instance should not be accessed from multiple threads.","title":"markdown.Markdown"},{"location":"reference/#convert","text":"The source text must meet the same requirements as the text argument of the markdown.markdown function. You should also use this method if you want to process multiple strings without creating a new instance of the class for each string. md = markdown.Markdown() html1 = md.convert(text1) html2 = md.convert(text2) Depending on which options and/or extensions are being used, the parser may need its state reset between each call to convert . html1 = md.convert(text1) md.reset() html2 = md.convert(text2) To make this easier, you can also chain calls to reset together: html3 = md.reset().convert(text3)","title":"Markdown.convert"},{"location":"reference/#convertFile","text":"The arguments of this method are identical to the arguments of the same name on the markdown.markdownFromFile function ( input , output , and encoding ). As with the convert method, this method should be used to process multiple files without creating a new instance of the class for each document. State may need to be reset between each call to convertFile as is the case with convert .","title":"Markdown.convertFile"},{"location":"test_tools/","text":"Test Tools \u00b6 Python-Markdown provides some testing tools which simplify testing actual Markdown output against expected output. The tools are built on the Python standard library unittest . Therefore, no additional libraries are required. While Python-Markdown uses the tools for its own tests, they were designed and built so that third party extensions could use them as well. Therefore, the tools are importable from markdown.test_tools . The test tools include two different unittest.TestCase subclasses: markdown.test_tools.TestCase and markdown.test_tools.LegacyTestCase . markdown.test_tools.TestCase \u00b6 The markdown.test_tools.TestCase class is a unittest.TestCase subclass with a few additional helpers to make testing Markdown output easier. Properties default_kwargs : A dict of keywords to pass to Markdown for each test. The defaults can be overridden on individual tests. Methods assertMarkdownRenders : accepts the source text, the expected output, an optional dictionary of expected_attrs , and any keywords to pass to Markdown. The default_kwargs defined on the class are used except where overridden by keyword arguments. The output and expected output are passed to TestCase.assertMultiLineEqual . An AssertionError is raised with a diff if the actual output does not equal the expected output. The optional keyword expected_attrs accepts a dictionary of attribute names as keys with expected values. Each value is checked against the attribute of that name on the instance of the Markdown class using TestCase.assertEqual . An AssertionError is raised if any value does not match the expected value. dedent : Dedent triple-quoted strings. In all other respects, markdown.test_tools.TestCase behaves as unittest.TestCase . In fact, assertMarkdownRenders tests could be mixed with other unittest style tests within the same test class. An example Markdown test might look like this: from markdown.test_tools import TestCase class TestHr(TestCase): def test_hr_before_paragraph(self): self.assertMarkdownRenders( # The Markdown source text used as input self.dedent( \"\"\" *** An HR followed by a paragraph with no blank line. \"\"\" ), # The expected HTML output self.dedent( \"\"\" <hr> <p>An HR followed by a paragraph with no blank line.</p> \"\"\" ), # Other keyword arguments to pass to `markdown.markdown` output_format='html' ) markdown.test_tools.LegacyTestCase \u00b6 In the past Python-Markdown exclusively used file-based tests. Many of those tests still exist in Python-Markdown\u2019s test suite, including the test files from the reference implementation ( markdown.pl ) and PHP Markdown . Each test consists of a matching pair of text and HTML files. The text file contains a snippet of Markdown source text formatted for a specific syntax feature and the HTML file contains the expected HTML output of that snippet. When the test suite is run, each text file is run through Markdown and the output is compared with the HTML file as a separate unit test. When a test fails, the error report includes a diff of the expected output compared to the actual output to easily identify any problems. A separate markdown.test_tools.LegacyTestCase subclass must be created for each directory of test files. Various properties can be defined within the subclass to point to a directory of text-based test files and define various behaviors/defaults for those tests. The following properties are supported: location : A path to the directory of test files. An absolute path is preferred. exclude : A list of tests to skip. Each test name should comprise of a file name without an extension. normalize : A boolean value indicating if the HTML should be normalized. Default: False . Note: Normalization of HTML requires that PyTidyLib be installed on the system. If PyTidyLib is not installed and normalize is set to True , then the test will be skipped, regardless of any other settings. input_ext : A string containing the file extension of input files. Default: .txt . output_ext : A string containing the file extension of expected output files. Default: html . default_kwargs : A markdown.test_tools.Kwargs instance which stores the default set of keyword arguments for all test files in the directory. In addition, properties can be defined for each individual set of test files within the directory. The property should be given the name of the file without the file extension. Any spaces and dashes in the file name should be replaced with underscores. The value of the property should be a markdown.test_tools.Kwargs instance which contains the keyword arguments that should be passed to markdown.markdown for that test file. The keyword arguments will \u201cupdate\u201d the default_kwargs . When the class instance is created during a test run, it will walk the given directory and create a separate unit test for each set of test files using the naming scheme: test_filename . One unit test will be run for each set of input and output files. The definition of an example set of tests might look like this: from markdown.test_tools import LegacyTestCase, Kwargs import os # Get location of this file and use to find text file dirs. parent_test_dir = os.path.abspath(os.path.dirname(__file__)) class TestFoo(LegacyTestCase): # Define location of text file directory. In this case, the directory is # named \"foo\" and is in the same parent directory as this file. location = os.path.join(parent_test_dir, 'foo') # Define default keyword arguments. In this case, unless specified # differently, all tests should use the output format \"html\". default_kwargs = Kwargs(output_format='html') # The \"xhtml\" test should override the output format and use \"xhtml\". xhtml = Kwargs(output_format='xhtml') # The \"toc\" test should use the \"toc\" extension with a custom permalink # setting. toc = Kwargs( extensions=['markdown.extensions.toc'], extension_configs={'markdown.extensions.toc': {'permalink': \"[link]\"}} ) Note that in the above example, the text file directory may contain many more text-based test files than xhtml ( xhtml.txt and xhtml.html ) and toc ( toc.txt and toc.html ). As long as each set of files exists as a pair, a test will be created and run for each of them. Only the xhtml and toc tests needed to be specifically identified as they had specific, non-default settings which needed to be defined. Running Python-Markdown\u2019s Tests \u00b6 As all of the tests for the markdown library are unit tests, standard unittest methods of calling tests can be used. For example, to run all of Python-Markdown\u2019s tests, from the root of the git repository, run the following command: python -m unittest discover tests That simple command will search everything in the tests directory and it\u2019s sub-directories and run all unittest tests that it finds, including unittest.TestCase , markdown.test_tools.TestCase , and markdown.test_tools.LegacyTestCase subclasses. Normal unittest discovery rules apply. See Also See the Contributing Guide for instructions on setting up a development environment for running the tests.","title":"Test Tools"},{"location":"test_tools/#test-tools","text":"Python-Markdown provides some testing tools which simplify testing actual Markdown output against expected output. The tools are built on the Python standard library unittest . Therefore, no additional libraries are required. While Python-Markdown uses the tools for its own tests, they were designed and built so that third party extensions could use them as well. Therefore, the tools are importable from markdown.test_tools . The test tools include two different unittest.TestCase subclasses: markdown.test_tools.TestCase and markdown.test_tools.LegacyTestCase .","title":"Test Tools"},{"location":"test_tools/#markdowntest_toolstestcase","text":"The markdown.test_tools.TestCase class is a unittest.TestCase subclass with a few additional helpers to make testing Markdown output easier. Properties default_kwargs : A dict of keywords to pass to Markdown for each test. The defaults can be overridden on individual tests. Methods assertMarkdownRenders : accepts the source text, the expected output, an optional dictionary of expected_attrs , and any keywords to pass to Markdown. The default_kwargs defined on the class are used except where overridden by keyword arguments. The output and expected output are passed to TestCase.assertMultiLineEqual . An AssertionError is raised with a diff if the actual output does not equal the expected output. The optional keyword expected_attrs accepts a dictionary of attribute names as keys with expected values. Each value is checked against the attribute of that name on the instance of the Markdown class using TestCase.assertEqual . An AssertionError is raised if any value does not match the expected value. dedent : Dedent triple-quoted strings. In all other respects, markdown.test_tools.TestCase behaves as unittest.TestCase . In fact, assertMarkdownRenders tests could be mixed with other unittest style tests within the same test class. An example Markdown test might look like this: from markdown.test_tools import TestCase class TestHr(TestCase): def test_hr_before_paragraph(self): self.assertMarkdownRenders( # The Markdown source text used as input self.dedent( \"\"\" *** An HR followed by a paragraph with no blank line. \"\"\" ), # The expected HTML output self.dedent( \"\"\" <hr> <p>An HR followed by a paragraph with no blank line.</p> \"\"\" ), # Other keyword arguments to pass to `markdown.markdown` output_format='html' )","title":"markdown.test_tools.TestCase"},{"location":"test_tools/#markdowntest_toolslegacytestcase","text":"In the past Python-Markdown exclusively used file-based tests. Many of those tests still exist in Python-Markdown\u2019s test suite, including the test files from the reference implementation ( markdown.pl ) and PHP Markdown . Each test consists of a matching pair of text and HTML files. The text file contains a snippet of Markdown source text formatted for a specific syntax feature and the HTML file contains the expected HTML output of that snippet. When the test suite is run, each text file is run through Markdown and the output is compared with the HTML file as a separate unit test. When a test fails, the error report includes a diff of the expected output compared to the actual output to easily identify any problems. A separate markdown.test_tools.LegacyTestCase subclass must be created for each directory of test files. Various properties can be defined within the subclass to point to a directory of text-based test files and define various behaviors/defaults for those tests. The following properties are supported: location : A path to the directory of test files. An absolute path is preferred. exclude : A list of tests to skip. Each test name should comprise of a file name without an extension. normalize : A boolean value indicating if the HTML should be normalized. Default: False . Note: Normalization of HTML requires that PyTidyLib be installed on the system. If PyTidyLib is not installed and normalize is set to True , then the test will be skipped, regardless of any other settings. input_ext : A string containing the file extension of input files. Default: .txt . output_ext : A string containing the file extension of expected output files. Default: html . default_kwargs : A markdown.test_tools.Kwargs instance which stores the default set of keyword arguments for all test files in the directory. In addition, properties can be defined for each individual set of test files within the directory. The property should be given the name of the file without the file extension. Any spaces and dashes in the file name should be replaced with underscores. The value of the property should be a markdown.test_tools.Kwargs instance which contains the keyword arguments that should be passed to markdown.markdown for that test file. The keyword arguments will \u201cupdate\u201d the default_kwargs . When the class instance is created during a test run, it will walk the given directory and create a separate unit test for each set of test files using the naming scheme: test_filename . One unit test will be run for each set of input and output files. The definition of an example set of tests might look like this: from markdown.test_tools import LegacyTestCase, Kwargs import os # Get location of this file and use to find text file dirs. parent_test_dir = os.path.abspath(os.path.dirname(__file__)) class TestFoo(LegacyTestCase): # Define location of text file directory. In this case, the directory is # named \"foo\" and is in the same parent directory as this file. location = os.path.join(parent_test_dir, 'foo') # Define default keyword arguments. In this case, unless specified # differently, all tests should use the output format \"html\". default_kwargs = Kwargs(output_format='html') # The \"xhtml\" test should override the output format and use \"xhtml\". xhtml = Kwargs(output_format='xhtml') # The \"toc\" test should use the \"toc\" extension with a custom permalink # setting. toc = Kwargs( extensions=['markdown.extensions.toc'], extension_configs={'markdown.extensions.toc': {'permalink': \"[link]\"}} ) Note that in the above example, the text file directory may contain many more text-based test files than xhtml ( xhtml.txt and xhtml.html ) and toc ( toc.txt and toc.html ). As long as each set of files exists as a pair, a test will be created and run for each of them. Only the xhtml and toc tests needed to be specifically identified as they had specific, non-default settings which needed to be defined.","title":"markdown.test_tools.LegacyTestCase"},{"location":"test_tools/#running-python-markdowns-tests","text":"As all of the tests for the markdown library are unit tests, standard unittest methods of calling tests can be used. For example, to run all of Python-Markdown\u2019s tests, from the root of the git repository, run the following command: python -m unittest discover tests That simple command will search everything in the tests directory and it\u2019s sub-directories and run all unittest tests that it finds, including unittest.TestCase , markdown.test_tools.TestCase , and markdown.test_tools.LegacyTestCase subclasses. Normal unittest discovery rules apply. See Also See the Contributing Guide for instructions on setting up a development environment for running the tests.","title":"Running Python-Markdown&rsquo;s Tests"},{"location":"change_log/","text":"Python-Markdown Change Log \u00b6 Note This is an archive of the changelog prior to the release of version 3.0. See the current changelog for up-to-date details. Jan 4, 2018: Released version 2.6.11 (a bug-fix release). Added a new BACKLINK-TITLE option to the footnote extension so that non-English users can provide a custom title to back links (see #610 ). Dec 7, 2017: Released version 2.6.10 (a documentation update). Aug 17, 2017: Released version 2.6.9 (a bug-fix release). Jan 25, 2017: Released version 2.6.8 (a bug-fix release). Sept 23, 2016: Released version 2.6.7 (a bug-fix release). Mar 20, 2016: Released version 2.6.6 (a bug-fix release). Nov 24, 2015: Released version 2.6.5 (a bug-fix release). Nov 6, 2015: Released version 2.6.4 (a bug-fix release). Oct 26, 2015: Released version 2.6.3 (a bug-fix release). Apr 20, 2015: Released version 2.6.2 (a bug-fix release). Mar 8, 2015: Released version 2.6.1 (a bug-fix release). The (new) yaml option has been removed from the Meta-Data Extension as it was buggy (see #390 ). Feb 19, 2015: Released version 2.6 ( Notes ). Nov 19, 2014: Released version 2.5.2 (a bug-fix release). Sept 26, 2014: Released version 2.5.1 (a bug-fix release). Sept 12, 2014: Released version 2.5.0 ( Notes ). Feb 16, 2014: Released version 2.4.0 ( Notes ). Mar 22, 2013: Released version 2.3.1 (a bug-fix release). Mar 14, 2013: Released version 2.3.0 ( Notes ) Nov 4, 2012: Released version 2.2.1 (a bug-fix release). Jul 5, 2012: Released version 2.2.0 ( Notes ). Jan 22, 2012: Released version 2.1.1 (a bug-fix release). Nov 24, 2011: Released version 2.1.0 ( Notes ). Oct 7, 2009: Released version 2.0.3. (a bug-fix release). Sept 28, 2009: Released version 2.0.2 (a bug-fix release). May 20, 2009: Released version 2.0.1 (a bug-fix release). Mar 30, 2009: Released version 2.0 ( Notes ). Mar 8, 2009: Release Candidate 2.0-rc-1. Feb 2009: Added support for multi-level lists to new Blockprocessors. Jan 2009: Added HTML 4 output as an option (thanks Eric Abrahamsen) Nov 2008: Added Definition List ext. Replaced old core with Blockprocessors. Broken up into multiple files. Oct 2008: Changed logging behavior to work better with other systems. Refactored tree traversing. Added treap implementation, then replaced with OrderedDict. Renamed various processors to better reflect what they actually do. Refactored footnote ext to match PHP Extra\u2019s output. Sept 2008: Moved prettifyTree to a Postprocessor, replaced WikiLink ext with WikiLinks (note the s) ext (uses bracketed links instead of CamelCase) and various bug fixes. August 18 2008: Reorganized directory structure. Added a \u2018docs\u2019 directory and moved all extensions into a \u2018markdown-extensions\u2019 package. Added additional documentation and a few bug fixes. (v2.0-beta) August 4 2008: Updated included extensions to ElementTree . Added a separate command line script. (v2.0-alpha) July 2008: Switched from home-grown NanoDOM to ElementTree and various related bugs (thanks Artem Yunusov). June 2008: Fixed issues with nested inline patterns and cleaned up testing framework (thanks Artem Yunusov). May 2008: Added a number of additional extensions to the distribution and other minor changes. Moved repository to git from svn. Mar 2008: Refactored extension API to accept either an extension name (as a string) or an instance of an extension (Thanks David Wolever). Fixed various bugs and added doc strings. Feb 2008: Various bug-fixes mostly regarding extensions. Feb 18, 2008: Version 1.7. Feb 13, 2008: A little code cleanup and better documentation and inheritance for Preprocessors/Postprocessors. Feb 9, 2008: Double-quotes no longer HTML escaped and raw HTML honors <?foo> , <@foo> , and <%foo> for those who run markdown on template syntax. Dec 12, 2007: Updated docs. Removed encoding argument from Markdown and markdown as per list discussion. Clean up in prep for 1.7. Nov 29, 2007: Added support for images inside links. Also fixed a few bugs in the footnote extension. Nov 19, 2007: message now uses python\u2019s logging module. Also removed limit imposed by recursion in _process_section() . You can now parse as long of a document as your memory can handle. Nov 5, 2007: Moved safe_mode code to a textPostprocessor and added escaping option. Nov 3, 2007: Fixed convert method to accept empty strings. Oct 30, 2007: Fixed BOM removal (thanks Malcolm Tredinnick). Fixed infinite loop in bracket regular expression for inline links. Oct 11, 2007: LineBreaks is now an inlinePattern . Fixed HR in blockquotes. Refactored _processSection method (see tracker #1793419 ). Oct 9, 2007: Added textPreprocessor (from 1.6b). Oct 8, 2008: Fixed Lazy Blockquote. Fixed code block on first line. Fixed empty inline image link. Oct 7, 2007: Limit recursion on inline patterns. Added a \u2018safe\u2019 tag to htmlStash . March 18, 2007: Fixed or merged a bunch of minor bugs, including multi-line comments and markup inside links. (Tracker #s: 1683066, 1671153, 1661751, 1627935, 1544371, 1458139.) -> v. 1.6b Oct 10, 2006: Fixed a bug that caused some text to be lost after comments. Added \u201csafe mode\u201d (user\u2019s HTML tags are removed). Sept 6, 2006: Added exception for PHP tags when handling HTML blocks. August 7, 2006: Incorporated Sergej Chodarev\u2019s patch to fix a problem with ampersand normalization and HTML blocks. July 10, 2006: Switched to using optparse . Added proper support for Unicode. July 9, 2006: Fixed the <!--@address.com> problem (Tracker #1501354 ). May 18, 2006: Stopped catching unquoted titles in reference links. Stopped creating blank headers. May 15, 2006: A bug with lists, recursion on block-level elements, run-in headers, spaces before headers, Unicode input (thanks to Aaron Swartz). Sourceforge tracker #s: 1489313, 1489312, 1489311, 1488370, 1485178, 1485176. (v. 1.5) Mar. 24, 2006: Switched to a not-so-recursive algorithm with _handleInline . (Version 1.4) Mar. 15, 2006: Replaced some instance variables with class variables (a patch from Stelios Xanthakis). Chris Clark\u2019s new regexps that do not trigger mid-word underlining. Feb. 28, 2006: Clean-up and command-line handling by Stewart Midwinter. (Version 1.3) Feb. 24, 2006: Fixed a bug with the last line of the list appearing again as a separate paragraph. Incorporated Chris Clark\u2019s \u201cmail-to\u201d patch. Added support for <br /> at the end of lines ending in two or more spaces. Fixed a crashing bug when using ImageReferencePattern . Added several utility methods to Nanodom . (Version 1.2) Jan. 31, 2006: Added hr and hr/ to BLOCK_LEVEL_ELEMENTS and changed <hr/> to <hr /> . (Thanks to Sergej Chodarev.) Nov. 26, 2005: Fixed a bug with certain tabbed lines inside lists getting wrapped in <pre><code> . (v. 1.1) Nov. 19, 2005: Made <!... , <?... , etc. behave like block-level HTML tags. Nov. 14, 2005: Added entity code and email auto-link fix by Tiago Cogumbreiro. Fixed some small issues with backticks to get 100% compliance with John\u2019s test suite. (v. 1.0) Nov. 7, 2005: Added an unlink method for documents to aid with memory collection (per Doug Sauder\u2019s suggestion). Oct. 29, 2005: Restricted a set of HTML tags that get treated as block-level elements. Sept. 18, 2005: Refactored the whole script to make it easier to customize it and made footnote functionality into an extension. (v. 0.9) Sept. 5, 2005: Fixed a bug with multi-paragraph footnotes. Added attribute support. Sept. 1, 2005: Changed the way headers are handled to allow inline syntax in headers (e.g. links) and got the lists to use p-tags correctly (v. 0.8) Aug. 29, 2005: Added flexible tabs, fixed a few small issues, added basic support for footnotes. Got rid of xml.dom.minidom and added pretty-printing. (v. 0.7) Aug. 13, 2005: Fixed a number of small bugs in order to conform to the test suite. (v. 0.6) Aug. 11, 2005: Added support for inline HTML and entities, inline images, auto-links, underscore emphasis. Cleaned up and refactored the code, added some more comments. Feb. 19, 2005: Rewrote the handling of high-level elements to allow multi-line list items and all sorts of nesting. Feb. 3, 2005: Reference-style links, single-line lists, backticks, escape, emphasis in the beginning of the paragraph. Nov. 2004: Added links, blockquotes, HTML blocks to Manfred Stienstra\u2019s code Apr. 2004: Manfred\u2019s version at http://www.dwerg.net/projects/markdown/","title":"Change Log"},{"location":"change_log/#python-markdown-change-log","text":"Note This is an archive of the changelog prior to the release of version 3.0. See the current changelog for up-to-date details. Jan 4, 2018: Released version 2.6.11 (a bug-fix release). Added a new BACKLINK-TITLE option to the footnote extension so that non-English users can provide a custom title to back links (see #610 ). Dec 7, 2017: Released version 2.6.10 (a documentation update). Aug 17, 2017: Released version 2.6.9 (a bug-fix release). Jan 25, 2017: Released version 2.6.8 (a bug-fix release). Sept 23, 2016: Released version 2.6.7 (a bug-fix release). Mar 20, 2016: Released version 2.6.6 (a bug-fix release). Nov 24, 2015: Released version 2.6.5 (a bug-fix release). Nov 6, 2015: Released version 2.6.4 (a bug-fix release). Oct 26, 2015: Released version 2.6.3 (a bug-fix release). Apr 20, 2015: Released version 2.6.2 (a bug-fix release). Mar 8, 2015: Released version 2.6.1 (a bug-fix release). The (new) yaml option has been removed from the Meta-Data Extension as it was buggy (see #390 ). Feb 19, 2015: Released version 2.6 ( Notes ). Nov 19, 2014: Released version 2.5.2 (a bug-fix release). Sept 26, 2014: Released version 2.5.1 (a bug-fix release). Sept 12, 2014: Released version 2.5.0 ( Notes ). Feb 16, 2014: Released version 2.4.0 ( Notes ). Mar 22, 2013: Released version 2.3.1 (a bug-fix release). Mar 14, 2013: Released version 2.3.0 ( Notes ) Nov 4, 2012: Released version 2.2.1 (a bug-fix release). Jul 5, 2012: Released version 2.2.0 ( Notes ). Jan 22, 2012: Released version 2.1.1 (a bug-fix release). Nov 24, 2011: Released version 2.1.0 ( Notes ). Oct 7, 2009: Released version 2.0.3. (a bug-fix release). Sept 28, 2009: Released version 2.0.2 (a bug-fix release). May 20, 2009: Released version 2.0.1 (a bug-fix release). Mar 30, 2009: Released version 2.0 ( Notes ). Mar 8, 2009: Release Candidate 2.0-rc-1. Feb 2009: Added support for multi-level lists to new Blockprocessors. Jan 2009: Added HTML 4 output as an option (thanks Eric Abrahamsen) Nov 2008: Added Definition List ext. Replaced old core with Blockprocessors. Broken up into multiple files. Oct 2008: Changed logging behavior to work better with other systems. Refactored tree traversing. Added treap implementation, then replaced with OrderedDict. Renamed various processors to better reflect what they actually do. Refactored footnote ext to match PHP Extra\u2019s output. Sept 2008: Moved prettifyTree to a Postprocessor, replaced WikiLink ext with WikiLinks (note the s) ext (uses bracketed links instead of CamelCase) and various bug fixes. August 18 2008: Reorganized directory structure. Added a \u2018docs\u2019 directory and moved all extensions into a \u2018markdown-extensions\u2019 package. Added additional documentation and a few bug fixes. (v2.0-beta) August 4 2008: Updated included extensions to ElementTree . Added a separate command line script. (v2.0-alpha) July 2008: Switched from home-grown NanoDOM to ElementTree and various related bugs (thanks Artem Yunusov). June 2008: Fixed issues with nested inline patterns and cleaned up testing framework (thanks Artem Yunusov). May 2008: Added a number of additional extensions to the distribution and other minor changes. Moved repository to git from svn. Mar 2008: Refactored extension API to accept either an extension name (as a string) or an instance of an extension (Thanks David Wolever). Fixed various bugs and added doc strings. Feb 2008: Various bug-fixes mostly regarding extensions. Feb 18, 2008: Version 1.7. Feb 13, 2008: A little code cleanup and better documentation and inheritance for Preprocessors/Postprocessors. Feb 9, 2008: Double-quotes no longer HTML escaped and raw HTML honors <?foo> , <@foo> , and <%foo> for those who run markdown on template syntax. Dec 12, 2007: Updated docs. Removed encoding argument from Markdown and markdown as per list discussion. Clean up in prep for 1.7. Nov 29, 2007: Added support for images inside links. Also fixed a few bugs in the footnote extension. Nov 19, 2007: message now uses python\u2019s logging module. Also removed limit imposed by recursion in _process_section() . You can now parse as long of a document as your memory can handle. Nov 5, 2007: Moved safe_mode code to a textPostprocessor and added escaping option. Nov 3, 2007: Fixed convert method to accept empty strings. Oct 30, 2007: Fixed BOM removal (thanks Malcolm Tredinnick). Fixed infinite loop in bracket regular expression for inline links. Oct 11, 2007: LineBreaks is now an inlinePattern . Fixed HR in blockquotes. Refactored _processSection method (see tracker #1793419 ). Oct 9, 2007: Added textPreprocessor (from 1.6b). Oct 8, 2008: Fixed Lazy Blockquote. Fixed code block on first line. Fixed empty inline image link. Oct 7, 2007: Limit recursion on inline patterns. Added a \u2018safe\u2019 tag to htmlStash . March 18, 2007: Fixed or merged a bunch of minor bugs, including multi-line comments and markup inside links. (Tracker #s: 1683066, 1671153, 1661751, 1627935, 1544371, 1458139.) -> v. 1.6b Oct 10, 2006: Fixed a bug that caused some text to be lost after comments. Added \u201csafe mode\u201d (user\u2019s HTML tags are removed). Sept 6, 2006: Added exception for PHP tags when handling HTML blocks. August 7, 2006: Incorporated Sergej Chodarev\u2019s patch to fix a problem with ampersand normalization and HTML blocks. July 10, 2006: Switched to using optparse . Added proper support for Unicode. July 9, 2006: Fixed the <!--@address.com> problem (Tracker #1501354 ). May 18, 2006: Stopped catching unquoted titles in reference links. Stopped creating blank headers. May 15, 2006: A bug with lists, recursion on block-level elements, run-in headers, spaces before headers, Unicode input (thanks to Aaron Swartz). Sourceforge tracker #s: 1489313, 1489312, 1489311, 1488370, 1485178, 1485176. (v. 1.5) Mar. 24, 2006: Switched to a not-so-recursive algorithm with _handleInline . (Version 1.4) Mar. 15, 2006: Replaced some instance variables with class variables (a patch from Stelios Xanthakis). Chris Clark\u2019s new regexps that do not trigger mid-word underlining. Feb. 28, 2006: Clean-up and command-line handling by Stewart Midwinter. (Version 1.3) Feb. 24, 2006: Fixed a bug with the last line of the list appearing again as a separate paragraph. Incorporated Chris Clark\u2019s \u201cmail-to\u201d patch. Added support for <br /> at the end of lines ending in two or more spaces. Fixed a crashing bug when using ImageReferencePattern . Added several utility methods to Nanodom . (Version 1.2) Jan. 31, 2006: Added hr and hr/ to BLOCK_LEVEL_ELEMENTS and changed <hr/> to <hr /> . (Thanks to Sergej Chodarev.) Nov. 26, 2005: Fixed a bug with certain tabbed lines inside lists getting wrapped in <pre><code> . (v. 1.1) Nov. 19, 2005: Made <!... , <?... , etc. behave like block-level HTML tags. Nov. 14, 2005: Added entity code and email auto-link fix by Tiago Cogumbreiro. Fixed some small issues with backticks to get 100% compliance with John\u2019s test suite. (v. 1.0) Nov. 7, 2005: Added an unlink method for documents to aid with memory collection (per Doug Sauder\u2019s suggestion). Oct. 29, 2005: Restricted a set of HTML tags that get treated as block-level elements. Sept. 18, 2005: Refactored the whole script to make it easier to customize it and made footnote functionality into an extension. (v. 0.9) Sept. 5, 2005: Fixed a bug with multi-paragraph footnotes. Added attribute support. Sept. 1, 2005: Changed the way headers are handled to allow inline syntax in headers (e.g. links) and got the lists to use p-tags correctly (v. 0.8) Aug. 29, 2005: Added flexible tabs, fixed a few small issues, added basic support for footnotes. Got rid of xml.dom.minidom and added pretty-printing. (v. 0.7) Aug. 13, 2005: Fixed a number of small bugs in order to conform to the test suite. (v. 0.6) Aug. 11, 2005: Added support for inline HTML and entities, inline images, auto-links, underscore emphasis. Cleaned up and refactored the code, added some more comments. Feb. 19, 2005: Rewrote the handling of high-level elements to allow multi-line list items and all sorts of nesting. Feb. 3, 2005: Reference-style links, single-line lists, backticks, escape, emphasis in the beginning of the paragraph. Nov. 2004: Added links, blockquotes, HTML blocks to Manfred Stienstra\u2019s code Apr. 2004: Manfred\u2019s version at http://www.dwerg.net/projects/markdown/","title":"Python-Markdown Change Log"},{"location":"change_log/release-2.0/","text":"Python-Markdown 2.0 Release Notes \u00b6 We are happy to release Python-Markdown 2.0, which has been over a year in the making. We have rewritten significant portions of the code, dramatically extending the extension API, increased performance, and added numerous extensions to the distribution (including an extension that mimics PHP Markdown Extra), all while maintaining backward compatibility with the end user API in version 1.7. Python-Markdown supports Python versions 2.3, 2.4, 2.5, and 2.6. We have even released a version converted to Python 3.0! Backwards-incompatible Changes \u00b6 While Python-Markdown has experienced numerous internal changes, those changes should only affect extension authors. If you have not written your own extensions, then you should not need to make any changes to your code. However, you may want to ensure that any third party extensions you are using are compatible with the new API. The new extension API is fully documented in the docs. Below is a summary of the significant changes: The old home-grown NanoDOM has been replaced with ElementTree. Therefore all extensions must use ElementTree rather than the old NanoDOM. The various processors and patterns are now stored with OrderedDicts rather than lists. Any code adding processors and/or patterns into Python-Markdown will need to be adjusted to use the new API using OrderedDicts. The various types of processors available have been either combined, added, or removed. Ensure that your processors match the currently supported types. What\u2019s New in Python-Markdown 2.0 \u00b6 Thanks to the work of Artem Yunusov as part of GSoC 2008, Python-Markdown uses ElementTree internally to build the (X)HTML document from markdown source text. This has resolved various issues with the older home-grown NanoDOM and made notable increases in performance. Artem also refactored the Inline Patterns to better support nested patterns which has resolved many inconsistencies in Python-Markdown\u2019s parsing of the markdown syntax. The core parser had been completely rewritten, increasing performance and, for the first time, making it possible to override/add/change the way block level content is parsed. Python-Markdown now parses markdown source text more closely to the other popular implementations (Perl, PHP, etc.) than it ever has before. With the exception of a few minor insignificant differences, any difference should be considered a bug, rather than a limitation of the parser. The option to return HTML4 output as apposed to XHTML has been added. In addition, extensions should be able to easily add additional output formats. As part of implementing markdown in the Dr. Project project (a Trac fork), among other things, David Wolever refactored the \u201cextension\u201d keyword so that it accepts either the extension names as strings or instances of extensions. This makes it possible to include multiple extensions in a single module. Numerous extensions are included in the distribution by default. See available_extensions for a complete list. See the Change Log for a full list of changes.","title":"Release Notes for v2.0"},{"location":"change_log/release-2.0/#python-markdown-20-release-notes","text":"We are happy to release Python-Markdown 2.0, which has been over a year in the making. We have rewritten significant portions of the code, dramatically extending the extension API, increased performance, and added numerous extensions to the distribution (including an extension that mimics PHP Markdown Extra), all while maintaining backward compatibility with the end user API in version 1.7. Python-Markdown supports Python versions 2.3, 2.4, 2.5, and 2.6. We have even released a version converted to Python 3.0!","title":"Python-Markdown 2.0 Release Notes"},{"location":"change_log/release-2.0/#backwards-incompatible-changes","text":"While Python-Markdown has experienced numerous internal changes, those changes should only affect extension authors. If you have not written your own extensions, then you should not need to make any changes to your code. However, you may want to ensure that any third party extensions you are using are compatible with the new API. The new extension API is fully documented in the docs. Below is a summary of the significant changes: The old home-grown NanoDOM has been replaced with ElementTree. Therefore all extensions must use ElementTree rather than the old NanoDOM. The various processors and patterns are now stored with OrderedDicts rather than lists. Any code adding processors and/or patterns into Python-Markdown will need to be adjusted to use the new API using OrderedDicts. The various types of processors available have been either combined, added, or removed. Ensure that your processors match the currently supported types.","title":"Backwards-incompatible Changes"},{"location":"change_log/release-2.0/#whats-new-in-python-markdown-20","text":"Thanks to the work of Artem Yunusov as part of GSoC 2008, Python-Markdown uses ElementTree internally to build the (X)HTML document from markdown source text. This has resolved various issues with the older home-grown NanoDOM and made notable increases in performance. Artem also refactored the Inline Patterns to better support nested patterns which has resolved many inconsistencies in Python-Markdown\u2019s parsing of the markdown syntax. The core parser had been completely rewritten, increasing performance and, for the first time, making it possible to override/add/change the way block level content is parsed. Python-Markdown now parses markdown source text more closely to the other popular implementations (Perl, PHP, etc.) than it ever has before. With the exception of a few minor insignificant differences, any difference should be considered a bug, rather than a limitation of the parser. The option to return HTML4 output as apposed to XHTML has been added. In addition, extensions should be able to easily add additional output formats. As part of implementing markdown in the Dr. Project project (a Trac fork), among other things, David Wolever refactored the \u201cextension\u201d keyword so that it accepts either the extension names as strings or instances of extensions. This makes it possible to include multiple extensions in a single module. Numerous extensions are included in the distribution by default. See available_extensions for a complete list. See the Change Log for a full list of changes.","title":"What&rsquo;s New in Python-Markdown 2.0"},{"location":"change_log/release-2.1/","text":"Python-Markdown 2.1 Release Notes \u00b6 We are pleased to release Python-Markdown 2.1 which makes many improvements on 2.0. In fact, we consider 2.1 to be what 2.0 should have been. While 2.1 consists mostly of bug fixes, bringing Python-Markdown more inline with other implementations, some internal improvements were made to the parser, a few new built-in extensions were added, and HTML5 support was added. Python-Markdown supports Python versions 2.4, 2.5, 2.6, 2.7, 3.1, and 3.2 out of the box. In fact, the same code base installs on Python 3.1 and 3.2 with no extra work by the end user. Backwards-incompatible Changes \u00b6 While Python-Markdown has received only minor internal changes since the last release, there are a few backward-incompatible changes to note: Support had been dropped for Python 2.3. No guarantees are made that the library will work in any version of Python lower than 2.4. Additionally, while the library had been tested with Python 2.4, consider Python 2.4 support to be depreciated. It is not likely that any future versions will continue to support any version of Python less than 2.5. Note that Python 3.0 is not supported due to a bug in its 2to3 tool. If you must use Python-Markdown with Python 3.0, it is suggested you manually use Python 3.1\u2019s 2to3 tool to do a conversion. Python-Markdown previously accepted positional arguments on its class and wrapper methods. It now expects keyword arguments. Currently, the positional arguments should continue to work, but the solution feels hacky and may be removed in a future version. All users are encouraged to use keyword arguments as documented in the Library Reference . Past versions of Python-Markdown provided module level Global variables which controlled the behavior of a few different aspects of the parser. Those global variables have been replaced with attributes on the Markdown class. Additionally, those attributes are settable as keyword arguments when initializing a class instance. Therefore, if you were editing the global variables (either by editing the source or by overriding them in your code), you should now set them on the class. See the Library Reference for the options available. If you have been using the HeaderId extension to define custom ids on headers, you will want to switch to using the new Attribute List extension. The HeaderId extension now only auto-generates ids on headers which have not already had ids defined. Note that the Extra extension has been switched to use Attribute Lists instead of HeaderId as it did previously. Some code was moved into the markdown.util namespace which was previously in the markdown namespace. Extension authors may need to adjust a few import statements in their extensions to work with the changes. The command line script name was changed to markdown_py . The previous name ( markdown ) was conflicting with people (and Linux package systems) who also had markdown.pl installed on there system as markdown.pl\u2019s command line script was also named markdown . Be aware that installing Python-Markdown 2.1 will not remove the old versions of the script with different names. You may want to remove them yourself as they are unlikely to work properly. What\u2019s New in Python-Markdown 2.1 \u00b6 Three new extensions were added. Attribute Lists , which was inspired by Maruku\u2019s feature of the same name, Newline to Break , which was inspired by GitHub Flavored Markdown, and Smart Strong, which fills a hole in the Extra extension. HTML5 is now supported. All this really means is that new block level elements introduced in the HTML5 spec are now properly recognized as raw HTML. As valid HTML5 can consist of either HTML4 or XHTML1, there is no need to add a new HTML5 serializers. That said, html5 and xhtml5 have been added as aliases of the html4 and xhtml1 serializers respectively. An XHTML serializer has been added. Previously, ElementTree\u2019s XML serializer was being used for XHTML output. With the new serializer we are able to avoid more invalid output like empty elements (i.e., <p /> ) which can choke browsers. Improved support for Python 3.x. Now when running setupy.py install in Python 3.1 or greater the 2to3 tool is run automatically. Note that Python 3.0 is not supported due to a bug in its 2to3 tool. If you must use Python-Markdown with Python 3.0, it is suggested you manually use Python 3.1\u2019s 2to3 tool to do a conversion. Methods on instances of the Markdown class that do not return results can now be changed allowing one to do md.reset().convert(moretext) . The Markdown class was refactored so that a subclass could define its own build_parser method which would build a completely different parser. In other words, one could use the basic machinery in the markdown library to build a parser of a different markup language without the overhead of building the markdown parser and throwing it away. Import statements within markdown have been improved so that third party libraries can embed the markdown library if they desire (licensing permitting). Added support for Python\u2019s -m command line option. You can run the markdown package as a command line script. Do python -m markdown [options] [args] . Note that this is only fully supported in Python 2.7+. Python 2.5 & 2.6 require you to call the module directly ( markdown.__main__ ) rather than the package ( markdown ). This does not work in Python 2.4. The command line script has been renamed to markdown_py which avoids all the various problems we had with previous names. Also improved the command line script to accept input on stdin . The testing framework has been completely rebuilt using the Nose testing framework. This provides a number of benefits including the ability to better test the built-in extensions and other options available to change the parsing behavior. See the Test Suite documentation for details. Various bug fixes have been made, which are too numerous to list here. See the commit log for a complete history of the changes.","title":"Release Notes for v2.1"},{"location":"change_log/release-2.1/#python-markdown-21-release-notes","text":"We are pleased to release Python-Markdown 2.1 which makes many improvements on 2.0. In fact, we consider 2.1 to be what 2.0 should have been. While 2.1 consists mostly of bug fixes, bringing Python-Markdown more inline with other implementations, some internal improvements were made to the parser, a few new built-in extensions were added, and HTML5 support was added. Python-Markdown supports Python versions 2.4, 2.5, 2.6, 2.7, 3.1, and 3.2 out of the box. In fact, the same code base installs on Python 3.1 and 3.2 with no extra work by the end user.","title":"Python-Markdown 2.1 Release Notes"},{"location":"change_log/release-2.1/#backwards-incompatible-changes","text":"While Python-Markdown has received only minor internal changes since the last release, there are a few backward-incompatible changes to note: Support had been dropped for Python 2.3. No guarantees are made that the library will work in any version of Python lower than 2.4. Additionally, while the library had been tested with Python 2.4, consider Python 2.4 support to be depreciated. It is not likely that any future versions will continue to support any version of Python less than 2.5. Note that Python 3.0 is not supported due to a bug in its 2to3 tool. If you must use Python-Markdown with Python 3.0, it is suggested you manually use Python 3.1\u2019s 2to3 tool to do a conversion. Python-Markdown previously accepted positional arguments on its class and wrapper methods. It now expects keyword arguments. Currently, the positional arguments should continue to work, but the solution feels hacky and may be removed in a future version. All users are encouraged to use keyword arguments as documented in the Library Reference . Past versions of Python-Markdown provided module level Global variables which controlled the behavior of a few different aspects of the parser. Those global variables have been replaced with attributes on the Markdown class. Additionally, those attributes are settable as keyword arguments when initializing a class instance. Therefore, if you were editing the global variables (either by editing the source or by overriding them in your code), you should now set them on the class. See the Library Reference for the options available. If you have been using the HeaderId extension to define custom ids on headers, you will want to switch to using the new Attribute List extension. The HeaderId extension now only auto-generates ids on headers which have not already had ids defined. Note that the Extra extension has been switched to use Attribute Lists instead of HeaderId as it did previously. Some code was moved into the markdown.util namespace which was previously in the markdown namespace. Extension authors may need to adjust a few import statements in their extensions to work with the changes. The command line script name was changed to markdown_py . The previous name ( markdown ) was conflicting with people (and Linux package systems) who also had markdown.pl installed on there system as markdown.pl\u2019s command line script was also named markdown . Be aware that installing Python-Markdown 2.1 will not remove the old versions of the script with different names. You may want to remove them yourself as they are unlikely to work properly.","title":"Backwards-incompatible Changes"},{"location":"change_log/release-2.1/#whats-new-in-python-markdown-21","text":"Three new extensions were added. Attribute Lists , which was inspired by Maruku\u2019s feature of the same name, Newline to Break , which was inspired by GitHub Flavored Markdown, and Smart Strong, which fills a hole in the Extra extension. HTML5 is now supported. All this really means is that new block level elements introduced in the HTML5 spec are now properly recognized as raw HTML. As valid HTML5 can consist of either HTML4 or XHTML1, there is no need to add a new HTML5 serializers. That said, html5 and xhtml5 have been added as aliases of the html4 and xhtml1 serializers respectively. An XHTML serializer has been added. Previously, ElementTree\u2019s XML serializer was being used for XHTML output. With the new serializer we are able to avoid more invalid output like empty elements (i.e., <p /> ) which can choke browsers. Improved support for Python 3.x. Now when running setupy.py install in Python 3.1 or greater the 2to3 tool is run automatically. Note that Python 3.0 is not supported due to a bug in its 2to3 tool. If you must use Python-Markdown with Python 3.0, it is suggested you manually use Python 3.1\u2019s 2to3 tool to do a conversion. Methods on instances of the Markdown class that do not return results can now be changed allowing one to do md.reset().convert(moretext) . The Markdown class was refactored so that a subclass could define its own build_parser method which would build a completely different parser. In other words, one could use the basic machinery in the markdown library to build a parser of a different markup language without the overhead of building the markdown parser and throwing it away. Import statements within markdown have been improved so that third party libraries can embed the markdown library if they desire (licensing permitting). Added support for Python\u2019s -m command line option. You can run the markdown package as a command line script. Do python -m markdown [options] [args] . Note that this is only fully supported in Python 2.7+. Python 2.5 & 2.6 require you to call the module directly ( markdown.__main__ ) rather than the package ( markdown ). This does not work in Python 2.4. The command line script has been renamed to markdown_py which avoids all the various problems we had with previous names. Also improved the command line script to accept input on stdin . The testing framework has been completely rebuilt using the Nose testing framework. This provides a number of benefits including the ability to better test the built-in extensions and other options available to change the parsing behavior. See the Test Suite documentation for details. Various bug fixes have been made, which are too numerous to list here. See the commit log for a complete history of the changes.","title":"What&rsquo;s New in Python-Markdown 2.1"},{"location":"change_log/release-2.2/","text":"Python-Markdown 2.2 Release Notes \u00b6 We are pleased to release Python-Markdown 2.2 which makes improvements on 2.1. While 2.2 is primarily a bug fix release, some internal improvements were made to the parser, and a few security issues were resolved. Python-Markdown supports Python versions 2.5, 2.6, 2.7, 3.1, and 3.2 out of the box. Backwards-incompatible Changes \u00b6 While Python-Markdown has received only minor internal changes since the last release, there are a few backward-incompatible changes to note: Support had been dropped for Python 2.4. No guarantees are made that the library will work in any version of Python lower than 2.5. Additionally, while the library had been tested with Python 2.5, consider Python 2.5 support to be depreciated. It is not likely that any future versions will continue to support any version of Python less than 2.6. For many years Python-Markdown has identified <ins> and <del> tags in raw HTML input as block level tags. As they are actually inline level tags, this behavior has been changed. This may result in slightly different output. While in most cases, the new output is more correct, there may be a few edge cases where a document author has relied on the previous incorrect behavior. It is likely that a few adjustments may need to be made to those documents. The behavior of the enable_attributes keyword has been slightly altered. If authors have been using attributes in documents with safe_mode on, those attributes will no longer be parsed unless enable_attributes is explicitly set to True . This change was made to prevent untrusted authors from injecting potentially harmful JavaScript in documents. This change had no effect when not in safe_mode . What\u2019s New in Python-Markdown 2.2 \u00b6 The docs were refactored and can now be found at http://packages.python.org/Markdown/ . The docs are now maintained in the Repository and are generated by the setup.py build_docs command. The Sane_Lists extension was added. The Sane Lists Extension alters the behavior of the Markdown List syntax to be less surprising by not allowing the mixing of list types. In other words, an ordered list will not continue when an unordered list item is encountered and vice versa. Markdown now excepts a full path to an extension module. In other words, your extensions no longer need to be in the primary namespace (and start with mdx_ ) for Markdown to find them. Just do Markdown(extension=['path.to.some.module']) . As long as the provided module contains a compatible extension, the extension will be loaded. The BlockParser API was slightly altered to allow blockprocessor.run to return True or False which provides more control to the block processor loop from within any Blockprocessor instance. Various bug fixes have been made. See the commit log for a complete history of the changes.","title":"Release Notes for v2.2"},{"location":"change_log/release-2.2/#python-markdown-22-release-notes","text":"We are pleased to release Python-Markdown 2.2 which makes improvements on 2.1. While 2.2 is primarily a bug fix release, some internal improvements were made to the parser, and a few security issues were resolved. Python-Markdown supports Python versions 2.5, 2.6, 2.7, 3.1, and 3.2 out of the box.","title":"Python-Markdown 2.2 Release Notes"},{"location":"change_log/release-2.2/#backwards-incompatible-changes","text":"While Python-Markdown has received only minor internal changes since the last release, there are a few backward-incompatible changes to note: Support had been dropped for Python 2.4. No guarantees are made that the library will work in any version of Python lower than 2.5. Additionally, while the library had been tested with Python 2.5, consider Python 2.5 support to be depreciated. It is not likely that any future versions will continue to support any version of Python less than 2.6. For many years Python-Markdown has identified <ins> and <del> tags in raw HTML input as block level tags. As they are actually inline level tags, this behavior has been changed. This may result in slightly different output. While in most cases, the new output is more correct, there may be a few edge cases where a document author has relied on the previous incorrect behavior. It is likely that a few adjustments may need to be made to those documents. The behavior of the enable_attributes keyword has been slightly altered. If authors have been using attributes in documents with safe_mode on, those attributes will no longer be parsed unless enable_attributes is explicitly set to True . This change was made to prevent untrusted authors from injecting potentially harmful JavaScript in documents. This change had no effect when not in safe_mode .","title":"Backwards-incompatible Changes"},{"location":"change_log/release-2.2/#whats-new-in-python-markdown-22","text":"The docs were refactored and can now be found at http://packages.python.org/Markdown/ . The docs are now maintained in the Repository and are generated by the setup.py build_docs command. The Sane_Lists extension was added. The Sane Lists Extension alters the behavior of the Markdown List syntax to be less surprising by not allowing the mixing of list types. In other words, an ordered list will not continue when an unordered list item is encountered and vice versa. Markdown now excepts a full path to an extension module. In other words, your extensions no longer need to be in the primary namespace (and start with mdx_ ) for Markdown to find them. Just do Markdown(extension=['path.to.some.module']) . As long as the provided module contains a compatible extension, the extension will be loaded. The BlockParser API was slightly altered to allow blockprocessor.run to return True or False which provides more control to the block processor loop from within any Blockprocessor instance. Various bug fixes have been made. See the commit log for a complete history of the changes.","title":"What&rsquo;s New in Python-Markdown 2.2"},{"location":"change_log/release-2.3/","text":"Python-Markdown 2.3 Release Notes \u00b6 We are pleased to release Python-Markdown 2.3 which adds one new extension, removes a few old (obsolete) extensions, and now runs on both Python 2 and Python 3 without running the 2to3 conversion tool. See the list of changes below for details. Python-Markdown supports Python versions 2.6, 2.7, 3.1, 3.2, and 3.3. Backwards-incompatible Changes \u00b6 Support has been dropped for Python 2.5. No guarantees are made that the library will work in any version of Python lower than 2.6. As all supported Python versions include the ElementTree library, Python-Markdown will no longer try to import a third-party installation of ElementTree. All classes are now \u201cnew-style\u201d classes. In other words, all classes subclass from \u2018object\u2019. While this is not likely to affect most users, extension authors may need to make a few minor adjustments to their code. \u201csafe_mode\u201d has been further restricted. Markdown formatted links must be of a known white-listed scheme when in \u201csafe_mode\u201d or the URL is discarded. The white-listed schemes are: \u2018HTTP\u2019, \u2018HTTPS\u2019, \u2018FTP\u2019, \u2018FTPS\u2019, \u2018MAILTO\u2019, and \u2018news\u2019. Schemeless URLs are also permitted, but are checked in other ways - as they have been for some time. The ids assigned to footnotes now contain a dash ( - ) rather than a colon ( : ) when output_format it set to \"html5\" or \"xhtml5\" . If you are making reference to those ids in your JavaScript or CSS and using the HTML5 output, you will need to update your code accordingly. No changes are necessary if you are outputting XHTML (the default) or HTML4. The force_linenos configuration setting of the CodeHilite extension has been marked as Pending Deprecation and a new setting linenums has been added to replace it. See documentation for the CodeHilite Extension for an explanation of the new linenums setting. The new setting will honor the old force_linenos if it is set, but it will raise a PendingDeprecationWarning and will likely be removed in a future version of Python-Markdown. The \u201cRSS\u201d extension has been removed and no longer ships with Python-Markdown. If you would like to continue using the extension (not recommended), it is archived on GitHub . The \u201cHTML Tidy\u201d Extension has been removed and no longer ships with Python-Markdown. If you would like to continue using the extension (not recommended), it is archived on GitHub . Note that the underlying library, uTidylib, is not Python 3 compatible. Instead, it is recommended that the newer PyTidyLib (version 0.2.2+ for Python 3 comparability - install from GitHub not PyPI) be used. As the API for that library is rather simple, it is recommended that the output of Markdown be wrapped in a call to PyTidyLib rather than using an extension (for example: tidylib.tidy_fragment(markdown.markdown(source), options={...}) ). What\u2019s New in Python-Markdown 2.3 \u00b6 The entire code base now universally runs in Python 2 and Python 3 without any need for running the 2to3 conversion tool. This not only simplifies testing, but by using Unicode_literals, results in more consistent behavior across Python versions. Additionally, the relative imports (made possible in Python 2 via absolute_import) allows the entire library to more easily be embedded in a sub-directory of another project. The various files within the library will still import each other properly even though \u2018markdown\u2019 may not be in Python\u2019s root namespace. The Admonition Extension has been added, which implements rST-style admonitions in the Markdown syntax. However, be warned that this extension is experimental and the syntax and behavior is still subject to change. Please try it out and report bugs and/or improvements. Various bug fixes have been made. See the commit log for a complete history of the changes.","title":"Release Notes for v2.3"},{"location":"change_log/release-2.3/#python-markdown-23-release-notes","text":"We are pleased to release Python-Markdown 2.3 which adds one new extension, removes a few old (obsolete) extensions, and now runs on both Python 2 and Python 3 without running the 2to3 conversion tool. See the list of changes below for details. Python-Markdown supports Python versions 2.6, 2.7, 3.1, 3.2, and 3.3.","title":"Python-Markdown 2.3 Release Notes"},{"location":"change_log/release-2.3/#backwards-incompatible-changes","text":"Support has been dropped for Python 2.5. No guarantees are made that the library will work in any version of Python lower than 2.6. As all supported Python versions include the ElementTree library, Python-Markdown will no longer try to import a third-party installation of ElementTree. All classes are now \u201cnew-style\u201d classes. In other words, all classes subclass from \u2018object\u2019. While this is not likely to affect most users, extension authors may need to make a few minor adjustments to their code. \u201csafe_mode\u201d has been further restricted. Markdown formatted links must be of a known white-listed scheme when in \u201csafe_mode\u201d or the URL is discarded. The white-listed schemes are: \u2018HTTP\u2019, \u2018HTTPS\u2019, \u2018FTP\u2019, \u2018FTPS\u2019, \u2018MAILTO\u2019, and \u2018news\u2019. Schemeless URLs are also permitted, but are checked in other ways - as they have been for some time. The ids assigned to footnotes now contain a dash ( - ) rather than a colon ( : ) when output_format it set to \"html5\" or \"xhtml5\" . If you are making reference to those ids in your JavaScript or CSS and using the HTML5 output, you will need to update your code accordingly. No changes are necessary if you are outputting XHTML (the default) or HTML4. The force_linenos configuration setting of the CodeHilite extension has been marked as Pending Deprecation and a new setting linenums has been added to replace it. See documentation for the CodeHilite Extension for an explanation of the new linenums setting. The new setting will honor the old force_linenos if it is set, but it will raise a PendingDeprecationWarning and will likely be removed in a future version of Python-Markdown. The \u201cRSS\u201d extension has been removed and no longer ships with Python-Markdown. If you would like to continue using the extension (not recommended), it is archived on GitHub . The \u201cHTML Tidy\u201d Extension has been removed and no longer ships with Python-Markdown. If you would like to continue using the extension (not recommended), it is archived on GitHub . Note that the underlying library, uTidylib, is not Python 3 compatible. Instead, it is recommended that the newer PyTidyLib (version 0.2.2+ for Python 3 comparability - install from GitHub not PyPI) be used. As the API for that library is rather simple, it is recommended that the output of Markdown be wrapped in a call to PyTidyLib rather than using an extension (for example: tidylib.tidy_fragment(markdown.markdown(source), options={...}) ).","title":"Backwards-incompatible Changes"},{"location":"change_log/release-2.3/#whats-new-in-python-markdown-23","text":"The entire code base now universally runs in Python 2 and Python 3 without any need for running the 2to3 conversion tool. This not only simplifies testing, but by using Unicode_literals, results in more consistent behavior across Python versions. Additionally, the relative imports (made possible in Python 2 via absolute_import) allows the entire library to more easily be embedded in a sub-directory of another project. The various files within the library will still import each other properly even though \u2018markdown\u2019 may not be in Python\u2019s root namespace. The Admonition Extension has been added, which implements rST-style admonitions in the Markdown syntax. However, be warned that this extension is experimental and the syntax and behavior is still subject to change. Please try it out and report bugs and/or improvements. Various bug fixes have been made. See the commit log for a complete history of the changes.","title":"What&rsquo;s New in Python-Markdown 2.3"},{"location":"change_log/release-2.4/","text":"Python-Markdown 2.4 Release Notes \u00b6 We are pleased to release Python-Markdown 2.4 which adds one new extension and fixes various bugs. See the list of changes below for details. Python-Markdown supports Python versions 2.6, 2.7, 3.1, 3.2, and 3.3. Backwards-incompatible Changes \u00b6 The force_linenos configuration setting of the CodeHilite extension has been marked as Deprecated . It had previously been marked as \u201cPending Deprecation\u201d in version 2.3 when a new setting linenums was added to replace it. See documentation for the CodeHilite Extension for an explanation of the new linenums setting. The new setting will honor the old force_linenos if it is set, but force_linenos will raise a DeprecationWarning and will likely be removed in a future version of Python-Markdown. URLs are no longer percent-encoded. This improves compatibility with the original (written in Perl) Markdown implementation. Please percent-encode your URLs manually when needed. What\u2019s New in Python-Markdown 2.4 \u00b6 Thanks to the hard work of Dmitry Shachnev the Smarty Extension has been added, which implements SmartyPants using Python-Markdown\u2019s Extension API. This offers a few benefits over a third party script. The HTML does not need to be \u201ctokenized\u201d twice, no hacks are required to combine SmartyPants and code highlighting, and we get markdown\u2019s escaping feature for free. Please try it out and report bugs and/or improvements. The Table of Contents Extension now supports new permalink option for creating Sphinx -style anchor links. It is now possible to enable Markdown formatting inside HTML blocks by appending markdown=1 to opening tag attributes. See Markdown Inside HTML Blocks section for details. Thanks to ryneeverett for implementing this feature. The code blocks now support emphasizing some of the code lines. To use this feature, specify hl_lines option after language name, for example (using the Fenced Code Extension ): ```.python hl_lines=\"1 3\" # This line will be emphasized. # This one won't. # This one will be also emphasized. ``` Thanks to A. Jesse Jiryu Davis for implementing this feature. Various bug fixes have been made. See the commit log for a complete history of the changes.","title":"Release Notes for v2.4"},{"location":"change_log/release-2.4/#python-markdown-24-release-notes","text":"We are pleased to release Python-Markdown 2.4 which adds one new extension and fixes various bugs. See the list of changes below for details. Python-Markdown supports Python versions 2.6, 2.7, 3.1, 3.2, and 3.3.","title":"Python-Markdown 2.4 Release Notes"},{"location":"change_log/release-2.4/#backwards-incompatible-changes","text":"The force_linenos configuration setting of the CodeHilite extension has been marked as Deprecated . It had previously been marked as \u201cPending Deprecation\u201d in version 2.3 when a new setting linenums was added to replace it. See documentation for the CodeHilite Extension for an explanation of the new linenums setting. The new setting will honor the old force_linenos if it is set, but force_linenos will raise a DeprecationWarning and will likely be removed in a future version of Python-Markdown. URLs are no longer percent-encoded. This improves compatibility with the original (written in Perl) Markdown implementation. Please percent-encode your URLs manually when needed.","title":"Backwards-incompatible Changes"},{"location":"change_log/release-2.4/#whats-new-in-python-markdown-24","text":"Thanks to the hard work of Dmitry Shachnev the Smarty Extension has been added, which implements SmartyPants using Python-Markdown\u2019s Extension API. This offers a few benefits over a third party script. The HTML does not need to be \u201ctokenized\u201d twice, no hacks are required to combine SmartyPants and code highlighting, and we get markdown\u2019s escaping feature for free. Please try it out and report bugs and/or improvements. The Table of Contents Extension now supports new permalink option for creating Sphinx -style anchor links. It is now possible to enable Markdown formatting inside HTML blocks by appending markdown=1 to opening tag attributes. See Markdown Inside HTML Blocks section for details. Thanks to ryneeverett for implementing this feature. The code blocks now support emphasizing some of the code lines. To use this feature, specify hl_lines option after language name, for example (using the Fenced Code Extension ): ```.python hl_lines=\"1 3\" # This line will be emphasized. # This one won't. # This one will be also emphasized. ``` Thanks to A. Jesse Jiryu Davis for implementing this feature. Various bug fixes have been made. See the commit log for a complete history of the changes.","title":"What&rsquo;s New in Python-Markdown 2.4"},{"location":"change_log/release-2.5/","text":"Python-Markdown 2.5 Release Notes \u00b6 We are pleased to release Python-Markdown 2.5 which adds a few new features and fixes various bugs. See the list of changes below for details. Python-Markdown version 2.5 supports Python versions 2.7, 3.2, 3.3, and 3.4. Backwards-incompatible Changes \u00b6 Python-Markdown no longer supports Python version 2.6. You must be using Python versions 2.7, 3.2, 3.3, or 3.4. The force_linenos configuration key on the CodeHilite Extension has been deprecated and will raise a KeyError if provided. In the previous release (2.4), it was issuing a DeprecationWarning . The linenums keyword should be used instead, which provides more control of the output. Both safe_mode and the associated html_replacement_text keywords will be deprecated in version 2.6 and will raise a PendingDeprecationWarning in 2.5. The so-called \u201csafe mode\u201d was never actually \u201csafe\u201d which has resulted in many people having a false sense of security when using it. As an alternative, the developers of Python-Markdown recommend that any untrusted content be passed through an HTML sanitizer (like Bleach ) after being converted to HTML by markdown. If your code previously looked like this: html = markdown.markdown(text, same_mode=True) Then it is recommended that you change your code to read something like this: import bleach html = bleach.clean(markdown.markdown(text)) If you are not interested in sanitizing untrusted text, but simply desire to escape raw HTML, then that can be accomplished through an extension which removes HTML parsing: from markdown.extensions import Extension class EscapeHtml(Extension): def extendMarkdown(self, md, md_globals): del md.preprocessors['html_block'] del md.inlinePatterns['html'] html = markdown.markdown(text, extensions=[EscapeHtml()]) As the HTML would not be parsed with the above Extension, then the serializer will escape the raw HTML, which is exactly what happens now when safe_mode=\"escape\" . Positional arguments on the markdown.Markdown() are pending deprecation as are all except the text argument on the markdown.markdown() wrapper function. Only keyword arguments should be used. For example, if your code previously looked like this: html = markdown.markdown(text, ['extra']) Then it is recommended that you change it to read something like this: html = markdown.markdown(text, extensions=['extra']) Note This change is being made as a result of deprecating \"safe_mode\" as the safe_mode argument was one of the positional arguments. When that argument is removed, the two arguments following it will no longer be at the correct position. It is recommended that you always use keywords when they are supported for this reason. In previous versions of Python-Markdown, the built-in extensions received special status and did not require the full path to be provided. Additionally, third party extensions whose name started with \"mdx_\" received the same special treatment. This behavior will be deprecated in version 2.6 and will raise a PendingDeprecationWarning in 2.5. Ensure that you always use the full path to your extensions. For example, if you previously did the following: markdown.markdown(text, extensions=['extra']) You should change your code to the following: markdown.markdown(text, extensions=['markdown.extensions.extra']) The same applies to the command line: $ python -m markdown -x markdown.extensions.extra input.txt See the documentation for a full explanation of the current behavior. The previously documented method of appending the extension configuration as a string to the extension name will be deprecated in Python-Markdown version 2.6 and will raise a PendingDeprecationWarning in 2.5. The extension_configs keyword should be used instead. See the documentation for a full explanation of the current behavior. What\u2019s New in Python-Markdown 2.5 \u00b6 The Smarty Extension has had a number of additional configuration settings added, which allows one to define their own substitutions to better support languages other than English. Thanks to Martin Altmayer for implementing this feature. Named Extensions (strings passed to the extensions keyword of markdown.Markdown ) can now point to any module and/or Class on your PYTHONPATH. While dot notation was previously supported, a module could not be at the root of your PYTHONPATH. The name had to contain at least one dot (requiring it to be a sub-module). This restriction no longer exists. Additionally, a Class may be specified in the name. The class must be at the end of the name (which uses dot notation from PYTHONPATH) and be separated by a colon from the module. Therefore, if you were to import the class like this: from path.to.module import SomeExtensionClass Then the named extension would comprise this string: \"path.to.module:SomeExtensionClass\" This allows multiple extensions to be implemented within the same module and still accessible when the user is not able to import the extension directly (perhaps from a template filter or the command line). This also means that extension modules are no longer required to include the makeExtension function which returns an instance of the extension class. However, if the user does not specify the class name (she only provides \"path.to.module\" ) the extension will fail to load without the makeExtension function included in the module. Extension authors will want to document carefully what is required to load their extensions. The Extension Configuration code has been refactored to make it a little easier for extension authors to work with configuration settings. As a result, the extension_configs keyword now accepts a dictionary rather than requiring a list of tuples. A list of tuples is still supported so no one needs to change their existing code. This should also simplify the learning curve for new users. Extension authors are encouraged to review the new methods available on the markdown.extnesions.Extension class for handling configuration and adjust their code going forward. The included extensions provide a model for best practices. See the API documentation for a full explanation. The Command Line Interface now accepts a --extensions_config (or -c ) option which accepts a file name and passes the parsed content of a YAML or JSON file to the extension_configs keyword of the markdown.Markdown class. The contents of the YAML or JSON must map to a Python Dictionary which matches the format required by the extension_configs keyword. Note that PyYAML is required to parse YAML files. The Admonition Extension is no longer considered \u201cexperimental.\u201d There have been various refactors of the testing framework. While those changes will not directly effect end users, the code is being better tested which will benefit everyone. Various bug fixes have been made. See the commit log for a complete history of the changes.","title":"Release Notes for v2.5"},{"location":"change_log/release-2.5/#python-markdown-25-release-notes","text":"We are pleased to release Python-Markdown 2.5 which adds a few new features and fixes various bugs. See the list of changes below for details. Python-Markdown version 2.5 supports Python versions 2.7, 3.2, 3.3, and 3.4.","title":"Python-Markdown 2.5 Release Notes"},{"location":"change_log/release-2.5/#backwards-incompatible-changes","text":"Python-Markdown no longer supports Python version 2.6. You must be using Python versions 2.7, 3.2, 3.3, or 3.4. The force_linenos configuration key on the CodeHilite Extension has been deprecated and will raise a KeyError if provided. In the previous release (2.4), it was issuing a DeprecationWarning . The linenums keyword should be used instead, which provides more control of the output. Both safe_mode and the associated html_replacement_text keywords will be deprecated in version 2.6 and will raise a PendingDeprecationWarning in 2.5. The so-called \u201csafe mode\u201d was never actually \u201csafe\u201d which has resulted in many people having a false sense of security when using it. As an alternative, the developers of Python-Markdown recommend that any untrusted content be passed through an HTML sanitizer (like Bleach ) after being converted to HTML by markdown. If your code previously looked like this: html = markdown.markdown(text, same_mode=True) Then it is recommended that you change your code to read something like this: import bleach html = bleach.clean(markdown.markdown(text)) If you are not interested in sanitizing untrusted text, but simply desire to escape raw HTML, then that can be accomplished through an extension which removes HTML parsing: from markdown.extensions import Extension class EscapeHtml(Extension): def extendMarkdown(self, md, md_globals): del md.preprocessors['html_block'] del md.inlinePatterns['html'] html = markdown.markdown(text, extensions=[EscapeHtml()]) As the HTML would not be parsed with the above Extension, then the serializer will escape the raw HTML, which is exactly what happens now when safe_mode=\"escape\" . Positional arguments on the markdown.Markdown() are pending deprecation as are all except the text argument on the markdown.markdown() wrapper function. Only keyword arguments should be used. For example, if your code previously looked like this: html = markdown.markdown(text, ['extra']) Then it is recommended that you change it to read something like this: html = markdown.markdown(text, extensions=['extra']) Note This change is being made as a result of deprecating \"safe_mode\" as the safe_mode argument was one of the positional arguments. When that argument is removed, the two arguments following it will no longer be at the correct position. It is recommended that you always use keywords when they are supported for this reason. In previous versions of Python-Markdown, the built-in extensions received special status and did not require the full path to be provided. Additionally, third party extensions whose name started with \"mdx_\" received the same special treatment. This behavior will be deprecated in version 2.6 and will raise a PendingDeprecationWarning in 2.5. Ensure that you always use the full path to your extensions. For example, if you previously did the following: markdown.markdown(text, extensions=['extra']) You should change your code to the following: markdown.markdown(text, extensions=['markdown.extensions.extra']) The same applies to the command line: $ python -m markdown -x markdown.extensions.extra input.txt See the documentation for a full explanation of the current behavior. The previously documented method of appending the extension configuration as a string to the extension name will be deprecated in Python-Markdown version 2.6 and will raise a PendingDeprecationWarning in 2.5. The extension_configs keyword should be used instead. See the documentation for a full explanation of the current behavior.","title":"Backwards-incompatible Changes"},{"location":"change_log/release-2.5/#whats-new-in-python-markdown-25","text":"The Smarty Extension has had a number of additional configuration settings added, which allows one to define their own substitutions to better support languages other than English. Thanks to Martin Altmayer for implementing this feature. Named Extensions (strings passed to the extensions keyword of markdown.Markdown ) can now point to any module and/or Class on your PYTHONPATH. While dot notation was previously supported, a module could not be at the root of your PYTHONPATH. The name had to contain at least one dot (requiring it to be a sub-module). This restriction no longer exists. Additionally, a Class may be specified in the name. The class must be at the end of the name (which uses dot notation from PYTHONPATH) and be separated by a colon from the module. Therefore, if you were to import the class like this: from path.to.module import SomeExtensionClass Then the named extension would comprise this string: \"path.to.module:SomeExtensionClass\" This allows multiple extensions to be implemented within the same module and still accessible when the user is not able to import the extension directly (perhaps from a template filter or the command line). This also means that extension modules are no longer required to include the makeExtension function which returns an instance of the extension class. However, if the user does not specify the class name (she only provides \"path.to.module\" ) the extension will fail to load without the makeExtension function included in the module. Extension authors will want to document carefully what is required to load their extensions. The Extension Configuration code has been refactored to make it a little easier for extension authors to work with configuration settings. As a result, the extension_configs keyword now accepts a dictionary rather than requiring a list of tuples. A list of tuples is still supported so no one needs to change their existing code. This should also simplify the learning curve for new users. Extension authors are encouraged to review the new methods available on the markdown.extnesions.Extension class for handling configuration and adjust their code going forward. The included extensions provide a model for best practices. See the API documentation for a full explanation. The Command Line Interface now accepts a --extensions_config (or -c ) option which accepts a file name and passes the parsed content of a YAML or JSON file to the extension_configs keyword of the markdown.Markdown class. The contents of the YAML or JSON must map to a Python Dictionary which matches the format required by the extension_configs keyword. Note that PyYAML is required to parse YAML files. The Admonition Extension is no longer considered \u201cexperimental.\u201d There have been various refactors of the testing framework. While those changes will not directly effect end users, the code is being better tested which will benefit everyone. Various bug fixes have been made. See the commit log for a complete history of the changes.","title":"What&rsquo;s New in Python-Markdown 2.5"},{"location":"change_log/release-2.6/","text":"Python-Markdown 2.6 Release Notes \u00b6 We are pleased to release Python-Markdown 2.6 which adds a few new features and fixes various bugs. See the list of changes below for details. Python-Markdown version 2.6 supports Python versions 2.7, 3.2, 3.3, and 3.4 as well as PyPy. Backwards-incompatible Changes \u00b6 safe_mode Deprecated \u00b6 Both safe_mode and the associated html_replacement_text keywords are deprecated in version 2.6 and will raise a DeprecationWarning . The safe_mode and html_replacement_text keywords will be ignored in the next release. The so-called \u201csafe mode\u201d was never actually \u201csafe\u201d which has resulted in many people having a false sense of security when using it. As an alternative, the developers of Python-Markdown recommend that any untrusted content be passed through an HTML sanitizer (like Bleach ) after being converted to HTML by markdown. In fact, Bleach Whitelist provides a curated list of tags, attributes, and styles suitable for filtering user-provided HTML using bleach. If your code previously looked like this: html = markdown.markdown(text, safe_mode=True) Then it is recommended that you change your code to read something like this: import bleach from bleach_whitelist import markdown_tags, markdown_attrs html = bleach.clean(markdown.markdown(text), markdown_tags, markdown_attrs) If you are not interested in sanitizing untrusted text, but simply desire to escape raw HTML, then that can be accomplished through an extension which removes HTML parsing: from markdown.extensions import Extension class EscapeHtml(Extension): def extendMarkdown(self, md, md_globals): del md.preprocessors['html_block'] del md.inlinePatterns['html'] html = markdown.markdown(text, extensions=[EscapeHtml()]) As the HTML would not be parsed with the above Extension, then the serializer will escape the raw HTML, which is exactly what happens now when safe_mode=\"escape\" . Positional Arguments Deprecated \u00b6 Positional arguments on the markdown.Markdown() class are deprecated as are all except the text argument on the markdown.markdown() wrapper function. Using positional arguments will raise a DeprecationWarning in 2.6 and an error in the next release. Only keyword arguments should be used. For example, if your code previously looked like this: html = markdown.markdown(text, [SomeExtension()]) Then it is recommended that you change it to read something like this: html = markdown.markdown(text, extensions=[SomeExtension()]) Note This change is being made as a result of deprecating \"safe_mode\" as the safe_mode argument was one of the positional arguments. When that argument is removed, the two arguments following it will no longer be at the correct position. It is recommended that you always use keywords when they are supported for this reason. \u201cShortened\u201d Extension Names Deprecated \u00b6 In previous versions of Python-Markdown, the built-in extensions received special status and did not require the full path to be provided. Additionally, third party extensions whose name started with \"mdx_\" received the same special treatment. This behavior is deprecated and will raise a DeprecationWarning in version 2.6 and an error in the next release. Ensure that you always use the full path to your extensions. For example, if you previously did the following: markdown.markdown(text, extensions=['extra']) You should change your code to the following: markdown.markdown(text, extensions=['markdown.extensions.extra']) The same applies to the command line: python -m markdown -x markdown.extensions.extra input.txt Similarly, if you have used a third party extension (for example mdx_math ), previously you might have called it like this: markdown.markdown(text, extensions=['math']) As the \"mdx\" prefix will no longer be appended, you will need to change your code as follows (assuming the file mdx_math.py is installed at the root of your PYTHONPATH): markdown.markdown(text, extensions=['mdx_math']) Extension authors will want to update their documentation to reflect the new behavior. See the documentation for a full explanation of the current behavior. Extension Configuration as Part of Extension Name Deprecated \u00b6 The previously documented method of appending the extension configuration options as a string to the extension name is deprecated and will raise a DeprecationWarning in version 2.6 and an error in 2.7. The extension_configs keyword should be used instead. See the documentation for a full explanation of the current behavior. HeaderId Extension Pending Deprecation \u00b6 The HeaderId Extension is pending deprecation and will raise a PendingDeprecationWarning in version 2.6. The extension will be deprecated in the next release and raise an error in the release after that. Use the Table of Contents Extension instead, which offers most of the features of the HeaderId Extension and more (support for meta data is missing). Extension authors who have been using the slugify and unique functions defined in the HeaderId Extension should note that those functions are now defined in the Table of Contents extension and should adjust their import statements accordingly ( from markdown.extensions.toc import slugify, unique ). The configs Keyword is Deprecated \u00b6 Positional arguments and the configs keyword on the markdown.extension.Extension class (and its subclasses) are deprecated. Each individual configuration option should be passed to the class as a keyword/value pair. For example. one might have previously initiated an extension subclass like this: ext = SomeExtension(configs={'somekey': 'somevalue'}) That code should be updated to pass in the options directly: ext = SomeExtension(somekey='somevalue') Extension authors will want to note that this affects the makeExtension function as well. Previously it was common for the function to be defined as follows: def makeExtension(configs=None): return SomeExtension(configs=configs) Extension authors will want to update their code to the following instead: def makeExtension(**kwargs): return SomeExtension(**kwargs) Failing to do so will result in a DeprecationWarning and will raise an error in the next release. See the Extension API documentation for more information. In the event that an markdown.extension.Extension subclass overrides the __init__ method and implements its own configuration handling, then the above may not apply. However, it is recommended that the subclass still calls the parent __init__ method to handle configuration options like so: class SomeExtension(markdown.extension.Extension): def __init__(**kwargs): # Do pre-config stuff here # Set config defaults self.config = { 'option1' : ['value1', 'description1'], 'option2' : ['value2', 'description2'] } # Set user defined configs super(MyExtension, self).__init__(**kwargs) # Do post-config stuff here Note the call to super to get the benefits of configuration handling from the parent class. See the documentation for more information. What\u2019s New in Python-Markdown 2.6 \u00b6 Official Support for PyPy \u00b6 Official support for PyPy has been added. While Python-Markdown has most likely worked on PyPy for some time, it is now officially supported and tested on PyPy. YAML Style Meta-Data \u00b6 The Meta-Data Extension now includes optional support for YAML style meta-data. By default, the YAML deliminators are recognized, however, the actual data is parsed as previously. This follows the syntax of MultiMarkdown , which inspired this extension. Alternatively, if the yaml option is set, then the data is parsed as YAML. As the yaml option was buggy, it was removed in 2.6.1. It is suggested that a preprocessor (like docdata ) or a third party extension be used if you want true YAML support. See Issue #390 for a full explanation. Table of Contents Extension Refactored \u00b6 The Table of Contents Extension has been refactored and some new features have been added. See the documentation for a full explanation of each feature listed below: The extension now assigns the Table of Contents to the toc attribute of the Markdown class regardless of whether a \u201cmarker\u201d was found in the document. Third party frameworks no longer need to insert a \u201cmarker,\u201d run the document through Markdown, then extract the Table of Contents from the document. The Table of Contents Extension is now a \u201cregistered extension.\u201d Therefore, when the reset method of the Markdown class is called, the toc attribute on the Markdown class is cleared (set to an empty string). When the marker configuration option is set to an empty string, the parser completely skips the process of searching the document for markers. This should save parsing time when the Table of Contents Extension is being used only to assign ids to headers. A separator configuration option has been added allowing users to override the separator character used by the slugify function. A baselevel configuration option has been added allowing users to set the base level of headers in their documents (h1-h6). This allows the header levels to be automatically adjusted to fit within the hierarchy of an HTML template. Pygments can now be disabled \u00b6 The CodeHilite Extension has gained a new configuration option: use_pygments . The option is True by default, however, it allows one to turn off Pygments code highlighting (set to False ) while preserving the language detection features of the extension. Note that Pygments language guessing is not used as that would \u2018use Pygments\u2019. If a language is defined for a code block, it will be assigned to the <code> tag as a class in the manner suggested by the HTML5 spec (alternate output will not be entertained) and could potentially be used by a JavaScript library in the browser to highlight the code block. Miscellaneous \u00b6 Test coverage has been improved including running flake8 . While those changes will not directly effect end users, the code is being better tested which will benefit everyone. Various bug fixes have been made. See the commit log for a complete history of the changes.","title":"Release Notes for v2.6"},{"location":"change_log/release-2.6/#python-markdown-26-release-notes","text":"We are pleased to release Python-Markdown 2.6 which adds a few new features and fixes various bugs. See the list of changes below for details. Python-Markdown version 2.6 supports Python versions 2.7, 3.2, 3.3, and 3.4 as well as PyPy.","title":"Python-Markdown 2.6 Release Notes"},{"location":"change_log/release-2.6/#backwards-incompatible-changes","text":"","title":"Backwards-incompatible Changes"},{"location":"change_log/release-2.6/#safe_mode-deprecated","text":"Both safe_mode and the associated html_replacement_text keywords are deprecated in version 2.6 and will raise a DeprecationWarning . The safe_mode and html_replacement_text keywords will be ignored in the next release. The so-called \u201csafe mode\u201d was never actually \u201csafe\u201d which has resulted in many people having a false sense of security when using it. As an alternative, the developers of Python-Markdown recommend that any untrusted content be passed through an HTML sanitizer (like Bleach ) after being converted to HTML by markdown. In fact, Bleach Whitelist provides a curated list of tags, attributes, and styles suitable for filtering user-provided HTML using bleach. If your code previously looked like this: html = markdown.markdown(text, safe_mode=True) Then it is recommended that you change your code to read something like this: import bleach from bleach_whitelist import markdown_tags, markdown_attrs html = bleach.clean(markdown.markdown(text), markdown_tags, markdown_attrs) If you are not interested in sanitizing untrusted text, but simply desire to escape raw HTML, then that can be accomplished through an extension which removes HTML parsing: from markdown.extensions import Extension class EscapeHtml(Extension): def extendMarkdown(self, md, md_globals): del md.preprocessors['html_block'] del md.inlinePatterns['html'] html = markdown.markdown(text, extensions=[EscapeHtml()]) As the HTML would not be parsed with the above Extension, then the serializer will escape the raw HTML, which is exactly what happens now when safe_mode=\"escape\" .","title":"safe_mode Deprecated"},{"location":"change_log/release-2.6/#positional-arguments-deprecated","text":"Positional arguments on the markdown.Markdown() class are deprecated as are all except the text argument on the markdown.markdown() wrapper function. Using positional arguments will raise a DeprecationWarning in 2.6 and an error in the next release. Only keyword arguments should be used. For example, if your code previously looked like this: html = markdown.markdown(text, [SomeExtension()]) Then it is recommended that you change it to read something like this: html = markdown.markdown(text, extensions=[SomeExtension()]) Note This change is being made as a result of deprecating \"safe_mode\" as the safe_mode argument was one of the positional arguments. When that argument is removed, the two arguments following it will no longer be at the correct position. It is recommended that you always use keywords when they are supported for this reason.","title":"Positional Arguments Deprecated"},{"location":"change_log/release-2.6/#shortened-extension-names-deprecated","text":"In previous versions of Python-Markdown, the built-in extensions received special status and did not require the full path to be provided. Additionally, third party extensions whose name started with \"mdx_\" received the same special treatment. This behavior is deprecated and will raise a DeprecationWarning in version 2.6 and an error in the next release. Ensure that you always use the full path to your extensions. For example, if you previously did the following: markdown.markdown(text, extensions=['extra']) You should change your code to the following: markdown.markdown(text, extensions=['markdown.extensions.extra']) The same applies to the command line: python -m markdown -x markdown.extensions.extra input.txt Similarly, if you have used a third party extension (for example mdx_math ), previously you might have called it like this: markdown.markdown(text, extensions=['math']) As the \"mdx\" prefix will no longer be appended, you will need to change your code as follows (assuming the file mdx_math.py is installed at the root of your PYTHONPATH): markdown.markdown(text, extensions=['mdx_math']) Extension authors will want to update their documentation to reflect the new behavior. See the documentation for a full explanation of the current behavior.","title":"&ldquo;Shortened&rdquo; Extension Names Deprecated"},{"location":"change_log/release-2.6/#extension-configuration-as-part-of-extension-name-deprecated","text":"The previously documented method of appending the extension configuration options as a string to the extension name is deprecated and will raise a DeprecationWarning in version 2.6 and an error in 2.7. The extension_configs keyword should be used instead. See the documentation for a full explanation of the current behavior.","title":"Extension Configuration as Part of Extension Name Deprecated"},{"location":"change_log/release-2.6/#headerid-extension-pending-deprecation","text":"The HeaderId Extension is pending deprecation and will raise a PendingDeprecationWarning in version 2.6. The extension will be deprecated in the next release and raise an error in the release after that. Use the Table of Contents Extension instead, which offers most of the features of the HeaderId Extension and more (support for meta data is missing). Extension authors who have been using the slugify and unique functions defined in the HeaderId Extension should note that those functions are now defined in the Table of Contents extension and should adjust their import statements accordingly ( from markdown.extensions.toc import slugify, unique ).","title":"HeaderId Extension Pending Deprecation"},{"location":"change_log/release-2.6/#the-configs-keyword-is-deprecated","text":"Positional arguments and the configs keyword on the markdown.extension.Extension class (and its subclasses) are deprecated. Each individual configuration option should be passed to the class as a keyword/value pair. For example. one might have previously initiated an extension subclass like this: ext = SomeExtension(configs={'somekey': 'somevalue'}) That code should be updated to pass in the options directly: ext = SomeExtension(somekey='somevalue') Extension authors will want to note that this affects the makeExtension function as well. Previously it was common for the function to be defined as follows: def makeExtension(configs=None): return SomeExtension(configs=configs) Extension authors will want to update their code to the following instead: def makeExtension(**kwargs): return SomeExtension(**kwargs) Failing to do so will result in a DeprecationWarning and will raise an error in the next release. See the Extension API documentation for more information. In the event that an markdown.extension.Extension subclass overrides the __init__ method and implements its own configuration handling, then the above may not apply. However, it is recommended that the subclass still calls the parent __init__ method to handle configuration options like so: class SomeExtension(markdown.extension.Extension): def __init__(**kwargs): # Do pre-config stuff here # Set config defaults self.config = { 'option1' : ['value1', 'description1'], 'option2' : ['value2', 'description2'] } # Set user defined configs super(MyExtension, self).__init__(**kwargs) # Do post-config stuff here Note the call to super to get the benefits of configuration handling from the parent class. See the documentation for more information.","title":"The configs Keyword is Deprecated"},{"location":"change_log/release-2.6/#whats-new-in-python-markdown-26","text":"","title":"What&rsquo;s New in Python-Markdown 2.6"},{"location":"change_log/release-2.6/#official-support-for-pypy","text":"Official support for PyPy has been added. While Python-Markdown has most likely worked on PyPy for some time, it is now officially supported and tested on PyPy.","title":"Official Support for PyPy"},{"location":"change_log/release-2.6/#yaml-style-meta-data","text":"The Meta-Data Extension now includes optional support for YAML style meta-data. By default, the YAML deliminators are recognized, however, the actual data is parsed as previously. This follows the syntax of MultiMarkdown , which inspired this extension. Alternatively, if the yaml option is set, then the data is parsed as YAML. As the yaml option was buggy, it was removed in 2.6.1. It is suggested that a preprocessor (like docdata ) or a third party extension be used if you want true YAML support. See Issue #390 for a full explanation.","title":"YAML Style Meta-Data"},{"location":"change_log/release-2.6/#table-of-contents-extension-refactored","text":"The Table of Contents Extension has been refactored and some new features have been added. See the documentation for a full explanation of each feature listed below: The extension now assigns the Table of Contents to the toc attribute of the Markdown class regardless of whether a \u201cmarker\u201d was found in the document. Third party frameworks no longer need to insert a \u201cmarker,\u201d run the document through Markdown, then extract the Table of Contents from the document. The Table of Contents Extension is now a \u201cregistered extension.\u201d Therefore, when the reset method of the Markdown class is called, the toc attribute on the Markdown class is cleared (set to an empty string). When the marker configuration option is set to an empty string, the parser completely skips the process of searching the document for markers. This should save parsing time when the Table of Contents Extension is being used only to assign ids to headers. A separator configuration option has been added allowing users to override the separator character used by the slugify function. A baselevel configuration option has been added allowing users to set the base level of headers in their documents (h1-h6). This allows the header levels to be automatically adjusted to fit within the hierarchy of an HTML template.","title":"Table of Contents Extension Refactored"},{"location":"change_log/release-2.6/#pygments-can-now-be-disabled","text":"The CodeHilite Extension has gained a new configuration option: use_pygments . The option is True by default, however, it allows one to turn off Pygments code highlighting (set to False ) while preserving the language detection features of the extension. Note that Pygments language guessing is not used as that would \u2018use Pygments\u2019. If a language is defined for a code block, it will be assigned to the <code> tag as a class in the manner suggested by the HTML5 spec (alternate output will not be entertained) and could potentially be used by a JavaScript library in the browser to highlight the code block.","title":"Pygments can now be disabled"},{"location":"change_log/release-2.6/#miscellaneous","text":"Test coverage has been improved including running flake8 . While those changes will not directly effect end users, the code is being better tested which will benefit everyone. Various bug fixes have been made. See the commit log for a complete history of the changes.","title":"Miscellaneous"},{"location":"extensions/","text":"Extensions \u00b6 Python Markdown offers a flexible extension mechanism, which makes it possible to change and/or extend the behavior of the parser without having to edit the actual source files. To use an extension, pass it to markdown with the extensions keyword. markdown.markdown(some_text, extensions=[MyExtClass(), 'myext', 'path.to.my.ext:MyExtClass']) See the Library Reference for more details. From the command line, specify an extension with the -x option. python -m markdown -x myext -x path.to.module:MyExtClass input.txt > output.html See the Command Line docs or use the --help option for more details. See Also If you would like to write your own extensions, see the Extension API for details. Officially Supported Extensions \u00b6 The extensions listed below are included with (at least) the most recent release and are officially supported by Python-Markdown. Any documentation is maintained here and all bug reports should be made to the project. If you have a typical install of Python-Markdown, these extensions are already available to you using the \u201cEntry Point\u201d name listed in the second column below. Extension Entry Point Dot Notation Extra extra markdown.extensions.extra Abbreviations abbr markdown.extensions.abbr Attribute Lists attr_list markdown.extensions.attr_list Definition Lists def_list markdown.extensions.def_list Fenced Code Blocks fenced_code markdown.extensions.fenced_code Footnotes footnotes markdown.extensions.footnotes Markdown in HTML md_in_html markdown.extensions.md_in_html Tables tables markdown.extensions.tables Admonition admonition markdown.extensions.admonition CodeHilite codehilite markdown.extensions.codehilite Legacy Attributes legacy_attrs markdown.extensions.legacy_attrs Legacy Emphasis legacy_em markdown.extensions.legacy_em Meta-Data meta markdown.extensions.meta New Line to Break nl2br markdown.extensions.nl2br Sane Lists sane_lists markdown.extensions.sane_lists SmartyPants smarty markdown.extensions.smarty Table of Contents toc markdown.extensions.toc WikiLinks wikilinks markdown.extensions.wikilinks Third Party Extensions \u00b6 Various individuals and/or organizations have developed extensions which they have made available to the public. A list of third party extensions is maintained on the wiki for your convenience. The Python-Markdown team offers no official support for these extensions. Please see the developer of each extension for support.","title":"Extensions"},{"location":"extensions/#extensions","text":"Python Markdown offers a flexible extension mechanism, which makes it possible to change and/or extend the behavior of the parser without having to edit the actual source files. To use an extension, pass it to markdown with the extensions keyword. markdown.markdown(some_text, extensions=[MyExtClass(), 'myext', 'path.to.my.ext:MyExtClass']) See the Library Reference for more details. From the command line, specify an extension with the -x option. python -m markdown -x myext -x path.to.module:MyExtClass input.txt > output.html See the Command Line docs or use the --help option for more details. See Also If you would like to write your own extensions, see the Extension API for details.","title":"Extensions"},{"location":"extensions/#officially-supported-extensions","text":"The extensions listed below are included with (at least) the most recent release and are officially supported by Python-Markdown. Any documentation is maintained here and all bug reports should be made to the project. If you have a typical install of Python-Markdown, these extensions are already available to you using the \u201cEntry Point\u201d name listed in the second column below. Extension Entry Point Dot Notation Extra extra markdown.extensions.extra Abbreviations abbr markdown.extensions.abbr Attribute Lists attr_list markdown.extensions.attr_list Definition Lists def_list markdown.extensions.def_list Fenced Code Blocks fenced_code markdown.extensions.fenced_code Footnotes footnotes markdown.extensions.footnotes Markdown in HTML md_in_html markdown.extensions.md_in_html Tables tables markdown.extensions.tables Admonition admonition markdown.extensions.admonition CodeHilite codehilite markdown.extensions.codehilite Legacy Attributes legacy_attrs markdown.extensions.legacy_attrs Legacy Emphasis legacy_em markdown.extensions.legacy_em Meta-Data meta markdown.extensions.meta New Line to Break nl2br markdown.extensions.nl2br Sane Lists sane_lists markdown.extensions.sane_lists SmartyPants smarty markdown.extensions.smarty Table of Contents toc markdown.extensions.toc WikiLinks wikilinks markdown.extensions.wikilinks","title":"Officially Supported Extensions"},{"location":"extensions/#third-party-extensions","text":"Various individuals and/or organizations have developed extensions which they have made available to the public. A list of third party extensions is maintained on the wiki for your convenience. The Python-Markdown team offers no official support for these extensions. Please see the developer of each extension for support.","title":"Third Party Extensions"},{"location":"extensions/abbreviations/","text":"Abbreviations \u00b6 Summary \u00b6 The Abbreviations extension adds the ability to define abbreviations. Specifically, any defined abbreviation is wrapped in an <abbr> tag. The Abbreviations extension is included in the standard Markdown library. Syntax \u00b6 Abbreviations are defined using the syntax established in PHP Markdown Extra . Thus, the following text (taken from the above referenced PHP documentation): The HTML specification is maintained by the W3C. *[HTML]: Hyper Text Markup Language *[W3C]: World Wide Web Consortium will be rendered as: <p>The <abbr title=\"Hyper Text Markup Language\">HTML</abbr> specification is maintained by the <abbr title=\"World Wide Web Consortium\">W3C</abbr>.</p> The backslash ( \\ ) is not permitted in an abbreviation. Any abbreviation definitions which include one or more backslashes between the square brackets will not be recognized as an abbreviation definition. Usage \u00b6 See Extensions for general extension usage. Use abbr as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown.markdown(some_text, extensions=['abbr'])","title":"Abbreviations"},{"location":"extensions/abbreviations/#abbreviations","text":"","title":"Abbreviations"},{"location":"extensions/abbreviations/#summary","text":"The Abbreviations extension adds the ability to define abbreviations. Specifically, any defined abbreviation is wrapped in an <abbr> tag. The Abbreviations extension is included in the standard Markdown library.","title":"Summary"},{"location":"extensions/abbreviations/#syntax","text":"Abbreviations are defined using the syntax established in PHP Markdown Extra . Thus, the following text (taken from the above referenced PHP documentation): The HTML specification is maintained by the W3C. *[HTML]: Hyper Text Markup Language *[W3C]: World Wide Web Consortium will be rendered as: <p>The <abbr title=\"Hyper Text Markup Language\">HTML</abbr> specification is maintained by the <abbr title=\"World Wide Web Consortium\">W3C</abbr>.</p> The backslash ( \\ ) is not permitted in an abbreviation. Any abbreviation definitions which include one or more backslashes between the square brackets will not be recognized as an abbreviation definition.","title":"Syntax"},{"location":"extensions/abbreviations/#usage","text":"See Extensions for general extension usage. Use abbr as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown.markdown(some_text, extensions=['abbr'])","title":"Usage"},{"location":"extensions/admonition/","text":"Admonition \u00b6 Summary \u00b6 The Admonition extension adds rST-style admonitions to Markdown documents. This extension is included in the standard Markdown library. Syntax \u00b6 Admonitions are created using the following syntax: !!! type \"optional explicit title within double quotes\" Any number of other indented markdown elements. This is the second paragraph. type will be used as the CSS class name and as default title. It must be a single word. So, for instance: !!! note You should note that the title will be automatically capitalized. will render: <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>You should note that the title will be automatically capitalized.</p> </div> Optionally, you can use custom titles. For instance: !!! danger \"Don't try this at home\" ... will render: <div class=\"admonition danger\"> <p class=\"admonition-title\">Don't try this at home</p> <p>...</p> </div> If you don\u2019t want a title, use a blank string \"\" : !!! important \"\" This is an admonition box without a title. results in: <div class=\"admonition important\"> <p>This is an admonition box without a title.</p> </div> You can also provide additional CSS class names separated by spaces. The first class should be the \u201ctype.\u201d For example: !!! danger highlight blink \"Don't try this at home\" ... will render: <div class=\"admonition danger highlight blink\"> <p class=\"admonition-title\">Don't try this at home</p> <p>...</p> </div> rST suggests the following \u201ctypes\u201d: attention , caution , danger , error , hint , important , note , tip , and warning ; however, you\u2019re free to use whatever you want. Styling \u00b6 There is no CSS included as part of this extension. Check out the default Sphinx theme for inspiration. Usage \u00b6 See Extensions for general extension usage. Use admonition as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown.markdown(some_text, extensions=['admonition'])","title":"Admonition"},{"location":"extensions/admonition/#admonition","text":"","title":"Admonition"},{"location":"extensions/admonition/#summary","text":"The Admonition extension adds rST-style admonitions to Markdown documents. This extension is included in the standard Markdown library.","title":"Summary"},{"location":"extensions/admonition/#syntax","text":"Admonitions are created using the following syntax: !!! type \"optional explicit title within double quotes\" Any number of other indented markdown elements. This is the second paragraph. type will be used as the CSS class name and as default title. It must be a single word. So, for instance: !!! note You should note that the title will be automatically capitalized. will render: <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>You should note that the title will be automatically capitalized.</p> </div> Optionally, you can use custom titles. For instance: !!! danger \"Don't try this at home\" ... will render: <div class=\"admonition danger\"> <p class=\"admonition-title\">Don't try this at home</p> <p>...</p> </div> If you don\u2019t want a title, use a blank string \"\" : !!! important \"\" This is an admonition box without a title. results in: <div class=\"admonition important\"> <p>This is an admonition box without a title.</p> </div> You can also provide additional CSS class names separated by spaces. The first class should be the \u201ctype.\u201d For example: !!! danger highlight blink \"Don't try this at home\" ... will render: <div class=\"admonition danger highlight blink\"> <p class=\"admonition-title\">Don't try this at home</p> <p>...</p> </div> rST suggests the following \u201ctypes\u201d: attention , caution , danger , error , hint , important , note , tip , and warning ; however, you\u2019re free to use whatever you want.","title":"Syntax"},{"location":"extensions/admonition/#styling","text":"There is no CSS included as part of this extension. Check out the default Sphinx theme for inspiration.","title":"Styling"},{"location":"extensions/admonition/#usage","text":"See Extensions for general extension usage. Use admonition as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown.markdown(some_text, extensions=['admonition'])","title":"Usage"},{"location":"extensions/api/","text":"Writing Extensions for Python-Markdown \u00b6 Python-Markdown includes an API for extension writers to plug their own custom functionality and syntax into the parser. An extension will patch into one or more stages of the parser: Preprocessors alter the source before it is passed to the parser. Block Processors work with blocks of text separated by blank lines. Tree Processors modify the constructed ElementTree Inline Processors are common tree processors for inline elements, such as *strong* . Postprocessors munge of the output of the parser just before it is returned. The parser loads text, applies the preprocessors, creates and builds an ElementTree object from the block processors and inline processors, renders the ElementTree object as Unicode text, and then then applies the postprocessors. There are classes and helpers provided to ease writing your extension. Each part of the API is discussed in its respective section below. Additionally, you can walk through the Tutorial on Writing Extensions ; look at some of the Available Extensions and their source code . As always, you may report bugs, ask for help, and discuss various other issues on the bug tracker . Phases of processing \u00b6 Preprocessors \u00b6 Preprocessors munge the source text before it is passed to the Markdown parser. This is an excellent place to clean up bad characters or to extract portions for later processing that the parser may otherwise choke on. Preprocessors inherit from markdown.preprocessors.Preprocessor and implement a run method, which takes a single parameter lines . This parameter is the entire source text stored as a list of Unicode strings, one per line. run should return its processed list of Unicode strings, one per line. Example \u00b6 This simple example removes any lines with \u2018NO RENDER\u2019 before processing: from markdown.preprocessors import Preprocessor import re class NoRender(Preprocessor): \"\"\" Skip any line with words 'NO RENDER' in it. \"\"\" def run(self, lines): new_lines = [] for line in lines: m = re.search(\"NO RENDER\", line) if not m: # any line without NO RENDER is passed through new_lines.append(line) return new_lines Usages \u00b6 Some preprocessors in the Markdown source tree include: Class Kind Description NormalizeWhiteSpace built-in Normalizes whitespace by expanding tabs, fixing \\r line endings, etc. HtmlBlockPreprocessor built-in Removes html blocks from the text and stores them for later processing ReferencePreprocessor built-in Removes reference definitions from text and stores for later processing MetaPreprocessor extension Strips and records meta data at top of documents FootnotesPreprocessor extension Removes footnote blocks from the text and stores them for later processing Block Processors \u00b6 A block processor parses blocks of text and adds new elements to the ElementTree . Blocks of text, separated from other text by blank lines, may have a different syntax and produce a differently structured tree than other Markdown. Block processors excel at code formatting, equation layouts, and tables. Block processors inherit from markdown.blockprocessors.BlockProcessor , are passed md.parser on initialization, and implement both the test and run methods: test(self, parent, block) takes two parameters: parent is the parent ElementTree element and block is a single, multi-line, Unicode string of the current block. test , often a regular expression match, returns a true value if the block processor\u2019s run method should be called to process starting at that block. run(self, parent, blocks) has the same parent parameter as test ; and blocks is the list of all remaining blocks in the document, starting with the block passed to test . run may return False (not None ) to signal failure, meaning that it did not process the blocks after all. On success, run is expected to pop one or more blocks from the front of blocks and attach new nodes to parent . Crafting block processors is more involved and flexible than the other processors, involving controlling recursive parsing of the block\u2019s contents and managing state across invocations. For example, a blank line is allowed in indented code, so the second invocation of the inline code processor appends to the element tree generated by the previous call. Other block processors may insert new text into the blocks list, signal to future calls of itself, and more. To make writing these complex beasts more tractable, three convenience functions have been provided by the BlockProcessor parent class: lastChild(parent) returns the last child of the given element or None if it has no children. detab(text) removes one level of indent (four spaces by default) from the front of each line of the given multi-line, text string, until a non-blank line is indented less. looseDetab(text, level) removes multiple levels of indent from the front of each line of text but does not affect lines indented less. Also, BlockProcessor provides the fields self.tab_length , the tab length (default 4), and self.parser , the current BlockParser instance. BlockParser \u00b6 BlockParser , not to be confused with BlockProcessor , is the class used by Markdown to cycle through all the registered block processors. You should never need to create your own instance; use self.parser instead. The BlockParser instance provides a stack of strings for its current state, which your processor can push with self.parser.set(state) , pop with self.parser.reset() , or check the the top state with self.parser.isstate(state) . Be sure your code pops the states it pushes. The BlockParser instance can also be called recursively, that is, to process blocks from within your block processor. There are three methods: parseDocument(lines) parses a list of lines, each a single-line Unicode string, returning a complete ElementTree . parseChunk(parent, text) parses a single, multi-line, possibly multi-block, Unicode string text and attaches the resulting tree to parent . parseBlocks(parent, blocks) takes a list of blocks , each a multi-line Unicode string without blank lines, and attaches the resulting tree to parent . For perspective, Markdown calls parseDocument which calls parseChunk which calls parseBlocks which calls your block processor, which, in turn, might call one of these routines. Example \u00b6 This example calls out important paragraphs by giving them a border. It looks for a fence line of exclamation points before and after and renders the fenced blocks into a new, styled div . If it does not find the ending fence line, it does nothing. Our code, like most block processors, is longer than other examples: def test_block_processor(): class BoxBlockProcessor(BlockProcessor): RE_FENCE_START = r'^ *!{3,} *\\n' # start line, e.g., ` !!!! ` RE_FENCE_END = r'\\n *!{3,}\\s*$' # last non-blank line, e.g, '!!!\\n \\n\\n' def test(self, parent, block): return re.match(self.RE_FENCE_START, block) def run(self, parent, blocks): original_block = blocks[0] blocks[0] = re.sub(self.RE_FENCE_START, '', blocks[0]) # Find block with ending fence for block_num, block in enumerate(blocks): if re.search(self.RE_FENCE_END, block): # remove fence blocks[block_num] = re.sub(self.RE_FENCE_END, '', block) # render fenced area inside a new div e = etree.SubElement(parent, 'div') e.set('style', 'display: inline-block; border: 1px solid red;') self.parser.parseBlocks(e, blocks[0:block_num + 1]) # remove used blocks for i in range(0, block_num + 1): blocks.pop(0) return True # or could have had no return statement # No closing marker! Restore and do nothing blocks[0] = original_block return False # equivalent to our test() routine returning False class BoxExtension(Extension): def extendMarkdown(self, md): md.parser.blockprocessors.register(BoxBlockProcessor(md.parser), 'box', 175) Start with this example input: A regular paragraph of text. !!!!! First paragraph of wrapped text. Second Paragraph of **wrapped** text. !!!!! Another regular paragraph of text. The fenced text adds one node with two children to the tree: div , with a style attribute. It renders as <div style=\"display: inline-block; border: 1px solid red;\">...</div> p with text First paragraph of wrapped text. p with text Second Paragraph of **wrapped** text . The conversion to a <strong> tag will happen when running the inline processors, which will happen after all of the block processors have completed. The example output might display as follows: A regular paragraph of text. First paragraph of wrapped text. Second Paragraph of wrapped text. Another regular paragraph of text. Usages \u00b6 Some block processors in the Markdown source tree include: Class Kind Description HashHeaderProcessor built-in Title hashes ( # ), which may split blocks HRProcessor built-in Horizontal lines, e.g., --- OListProcessor built-in Ordered lists; complex and using state Admonition extension Render each Admonition in a new div Tree processors \u00b6 Tree processors manipulate the tree created by block processors. They can even create an entirely new ElementTree object. This is an excellent place for creating summaries, adding collected references, or last minute adjustments. A tree processor must inherit from markdown.treeprocessors.Treeprocessor (note the capitalization). A tree processor must implement a run method which takes a single argument root . In most cases root would be an xml.etree.ElementTree.Element instance; however, in rare cases it could be some other type of ElementTree object. The run method may return None , in which case the (possibly modified) original root object is used, or it may return an entirely new Element object, which will replace the existing root object and all of its children. It is generally preferred to modify root in place and return None , which avoids creating multiple copies of the entire document tree in memory. For specifics on manipulating the ElementTree, see Working with the ElementTree below. Example \u00b6 A pseudo example: from markdown.treeprocessors import Treeprocessor class MyTreeprocessor(Treeprocessor): def run(self, root): root.text = 'modified content' # No return statement is same as `return None` Usages \u00b6 The core InlineProcessor class is a tree processor. It walks the tree, matches patterns, and splits and creates nodes on matches. Additional tree processors in the Markdown source tree include: Class Kind Description PrettifyTreeprocessor built-in Add line breaks to the html document TocTreeprocessor extension Builds a table of contents from the finished tree FootnoteTreeprocessor extension Create footnote div at end of document FootnotePostTreeprocessor extension Amend div created by FootnoteTreeprocessor with duplicates Inline Processors \u00b6 Inline processors, previously called inline patterns, are used to add formatting, such as **emphasis** , by replacing a matched pattern with a new element tree node. It is an excellent for adding new syntax for inline tags. Inline processor code is often quite short. Inline processors inherit from InlineProcessor , are initialized, and implement handleMatch : __init__(self, pattern, md=None) is the inherited constructor. You do not need to implement your own. pattern is the regular expression string that must match the code block in order for the handleMatch method to be called. md , an optional parameter, is a pointer to the instance of markdown.Markdown and is available as self.md on the InlineProcessor instance. handleMatch(self, m, data) must be implemented in all InlineProcessor subclasses. m is the regular expression match object found by the pattern passed to __init__ . data is a single, multi-line, Unicode string containing the entire block of text around the pattern. A block is text set apart by blank lines. Returns either (None, None, None) , indicating the provided match was rejected or (el, start, end) , if the match was successfully processed. On success, el is the element being added the tree, start and end are indexes in data that were \u201cconsumed\u201d by the pattern. The \u201cconsumed\u201d span will be replaced by a placeholder. The same inline processor may be called several times on the same block. Inline Processors can define the property ANCESTOR_EXCLUDES which is either a list or tuple of undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Convenience Classes \u00b6 Convenience subclasses of InlineProcessor are provide for common operations: SimpleTextInlineProcessor returns the text of group(1) of the match. SubstituteTagInlineProcessor is initialized as SubstituteTagInlineProcessor(pattern, tag) . It returns a new element tag whenever pattern is matched. SimpleTagInlineProcessor is initialized as SimpleTagInlineProcessor(pattern, tag) . It returns an element tag with a text field of group(2) of the match. Example \u00b6 This example changes --strike-- to <del>strike</del> . from markdown.inlinepatterns import InlineProcessor from markdown.extensions import Extension import xml.etree.ElementTree as etree class DelInlineProcessor(InlineProcessor): def handleMatch(self, m, data): el = etree.Element('del') el.text = m.group(1) return el, m.start(0), m.end(0) class DelExtension(Extension): def extendMarkdown(self, md): DEL_PATTERN = r'--(.*?)--' # like --del-- md.inlinePatterns.register(DelInlineProcessor(DEL_PATTERN, md), 'del', 175) Use this input example: First line of the block. This is --strike one--. This is --strike two--. End of the block. The example output might display as follows: First line of the block. This is strike one . This is strike two . End of the block. On the first call to handleMatch m will be the match for --strike one-- data will be the string: First line of the block.\\nThis is --strike one--.\\nThis is --strike two--.\\nEnd of the block. Because the match was successful, the region between the returned start and end are replaced with a placeholder token and the new element is added to the tree. On the second call to handleMatch m will be the match for --strike two-- data will be the string First line of the block.\\nThis is klzzwxh:0000.\\nThis is --strike two--.\\nEnd of the block. Note the placeholder token klzzwxh:0000 . This allows the regular expression to be run against the entire block, not just the the text contained in an individual element. The placeholders will later be swapped back out for the actual elements by the parser. Actually it would not be necessary to create the above inline processor. The fact is, that example is not very DRY (Don\u2019t Repeat Yourself). A pattern for **strong** text would be almost identical, with the exception that it would create a strong element. Therefore, Markdown provides a number of generic InlineProcessor subclasses that can provide some common functionality. For example, strike could be implemented with an instance of the SimpleTagInlineProcessor class as demonstrated below. Feel free to use or extend any of the InlineProcessor subclasses found at markdown.inlinepatterns . from markdown.inlinepatterns import SimpleTagInlineProcessor from markdown.extensions import Extension class DelExtension(Extension): def extendMarkdown(self, md): md.inlinePatterns.register(SimpleTagInlineProcessor(r'()--(.*?)--', 'del'), 'del', 175) Usages \u00b6 Here are some convenience functions and other examples: Class Kind Description AsteriskProcessor built-in Emphasis processor for handling strong and em matches inside asterisks AbbrInlineProcessor extension Apply tag to abbreviation registered by preprocessor WikiLinksInlineProcessor extension Link [[article names]] to wiki given in metadata FootnoteInlineProcessor extension Replaces footnote in text with link to footnote div at bottom Patterns \u00b6 In version 3.0, a new, more flexible inline processor was added, markdown.inlinepatterns.InlineProcessor . The original inline patterns, which inherit from markdown.inlinepatterns.Pattern or one of its children are still supported, though users are encouraged to migrate. Comparison with new InlineProcessor \u00b6 The new InlineProcessor provides two major enhancements to Patterns : Inline Processors no longer need to match the entire block, so regular expressions no longer need to start with r'^(.*?)' and end with r'(.*?)%' . This runs faster. The returned match object will only contain what is explicitly matched in the pattern, and extension pattern groups now start with m.group(1) . The handleMatch method now takes an additional input called data , which is the entire block under analysis, not just what is matched with the specified pattern. The method now returns the element and the indexes relative to data that the return element is replacing (usually m.start(0) and m.end(0) ). If the boundaries are returned as None , it is assumed that the match did not take place, and nothing will be altered in data . This allows handling of more complex constructs than regular expressions can handle, e.g., matching nested brackets, and explicit control of the span \u201cconsumed\u201d by the processor. Inline Patterns \u00b6 Inline Patterns can implement inline HTML element syntax for Markdown such as *emphasis* or [links](http://example.com) . Pattern objects should be instances of classes that inherit from markdown.inlinepatterns.Pattern or one of its children. Each pattern object uses a single regular expression and must have the following methods: getCompiledRegExp() : Returns a compiled regular expression. handleMatch(m) : Accepts a match object and returns an ElementTree element of a plain Unicode string. Inline Patterns can define the property ANCESTOR_EXCLUDES with is either a list or tuple of undesirable ancestors. The pattern will be skipped if it would cause the content to be a descendant of one of the listed tag names. Note that any regular expression returned by getCompiledRegExp must capture the whole block. Therefore, they should all start with r'^(.*?)' and end with r'(.*?)!' . When using the default getCompiledRegExp() method provided in the Pattern you can pass in a regular expression without that and getCompiledRegExp will wrap your expression for you and set the re.DOTALL and re.UNICODE flags. This means that the first group of your match will be m.group(2) as m.group(1) will match everything before the pattern. For an example, consider this simplified emphasis pattern: from markdown.inlinepatterns import Pattern import xml.etree.ElementTree as etree class EmphasisPattern(Pattern): def handleMatch(self, m): el = etree.Element('em') el.text = m.group(2) return el As discussed in Integrating Your Code Into Markdown , an instance of this class will need to be provided to Markdown. That instance would be created like so: # an oversimplified regex MYPATTERN = r'\\*([^*]+)\\*' # pass in pattern and create instance emphasis = EmphasisPattern(MYPATTERN) Postprocessors \u00b6 Postprocessors munge the document after the ElementTree has been serialized into a string. Postprocessors should be used to work with the text just before output. Usually, they are used add back sections that were extracted in a preprocessor, fix up outgoing encodings, or wrap the whole document. Postprocessors inherit from markdown.postprocessors.Postprocessor and implement a run method which takes a single parameter text , the entire HTML document as a single Unicode string. run should return a single Unicode string ready for output. Note that preprocessors use a list of lines while postprocessors use a single multi-line string. Example \u00b6 Here is a simple example that changes the output to one big page showing the raw html. from markdown.postprocessors import Postprocessor import re class ShowActualHtmlPostprocesor(Postprocessor): \"\"\" Wrap entire output in <pre> tags as a diagnostic. \"\"\" def run(self, text): return '<pre>\\n' + re.sub('<', '&lt;', text) + '</pre>\\n' Usages \u00b6 Some postprocessors in the Markdown source tree include: Class Kind Description raw_html built-in Restore raw html from htmlStash , stored by HTMLBlockPreprocessor , and code highlighters amp_substitute built-in Convert ampersand substitutes to & ; used in links unescape built-in Convert some escaped characters back from integers; used in links FootnotePostProcessor extension Replace footnote placeholders with html entities; as set by other stages Working with the ElementTree \u00b6 As mentioned, the Markdown parser converts a source document to an ElementTree object before serializing that back to Unicode text. Markdown has provided some helpers to ease that manipulation within the context of the Markdown module. First, import the ElementTree module: import xml.etree.ElementTree as etree Sometimes you may want text inserted into an element to be parsed by [Inline Patterns][]. In such a situation, simply insert the text as you normally would and the text will be automatically run through the Inline Patterns. However, if you do not want some text to be parsed by Inline Patterns, then insert the text as an AtomicString . from markdown.util import AtomicString some_element.text = AtomicString(some_text) Here\u2019s a basic example which creates an HTML table (note that the contents of the second cell ( td2 ) will be run through Inline Patterns latter): table = etree.Element(\"table\") table.set(\"cellpadding\", \"2\") # Set cellpadding to 2 tr = etree.SubElement(table, \"tr\") # Add child tr to table td1 = etree.SubElement(tr, \"td\") # Add child td1 to tr td1.text = markdown.util.AtomicString(\"Cell content\") # Add plain text content td2 = etree.SubElement(tr, \"td\") # Add second td to tr td2.text = \"*text* with **inline** formatting.\" # Add markup text table.tail = \"Text after table\" # Add text after table You can also manipulate an existing tree. Consider the following example which adds a class attribute to <a> elements: def set_link_class(self, element): for child in element: if child.tag == \"a\": child.set(\"class\", \"myclass\") #set the class attribute set_link_class(child) # run recursively on children For more information about working with ElementTree see the ElementTree Documentation . Working with Raw HTML \u00b6 Occasionally an extension may need to call out to a third party library which returns a pre-made string of raw HTML that needs to be inserted into the document unmodified. Raw strings can be stashed for later retrieval using an htmlStash instance, rather than converting them into ElementTree objects. A raw string (which may or may not be raw HTML) passed to self.md.htmlStash.store() will be saved to the stash and a placeholder string will be returned which should be inserted into the tree instead. After the tree is serialized, a postprocessor will replace the placeholder with the raw string. This prevents subsequent processing steps from modifying the HTML data. For example, html = \"<p>This is some <em>raw</em> HTML data</p>\" el = etree.Element(\"div\") el.text = self.md.htmlStash.store(html) For the global htmlStash instance to be available from a processor, the markdown.Markdown instance must be passed to the processor from extendMarkdown and will be available as self.md.htmlStash . Integrating Your Code Into Markdown \u00b6 Once you have the various pieces of your extension built, you need to tell Markdown about them and ensure that they are run in the proper sequence. Markdown accepts an Extension instance for each extension. Therefore, you will need to define a class that extends markdown.extensions.Extension and over-rides the extendMarkdown method. Within this class you will manage configuration options for your extension and attach the various processors and patterns to the Markdown instance. It is important to note that the order of the various processors and patterns matters. For example, if we replace http://... links with <a> elements, and then try to deal with inline HTML, we will end up with a mess. Therefore, the various types of processors and patterns are stored within an instance of the markdown.Markdown class in a Registry . Your Extension class will need to manipulate those registries appropriately. You may register instances of your processors and patterns with an appropriate priority, deregister built-in instances, or replace a built-in instance with your own. extendMarkdown \u00b6 The extendMarkdown method of a markdown.extensions.Extension class accepts one argument: md : A pointer to the instance of the markdown.Markdown class. You should use this to access the Registries of processors and patterns. They are found under the following attributes: md.preprocessors md.inlinePatterns md.parser.blockprocessors md.treeprocessors md.postprocessors Some other things you may want to access on the markdown.Markdown instance are: md.htmlStash md.output_formats md.set_output_format() md.output_format md.serializer md.registerExtension() md.tab_length md.block_level_elements md.isBlockLevel() Warning With access to the above items, theoretically you have the option to change anything through various monkey_patching techniques. However, you should be aware that the various undocumented parts of Markdown may change without notice and your monkey_patches may break with a new release. Therefore, what you really should be doing is inserting processors and patterns into the Markdown pipeline. Consider yourself warned! A simple example: from markdown.extensions import Extension class MyExtension(Extension): def extendMarkdown(self, md): # Register instance of 'mypattern' with a priority of 175 md.inlinePatterns.register(MyPattern(md), 'mypattern', 175) registerExtension \u00b6 Some extensions may need to have their state reset between multiple runs of the markdown.Markdown class. For example, consider the following use of the Footnotes extension: md = markdown.Markdown(extensions=['footnotes']) html1 = md.convert(text_with_footnote) md.reset() html2 = md.convert(text_without_footnote) Without calling reset , the footnote definitions from the first document will be inserted into the second document as they are still stored within the class instance. Therefore the Extension class needs to define a reset method that will reset the state of the extension (i.e.: self.footnotes = {} ). However, as many extensions do not have a need for reset , reset is only called on extensions that are registered. To register an extension, call md.registerExtension from within your extendMarkdown method: def extendMarkdown(self, md): md.registerExtension(self) # insert processors and patterns here Then, each time reset is called on the markdown.Markdown instance, the reset method of each registered extension will be called as well. You should also note that reset will be called on each registered extension after it is initialized the first time. Keep that in mind when over-riding the extension\u2019s reset method. Configuration Settings \u00b6 If an extension uses any parameters that the user may want to change, those parameters should be stored in self.config of your markdown.extensions.Extension class in the following format: class MyExtension(markdown.extensions.Extension): def __init__(self, **kwargs): self.config = { 'option1' : ['value1', 'description1'], 'option2' : ['value2', 'description2'] } super(MyExtension, self).__init__(**kwargs) When implemented this way the configuration parameters can be over-ridden at run time (thus the call to super ). For example: markdown.Markdown(extensions=[MyExtension(option1='other value')]) Note that if a keyword is passed in that is not already defined in self.config , then a KeyError is raised. The markdown.extensions.Extension class and its subclasses have the following methods available to assist in working with configuration settings: getConfig(key [, default]) : Returns the stored value for the given key or default if the key does not exist. If not set, default returns an empty string. getConfigs() : Returns a dict of all key/value pairs. getConfigInfo() : Returns all configuration descriptions as a list of tuples. setConfig(key, value) : Sets a configuration setting for key with the given value . If key is unknown, a KeyError is raised. If the previous value of key was a Boolean value, then value is converted to a Boolean value. If the previous value of key is None , then value is converted to a Boolean value except when it is None . No conversion takes place when the previous value of key is a string. setConfigs(items) : Sets multiple configuration settings given a dict of key/value pairs. Naming an Extension \u00b6 As noted in the library reference an instance of an extension can be passed directly to markdown.Markdown . In fact, this is the preferred way to use third-party extensions. For example: import markdown from path.to.module import MyExtension md = markdown.Markdown(extensions=[MyExtension(option='value')]) However, Markdown also accepts \u201cnamed\u201d third party extensions for those occasions when it is impractical to import an extension directly (from the command line or from within templates). A \u201cname\u201d can either be a registered entry point or a string using Python\u2019s dot notation . Entry Point \u00b6 Entry points are defined in a Python package\u2019s setup.py script. The script must use setuptools to support entry points. Python-Markdown extensions must be assigned to the markdown.extensions group. An entry point definition might look like this: from setuptools import setup setup( # ... entry_points={ 'markdown.extensions': ['myextension = path.to.module:MyExtension'] } ) After a user installs your extension using the above script, they could then call the extension using the myextension string name like this: markdown.markdown(text, extensions=['myextension']) Note that if two or more entry points within the same group are assigned the same name, Python-Markdown will only ever use the first one found and ignore all others. Therefore, be sure to give your extension a unique name. For more information on writing setup.py scripts, see the Python documentation on Packaging and Distributing Projects . Dot Notation \u00b6 If an extension does not have a registered entry point, Python\u2019s dot notation may be used instead. The extension must be installed as a Python module on your PYTHONPATH. Generally, a class should be specified in the name. The class must be at the end of the name and be separated by a colon from the module. Therefore, if you were to import the class like this: from path.to.module import MyExtension Then the extension can be loaded as follows: markdown.markdown(text, extensions=['path.to.module:MyExtension']) You do not need to do anything special to support this feature. As long as your extension class is able to be imported, a user can include it with the above syntax. The above two methods are especially useful if you need to implement a large number of extensions with more than one residing in a module. However, if you do not want to require that your users include the class name in their string, you must define only one extension per module and that module must contain a module-level function called makeExtension that accepts **kwargs and returns an extension instance. For example: class MyExtension(markdown.extensions.Extension) # Define extension here... def makeExtension(**kwargs): return MyExtension(**kwargs) When markdown.Markdown is passed the \u201cname\u201d of your extension as a dot notation string that does not include a class (for example path.to.module ), it will import the module and call the makeExtension function to initiate your extension. Registries \u00b6 The markdown.util.Registry class is a priority sorted registry which Markdown uses internally to determine the processing order of its various processors and patterns. A Registry instance provides two public methods to alter the data of the registry: register and deregister . Use register to add items and deregister to remove items. See each method for specifics. When registering an item, a \u201cname\u201d and a \u201cpriority\u201d must be provided. All items are automatically sorted by the value of the \u201cpriority\u201d parameter such that the item with the highest value will be processed first. The \u201cname\u201d is used to remove ( deregister ) and get items. A Registry instance is like a list (which maintains order) when reading data. You may iterate over the items, get an item and get a count (length) of all items. You may also check that the registry contains an item. When getting an item you may use either the index of the item or the string-based \u201cname\u201d. For example: registry = Registry() registry.register(SomeItem(), 'itemname', 20) # Get the item by index item = registry[0] # Get the item by name item = registry['itemname'] When checking that the registry contains an item, you may use either the string-based \u201cname\u201d, or a reference to the actual item. For example: someitem = SomeItem() registry.register(someitem, 'itemname', 20) # Contains the name assert 'itemname' in registry # Contains the item instance assert someitem in registry markdown.util.Registry has the following methods: Registry.register(self, item, name, priority) \u00b6 Add an item to the registry with the given name and priority. Arguments: item : The item being registered. name : A string used to reference the item. priority : An integer or float used to sort against all items. If an item is registered with a \u201cname\u201d which already exists, the existing item is replaced with the new item. Be careful as the old item is lost with no way to recover it. The new item will be sorted according to its priority and will not retain the position of the old item. Registry.deregister(self, name, strict=True) \u00b6 Remove an item from the registry. Set strict=False to fail silently. Registry.get_index_for_name(self, name) \u00b6 Return the index of the given name .","title":"Extension API"},{"location":"extensions/api/#writing-extensions-for-python-markdown","text":"Python-Markdown includes an API for extension writers to plug their own custom functionality and syntax into the parser. An extension will patch into one or more stages of the parser: Preprocessors alter the source before it is passed to the parser. Block Processors work with blocks of text separated by blank lines. Tree Processors modify the constructed ElementTree Inline Processors are common tree processors for inline elements, such as *strong* . Postprocessors munge of the output of the parser just before it is returned. The parser loads text, applies the preprocessors, creates and builds an ElementTree object from the block processors and inline processors, renders the ElementTree object as Unicode text, and then then applies the postprocessors. There are classes and helpers provided to ease writing your extension. Each part of the API is discussed in its respective section below. Additionally, you can walk through the Tutorial on Writing Extensions ; look at some of the Available Extensions and their source code . As always, you may report bugs, ask for help, and discuss various other issues on the bug tracker .","title":"Writing Extensions for Python-Markdown"},{"location":"extensions/api/#stages","text":"","title":"Phases of processing"},{"location":"extensions/api/#preprocessors","text":"Preprocessors munge the source text before it is passed to the Markdown parser. This is an excellent place to clean up bad characters or to extract portions for later processing that the parser may otherwise choke on. Preprocessors inherit from markdown.preprocessors.Preprocessor and implement a run method, which takes a single parameter lines . This parameter is the entire source text stored as a list of Unicode strings, one per line. run should return its processed list of Unicode strings, one per line.","title":"Preprocessors"},{"location":"extensions/api/#example","text":"This simple example removes any lines with \u2018NO RENDER\u2019 before processing: from markdown.preprocessors import Preprocessor import re class NoRender(Preprocessor): \"\"\" Skip any line with words 'NO RENDER' in it. \"\"\" def run(self, lines): new_lines = [] for line in lines: m = re.search(\"NO RENDER\", line) if not m: # any line without NO RENDER is passed through new_lines.append(line) return new_lines","title":"Example"},{"location":"extensions/api/#usages","text":"Some preprocessors in the Markdown source tree include: Class Kind Description NormalizeWhiteSpace built-in Normalizes whitespace by expanding tabs, fixing \\r line endings, etc. HtmlBlockPreprocessor built-in Removes html blocks from the text and stores them for later processing ReferencePreprocessor built-in Removes reference definitions from text and stores for later processing MetaPreprocessor extension Strips and records meta data at top of documents FootnotesPreprocessor extension Removes footnote blocks from the text and stores them for later processing","title":"Usages"},{"location":"extensions/api/#blockprocessors","text":"A block processor parses blocks of text and adds new elements to the ElementTree . Blocks of text, separated from other text by blank lines, may have a different syntax and produce a differently structured tree than other Markdown. Block processors excel at code formatting, equation layouts, and tables. Block processors inherit from markdown.blockprocessors.BlockProcessor , are passed md.parser on initialization, and implement both the test and run methods: test(self, parent, block) takes two parameters: parent is the parent ElementTree element and block is a single, multi-line, Unicode string of the current block. test , often a regular expression match, returns a true value if the block processor\u2019s run method should be called to process starting at that block. run(self, parent, blocks) has the same parent parameter as test ; and blocks is the list of all remaining blocks in the document, starting with the block passed to test . run may return False (not None ) to signal failure, meaning that it did not process the blocks after all. On success, run is expected to pop one or more blocks from the front of blocks and attach new nodes to parent . Crafting block processors is more involved and flexible than the other processors, involving controlling recursive parsing of the block\u2019s contents and managing state across invocations. For example, a blank line is allowed in indented code, so the second invocation of the inline code processor appends to the element tree generated by the previous call. Other block processors may insert new text into the blocks list, signal to future calls of itself, and more. To make writing these complex beasts more tractable, three convenience functions have been provided by the BlockProcessor parent class: lastChild(parent) returns the last child of the given element or None if it has no children. detab(text) removes one level of indent (four spaces by default) from the front of each line of the given multi-line, text string, until a non-blank line is indented less. looseDetab(text, level) removes multiple levels of indent from the front of each line of text but does not affect lines indented less. Also, BlockProcessor provides the fields self.tab_length , the tab length (default 4), and self.parser , the current BlockParser instance.","title":"Block Processors"},{"location":"extensions/api/#blockparser","text":"BlockParser , not to be confused with BlockProcessor , is the class used by Markdown to cycle through all the registered block processors. You should never need to create your own instance; use self.parser instead. The BlockParser instance provides a stack of strings for its current state, which your processor can push with self.parser.set(state) , pop with self.parser.reset() , or check the the top state with self.parser.isstate(state) . Be sure your code pops the states it pushes. The BlockParser instance can also be called recursively, that is, to process blocks from within your block processor. There are three methods: parseDocument(lines) parses a list of lines, each a single-line Unicode string, returning a complete ElementTree . parseChunk(parent, text) parses a single, multi-line, possibly multi-block, Unicode string text and attaches the resulting tree to parent . parseBlocks(parent, blocks) takes a list of blocks , each a multi-line Unicode string without blank lines, and attaches the resulting tree to parent . For perspective, Markdown calls parseDocument which calls parseChunk which calls parseBlocks which calls your block processor, which, in turn, might call one of these routines.","title":"BlockParser"},{"location":"extensions/api/#example_1","text":"This example calls out important paragraphs by giving them a border. It looks for a fence line of exclamation points before and after and renders the fenced blocks into a new, styled div . If it does not find the ending fence line, it does nothing. Our code, like most block processors, is longer than other examples: def test_block_processor(): class BoxBlockProcessor(BlockProcessor): RE_FENCE_START = r'^ *!{3,} *\\n' # start line, e.g., ` !!!! ` RE_FENCE_END = r'\\n *!{3,}\\s*$' # last non-blank line, e.g, '!!!\\n \\n\\n' def test(self, parent, block): return re.match(self.RE_FENCE_START, block) def run(self, parent, blocks): original_block = blocks[0] blocks[0] = re.sub(self.RE_FENCE_START, '', blocks[0]) # Find block with ending fence for block_num, block in enumerate(blocks): if re.search(self.RE_FENCE_END, block): # remove fence blocks[block_num] = re.sub(self.RE_FENCE_END, '', block) # render fenced area inside a new div e = etree.SubElement(parent, 'div') e.set('style', 'display: inline-block; border: 1px solid red;') self.parser.parseBlocks(e, blocks[0:block_num + 1]) # remove used blocks for i in range(0, block_num + 1): blocks.pop(0) return True # or could have had no return statement # No closing marker! Restore and do nothing blocks[0] = original_block return False # equivalent to our test() routine returning False class BoxExtension(Extension): def extendMarkdown(self, md): md.parser.blockprocessors.register(BoxBlockProcessor(md.parser), 'box', 175) Start with this example input: A regular paragraph of text. !!!!! First paragraph of wrapped text. Second Paragraph of **wrapped** text. !!!!! Another regular paragraph of text. The fenced text adds one node with two children to the tree: div , with a style attribute. It renders as <div style=\"display: inline-block; border: 1px solid red;\">...</div> p with text First paragraph of wrapped text. p with text Second Paragraph of **wrapped** text . The conversion to a <strong> tag will happen when running the inline processors, which will happen after all of the block processors have completed. The example output might display as follows: A regular paragraph of text. First paragraph of wrapped text. Second Paragraph of wrapped text. Another regular paragraph of text.","title":"Example"},{"location":"extensions/api/#usages_1","text":"Some block processors in the Markdown source tree include: Class Kind Description HashHeaderProcessor built-in Title hashes ( # ), which may split blocks HRProcessor built-in Horizontal lines, e.g., --- OListProcessor built-in Ordered lists; complex and using state Admonition extension Render each Admonition in a new div","title":"Usages"},{"location":"extensions/api/#treeprocessors","text":"Tree processors manipulate the tree created by block processors. They can even create an entirely new ElementTree object. This is an excellent place for creating summaries, adding collected references, or last minute adjustments. A tree processor must inherit from markdown.treeprocessors.Treeprocessor (note the capitalization). A tree processor must implement a run method which takes a single argument root . In most cases root would be an xml.etree.ElementTree.Element instance; however, in rare cases it could be some other type of ElementTree object. The run method may return None , in which case the (possibly modified) original root object is used, or it may return an entirely new Element object, which will replace the existing root object and all of its children. It is generally preferred to modify root in place and return None , which avoids creating multiple copies of the entire document tree in memory. For specifics on manipulating the ElementTree, see Working with the ElementTree below.","title":"Tree processors"},{"location":"extensions/api/#example_2","text":"A pseudo example: from markdown.treeprocessors import Treeprocessor class MyTreeprocessor(Treeprocessor): def run(self, root): root.text = 'modified content' # No return statement is same as `return None`","title":"Example"},{"location":"extensions/api/#usages_2","text":"The core InlineProcessor class is a tree processor. It walks the tree, matches patterns, and splits and creates nodes on matches. Additional tree processors in the Markdown source tree include: Class Kind Description PrettifyTreeprocessor built-in Add line breaks to the html document TocTreeprocessor extension Builds a table of contents from the finished tree FootnoteTreeprocessor extension Create footnote div at end of document FootnotePostTreeprocessor extension Amend div created by FootnoteTreeprocessor with duplicates","title":"Usages"},{"location":"extensions/api/#inlineprocessors","text":"Inline processors, previously called inline patterns, are used to add formatting, such as **emphasis** , by replacing a matched pattern with a new element tree node. It is an excellent for adding new syntax for inline tags. Inline processor code is often quite short. Inline processors inherit from InlineProcessor , are initialized, and implement handleMatch : __init__(self, pattern, md=None) is the inherited constructor. You do not need to implement your own. pattern is the regular expression string that must match the code block in order for the handleMatch method to be called. md , an optional parameter, is a pointer to the instance of markdown.Markdown and is available as self.md on the InlineProcessor instance. handleMatch(self, m, data) must be implemented in all InlineProcessor subclasses. m is the regular expression match object found by the pattern passed to __init__ . data is a single, multi-line, Unicode string containing the entire block of text around the pattern. A block is text set apart by blank lines. Returns either (None, None, None) , indicating the provided match was rejected or (el, start, end) , if the match was successfully processed. On success, el is the element being added the tree, start and end are indexes in data that were \u201cconsumed\u201d by the pattern. The \u201cconsumed\u201d span will be replaced by a placeholder. The same inline processor may be called several times on the same block. Inline Processors can define the property ANCESTOR_EXCLUDES which is either a list or tuple of undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names.","title":"Inline Processors"},{"location":"extensions/api/#convenience-classes","text":"Convenience subclasses of InlineProcessor are provide for common operations: SimpleTextInlineProcessor returns the text of group(1) of the match. SubstituteTagInlineProcessor is initialized as SubstituteTagInlineProcessor(pattern, tag) . It returns a new element tag whenever pattern is matched. SimpleTagInlineProcessor is initialized as SimpleTagInlineProcessor(pattern, tag) . It returns an element tag with a text field of group(2) of the match.","title":"Convenience Classes"},{"location":"extensions/api/#example_3","text":"This example changes --strike-- to <del>strike</del> . from markdown.inlinepatterns import InlineProcessor from markdown.extensions import Extension import xml.etree.ElementTree as etree class DelInlineProcessor(InlineProcessor): def handleMatch(self, m, data): el = etree.Element('del') el.text = m.group(1) return el, m.start(0), m.end(0) class DelExtension(Extension): def extendMarkdown(self, md): DEL_PATTERN = r'--(.*?)--' # like --del-- md.inlinePatterns.register(DelInlineProcessor(DEL_PATTERN, md), 'del', 175) Use this input example: First line of the block. This is --strike one--. This is --strike two--. End of the block. The example output might display as follows: First line of the block. This is strike one . This is strike two . End of the block. On the first call to handleMatch m will be the match for --strike one-- data will be the string: First line of the block.\\nThis is --strike one--.\\nThis is --strike two--.\\nEnd of the block. Because the match was successful, the region between the returned start and end are replaced with a placeholder token and the new element is added to the tree. On the second call to handleMatch m will be the match for --strike two-- data will be the string First line of the block.\\nThis is klzzwxh:0000.\\nThis is --strike two--.\\nEnd of the block. Note the placeholder token klzzwxh:0000 . This allows the regular expression to be run against the entire block, not just the the text contained in an individual element. The placeholders will later be swapped back out for the actual elements by the parser. Actually it would not be necessary to create the above inline processor. The fact is, that example is not very DRY (Don\u2019t Repeat Yourself). A pattern for **strong** text would be almost identical, with the exception that it would create a strong element. Therefore, Markdown provides a number of generic InlineProcessor subclasses that can provide some common functionality. For example, strike could be implemented with an instance of the SimpleTagInlineProcessor class as demonstrated below. Feel free to use or extend any of the InlineProcessor subclasses found at markdown.inlinepatterns . from markdown.inlinepatterns import SimpleTagInlineProcessor from markdown.extensions import Extension class DelExtension(Extension): def extendMarkdown(self, md): md.inlinePatterns.register(SimpleTagInlineProcessor(r'()--(.*?)--', 'del'), 'del', 175)","title":"Example"},{"location":"extensions/api/#usages_3","text":"Here are some convenience functions and other examples: Class Kind Description AsteriskProcessor built-in Emphasis processor for handling strong and em matches inside asterisks AbbrInlineProcessor extension Apply tag to abbreviation registered by preprocessor WikiLinksInlineProcessor extension Link [[article names]] to wiki given in metadata FootnoteInlineProcessor extension Replaces footnote in text with link to footnote div at bottom","title":"Usages"},{"location":"extensions/api/#patterns","text":"In version 3.0, a new, more flexible inline processor was added, markdown.inlinepatterns.InlineProcessor . The original inline patterns, which inherit from markdown.inlinepatterns.Pattern or one of its children are still supported, though users are encouraged to migrate.","title":"Patterns"},{"location":"extensions/api/#comparison-with-new-inlineprocessor","text":"The new InlineProcessor provides two major enhancements to Patterns : Inline Processors no longer need to match the entire block, so regular expressions no longer need to start with r'^(.*?)' and end with r'(.*?)%' . This runs faster. The returned match object will only contain what is explicitly matched in the pattern, and extension pattern groups now start with m.group(1) . The handleMatch method now takes an additional input called data , which is the entire block under analysis, not just what is matched with the specified pattern. The method now returns the element and the indexes relative to data that the return element is replacing (usually m.start(0) and m.end(0) ). If the boundaries are returned as None , it is assumed that the match did not take place, and nothing will be altered in data . This allows handling of more complex constructs than regular expressions can handle, e.g., matching nested brackets, and explicit control of the span \u201cconsumed\u201d by the processor.","title":"Comparison with new InlineProcessor"},{"location":"extensions/api/#inline-patterns","text":"Inline Patterns can implement inline HTML element syntax for Markdown such as *emphasis* or [links](http://example.com) . Pattern objects should be instances of classes that inherit from markdown.inlinepatterns.Pattern or one of its children. Each pattern object uses a single regular expression and must have the following methods: getCompiledRegExp() : Returns a compiled regular expression. handleMatch(m) : Accepts a match object and returns an ElementTree element of a plain Unicode string. Inline Patterns can define the property ANCESTOR_EXCLUDES with is either a list or tuple of undesirable ancestors. The pattern will be skipped if it would cause the content to be a descendant of one of the listed tag names. Note that any regular expression returned by getCompiledRegExp must capture the whole block. Therefore, they should all start with r'^(.*?)' and end with r'(.*?)!' . When using the default getCompiledRegExp() method provided in the Pattern you can pass in a regular expression without that and getCompiledRegExp will wrap your expression for you and set the re.DOTALL and re.UNICODE flags. This means that the first group of your match will be m.group(2) as m.group(1) will match everything before the pattern. For an example, consider this simplified emphasis pattern: from markdown.inlinepatterns import Pattern import xml.etree.ElementTree as etree class EmphasisPattern(Pattern): def handleMatch(self, m): el = etree.Element('em') el.text = m.group(2) return el As discussed in Integrating Your Code Into Markdown , an instance of this class will need to be provided to Markdown. That instance would be created like so: # an oversimplified regex MYPATTERN = r'\\*([^*]+)\\*' # pass in pattern and create instance emphasis = EmphasisPattern(MYPATTERN)","title":"Inline Patterns"},{"location":"extensions/api/#postprocessors","text":"Postprocessors munge the document after the ElementTree has been serialized into a string. Postprocessors should be used to work with the text just before output. Usually, they are used add back sections that were extracted in a preprocessor, fix up outgoing encodings, or wrap the whole document. Postprocessors inherit from markdown.postprocessors.Postprocessor and implement a run method which takes a single parameter text , the entire HTML document as a single Unicode string. run should return a single Unicode string ready for output. Note that preprocessors use a list of lines while postprocessors use a single multi-line string.","title":"Postprocessors"},{"location":"extensions/api/#example_4","text":"Here is a simple example that changes the output to one big page showing the raw html. from markdown.postprocessors import Postprocessor import re class ShowActualHtmlPostprocesor(Postprocessor): \"\"\" Wrap entire output in <pre> tags as a diagnostic. \"\"\" def run(self, text): return '<pre>\\n' + re.sub('<', '&lt;', text) + '</pre>\\n'","title":"Example"},{"location":"extensions/api/#usages_4","text":"Some postprocessors in the Markdown source tree include: Class Kind Description raw_html built-in Restore raw html from htmlStash , stored by HTMLBlockPreprocessor , and code highlighters amp_substitute built-in Convert ampersand substitutes to & ; used in links unescape built-in Convert some escaped characters back from integers; used in links FootnotePostProcessor extension Replace footnote placeholders with html entities; as set by other stages","title":"Usages"},{"location":"extensions/api/#working_with_et","text":"As mentioned, the Markdown parser converts a source document to an ElementTree object before serializing that back to Unicode text. Markdown has provided some helpers to ease that manipulation within the context of the Markdown module. First, import the ElementTree module: import xml.etree.ElementTree as etree Sometimes you may want text inserted into an element to be parsed by [Inline Patterns][]. In such a situation, simply insert the text as you normally would and the text will be automatically run through the Inline Patterns. However, if you do not want some text to be parsed by Inline Patterns, then insert the text as an AtomicString . from markdown.util import AtomicString some_element.text = AtomicString(some_text) Here\u2019s a basic example which creates an HTML table (note that the contents of the second cell ( td2 ) will be run through Inline Patterns latter): table = etree.Element(\"table\") table.set(\"cellpadding\", \"2\") # Set cellpadding to 2 tr = etree.SubElement(table, \"tr\") # Add child tr to table td1 = etree.SubElement(tr, \"td\") # Add child td1 to tr td1.text = markdown.util.AtomicString(\"Cell content\") # Add plain text content td2 = etree.SubElement(tr, \"td\") # Add second td to tr td2.text = \"*text* with **inline** formatting.\" # Add markup text table.tail = \"Text after table\" # Add text after table You can also manipulate an existing tree. Consider the following example which adds a class attribute to <a> elements: def set_link_class(self, element): for child in element: if child.tag == \"a\": child.set(\"class\", \"myclass\") #set the class attribute set_link_class(child) # run recursively on children For more information about working with ElementTree see the ElementTree Documentation .","title":"Working with the ElementTree"},{"location":"extensions/api/#working_with_raw_html","text":"Occasionally an extension may need to call out to a third party library which returns a pre-made string of raw HTML that needs to be inserted into the document unmodified. Raw strings can be stashed for later retrieval using an htmlStash instance, rather than converting them into ElementTree objects. A raw string (which may or may not be raw HTML) passed to self.md.htmlStash.store() will be saved to the stash and a placeholder string will be returned which should be inserted into the tree instead. After the tree is serialized, a postprocessor will replace the placeholder with the raw string. This prevents subsequent processing steps from modifying the HTML data. For example, html = \"<p>This is some <em>raw</em> HTML data</p>\" el = etree.Element(\"div\") el.text = self.md.htmlStash.store(html) For the global htmlStash instance to be available from a processor, the markdown.Markdown instance must be passed to the processor from extendMarkdown and will be available as self.md.htmlStash .","title":"Working with Raw HTML"},{"location":"extensions/api/#integrating_into_markdown","text":"Once you have the various pieces of your extension built, you need to tell Markdown about them and ensure that they are run in the proper sequence. Markdown accepts an Extension instance for each extension. Therefore, you will need to define a class that extends markdown.extensions.Extension and over-rides the extendMarkdown method. Within this class you will manage configuration options for your extension and attach the various processors and patterns to the Markdown instance. It is important to note that the order of the various processors and patterns matters. For example, if we replace http://... links with <a> elements, and then try to deal with inline HTML, we will end up with a mess. Therefore, the various types of processors and patterns are stored within an instance of the markdown.Markdown class in a Registry . Your Extension class will need to manipulate those registries appropriately. You may register instances of your processors and patterns with an appropriate priority, deregister built-in instances, or replace a built-in instance with your own.","title":"Integrating Your Code Into Markdown"},{"location":"extensions/api/#extendmarkdown","text":"The extendMarkdown method of a markdown.extensions.Extension class accepts one argument: md : A pointer to the instance of the markdown.Markdown class. You should use this to access the Registries of processors and patterns. They are found under the following attributes: md.preprocessors md.inlinePatterns md.parser.blockprocessors md.treeprocessors md.postprocessors Some other things you may want to access on the markdown.Markdown instance are: md.htmlStash md.output_formats md.set_output_format() md.output_format md.serializer md.registerExtension() md.tab_length md.block_level_elements md.isBlockLevel() Warning With access to the above items, theoretically you have the option to change anything through various monkey_patching techniques. However, you should be aware that the various undocumented parts of Markdown may change without notice and your monkey_patches may break with a new release. Therefore, what you really should be doing is inserting processors and patterns into the Markdown pipeline. Consider yourself warned! A simple example: from markdown.extensions import Extension class MyExtension(Extension): def extendMarkdown(self, md): # Register instance of 'mypattern' with a priority of 175 md.inlinePatterns.register(MyPattern(md), 'mypattern', 175)","title":"extendMarkdown"},{"location":"extensions/api/#registerextension","text":"Some extensions may need to have their state reset between multiple runs of the markdown.Markdown class. For example, consider the following use of the Footnotes extension: md = markdown.Markdown(extensions=['footnotes']) html1 = md.convert(text_with_footnote) md.reset() html2 = md.convert(text_without_footnote) Without calling reset , the footnote definitions from the first document will be inserted into the second document as they are still stored within the class instance. Therefore the Extension class needs to define a reset method that will reset the state of the extension (i.e.: self.footnotes = {} ). However, as many extensions do not have a need for reset , reset is only called on extensions that are registered. To register an extension, call md.registerExtension from within your extendMarkdown method: def extendMarkdown(self, md): md.registerExtension(self) # insert processors and patterns here Then, each time reset is called on the markdown.Markdown instance, the reset method of each registered extension will be called as well. You should also note that reset will be called on each registered extension after it is initialized the first time. Keep that in mind when over-riding the extension\u2019s reset method.","title":"registerExtension"},{"location":"extensions/api/#configsettings","text":"If an extension uses any parameters that the user may want to change, those parameters should be stored in self.config of your markdown.extensions.Extension class in the following format: class MyExtension(markdown.extensions.Extension): def __init__(self, **kwargs): self.config = { 'option1' : ['value1', 'description1'], 'option2' : ['value2', 'description2'] } super(MyExtension, self).__init__(**kwargs) When implemented this way the configuration parameters can be over-ridden at run time (thus the call to super ). For example: markdown.Markdown(extensions=[MyExtension(option1='other value')]) Note that if a keyword is passed in that is not already defined in self.config , then a KeyError is raised. The markdown.extensions.Extension class and its subclasses have the following methods available to assist in working with configuration settings: getConfig(key [, default]) : Returns the stored value for the given key or default if the key does not exist. If not set, default returns an empty string. getConfigs() : Returns a dict of all key/value pairs. getConfigInfo() : Returns all configuration descriptions as a list of tuples. setConfig(key, value) : Sets a configuration setting for key with the given value . If key is unknown, a KeyError is raised. If the previous value of key was a Boolean value, then value is converted to a Boolean value. If the previous value of key is None , then value is converted to a Boolean value except when it is None . No conversion takes place when the previous value of key is a string. setConfigs(items) : Sets multiple configuration settings given a dict of key/value pairs.","title":"Configuration Settings"},{"location":"extensions/api/#naming_an_extension","text":"As noted in the library reference an instance of an extension can be passed directly to markdown.Markdown . In fact, this is the preferred way to use third-party extensions. For example: import markdown from path.to.module import MyExtension md = markdown.Markdown(extensions=[MyExtension(option='value')]) However, Markdown also accepts \u201cnamed\u201d third party extensions for those occasions when it is impractical to import an extension directly (from the command line or from within templates). A \u201cname\u201d can either be a registered entry point or a string using Python\u2019s dot notation .","title":"Naming an Extension"},{"location":"extensions/api/#entry_point","text":"Entry points are defined in a Python package\u2019s setup.py script. The script must use setuptools to support entry points. Python-Markdown extensions must be assigned to the markdown.extensions group. An entry point definition might look like this: from setuptools import setup setup( # ... entry_points={ 'markdown.extensions': ['myextension = path.to.module:MyExtension'] } ) After a user installs your extension using the above script, they could then call the extension using the myextension string name like this: markdown.markdown(text, extensions=['myextension']) Note that if two or more entry points within the same group are assigned the same name, Python-Markdown will only ever use the first one found and ignore all others. Therefore, be sure to give your extension a unique name. For more information on writing setup.py scripts, see the Python documentation on Packaging and Distributing Projects .","title":"Entry Point"},{"location":"extensions/api/#dot_notation","text":"If an extension does not have a registered entry point, Python\u2019s dot notation may be used instead. The extension must be installed as a Python module on your PYTHONPATH. Generally, a class should be specified in the name. The class must be at the end of the name and be separated by a colon from the module. Therefore, if you were to import the class like this: from path.to.module import MyExtension Then the extension can be loaded as follows: markdown.markdown(text, extensions=['path.to.module:MyExtension']) You do not need to do anything special to support this feature. As long as your extension class is able to be imported, a user can include it with the above syntax. The above two methods are especially useful if you need to implement a large number of extensions with more than one residing in a module. However, if you do not want to require that your users include the class name in their string, you must define only one extension per module and that module must contain a module-level function called makeExtension that accepts **kwargs and returns an extension instance. For example: class MyExtension(markdown.extensions.Extension) # Define extension here... def makeExtension(**kwargs): return MyExtension(**kwargs) When markdown.Markdown is passed the \u201cname\u201d of your extension as a dot notation string that does not include a class (for example path.to.module ), it will import the module and call the makeExtension function to initiate your extension.","title":"Dot Notation"},{"location":"extensions/api/#registries","text":"The markdown.util.Registry class is a priority sorted registry which Markdown uses internally to determine the processing order of its various processors and patterns. A Registry instance provides two public methods to alter the data of the registry: register and deregister . Use register to add items and deregister to remove items. See each method for specifics. When registering an item, a \u201cname\u201d and a \u201cpriority\u201d must be provided. All items are automatically sorted by the value of the \u201cpriority\u201d parameter such that the item with the highest value will be processed first. The \u201cname\u201d is used to remove ( deregister ) and get items. A Registry instance is like a list (which maintains order) when reading data. You may iterate over the items, get an item and get a count (length) of all items. You may also check that the registry contains an item. When getting an item you may use either the index of the item or the string-based \u201cname\u201d. For example: registry = Registry() registry.register(SomeItem(), 'itemname', 20) # Get the item by index item = registry[0] # Get the item by name item = registry['itemname'] When checking that the registry contains an item, you may use either the string-based \u201cname\u201d, or a reference to the actual item. For example: someitem = SomeItem() registry.register(someitem, 'itemname', 20) # Contains the name assert 'itemname' in registry # Contains the item instance assert someitem in registry markdown.util.Registry has the following methods:","title":"Registries"},{"location":"extensions/api/#registry.register","text":"Add an item to the registry with the given name and priority. Arguments: item : The item being registered. name : A string used to reference the item. priority : An integer or float used to sort against all items. If an item is registered with a \u201cname\u201d which already exists, the existing item is replaced with the new item. Be careful as the old item is lost with no way to recover it. The new item will be sorted according to its priority and will not retain the position of the old item.","title":"Registry.register"},{"location":"extensions/api/#registry.deregister","text":"Remove an item from the registry. Set strict=False to fail silently.","title":"Registry.deregister"},{"location":"extensions/api/#registry.get_index_for_name","text":"Return the index of the given name .","title":"Registry.get_index_for_name"},{"location":"extensions/attr_list/","text":"Attribute Lists \u00b6 Summary \u00b6 The Attribute Lists extension adds a syntax to define attributes on the various HTML elements in markdown\u2019s output. This extension is included in the standard Markdown library. Syntax \u00b6 The basic syntax was inspired by Maruku\u2019s Attribute Lists feature (see web archive ). The List \u00b6 An example attribute list might look like this: {: #someid .someclass somekey='some value' } A word which starts with a hash ( # ) will set the id of an element. A word which starts with a dot ( . ) will be added to the list of classes assigned to an element. A key/value pair ( somekey='some value' ) will assign that pair to the element. Be aware that while the dot syntax will add to a class, using key/value pairs will always override the previously defined attribute. Consider the following: {: #id1 .class1 id=id2 class=\"class2 class3\" .class4 } The above example would result in the following attributes being defined: id=\"id2\" class=\"class2 class3 class4\" HTML includes support for some attributes to be a single term, like checked , for example. Therefore, the attribute list {: checked } would result in checked if the output format is html or checked=\"checked\" if the output format is xhtml . Curly braces can be backslash escaped to avoid being identified as an attribute list. \\{ not an attribute list } Opening and closing curly braces which are empty or only contain whitespace are ignored whether they are escaped or not. Additionally, any attribute lists which are not located in the specific locations documented below are ignored. The colon after the opening brace is optional, but is supported to maintain consistency with other implementations. Therefore, the following is also a valid attribute list: { #someid .someclass somekey='some value' } In addition, the spaces after the opening brace and before the closing brace are optional. They are recommended as they improve readability, but they are not required. The Attribute List extension does not have any knowledge of which keys and/or values are valid in HTML. Therefore, it is up to the document author to ensure that valid keys and values are used. However, the extension will escape any characters in the key which are not valid by replacing them with an underscore. Multiple consecutive invalid characters are reduced to a single underscore. Block Level \u00b6 To define attributes for a block level element, the attribute list should be defined on the last line of the block by itself. This is a paragraph. {: #an_id .a_class } The above results in the following output: <p id=\"an_id\" class=\"a_class\">This is a paragraph.</p> An exception is headers, as they are only ever allowed on one line. A setext style header {: #setext} ================================= ### A hash style header ### {: #hash } The above results in the following output: <h1 id=\"setext\">A setext style header</h1> <h3 id=\"hash\">A hash style header</h3> See Also By default, the Fenced Code Blocks extension includes limited support for attribute lists. To get full support , both extensions must be enabled. Inline \u00b6 To define attributes on inline elements, the attribute list should be defined immediately after the inline element with no white space. [link](http://example.com){: class=\"foo bar\" title=\"Some title!\" } The above results in the following output: <p><a href=\"http://example.com\" class=\"foo bar\" title=\"Some title!\">link</a></p> If the tables extension is enabled, attribute lists can be defined on table cells. To differentiate attributes for an inline element from attributes for the containing cell, the attribute list must be separated from the content by at least one space and be defined at the end of the cell content. As table cells can only ever be on a single line, the attribute list must remain on the same line as the content of the cell. | set on td | set on em | |--------------|-------------| | *a* { .foo } | *b*{ .foo } | The above example results in the following output: <table> <thead> <tr> <th>set on td</th> <th>set on em</th> </tr> </thead> <tbody> <tr> <td class=\"foo\"><em>a</em></td> <td><em class=\"foo\">b</em></td> </tr> </tbody> </table> Note that in the first column, the attribute list is preceded by a space; therefore, it is assigned to the table cell ( <td> element). However, in the second column, the attribute list is not preceded by a space; therefore, it is assigned to the inline element ( <em> ) which immediately preceded it. Attribute lists may also be defined on table header cells ( <th> elements) in the same manner. Limitations \u00b6 There are a few types of elements which attribute lists do not work with. As a reminder, Markdown is a subset of HTML and anything which cannot be expressed in Markdown can always be expressed with raw HTML directly. Code Blocks: Code blocks are unique in that they must be able to display Markdown syntax. Therefore, there is no way to determine if an attribute list is intended to be part of the code block or intended to define attributes on the wrapping element. For that reason, the extension ignores code blocks. To define attributes on code blocks, the codehilite and fenced code blocks extensions provide some options. Nested Elements: Markdown provides mechanisms for nesting various block level elements within other elements. However, attribute lists only ever get applied to the immediate parent. There is no way to specify that an attribute list should be applied some number of levels up the document tree. For example, when including an attribute list within a blockquote, the attribute list is only ever applied to the paragraph the list is defined in. There is no way to define attributes on the blockquote element itself. Implied Elements: There are various HTML elements which are not represented in Markdown text, but only implied. For example, the ul and ol elements do not exist in Markdown. They are only implied by the presence of list items ( li ). There is no way to use an attribute list to define attributes on implied elements, including but not limited to the following: ul , ol , dl , table , thead , tbody , and tr . Usage \u00b6 See Extensions for general extension usage. Use attr_list as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown.markdown(some_text, extensions=['attr_list'])","title":"Attribute Lists"},{"location":"extensions/attr_list/#attribute-lists","text":"","title":"Attribute Lists"},{"location":"extensions/attr_list/#summary","text":"The Attribute Lists extension adds a syntax to define attributes on the various HTML elements in markdown\u2019s output. This extension is included in the standard Markdown library.","title":"Summary"},{"location":"extensions/attr_list/#syntax","text":"The basic syntax was inspired by Maruku\u2019s Attribute Lists feature (see web archive ).","title":"Syntax"},{"location":"extensions/attr_list/#the-list","text":"An example attribute list might look like this: {: #someid .someclass somekey='some value' } A word which starts with a hash ( # ) will set the id of an element. A word which starts with a dot ( . ) will be added to the list of classes assigned to an element. A key/value pair ( somekey='some value' ) will assign that pair to the element. Be aware that while the dot syntax will add to a class, using key/value pairs will always override the previously defined attribute. Consider the following: {: #id1 .class1 id=id2 class=\"class2 class3\" .class4 } The above example would result in the following attributes being defined: id=\"id2\" class=\"class2 class3 class4\" HTML includes support for some attributes to be a single term, like checked , for example. Therefore, the attribute list {: checked } would result in checked if the output format is html or checked=\"checked\" if the output format is xhtml . Curly braces can be backslash escaped to avoid being identified as an attribute list. \\{ not an attribute list } Opening and closing curly braces which are empty or only contain whitespace are ignored whether they are escaped or not. Additionally, any attribute lists which are not located in the specific locations documented below are ignored. The colon after the opening brace is optional, but is supported to maintain consistency with other implementations. Therefore, the following is also a valid attribute list: { #someid .someclass somekey='some value' } In addition, the spaces after the opening brace and before the closing brace are optional. They are recommended as they improve readability, but they are not required. The Attribute List extension does not have any knowledge of which keys and/or values are valid in HTML. Therefore, it is up to the document author to ensure that valid keys and values are used. However, the extension will escape any characters in the key which are not valid by replacing them with an underscore. Multiple consecutive invalid characters are reduced to a single underscore.","title":"The List"},{"location":"extensions/attr_list/#block-level","text":"To define attributes for a block level element, the attribute list should be defined on the last line of the block by itself. This is a paragraph. {: #an_id .a_class } The above results in the following output: <p id=\"an_id\" class=\"a_class\">This is a paragraph.</p> An exception is headers, as they are only ever allowed on one line. A setext style header {: #setext} ================================= ### A hash style header ### {: #hash } The above results in the following output: <h1 id=\"setext\">A setext style header</h1> <h3 id=\"hash\">A hash style header</h3> See Also By default, the Fenced Code Blocks extension includes limited support for attribute lists. To get full support , both extensions must be enabled.","title":"Block Level"},{"location":"extensions/attr_list/#inline","text":"To define attributes on inline elements, the attribute list should be defined immediately after the inline element with no white space. [link](http://example.com){: class=\"foo bar\" title=\"Some title!\" } The above results in the following output: <p><a href=\"http://example.com\" class=\"foo bar\" title=\"Some title!\">link</a></p> If the tables extension is enabled, attribute lists can be defined on table cells. To differentiate attributes for an inline element from attributes for the containing cell, the attribute list must be separated from the content by at least one space and be defined at the end of the cell content. As table cells can only ever be on a single line, the attribute list must remain on the same line as the content of the cell. | set on td | set on em | |--------------|-------------| | *a* { .foo } | *b*{ .foo } | The above example results in the following output: <table> <thead> <tr> <th>set on td</th> <th>set on em</th> </tr> </thead> <tbody> <tr> <td class=\"foo\"><em>a</em></td> <td><em class=\"foo\">b</em></td> </tr> </tbody> </table> Note that in the first column, the attribute list is preceded by a space; therefore, it is assigned to the table cell ( <td> element). However, in the second column, the attribute list is not preceded by a space; therefore, it is assigned to the inline element ( <em> ) which immediately preceded it. Attribute lists may also be defined on table header cells ( <th> elements) in the same manner.","title":"Inline"},{"location":"extensions/attr_list/#limitations","text":"There are a few types of elements which attribute lists do not work with. As a reminder, Markdown is a subset of HTML and anything which cannot be expressed in Markdown can always be expressed with raw HTML directly. Code Blocks: Code blocks are unique in that they must be able to display Markdown syntax. Therefore, there is no way to determine if an attribute list is intended to be part of the code block or intended to define attributes on the wrapping element. For that reason, the extension ignores code blocks. To define attributes on code blocks, the codehilite and fenced code blocks extensions provide some options. Nested Elements: Markdown provides mechanisms for nesting various block level elements within other elements. However, attribute lists only ever get applied to the immediate parent. There is no way to specify that an attribute list should be applied some number of levels up the document tree. For example, when including an attribute list within a blockquote, the attribute list is only ever applied to the paragraph the list is defined in. There is no way to define attributes on the blockquote element itself. Implied Elements: There are various HTML elements which are not represented in Markdown text, but only implied. For example, the ul and ol elements do not exist in Markdown. They are only implied by the presence of list items ( li ). There is no way to use an attribute list to define attributes on implied elements, including but not limited to the following: ul , ol , dl , table , thead , tbody , and tr .","title":"Limitations"},{"location":"extensions/attr_list/#usage","text":"See Extensions for general extension usage. Use attr_list as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown.markdown(some_text, extensions=['attr_list'])","title":"Usage"},{"location":"extensions/code_hilite/","text":"CodeHilite \u00b6 Summary \u00b6 The CodeHilite extension adds code/syntax highlighting to standard Python-Markdown code blocks using Pygments . This extension is included in the standard Markdown library. Setup \u00b6 Step 1: Download and Install Pygments \u00b6 You will also need to download and install the Pygments package on your PYTHONPATH . The CodeHilite extension will produce HTML output without Pygments, but it won\u2019t highlight anything (same behavior as setting use_pygments to False ). Step 2: Add CSS Classes \u00b6 You will need to define the appropriate CSS classes with appropriate rules. The CSS rules either need to be defined in or linked from the header of your HTML templates. Pygments can generate CSS rules for you. Just run the following command from the command line: pygmentize -S default -f html -a .codehilite > styles.css If you are using a different css_class (default: .codehilite ), then set the value of the -a option to that class name. The CSS rules will be written to the styles.css file which you can copy to your site and link from your HTML templates. If you would like to use a different theme, swap out default for the desired theme. For a list of themes installed on your system (additional themes can be installed via Pygments plugins), run the following command: pygmentize -L style See Pygments\u2019 excellent documentation for more details. If no language is defined, Pygments will attempt to guess the language. When that fails, the code block will not be highlighted. See Also GitHub user richeland has provided a number of different CSS style sheets which work with Pygments along with a preview of each theme. The css_class used is .highlight . Therefore, one would need to override the css_class option when using richeland\u2019s CSS styles. However, the Python-Markdown project makes no guarantee that richeland\u2019s CSS styles will work with the version of Pygments you are using. To ensure complete compatibility, you should generate the CSS rules from your own installation of Pygments. Syntax \u00b6 The CodeHilite extension follows the same syntax as regular Markdown code blocks, with one exception. The highlighter needs to know what language to use for the code block. There are three ways to tell the highlighter what language the code block contains and each one has a different result. Note The format of the language identifier only effects the display of line numbers if linenums is set to None (the default). If set to True or False (see Usage below) the format of the identifier has no effect on the display of line numbers \u2013 it only serves as a means to define the language of the code block. Shebang (with path) \u00b6 If the first line of the code block contains a shebang, the language is derived from that and line numbers are used. #!/usr/bin/python # Code goes here ... Will result in: #!/usr/bin/python # Code goes here ... Shebang (no path) \u00b6 If the first line contains a shebang, but the shebang line does not contain a path (a single / or even a space), then that line is removed from the code block before processing. Line numbers are used. #!python # Code goes here ... Will result in: # Code goes here ... Colons \u00b6 If the first line begins with three or more colons, the text following the colons identifies the language. The first line is removed from the code block before processing and line numbers are not used. :::python # Code goes here ... Will result in: # Code goes here ... Certain lines can be selected for emphasis with the colon syntax. When using Pygments\u2019 default CSS styles, emphasized lines have a yellow background. This is useful to direct the reader\u2019s attention to specific lines. :::python hl_lines=\"1 3\" # This line is emphasized # This line isn't # This line is emphasized Will result in: # This line is emphasized # This line isn't # This line is emphasized Note hl_lines is named for Pygments\u2019 option meaning \u201chighlighted lines\u201d. When No Language is Defined \u00b6 CodeHilite is completely backwards compatible so that if a code block is encountered that does not define a language, the block is simply wrapped in <pre> tags and output. # Code goes here ... Will result in: # Code goes here ... Lets see the source for that: <div class=\"codehilite\"><pre><code># Code goes here ... </code></pre></div> Note When no language is defined, the Pygments highlighting engine will try to guess the language (unless guess_lang is set to False ). Upon failure, the same behavior will happen as described above. Usage \u00b6 See Extensions for general extension usage. Use codehilite as the name of the extension. See the Library Reference for information about configuring extensions. The following options are provided to configure the output: linenums : An alias to Pygments\u2019 linenos formatter option. Possible values are True for yes, False for no and None for auto. Defaults to None . Using True will force every code block to have line numbers, even when using colons ( ::: ) for language identification. Using False will turn off all line numbers, even when using shebangs ( #! ) for language identification. guess_lang : Automatic language detection. Defaults to True . Using False will prevent Pygments from guessing the language, and thus highlighting blocks only when you explicitly set the language. css_class : An alias to Pygments cssclass formatter option. Set CSS class name for the wrapper <div> tag. Defaults to codehilite . pygments_style : Pygments HTML Formatter Style ( ColorScheme ). Defaults to default . Note This is useful only when noclasses is set to True , otherwise the CSS styles must be provided by the end user. noclasses : Use inline styles instead of CSS classes. Defaults to False . use_pygments : Specifies the use of Pygments in generating the output. If True (the default) and Pygments is available, CodeHilite will use Pygments to analyze and format the output. Additionally, if using Pygments >= 2.4, the output will be wrapped in <code> tags, whereas earlier versions will not. Otherwise, Pygments will not be used. If a language is defined for a code block, it will be assigned to the <code> tag as a class in the manner suggested by the HTML5 spec and may be used by a JavaScript library in the browser to highlight the code block. See the lang_prefix option to customize the prefix. lang_prefix : The prefix prepended to the language class assigned to the HTML <code> tag. Default: language- . pygments_formatter : This option can be used to change the Pygments formatter used for highlighting code blocks. By default, this is set to the string 'html' , which means it\u2019ll use the default HtmlFormatter provided by Pygments. This can be set to a string representing any of the other default formatters, or set to a formatter class (or any callable). The code\u2019s language is always passed to the formatter as an extra option lang_str , with the value formatted as {lang_prefix}{lang} . If the language is unspecified, the language guessed by Pygments will be used. While this option has no effect to the Pygments\u2019s builtin formatters, a user can make use of the language in their custom formatter. See an example below. To see what formatters are available and how to subclass an existing formatter, please visit Pygments documentation on this topic . Any other Pygments\u2019 options: All other options are accepted and passed on to Pygments\u2019 lexer and formatter. Therefore, valid options include any options which are accepted by the html formatter or whichever lexer the code\u2019s language uses. Invalid options are ignored without error. A trivial example: markdown.markdown(some_text, extensions=['codehilite']) To keep the code block\u2019s language in the Pygments generated HTML output, one can provide a custom Pygments formatter that takes the lang_str option. For example, from pygments.formatters import HtmlFormatter from markdown.extensions.codehilite import CodeHiliteExtension class CustomHtmlFormatter(HtmlFormatter): def __init__(self, lang_str='', **options): super().__init__(**options) # lang_str has the value {lang_prefix}{lang} # specified by the CodeHilite's options self.lang_str = lang_str def _wrap_code(self, source): yield 0, f'<code class=\"{self.lang_str}\">' yield from source yield 0, '</code>' some_text = '''\\ :::python print('hellow world') ''' markdown.markdown( some_text, extensions=[CodeHiliteExtension(pygments_formatter=CustomHtmlFormatter)], ) The formatter above will output the following HTML structure for a code block: <div class=\"codehilite\"> <pre> <code class=\"language-python\"> ... </code> </pre> </div>","title":"CodeHilite"},{"location":"extensions/code_hilite/#codehilite","text":"","title":"CodeHilite"},{"location":"extensions/code_hilite/#summary","text":"The CodeHilite extension adds code/syntax highlighting to standard Python-Markdown code blocks using Pygments . This extension is included in the standard Markdown library.","title":"Summary"},{"location":"extensions/code_hilite/#setup","text":"","title":"Setup"},{"location":"extensions/code_hilite/#step-1-download-and-install-pygments","text":"You will also need to download and install the Pygments package on your PYTHONPATH . The CodeHilite extension will produce HTML output without Pygments, but it won\u2019t highlight anything (same behavior as setting use_pygments to False ).","title":"Step 1: Download and Install Pygments"},{"location":"extensions/code_hilite/#step-2-add-css-classes","text":"You will need to define the appropriate CSS classes with appropriate rules. The CSS rules either need to be defined in or linked from the header of your HTML templates. Pygments can generate CSS rules for you. Just run the following command from the command line: pygmentize -S default -f html -a .codehilite > styles.css If you are using a different css_class (default: .codehilite ), then set the value of the -a option to that class name. The CSS rules will be written to the styles.css file which you can copy to your site and link from your HTML templates. If you would like to use a different theme, swap out default for the desired theme. For a list of themes installed on your system (additional themes can be installed via Pygments plugins), run the following command: pygmentize -L style See Pygments\u2019 excellent documentation for more details. If no language is defined, Pygments will attempt to guess the language. When that fails, the code block will not be highlighted. See Also GitHub user richeland has provided a number of different CSS style sheets which work with Pygments along with a preview of each theme. The css_class used is .highlight . Therefore, one would need to override the css_class option when using richeland\u2019s CSS styles. However, the Python-Markdown project makes no guarantee that richeland\u2019s CSS styles will work with the version of Pygments you are using. To ensure complete compatibility, you should generate the CSS rules from your own installation of Pygments.","title":"Step 2: Add CSS Classes"},{"location":"extensions/code_hilite/#syntax","text":"The CodeHilite extension follows the same syntax as regular Markdown code blocks, with one exception. The highlighter needs to know what language to use for the code block. There are three ways to tell the highlighter what language the code block contains and each one has a different result. Note The format of the language identifier only effects the display of line numbers if linenums is set to None (the default). If set to True or False (see Usage below) the format of the identifier has no effect on the display of line numbers \u2013 it only serves as a means to define the language of the code block.","title":"Syntax"},{"location":"extensions/code_hilite/#shebang-with-path","text":"If the first line of the code block contains a shebang, the language is derived from that and line numbers are used. #!/usr/bin/python # Code goes here ... Will result in: #!/usr/bin/python # Code goes here ...","title":"Shebang (with path)"},{"location":"extensions/code_hilite/#shebang-no-path","text":"If the first line contains a shebang, but the shebang line does not contain a path (a single / or even a space), then that line is removed from the code block before processing. Line numbers are used. #!python # Code goes here ... Will result in: # Code goes here ...","title":"Shebang (no path)"},{"location":"extensions/code_hilite/#colons","text":"If the first line begins with three or more colons, the text following the colons identifies the language. The first line is removed from the code block before processing and line numbers are not used. :::python # Code goes here ... Will result in: # Code goes here ... Certain lines can be selected for emphasis with the colon syntax. When using Pygments\u2019 default CSS styles, emphasized lines have a yellow background. This is useful to direct the reader\u2019s attention to specific lines. :::python hl_lines=\"1 3\" # This line is emphasized # This line isn't # This line is emphasized Will result in: # This line is emphasized # This line isn't # This line is emphasized Note hl_lines is named for Pygments\u2019 option meaning \u201chighlighted lines\u201d.","title":"Colons"},{"location":"extensions/code_hilite/#when-no-language-is-defined","text":"CodeHilite is completely backwards compatible so that if a code block is encountered that does not define a language, the block is simply wrapped in <pre> tags and output. # Code goes here ... Will result in: # Code goes here ... Lets see the source for that: <div class=\"codehilite\"><pre><code># Code goes here ... </code></pre></div> Note When no language is defined, the Pygments highlighting engine will try to guess the language (unless guess_lang is set to False ). Upon failure, the same behavior will happen as described above.","title":"When No Language is Defined"},{"location":"extensions/code_hilite/#usage","text":"See Extensions for general extension usage. Use codehilite as the name of the extension. See the Library Reference for information about configuring extensions. The following options are provided to configure the output: linenums : An alias to Pygments\u2019 linenos formatter option. Possible values are True for yes, False for no and None for auto. Defaults to None . Using True will force every code block to have line numbers, even when using colons ( ::: ) for language identification. Using False will turn off all line numbers, even when using shebangs ( #! ) for language identification. guess_lang : Automatic language detection. Defaults to True . Using False will prevent Pygments from guessing the language, and thus highlighting blocks only when you explicitly set the language. css_class : An alias to Pygments cssclass formatter option. Set CSS class name for the wrapper <div> tag. Defaults to codehilite . pygments_style : Pygments HTML Formatter Style ( ColorScheme ). Defaults to default . Note This is useful only when noclasses is set to True , otherwise the CSS styles must be provided by the end user. noclasses : Use inline styles instead of CSS classes. Defaults to False . use_pygments : Specifies the use of Pygments in generating the output. If True (the default) and Pygments is available, CodeHilite will use Pygments to analyze and format the output. Additionally, if using Pygments >= 2.4, the output will be wrapped in <code> tags, whereas earlier versions will not. Otherwise, Pygments will not be used. If a language is defined for a code block, it will be assigned to the <code> tag as a class in the manner suggested by the HTML5 spec and may be used by a JavaScript library in the browser to highlight the code block. See the lang_prefix option to customize the prefix. lang_prefix : The prefix prepended to the language class assigned to the HTML <code> tag. Default: language- . pygments_formatter : This option can be used to change the Pygments formatter used for highlighting code blocks. By default, this is set to the string 'html' , which means it\u2019ll use the default HtmlFormatter provided by Pygments. This can be set to a string representing any of the other default formatters, or set to a formatter class (or any callable). The code\u2019s language is always passed to the formatter as an extra option lang_str , with the value formatted as {lang_prefix}{lang} . If the language is unspecified, the language guessed by Pygments will be used. While this option has no effect to the Pygments\u2019s builtin formatters, a user can make use of the language in their custom formatter. See an example below. To see what formatters are available and how to subclass an existing formatter, please visit Pygments documentation on this topic . Any other Pygments\u2019 options: All other options are accepted and passed on to Pygments\u2019 lexer and formatter. Therefore, valid options include any options which are accepted by the html formatter or whichever lexer the code\u2019s language uses. Invalid options are ignored without error. A trivial example: markdown.markdown(some_text, extensions=['codehilite']) To keep the code block\u2019s language in the Pygments generated HTML output, one can provide a custom Pygments formatter that takes the lang_str option. For example, from pygments.formatters import HtmlFormatter from markdown.extensions.codehilite import CodeHiliteExtension class CustomHtmlFormatter(HtmlFormatter): def __init__(self, lang_str='', **options): super().__init__(**options) # lang_str has the value {lang_prefix}{lang} # specified by the CodeHilite's options self.lang_str = lang_str def _wrap_code(self, source): yield 0, f'<code class=\"{self.lang_str}\">' yield from source yield 0, '</code>' some_text = '''\\ :::python print('hellow world') ''' markdown.markdown( some_text, extensions=[CodeHiliteExtension(pygments_formatter=CustomHtmlFormatter)], ) The formatter above will output the following HTML structure for a code block: <div class=\"codehilite\"> <pre> <code class=\"language-python\"> ... </code> </pre> </div>","title":"Usage"},{"location":"extensions/definition_lists/","text":"Definition Lists \u00b6 Summary \u00b6 The Definition Lists extension adds the ability to create definition lists in Markdown documents. This extension is included in the standard Markdown library. Syntax \u00b6 Definition lists are defined using the syntax established in PHP Markdown Extra . Thus, the following text (taken from the above referenced PHP documentation): Apple : Pomaceous fruit of plants of the genus Malus in the family Rosaceae. Orange : The fruit of an evergreen tree of the genus Citrus. will be rendered as: <dl> <dt>Apple</dt> <dd>Pomaceous fruit of plants of the genus Malus in the family Rosaceae.</dd> <dt>Orange</dt> <dd>The fruit of an evergreen tree of the genus Citrus.</dd> </dl> Usage \u00b6 See Extensions for general extension usage. Use def_list as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown.markdown(some_text, extensions=['def_list'])","title":"Definition Lists"},{"location":"extensions/definition_lists/#definition-lists","text":"","title":"Definition Lists"},{"location":"extensions/definition_lists/#summary","text":"The Definition Lists extension adds the ability to create definition lists in Markdown documents. This extension is included in the standard Markdown library.","title":"Summary"},{"location":"extensions/definition_lists/#syntax","text":"Definition lists are defined using the syntax established in PHP Markdown Extra . Thus, the following text (taken from the above referenced PHP documentation): Apple : Pomaceous fruit of plants of the genus Malus in the family Rosaceae. Orange : The fruit of an evergreen tree of the genus Citrus. will be rendered as: <dl> <dt>Apple</dt> <dd>Pomaceous fruit of plants of the genus Malus in the family Rosaceae.</dd> <dt>Orange</dt> <dd>The fruit of an evergreen tree of the genus Citrus.</dd> </dl>","title":"Syntax"},{"location":"extensions/definition_lists/#usage","text":"See Extensions for general extension usage. Use def_list as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown.markdown(some_text, extensions=['def_list'])","title":"Usage"},{"location":"extensions/extra/","text":"Python-Markdown Extra \u00b6 Summary \u00b6 A compilation of various Python-Markdown extensions that (mostly) imitates PHP Markdown Extra . The supported extensions include: Abbreviations Attribute Lists Definition Lists Fenced Code Blocks Footnotes Tables Markdown in HTML See each individual extension for syntax documentation. Extra and all its supported extensions are included in the standard Markdown library. Usage \u00b6 From the Python interpreter: >>> import markdown >>> html = markdown.markdown(text, extensions=['extra']) To pass configuration options to the extensions included with Extra, they must be passed to Extra, with the underlying extension identified as well. In that way Extra will have access to the options and can pass them on to the appropriate underlying extension. config = { 'extra': { 'footnotes': { 'UNIQUE_IDS': True }, 'fenced_code': { 'lang_prefix': 'lang-' } }, 'toc': { 'permalink': True } } html = markdown.markdown(text, extensions=['extra', 'toc'], extension_configs=config) Note that in the above example, footnotes and fenced_code are both nested under the extra key as those extensions are included with Extra. However, the toc extension is not included with extra and therefore its configuration options are not nested under the extra key. See each individual extension for a list of supported configuration options. There are many other extensions which are distributed with Python-Markdown that are not included here in Extra. The features of those extensions are not part of PHP Markdown Extra, and therefore, not part of Python-Markdown Extra.","title":"Extra"},{"location":"extensions/extra/#python-markdown-extra","text":"","title":"Python-Markdown Extra"},{"location":"extensions/extra/#summary","text":"A compilation of various Python-Markdown extensions that (mostly) imitates PHP Markdown Extra . The supported extensions include: Abbreviations Attribute Lists Definition Lists Fenced Code Blocks Footnotes Tables Markdown in HTML See each individual extension for syntax documentation. Extra and all its supported extensions are included in the standard Markdown library.","title":"Summary"},{"location":"extensions/extra/#usage","text":"From the Python interpreter: >>> import markdown >>> html = markdown.markdown(text, extensions=['extra']) To pass configuration options to the extensions included with Extra, they must be passed to Extra, with the underlying extension identified as well. In that way Extra will have access to the options and can pass them on to the appropriate underlying extension. config = { 'extra': { 'footnotes': { 'UNIQUE_IDS': True }, 'fenced_code': { 'lang_prefix': 'lang-' } }, 'toc': { 'permalink': True } } html = markdown.markdown(text, extensions=['extra', 'toc'], extension_configs=config) Note that in the above example, footnotes and fenced_code are both nested under the extra key as those extensions are included with Extra. However, the toc extension is not included with extra and therefore its configuration options are not nested under the extra key. See each individual extension for a list of supported configuration options. There are many other extensions which are distributed with Python-Markdown that are not included here in Extra. The features of those extensions are not part of PHP Markdown Extra, and therefore, not part of Python-Markdown Extra.","title":"Usage"},{"location":"extensions/fenced_code_blocks/","text":"Fenced Code Blocks \u00b6 Summary \u00b6 The Fenced Code Blocks extension adds a secondary way to define code blocks, which overcomes a few limitations of indented code blocks. This extension is included in the standard Markdown library. Syntax \u00b6 Fenced Code Blocks are defined using the syntax originally established in PHP Markdown Extra and popularized by GitHub Flavored Markdown . Fenced code blocks begin with three or more backticks ( ``` ) or tildes ( ~~~ ) on a line by themselves and end with a matching set of backticks or tildes on a line by themselves. The closing set must contain the same number and type of characters as the opening set. It is recommended that a blank line be placed before and after the code block. A paragraph before the code block. ``` a one-line code block ``` A paragraph after the code block. While backticks seem to be more popular among users, tildes may be used as well. ~~~ a one-line code block ~~~ To include a set of backticks (or tildes) within a code block, use a different number of backticks for the delimiters. ```` ``` ```` Fenced code blocks can have a blank line as the first and/or last line of the code block and those lines will be preserved. ``` a three-line code block ``` Unlike indented code blocks, a fenced code block can immediately follow a list item without becoming part of the list. * A list item. ``` not part of the list ``` Warning Fenced Code Blocks are only supported at the document root level. Therefore, they cannot be nested inside lists or blockquotes. If you need to nest fenced code blocks, you may want to try the third party extension SuperFences instead. Attributes \u00b6 Various attributes may be defined on a per-code-block basis by defining them immediately following the opening deliminator. The attributes should be wrapped in curly braces {} and be on the same line as the deliminator. It is generally best to separate the attribute list from the deliminator with a space. Attributes within the list must be separated by a space. ``` { attributes go here } a code block with attributes ``` How those attributes will affect the output will depend on various factors as described below. Language \u00b6 The language of the code within a code block can be specified for use by syntax highlighters, etc. The language should be prefixed with a dot and not contain any whitespace ( .language-name ). ``` { .html } <p>HTML Document</p> ``` So long as the language is the only option specified, the curly brackets and/or the dot may be excluded: ``` html <p>HTML Document</p> ``` Either of the above examples will output the following HTML: <pre><code class=\"language-html\">&lt;p&gt;HTML Document&lt;/p&gt; </code></pre> Note that the language name has been prefixed with language- and it has been assigned to the class attribute on the <code> tag, which is the format suggested by the HTML 5 Specification (see the second \u201cexample\u201d in the Specification). While language is the default prefix, the prefix may be overridden using the lang_prefix configuration option. Classes \u00b6 In addition to the language, additional classes may be defined by prefixing them with a dot, just like the language. ``` { .html .foo .bar } <p>HTML Document</p> ``` When defining multiple classes, only the first class will be used as the \u201clanguage\u201d for the code block. All others are assigned to the <pre> tag unaltered. Additionally, the curly braces and dot are required for all classes, including the language class if more than one class is defined. The above example will output the following HTML: <pre class=\"foo bar\"><code class=\"language-html\">&lt;p&gt;HTML Document&lt;/p&gt; </code></pre> ID \u00b6 An id can be defined for a code block, which would allow a link to point directly to the code block using a URL hash. IDs must be prefixed with a hash character ( # ) and only contain characters permitted in HTML id attributes. ``` { #example } A linkable code block ``` The id attribute is assigned to the <pre> tag of the output. The above example will output the following HTML: <pre id=\"example\"><code>A linkable code block </code></pre> From elsewhere within the same document, one could link to the code block with [link](#example) . IDs may be defined along with the language, other classes, or any other supported attributes. The order of items does not matter. ``` { #example .lang .foo .bar } A linkable code block ``` Key/Value Pairs \u00b6 If the fenced_code and attr_list extensions are both enabled, then key/value pairs can be defined in the attribute list. So long as code highlighting is not enabled (see below), the key/value pairs will be assigned as attributes on the <code> tag in the output. Key/value pairs must be defined using the syntax documented for the attr_list extension (for example, values with whitespace must be wrapped in quotes). ``` { .lang #example style=\"color: #333; background: #f8f8f8;\" } A code block with inline styles. Fancy! ``` The above example will output the following HTML: <pre id=\"example\"><code class=\"language-lang\" style=\"color: #333; background: #f8f8f8;\">A code block with inline styles. Fancy! </code></pre> If the attr_list extension is not enabled, then the key/value pairs will be ignored. Syntax Highlighting \u00b6 If the fenced_code extension and syntax highlighting are both enabled, then the codehilite extension will be used for syntax highlighting the contents of the code block. The language defined in the attribute list will be passed to codehilite to ensure that the correct language is used. If no language is specified and language guessing is not disabled for the codehilite extension, then the language will be guessed. The codehilite extension uses the Pygments engine to do syntax highlighting. Any valid Pygments options can be defined as key/value pairs in the attribute list and will be passed on to Pygments. ``` { .lang linenos=true linenostart=42 hl_lines=\"43-44 50\" title=\"An Example Code Block\" }` A truncated code block... ``` Valid options include any option accepted by Pygments\u2019 HTMLFormatter except for the full option, as well as any options accepted by the relevant lexer (each language has its own lexer). While most lexers don\u2019t have options that are all that useful in this context, there are a few important exceptions. For example, the PHP lexer\u2019s startinline option eliminates the need to start each code fragment with <?php . Note The fenced_code extension does not alter the output provided by Pygments. Therefore, only options which Pygments provides can be utilized. As Pygments does not currently provide a way to define an ID, any ID defined in an attribute list will be ignored when syntax highlighting is enabled. Additionally, any key/value pairs which are not Pygments options will be ignored, regardless of whether the attr_list extension is enabled. Enabling Syntax Highlighting \u00b6 To enable syntax highlighting, the codehilite extension must be enabled and the codehilite extension\u2019s use_pygments option must be set to True (the default). Alternatively, so long as the codehilite extension is enabled, you can override a global use_pygments=False option for an individual code block by including use_pygments=true in the attribute list. While the use_pygments key/value pair will not be included in the output, all other attributes will behave as they would if syntax highlighting was enabled only for that code block. Conversely, to disable syntax highlighting on an individual code block, include use_pygments=false in the attribute list. While the use_pygments key/value pair will not be included in the output, all other attributes will behave as they would if syntax highlighting was disabled for that code block regardless of any global setting. See Also You will need to properly install and setup Pygments for syntax highlighting to work. See the codehilite extension\u2019s documentation for details. Usage \u00b6 See Extensions for general extension usage. Use fenced_code as the name of the extension. See the Library Reference for information about configuring extensions. The following option is provided to configure the output: lang_prefix : The prefix prepended to the language class assigned to the HTML <code> tag. Default: language- . A trivial example: markdown.markdown(some_text, extensions=['fenced_code'])","title":"Fenced Code Blocks"},{"location":"extensions/fenced_code_blocks/#fenced-code-blocks","text":"","title":"Fenced Code Blocks"},{"location":"extensions/fenced_code_blocks/#summary","text":"The Fenced Code Blocks extension adds a secondary way to define code blocks, which overcomes a few limitations of indented code blocks. This extension is included in the standard Markdown library.","title":"Summary"},{"location":"extensions/fenced_code_blocks/#syntax","text":"Fenced Code Blocks are defined using the syntax originally established in PHP Markdown Extra and popularized by GitHub Flavored Markdown . Fenced code blocks begin with three or more backticks ( ``` ) or tildes ( ~~~ ) on a line by themselves and end with a matching set of backticks or tildes on a line by themselves. The closing set must contain the same number and type of characters as the opening set. It is recommended that a blank line be placed before and after the code block. A paragraph before the code block. ``` a one-line code block ``` A paragraph after the code block. While backticks seem to be more popular among users, tildes may be used as well. ~~~ a one-line code block ~~~ To include a set of backticks (or tildes) within a code block, use a different number of backticks for the delimiters. ```` ``` ```` Fenced code blocks can have a blank line as the first and/or last line of the code block and those lines will be preserved. ``` a three-line code block ``` Unlike indented code blocks, a fenced code block can immediately follow a list item without becoming part of the list. * A list item. ``` not part of the list ``` Warning Fenced Code Blocks are only supported at the document root level. Therefore, they cannot be nested inside lists or blockquotes. If you need to nest fenced code blocks, you may want to try the third party extension SuperFences instead.","title":"Syntax"},{"location":"extensions/fenced_code_blocks/#attributes","text":"Various attributes may be defined on a per-code-block basis by defining them immediately following the opening deliminator. The attributes should be wrapped in curly braces {} and be on the same line as the deliminator. It is generally best to separate the attribute list from the deliminator with a space. Attributes within the list must be separated by a space. ``` { attributes go here } a code block with attributes ``` How those attributes will affect the output will depend on various factors as described below.","title":"Attributes"},{"location":"extensions/fenced_code_blocks/#language","text":"The language of the code within a code block can be specified for use by syntax highlighters, etc. The language should be prefixed with a dot and not contain any whitespace ( .language-name ). ``` { .html } <p>HTML Document</p> ``` So long as the language is the only option specified, the curly brackets and/or the dot may be excluded: ``` html <p>HTML Document</p> ``` Either of the above examples will output the following HTML: <pre><code class=\"language-html\">&lt;p&gt;HTML Document&lt;/p&gt; </code></pre> Note that the language name has been prefixed with language- and it has been assigned to the class attribute on the <code> tag, which is the format suggested by the HTML 5 Specification (see the second \u201cexample\u201d in the Specification). While language is the default prefix, the prefix may be overridden using the lang_prefix configuration option.","title":"Language"},{"location":"extensions/fenced_code_blocks/#classes","text":"In addition to the language, additional classes may be defined by prefixing them with a dot, just like the language. ``` { .html .foo .bar } <p>HTML Document</p> ``` When defining multiple classes, only the first class will be used as the \u201clanguage\u201d for the code block. All others are assigned to the <pre> tag unaltered. Additionally, the curly braces and dot are required for all classes, including the language class if more than one class is defined. The above example will output the following HTML: <pre class=\"foo bar\"><code class=\"language-html\">&lt;p&gt;HTML Document&lt;/p&gt; </code></pre>","title":"Classes"},{"location":"extensions/fenced_code_blocks/#id","text":"An id can be defined for a code block, which would allow a link to point directly to the code block using a URL hash. IDs must be prefixed with a hash character ( # ) and only contain characters permitted in HTML id attributes. ``` { #example } A linkable code block ``` The id attribute is assigned to the <pre> tag of the output. The above example will output the following HTML: <pre id=\"example\"><code>A linkable code block </code></pre> From elsewhere within the same document, one could link to the code block with [link](#example) . IDs may be defined along with the language, other classes, or any other supported attributes. The order of items does not matter. ``` { #example .lang .foo .bar } A linkable code block ```","title":"ID"},{"location":"extensions/fenced_code_blocks/#keyvalue-pairs","text":"If the fenced_code and attr_list extensions are both enabled, then key/value pairs can be defined in the attribute list. So long as code highlighting is not enabled (see below), the key/value pairs will be assigned as attributes on the <code> tag in the output. Key/value pairs must be defined using the syntax documented for the attr_list extension (for example, values with whitespace must be wrapped in quotes). ``` { .lang #example style=\"color: #333; background: #f8f8f8;\" } A code block with inline styles. Fancy! ``` The above example will output the following HTML: <pre id=\"example\"><code class=\"language-lang\" style=\"color: #333; background: #f8f8f8;\">A code block with inline styles. Fancy! </code></pre> If the attr_list extension is not enabled, then the key/value pairs will be ignored.","title":"Key/Value Pairs"},{"location":"extensions/fenced_code_blocks/#syntax-highlighting","text":"If the fenced_code extension and syntax highlighting are both enabled, then the codehilite extension will be used for syntax highlighting the contents of the code block. The language defined in the attribute list will be passed to codehilite to ensure that the correct language is used. If no language is specified and language guessing is not disabled for the codehilite extension, then the language will be guessed. The codehilite extension uses the Pygments engine to do syntax highlighting. Any valid Pygments options can be defined as key/value pairs in the attribute list and will be passed on to Pygments. ``` { .lang linenos=true linenostart=42 hl_lines=\"43-44 50\" title=\"An Example Code Block\" }` A truncated code block... ``` Valid options include any option accepted by Pygments\u2019 HTMLFormatter except for the full option, as well as any options accepted by the relevant lexer (each language has its own lexer). While most lexers don\u2019t have options that are all that useful in this context, there are a few important exceptions. For example, the PHP lexer\u2019s startinline option eliminates the need to start each code fragment with <?php . Note The fenced_code extension does not alter the output provided by Pygments. Therefore, only options which Pygments provides can be utilized. As Pygments does not currently provide a way to define an ID, any ID defined in an attribute list will be ignored when syntax highlighting is enabled. Additionally, any key/value pairs which are not Pygments options will be ignored, regardless of whether the attr_list extension is enabled.","title":"Syntax Highlighting"},{"location":"extensions/fenced_code_blocks/#enabling-syntax-highlighting","text":"To enable syntax highlighting, the codehilite extension must be enabled and the codehilite extension\u2019s use_pygments option must be set to True (the default). Alternatively, so long as the codehilite extension is enabled, you can override a global use_pygments=False option for an individual code block by including use_pygments=true in the attribute list. While the use_pygments key/value pair will not be included in the output, all other attributes will behave as they would if syntax highlighting was enabled only for that code block. Conversely, to disable syntax highlighting on an individual code block, include use_pygments=false in the attribute list. While the use_pygments key/value pair will not be included in the output, all other attributes will behave as they would if syntax highlighting was disabled for that code block regardless of any global setting. See Also You will need to properly install and setup Pygments for syntax highlighting to work. See the codehilite extension\u2019s documentation for details.","title":"Enabling Syntax Highlighting"},{"location":"extensions/fenced_code_blocks/#usage","text":"See Extensions for general extension usage. Use fenced_code as the name of the extension. See the Library Reference for information about configuring extensions. The following option is provided to configure the output: lang_prefix : The prefix prepended to the language class assigned to the HTML <code> tag. Default: language- . A trivial example: markdown.markdown(some_text, extensions=['fenced_code'])","title":"Usage"},{"location":"extensions/footnotes/","text":"Footnotes \u00b6 Summary \u00b6 The Footnotes extension adds syntax for defining footnotes in Markdown documents. This extension is included in the standard Markdown library. Syntax \u00b6 Python-Markdown\u2019s Footnote syntax follows the generally accepted syntax of the Markdown community at large and almost exactly matches PHP Markdown Extra \u2019s implementation of footnotes. The only differences involve a few subtleties in the output. Example: Footnotes[^1] have a label[^@#$%] and the footnote's content. [^1]: This is a footnote content. [^@#$%]: A footnote on the label: \"@#$%\". A footnote label must start with a caret ^ and may contain any inline text (including spaces) between a set of square brackets [] . Only the first caret has any special meaning. A footnote content must start with the label followed by a colon and at least one space. The label used to define the content must exactly match the label used in the body (including capitalization and white space). The content would then follow the label either on the same line or on the next line. The content may contain multiple lines, paragraphs, code blocks, blockquotes and most any other markdown syntax. The additional lines must be indented one level (four spaces or one tab). When working with multiple blocks, it may be helpful to start the content on a separate line from the label which defines the content. This way the entire block is indented consistently and any errors are more easily discernible by the author. [^1]: The first paragraph of the definition. Paragraph two of the definition. > A blockquote with > multiple lines. a code block A final paragraph. Usage \u00b6 See Extensions for general extension usage. Use footnotes as the name of the extension. See the Library Reference for information about configuring extensions. The following options are provided to configure the output: PLACE_MARKER : A text string used to mark the position where the footnotes are rendered. Defaults to ///Footnotes Go Here/// . If the place marker text is not found in the document, the footnote definitions are placed at the end of the resulting HTML document. UNIQUE_IDS : Whether to avoid collisions across multiple calls to reset() . Defaults to False . BACKLINK_TEXT : The text string that links from the footnote definition back to the position in the document. Defaults to &#8617; . SUPERSCRIPT_TEXT : The text string that links from the position in the document to the footnote definition. Defaults to {} , i.e. only the footnote\u2019s number. BACKLINK_TITLE : The text string for the title HTML attribute of the footnote definition link. The placeholder {} will be replaced by the footnote number. Defaults to Jump back to footnote {} in the text . SEPARATOR : The text string used to set the footnote separator. Defaults to : . A trivial example: markdown.markdown(some_text, extensions=['footnotes']) Resetting Instance State \u00b6 Footnote definitions are stored within the markdown.Markdown class instance between multiple runs of the class. This allows footnotes from all runs to be included in output, with links and references that are unique, even though the class has been called multiple times. However, if needed, the definitions can be cleared between runs by calling reset . For instance, the home page of a blog might include the content from multiple documents. By not calling reset , all of the footnotes will be rendered, and they will all have unique links and references. On the other hand, individual blog post pages might need the content from only one document, and should have footnotes pertaining only to that page. By calling reset between runs, the footnote definitions from the first document will be cleared before the second document is rendered. An example of calling reset : md = markdown.Markdown(extensions=['footnotes']) html1 = md.convert(text_with_footnote) md.reset() html2 = md.convert(text_without_footnote)","title":"Footnotes"},{"location":"extensions/footnotes/#footnotes","text":"","title":"Footnotes"},{"location":"extensions/footnotes/#summary","text":"The Footnotes extension adds syntax for defining footnotes in Markdown documents. This extension is included in the standard Markdown library.","title":"Summary"},{"location":"extensions/footnotes/#syntax","text":"Python-Markdown\u2019s Footnote syntax follows the generally accepted syntax of the Markdown community at large and almost exactly matches PHP Markdown Extra \u2019s implementation of footnotes. The only differences involve a few subtleties in the output. Example: Footnotes[^1] have a label[^@#$%] and the footnote's content. [^1]: This is a footnote content. [^@#$%]: A footnote on the label: \"@#$%\". A footnote label must start with a caret ^ and may contain any inline text (including spaces) between a set of square brackets [] . Only the first caret has any special meaning. A footnote content must start with the label followed by a colon and at least one space. The label used to define the content must exactly match the label used in the body (including capitalization and white space). The content would then follow the label either on the same line or on the next line. The content may contain multiple lines, paragraphs, code blocks, blockquotes and most any other markdown syntax. The additional lines must be indented one level (four spaces or one tab). When working with multiple blocks, it may be helpful to start the content on a separate line from the label which defines the content. This way the entire block is indented consistently and any errors are more easily discernible by the author. [^1]: The first paragraph of the definition. Paragraph two of the definition. > A blockquote with > multiple lines. a code block A final paragraph.","title":"Syntax"},{"location":"extensions/footnotes/#usage","text":"See Extensions for general extension usage. Use footnotes as the name of the extension. See the Library Reference for information about configuring extensions. The following options are provided to configure the output: PLACE_MARKER : A text string used to mark the position where the footnotes are rendered. Defaults to ///Footnotes Go Here/// . If the place marker text is not found in the document, the footnote definitions are placed at the end of the resulting HTML document. UNIQUE_IDS : Whether to avoid collisions across multiple calls to reset() . Defaults to False . BACKLINK_TEXT : The text string that links from the footnote definition back to the position in the document. Defaults to &#8617; . SUPERSCRIPT_TEXT : The text string that links from the position in the document to the footnote definition. Defaults to {} , i.e. only the footnote\u2019s number. BACKLINK_TITLE : The text string for the title HTML attribute of the footnote definition link. The placeholder {} will be replaced by the footnote number. Defaults to Jump back to footnote {} in the text . SEPARATOR : The text string used to set the footnote separator. Defaults to : . A trivial example: markdown.markdown(some_text, extensions=['footnotes'])","title":"Usage"},{"location":"extensions/footnotes/#resetting-instance-state","text":"Footnote definitions are stored within the markdown.Markdown class instance between multiple runs of the class. This allows footnotes from all runs to be included in output, with links and references that are unique, even though the class has been called multiple times. However, if needed, the definitions can be cleared between runs by calling reset . For instance, the home page of a blog might include the content from multiple documents. By not calling reset , all of the footnotes will be rendered, and they will all have unique links and references. On the other hand, individual blog post pages might need the content from only one document, and should have footnotes pertaining only to that page. By calling reset between runs, the footnote definitions from the first document will be cleared before the second document is rendered. An example of calling reset : md = markdown.Markdown(extensions=['footnotes']) html1 = md.convert(text_with_footnote) md.reset() html2 = md.convert(text_without_footnote)","title":"Resetting Instance State"},{"location":"extensions/legacy_attrs/","text":"Legacy Attributes \u00b6 Summary \u00b6 The Legacy Attributes extension restores Python-Markdown\u2019s original attribute setting syntax. Older versions of Python Markdown (prior to 3.0) included built-in and undocumented support for defining attributes on elements. Most users have never made use of the syntax and it has been deprecated in favor of Attribute Lists . This extension restores the legacy behavior for users who have existing documents which use the syntax. Syntax \u00b6 Attributes are defined by including the following within the element you wish to assign the attributes to: {@key=value} For example, to define a class to a paragraph: A paragraph with the attribute defined {@class=foo}anywhere within. Which results in the following output: <p class=\"foo\">A paragraph with the attribute defined anywhere within.</p> The same applies for inline elements: Some *emphasized{@id=bar}* text. <p>Some <em id=\"bar\">emphasized</em> text.</p> You can also define attributes in images: ![Alt text{@id=baz}](path/to/image.jpg) <p><img alt=\"Alt text\" id=\"baz\" src=\"path/to/image.jpg\" /></p> Usage \u00b6 See Extensions for general extension usage. Use legacy_attrs as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown.markdown(some_text, extensions=['legacy_attrs'])","title":"Legacy Attributes"},{"location":"extensions/legacy_attrs/#legacy-attributes","text":"","title":"Legacy Attributes"},{"location":"extensions/legacy_attrs/#summary","text":"The Legacy Attributes extension restores Python-Markdown\u2019s original attribute setting syntax. Older versions of Python Markdown (prior to 3.0) included built-in and undocumented support for defining attributes on elements. Most users have never made use of the syntax and it has been deprecated in favor of Attribute Lists . This extension restores the legacy behavior for users who have existing documents which use the syntax.","title":"Summary"},{"location":"extensions/legacy_attrs/#syntax","text":"Attributes are defined by including the following within the element you wish to assign the attributes to: {@key=value} For example, to define a class to a paragraph: A paragraph with the attribute defined {@class=foo}anywhere within. Which results in the following output: <p class=\"foo\">A paragraph with the attribute defined anywhere within.</p> The same applies for inline elements: Some *emphasized{@id=bar}* text. <p>Some <em id=\"bar\">emphasized</em> text.</p> You can also define attributes in images: ![Alt text{@id=baz}](path/to/image.jpg) <p><img alt=\"Alt text\" id=\"baz\" src=\"path/to/image.jpg\" /></p>","title":"Syntax"},{"location":"extensions/legacy_attrs/#usage","text":"See Extensions for general extension usage. Use legacy_attrs as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown.markdown(some_text, extensions=['legacy_attrs'])","title":"Usage"},{"location":"extensions/legacy_em/","text":"Legacy EM \u00b6 Summary \u00b6 The Legacy EM extension restores Markdown\u2019s original behavior for emphasis and strong syntax when using underscores. By default Python-Markdown treats _connected_words_ intelligently by recognizing that mid-word underscores should not be used for emphasis. In other words, by default, that input would result in this output: <em>connected_words</em> . However, that behavior is not consistent with the original rules or the behavior of the reference implementation. Therefore, this extension can be used to better match the reference implementation. With the extension enabled, the above input would result in this output: <em>connected</em>words_ . Usage \u00b6 See Extensions for general extension usage. Use legacy_em as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown.markdown(some_text, extensions=['legacy_em'])","title":"Legacy Emphasis"},{"location":"extensions/legacy_em/#legacy-em","text":"","title":"Legacy EM"},{"location":"extensions/legacy_em/#summary","text":"The Legacy EM extension restores Markdown\u2019s original behavior for emphasis and strong syntax when using underscores. By default Python-Markdown treats _connected_words_ intelligently by recognizing that mid-word underscores should not be used for emphasis. In other words, by default, that input would result in this output: <em>connected_words</em> . However, that behavior is not consistent with the original rules or the behavior of the reference implementation. Therefore, this extension can be used to better match the reference implementation. With the extension enabled, the above input would result in this output: <em>connected</em>words_ .","title":"Summary"},{"location":"extensions/legacy_em/#usage","text":"See Extensions for general extension usage. Use legacy_em as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown.markdown(some_text, extensions=['legacy_em'])","title":"Usage"},{"location":"extensions/md_in_html/","text":"Markdown in HTML \u00b6 Summary \u00b6 An extension that parses Markdown inside of HTML tags. Syntax \u00b6 By default, Markdown ignores any content within a raw HTML block-level element. With the md-in-html extension enabled, the content of a raw HTML block-level element can be parsed as Markdown by including a markdown attribute on the opening tag. The markdown attribute will be stripped from the output, while all other attributes will be preserved. The markdown attribute can be assigned one of three values: \"1\" , \"block\" , or \"span\" . Note The expressions \u201cblock-level\u201d and \u201cspan-level\u201d as used in this document refer to an element\u2019s designation according to the HTML specification. Whereas the \"span\" and \"block\" values assigned to the markdown attribute refer to the Markdown parser\u2019s behavior. markdown=\"1\" { #1 } \u00b6 When the markdown attribute is set to \"1\" , then the parser will use the default behavior for that specific tag. The following tags have the block behavior by default: article , aside , blockquote , body , colgroup , details , div , dl , fieldset , figcaption , figure , footer , form , group , header , hgroup , hr , iframe , main , map , menu , nav , noscript , object , ol , output , progress , section , table , tbody , tfoot , thead , tr , ul and video . For example, the following: <div markdown=\"1\"> This is a *Markdown* Paragraph. </div> \u2026 is rendered as: <div> <p>This is a <em>Markdown</em> Paragraph.</p> </div> The following tags have the span behavior by default: address , dd , dt , h[1-6] , legend , li , p , td , and th . For example, the following: <p markdown=\"1\"> This is not a *Markdown* Paragraph. </p> \u2026 is rendered as: <p> This is not a <em>Markdown</em> Paragraph. </p> markdown=\"block\" \u00b6 When the markdown attribute is set to \"block\" , then the parser will force the block behavior on the contents of the element so long as it is one of the block or span tags. The content of a block element is parsed into block-level content. In other words, the text is rendered as paragraphs, headers, lists, blockquotes, etc. Any inline syntax within those elements is processed as well. For example, the following: <section markdown=\"block\"> # A header. A *Markdown* paragraph. * A list item. * A second list item. </section> \u2026 is rendered as: <section> <h1>A header.</h1> <p>A <em>Markdown</em> paragraph.</p> <ul> <li>A list item.</li> <li>A second list item.</li> </ul> </section> Warning Forcing elements to be parsed as block elements when they are not by default could result in invalid HTML. For example, one could force a <p> element to be nested within another <p> element. In most cases it is recommended to use the default behavior of markdown=\"1\" . Explicitly setting markdown=\"block\" should be reserved for advanced users who understand the HTML specification and how browsers parse and render HTML. markdown=\"span\" \u00b6 When the markdown attribute is set to \"span\" , then the parser will force the span behavior on the contents of the element so long as it is one of the block or span tags. The content of a span element is not parsed into block-level content. In other words, the content will not be rendered as paragraphs, headers, etc. Only inline syntax will be rendered, such as links, strong, emphasis, etc. For example, the following: <div markdown=\"span\"> # *Not* a header </div> \u2026 is rendered as: <div> # <em>Not</em> a header </div> Ignored Elements \u00b6 The following tags are always ignored, regardless of any markdown attribute: canvas , math , option , pre , script , style , and textarea . All other raw HTML tags are treated as span-level tags and are not affected by this extension. Nesting \u00b6 When nesting multiple levels of raw HTML elements, a markdown attribute must be defined for each block-level element. For any block-level element which does not have a markdown attribute, everything inside that element is ignored, including child elements with markdown attributes. For example, the following: <article id=\"my-article\" markdown=\"1\"> # Article Title A Markdown paragraph. <section id=\"section-1\" markdown=\"1\"> ## Section 1 Title <p>Custom raw **HTML** which gets ignored.</p> </section> <section id=\"section-2\" markdown=\"1\"> ## Section 2 Title <p markdown=\"1\">**Markdown** content.</p> </section> </article> \u2026 is rendered as: <article id=\"my-article\"> <h1>Article Title</h1> <p>A Markdown paragraph.</p> <section id=\"section-1\"> <h2>Section 1 Title</h2> <p>Custom raw **HTML** which gets ignored.</p> </section> <section id=\"section-2\"> <h2>Section 2 Title</h2> <p><strong>Markdown</strong> content.</p> </section> </article> When the value of an element\u2019s markdown attribute is more permissive that its parent, then the parent\u2019s stricter behavior is enforced. For example, a block element nested within a span element will be parsed using the span behavior. However, if the value of an element\u2019s markdown attribute is the same as, or more restrictive than, its parent, the the child element\u2019s behavior is observed. For example, a block element may contain either block elements or span elements as children and each element will be parsed using the specified behavior. Tag Normalization \u00b6 While the default behavior is for Markdown to not alter raw HTML, as this extension is parsing the content of raw HTML elements, it will do some normalization of the tags of block-level elements. For example, the following raw HTML: <div markdown=\"1\"> <p markdown=\"1\">A Markdown paragraph with *no* closing tag. <p>A raw paragraph with *no* closing tag. </div> \u2026 is rendered as: <div> <p>A Markdown paragraph with <em>no</em> closing tag. </p> <p>A raw paragraph with *no* closing tag. </p> </div> Notice that the parser properly recognizes that an unclosed <p> tag ends when another <p> tag begins or when the parent element ends. In both cases, a closing </p> was added to the end of the element, regardless of whether a markdown attribute was assigned to the element. To avoid any normalization, an element must not be a descendant of any block-level element which has a markdown attribute defined. Warning The normalization behavior is only documented here so that document authors are not surprised when their carefully crafted raw HTML is altered by Markdown. This extension should not be relied on to normalize and generate valid HTML. For the best results, always include valid raw HTML (with both opening and closing tags) in your Markdown documents. Usage \u00b6 From the Python interpreter: >>> import markdown >>> html = markdown.markdown(text, extensions=['md_in_html'])","title":"Markdown in HTML"},{"location":"extensions/md_in_html/#markdown-in-html","text":"","title":"Markdown in HTML"},{"location":"extensions/md_in_html/#summary","text":"An extension that parses Markdown inside of HTML tags.","title":"Summary"},{"location":"extensions/md_in_html/#syntax","text":"By default, Markdown ignores any content within a raw HTML block-level element. With the md-in-html extension enabled, the content of a raw HTML block-level element can be parsed as Markdown by including a markdown attribute on the opening tag. The markdown attribute will be stripped from the output, while all other attributes will be preserved. The markdown attribute can be assigned one of three values: \"1\" , \"block\" , or \"span\" . Note The expressions \u201cblock-level\u201d and \u201cspan-level\u201d as used in this document refer to an element\u2019s designation according to the HTML specification. Whereas the \"span\" and \"block\" values assigned to the markdown attribute refer to the Markdown parser\u2019s behavior.","title":"Syntax"},{"location":"extensions/md_in_html/#markdown1-1","text":"When the markdown attribute is set to \"1\" , then the parser will use the default behavior for that specific tag. The following tags have the block behavior by default: article , aside , blockquote , body , colgroup , details , div , dl , fieldset , figcaption , figure , footer , form , group , header , hgroup , hr , iframe , main , map , menu , nav , noscript , object , ol , output , progress , section , table , tbody , tfoot , thead , tr , ul and video . For example, the following: <div markdown=\"1\"> This is a *Markdown* Paragraph. </div> \u2026 is rendered as: <div> <p>This is a <em>Markdown</em> Paragraph.</p> </div> The following tags have the span behavior by default: address , dd , dt , h[1-6] , legend , li , p , td , and th . For example, the following: <p markdown=\"1\"> This is not a *Markdown* Paragraph. </p> \u2026 is rendered as: <p> This is not a <em>Markdown</em> Paragraph. </p>","title":"markdown=\"1\" { #1 }"},{"location":"extensions/md_in_html/#block","text":"When the markdown attribute is set to \"block\" , then the parser will force the block behavior on the contents of the element so long as it is one of the block or span tags. The content of a block element is parsed into block-level content. In other words, the text is rendered as paragraphs, headers, lists, blockquotes, etc. Any inline syntax within those elements is processed as well. For example, the following: <section markdown=\"block\"> # A header. A *Markdown* paragraph. * A list item. * A second list item. </section> \u2026 is rendered as: <section> <h1>A header.</h1> <p>A <em>Markdown</em> paragraph.</p> <ul> <li>A list item.</li> <li>A second list item.</li> </ul> </section> Warning Forcing elements to be parsed as block elements when they are not by default could result in invalid HTML. For example, one could force a <p> element to be nested within another <p> element. In most cases it is recommended to use the default behavior of markdown=\"1\" . Explicitly setting markdown=\"block\" should be reserved for advanced users who understand the HTML specification and how browsers parse and render HTML.","title":"markdown=\"block\""},{"location":"extensions/md_in_html/#span","text":"When the markdown attribute is set to \"span\" , then the parser will force the span behavior on the contents of the element so long as it is one of the block or span tags. The content of a span element is not parsed into block-level content. In other words, the content will not be rendered as paragraphs, headers, etc. Only inline syntax will be rendered, such as links, strong, emphasis, etc. For example, the following: <div markdown=\"span\"> # *Not* a header </div> \u2026 is rendered as: <div> # <em>Not</em> a header </div>","title":"markdown=\"span\""},{"location":"extensions/md_in_html/#ignored-elements","text":"The following tags are always ignored, regardless of any markdown attribute: canvas , math , option , pre , script , style , and textarea . All other raw HTML tags are treated as span-level tags and are not affected by this extension.","title":"Ignored Elements"},{"location":"extensions/md_in_html/#nesting","text":"When nesting multiple levels of raw HTML elements, a markdown attribute must be defined for each block-level element. For any block-level element which does not have a markdown attribute, everything inside that element is ignored, including child elements with markdown attributes. For example, the following: <article id=\"my-article\" markdown=\"1\"> # Article Title A Markdown paragraph. <section id=\"section-1\" markdown=\"1\"> ## Section 1 Title <p>Custom raw **HTML** which gets ignored.</p> </section> <section id=\"section-2\" markdown=\"1\"> ## Section 2 Title <p markdown=\"1\">**Markdown** content.</p> </section> </article> \u2026 is rendered as: <article id=\"my-article\"> <h1>Article Title</h1> <p>A Markdown paragraph.</p> <section id=\"section-1\"> <h2>Section 1 Title</h2> <p>Custom raw **HTML** which gets ignored.</p> </section> <section id=\"section-2\"> <h2>Section 2 Title</h2> <p><strong>Markdown</strong> content.</p> </section> </article> When the value of an element\u2019s markdown attribute is more permissive that its parent, then the parent\u2019s stricter behavior is enforced. For example, a block element nested within a span element will be parsed using the span behavior. However, if the value of an element\u2019s markdown attribute is the same as, or more restrictive than, its parent, the the child element\u2019s behavior is observed. For example, a block element may contain either block elements or span elements as children and each element will be parsed using the specified behavior.","title":"Nesting"},{"location":"extensions/md_in_html/#tag-normalization","text":"While the default behavior is for Markdown to not alter raw HTML, as this extension is parsing the content of raw HTML elements, it will do some normalization of the tags of block-level elements. For example, the following raw HTML: <div markdown=\"1\"> <p markdown=\"1\">A Markdown paragraph with *no* closing tag. <p>A raw paragraph with *no* closing tag. </div> \u2026 is rendered as: <div> <p>A Markdown paragraph with <em>no</em> closing tag. </p> <p>A raw paragraph with *no* closing tag. </p> </div> Notice that the parser properly recognizes that an unclosed <p> tag ends when another <p> tag begins or when the parent element ends. In both cases, a closing </p> was added to the end of the element, regardless of whether a markdown attribute was assigned to the element. To avoid any normalization, an element must not be a descendant of any block-level element which has a markdown attribute defined. Warning The normalization behavior is only documented here so that document authors are not surprised when their carefully crafted raw HTML is altered by Markdown. This extension should not be relied on to normalize and generate valid HTML. For the best results, always include valid raw HTML (with both opening and closing tags) in your Markdown documents.","title":"Tag Normalization"},{"location":"extensions/md_in_html/#usage","text":"From the Python interpreter: >>> import markdown >>> html = markdown.markdown(text, extensions=['md_in_html'])","title":"Usage"},{"location":"extensions/meta_data/","text":"Meta-Data \u00b6 Summary \u00b6 The Meta-Data extension adds a syntax for defining meta-data about a document. It is inspired by and follows the syntax of MultiMarkdown . Currently, this extension does not use the meta-data in any way, but simply provides it as a Meta attribute of a Markdown instance for use by other extensions or directly by your python code. This extension is included in the standard Markdown library. Syntax \u00b6 Meta-data consists of a series of keywords and values defined at the beginning of a markdown document like this: Title: My Document Summary: A brief description of my document. Authors: Waylan Limberg John Doe Date: October 2, 2007 blank-value: base_url: http://example.com This is the first paragraph of the document. The keywords are case-insensitive and may consist of letters, numbers, underscores and dashes and must end with a colon. The values consist of anything following the colon on the line and may even be blank. If a line is indented by 4 or more spaces, that line is assumed to be an additional line of the value for the previous keyword. A keyword may have as many lines as desired. The first blank line ends all meta-data for the document. Therefore, the first line of a document must not be blank. Alternatively, You may use YAML style delimiters to mark the start and/or end of your meta-data. When doing so, the first line of your document must be --- . The meta-data ends at the first blank line or the first line containing an end deliminator (either --- or ... ), whichever comes first. Even though YAML delimiters are supported, meta-data is not parsed as YAML. All meta-data is stripped from the document prior to any further processing by Markdown. Usage \u00b6 See Extensions for general extension usage. Use meta as the name of the extension. A trivial example: markdown.markdown(some_text, extensions=['meta']) Accessing the Meta-Data \u00b6 The meta-data is made available as a python Dict in the Meta attribute of an instance of the Markdown class. For example, using the above document: >>> md = markdown.Markdown(extensions = ['meta']) >>> html = md.convert(text) >>> # Meta-data has been stripped from output >>> print html <p>This is the first paragraph of the document.</p> >>> # View meta-data >>> print md.Meta { 'title' : ['My Document'], 'summary' : ['A brief description of my document.'], 'authors' : ['Waylan Limberg', 'John Doe'], 'date' : ['October 2, 2007'], 'blank-value' : [''], 'base_url' : ['http://example.com'] } Note that the keys are all lowercase and the values consist of a list of strings where each item is one line for that key. This way, one could preserve line breaks if desired. Or the items could be joined where appropriate. No assumptions are made regarding the data. It is simply passed as found to the Meta attribute. Perhaps the meta-data could be passed into a template system, or used by various Markdown extensions. The possibilities are left to the imagination of the developer. Compatible Extensions \u00b6 The following extensions are currently known to work with the Meta-Data extension. The keywords they are known to support are also listed. WikiLinks wiki_base_url wiki_end_url wiki_html_class","title":"Meta-Data"},{"location":"extensions/meta_data/#meta-data","text":"","title":"Meta-Data"},{"location":"extensions/meta_data/#summary","text":"The Meta-Data extension adds a syntax for defining meta-data about a document. It is inspired by and follows the syntax of MultiMarkdown . Currently, this extension does not use the meta-data in any way, but simply provides it as a Meta attribute of a Markdown instance for use by other extensions or directly by your python code. This extension is included in the standard Markdown library.","title":"Summary"},{"location":"extensions/meta_data/#syntax","text":"Meta-data consists of a series of keywords and values defined at the beginning of a markdown document like this: Title: My Document Summary: A brief description of my document. Authors: Waylan Limberg John Doe Date: October 2, 2007 blank-value: base_url: http://example.com This is the first paragraph of the document. The keywords are case-insensitive and may consist of letters, numbers, underscores and dashes and must end with a colon. The values consist of anything following the colon on the line and may even be blank. If a line is indented by 4 or more spaces, that line is assumed to be an additional line of the value for the previous keyword. A keyword may have as many lines as desired. The first blank line ends all meta-data for the document. Therefore, the first line of a document must not be blank. Alternatively, You may use YAML style delimiters to mark the start and/or end of your meta-data. When doing so, the first line of your document must be --- . The meta-data ends at the first blank line or the first line containing an end deliminator (either --- or ... ), whichever comes first. Even though YAML delimiters are supported, meta-data is not parsed as YAML. All meta-data is stripped from the document prior to any further processing by Markdown.","title":"Syntax"},{"location":"extensions/meta_data/#usage","text":"See Extensions for general extension usage. Use meta as the name of the extension. A trivial example: markdown.markdown(some_text, extensions=['meta'])","title":"Usage"},{"location":"extensions/meta_data/#accessing-the-meta-data","text":"The meta-data is made available as a python Dict in the Meta attribute of an instance of the Markdown class. For example, using the above document: >>> md = markdown.Markdown(extensions = ['meta']) >>> html = md.convert(text) >>> # Meta-data has been stripped from output >>> print html <p>This is the first paragraph of the document.</p> >>> # View meta-data >>> print md.Meta { 'title' : ['My Document'], 'summary' : ['A brief description of my document.'], 'authors' : ['Waylan Limberg', 'John Doe'], 'date' : ['October 2, 2007'], 'blank-value' : [''], 'base_url' : ['http://example.com'] } Note that the keys are all lowercase and the values consist of a list of strings where each item is one line for that key. This way, one could preserve line breaks if desired. Or the items could be joined where appropriate. No assumptions are made regarding the data. It is simply passed as found to the Meta attribute. Perhaps the meta-data could be passed into a template system, or used by various Markdown extensions. The possibilities are left to the imagination of the developer.","title":"Accessing the Meta-Data"},{"location":"extensions/meta_data/#compatible-extensions","text":"The following extensions are currently known to work with the Meta-Data extension. The keywords they are known to support are also listed. WikiLinks wiki_base_url wiki_end_url wiki_html_class","title":"Compatible Extensions"},{"location":"extensions/nl2br/","text":"New-Line-to-Break Extension \u00b6 Summary \u00b6 The New-Line-to-Break ( nl2br ) Extension will cause newlines to be treated as hard breaks; like StackOverflow and GitHub flavored Markdown do. Example \u00b6 >>> import markdown >>> text = \"\"\" ... Line 1 ... Line 2 ... \"\"\" >>> html = markdown.markdown(text, extensions=['nl2br']) >>> print html <p>Line 1<br /> Line 2</p> Usage \u00b6 See Extensions for general extension usage. Use nl2br as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown.markdown(some_text, extensions=['nl2br'])","title":"New Line to Break"},{"location":"extensions/nl2br/#new-line-to-break-extension","text":"","title":"New-Line-to-Break Extension"},{"location":"extensions/nl2br/#summary","text":"The New-Line-to-Break ( nl2br ) Extension will cause newlines to be treated as hard breaks; like StackOverflow and GitHub flavored Markdown do.","title":"Summary"},{"location":"extensions/nl2br/#example","text":">>> import markdown >>> text = \"\"\" ... Line 1 ... Line 2 ... \"\"\" >>> html = markdown.markdown(text, extensions=['nl2br']) >>> print html <p>Line 1<br /> Line 2</p>","title":"Example"},{"location":"extensions/nl2br/#usage","text":"See Extensions for general extension usage. Use nl2br as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown.markdown(some_text, extensions=['nl2br'])","title":"Usage"},{"location":"extensions/sane_lists/","text":"Sane Lists \u00b6 Summary \u00b6 The Sane Lists extension alters the behavior of the Markdown List syntax to be less surprising. This extension is included in the standard Markdown library. Syntax \u00b6 Sane Lists do not allow the mixing of list types. In other words, an ordered list will not continue when an unordered list item is encountered and vice versa. For example: 1. Ordered item 1 2. Ordered item 2 * Unordered item 1 * Unordered item 2 will result in the following output: <ol> <li>Ordered item 1</li> <li>Ordered item 2</li> </ol> <ul> <li>Unordered item 1</li> <li>Unordered item 2</li> </ul> Whereas the default Markdown behavior would be to generate an unordered list. Note that, unlike the default Markdown behavior, if a blank line is not included between list items, the different list type is ignored completely. This corresponds to the behavior of paragraphs. For example: A Paragraph. * Not a list item. 1. Ordered list item. * Not a separate list item. With this extension the above will result in the following output: <p>A Paragraph. * Not a list item.</p> <ol> <li>Ordered list item. * Not a separate list item.</li> </ol> Sane lists also recognize the number used in ordered lists. Given the following list: 4. Apples 5. Oranges 6. Pears By default markdown will ignore the fact that the first line started with item number \u201c4\u201d and the HTML list will start with a number \u201c1\u201d. This extension will result in the following HTML output: <ol start=\"4\"> <li>Apples</li> <li>Oranges</li> <li>Pears</li> </ol> In all other ways, Sane Lists should behave as normal Markdown lists. Usage \u00b6 See Extensions for general extension usage. Use sane_lists as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown.markdown(some_text, extensions=['sane_lists'])","title":"Sane Lists"},{"location":"extensions/sane_lists/#sane-lists","text":"","title":"Sane Lists"},{"location":"extensions/sane_lists/#summary","text":"The Sane Lists extension alters the behavior of the Markdown List syntax to be less surprising. This extension is included in the standard Markdown library.","title":"Summary"},{"location":"extensions/sane_lists/#syntax","text":"Sane Lists do not allow the mixing of list types. In other words, an ordered list will not continue when an unordered list item is encountered and vice versa. For example: 1. Ordered item 1 2. Ordered item 2 * Unordered item 1 * Unordered item 2 will result in the following output: <ol> <li>Ordered item 1</li> <li>Ordered item 2</li> </ol> <ul> <li>Unordered item 1</li> <li>Unordered item 2</li> </ul> Whereas the default Markdown behavior would be to generate an unordered list. Note that, unlike the default Markdown behavior, if a blank line is not included between list items, the different list type is ignored completely. This corresponds to the behavior of paragraphs. For example: A Paragraph. * Not a list item. 1. Ordered list item. * Not a separate list item. With this extension the above will result in the following output: <p>A Paragraph. * Not a list item.</p> <ol> <li>Ordered list item. * Not a separate list item.</li> </ol> Sane lists also recognize the number used in ordered lists. Given the following list: 4. Apples 5. Oranges 6. Pears By default markdown will ignore the fact that the first line started with item number \u201c4\u201d and the HTML list will start with a number \u201c1\u201d. This extension will result in the following HTML output: <ol start=\"4\"> <li>Apples</li> <li>Oranges</li> <li>Pears</li> </ol> In all other ways, Sane Lists should behave as normal Markdown lists.","title":"Syntax"},{"location":"extensions/sane_lists/#usage","text":"See Extensions for general extension usage. Use sane_lists as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown.markdown(some_text, extensions=['sane_lists'])","title":"Usage"},{"location":"extensions/smarty/","text":"SmartyPants \u00b6 Summary \u00b6 The SmartyPants extension converts ASCII dashes, quotes and ellipses to their HTML entity equivalents. ASCII symbol Replacements HTML Entities Substitution Keys ' \u2018 \u2019 &lsquo; &rsquo; 'left-single-quote' , 'right-single-quote' \" \u201c \u201d &ldquo; &rdquo; 'left-double-quote' , 'right-double-quote' << >> \u00ab \u00bb &laquo; &raquo; 'left-angle-quote' , 'right-angle-quote' ... \u2026 &hellip; 'ellipsis' -- \u2013 &ndash; 'ndash' --- \u2014 &mdash; 'mdash' Using the configuration option \u2018substitutions\u2019 you can overwrite the default substitutions. Just pass a dict mapping (a subset of) the keys to the substitution strings. For example, one might use the following configuration to get correct quotes for the German language: extension_configs = { 'smarty': { 'substitutions': { 'left-single-quote': '&sbquo;', # sb is not a typo! 'right-single-quote': '&lsquo;', 'left-double-quote': '&bdquo;', 'right-double-quote': '&ldquo;' } } } Note This extension re-implements the Python SmartyPants library by integrating it into the markdown parser. While this does not provide any additional features, it does offer a few advantages. Notably, it will not try to work on highlighted code blocks (using the CodeHilite Extension) like the third party library has been known to do. Usage \u00b6 See Extensions for general extension usage. Use smarty as the name of the extension. See the Library Reference for information about configuring extensions. The following options are provided to configure the output: Option Default value Description smart_dashes True whether to convert dashes smart_quotes True whether to convert straight quotes smart_angled_quotes False whether to convert angled quotes smart_ellipses True whether to convert ellipses substitutions {} overwrite default substitutions A trivial example: markdown.markdown(some_text, extensions=['smarty']) Further reading \u00b6 SmartyPants extension is based on the original SmartyPants implementation by John Gruber. Please read its documentation for details.","title":"SmartyPants"},{"location":"extensions/smarty/#smartypants","text":"","title":"SmartyPants"},{"location":"extensions/smarty/#summary","text":"The SmartyPants extension converts ASCII dashes, quotes and ellipses to their HTML entity equivalents. ASCII symbol Replacements HTML Entities Substitution Keys ' \u2018 \u2019 &lsquo; &rsquo; 'left-single-quote' , 'right-single-quote' \" \u201c \u201d &ldquo; &rdquo; 'left-double-quote' , 'right-double-quote' << >> \u00ab \u00bb &laquo; &raquo; 'left-angle-quote' , 'right-angle-quote' ... \u2026 &hellip; 'ellipsis' -- \u2013 &ndash; 'ndash' --- \u2014 &mdash; 'mdash' Using the configuration option \u2018substitutions\u2019 you can overwrite the default substitutions. Just pass a dict mapping (a subset of) the keys to the substitution strings. For example, one might use the following configuration to get correct quotes for the German language: extension_configs = { 'smarty': { 'substitutions': { 'left-single-quote': '&sbquo;', # sb is not a typo! 'right-single-quote': '&lsquo;', 'left-double-quote': '&bdquo;', 'right-double-quote': '&ldquo;' } } } Note This extension re-implements the Python SmartyPants library by integrating it into the markdown parser. While this does not provide any additional features, it does offer a few advantages. Notably, it will not try to work on highlighted code blocks (using the CodeHilite Extension) like the third party library has been known to do.","title":"Summary"},{"location":"extensions/smarty/#usage","text":"See Extensions for general extension usage. Use smarty as the name of the extension. See the Library Reference for information about configuring extensions. The following options are provided to configure the output: Option Default value Description smart_dashes True whether to convert dashes smart_quotes True whether to convert straight quotes smart_angled_quotes False whether to convert angled quotes smart_ellipses True whether to convert ellipses substitutions {} overwrite default substitutions A trivial example: markdown.markdown(some_text, extensions=['smarty'])","title":"Usage"},{"location":"extensions/smarty/#further-reading","text":"SmartyPants extension is based on the original SmartyPants implementation by John Gruber. Please read its documentation for details.","title":"Further reading"},{"location":"extensions/tables/","text":"Tables \u00b6 Summary \u00b6 The Tables extension adds the ability to create tables in Markdown documents. This extension is included in the standard Markdown library. Syntax \u00b6 Tables are defined using the syntax established in PHP Markdown Extra . Thus, the following text (taken from the above referenced PHP documentation): First Header | Second Header ------------- | ------------- Content Cell | Content Cell Content Cell | Content Cell will be rendered as: <table> <thead> <tr> <th>First Header</th> <th>Second Header</th> </tr> </thead> <tbody> <tr> <td>Content Cell</td> <td>Content Cell</td> </tr> <tr> <td>Content Cell</td> <td>Content Cell</td> </tr> </tbody> </table> See Also The Attribute Lists extension includes support for defining attributes on table cells. Usage \u00b6 See Extensions for general extension usage. Use tables as the name of the extension. See the Library Reference for information about configuring extensions. The following options are provided to change the default behavior: use_align_attribute : Set to True to use align instead of an appropriate style attribute Default: 'False' A trivial example: markdown.markdown(some_text, extensions=['tables']) Examples \u00b6 For an example, let us suppose that alignment should be controlled by the legacy align attribute. >>> from markdown.extensions.tables import TableExtension >>> html = markdown.markdown(text, ... extensions=[TableExtension(use_align_attribute=True)] ... )","title":"Tables"},{"location":"extensions/tables/#tables","text":"","title":"Tables"},{"location":"extensions/tables/#summary","text":"The Tables extension adds the ability to create tables in Markdown documents. This extension is included in the standard Markdown library.","title":"Summary"},{"location":"extensions/tables/#syntax","text":"Tables are defined using the syntax established in PHP Markdown Extra . Thus, the following text (taken from the above referenced PHP documentation): First Header | Second Header ------------- | ------------- Content Cell | Content Cell Content Cell | Content Cell will be rendered as: <table> <thead> <tr> <th>First Header</th> <th>Second Header</th> </tr> </thead> <tbody> <tr> <td>Content Cell</td> <td>Content Cell</td> </tr> <tr> <td>Content Cell</td> <td>Content Cell</td> </tr> </tbody> </table> See Also The Attribute Lists extension includes support for defining attributes on table cells.","title":"Syntax"},{"location":"extensions/tables/#usage","text":"See Extensions for general extension usage. Use tables as the name of the extension. See the Library Reference for information about configuring extensions. The following options are provided to change the default behavior: use_align_attribute : Set to True to use align instead of an appropriate style attribute Default: 'False' A trivial example: markdown.markdown(some_text, extensions=['tables'])","title":"Usage"},{"location":"extensions/tables/#examples","text":"For an example, let us suppose that alignment should be controlled by the legacy align attribute. >>> from markdown.extensions.tables import TableExtension >>> html = markdown.markdown(text, ... extensions=[TableExtension(use_align_attribute=True)] ... )","title":"Examples"},{"location":"extensions/toc/","text":"Table of Contents \u00b6 Summary \u00b6 The Table of Contents extension generates a Table of Contents from a Markdown document and adds it into the resulting HTML document. This extension is included in the standard Markdown library. Syntax \u00b6 By default, all headers will automatically have unique id attributes generated based upon the text of the header. Note this example, in which all three headers would have the same id : #Header #Header #Header Results in: <h1 id=\"header\">Header</h1> <h1 id=\"header_1\">Header</h1> <h1 id=\"header_2\">Header</h1> Place a marker in the document where you would like the Table of Contents to appear. Then, a nested list of all the headers in the document will replace the marker. The marker defaults to [TOC] so the following document: [TOC] # Header 1 ## Header 2 would generate the following output: <div class=\"toc\"> <ul> <li><a href=\"#header-1\">Header 1</a></li> <ul> <li><a href=\"#header-2\">Header 2</a></li> </ul> </ul> </div> <h1 id=\"header-1\">Header 1</h1> <h2 id=\"header-2\">Header 2</h2> Regardless of whether a marker is found in the document (or disabled), the Table of Contents is available as an attribute ( toc ) on the Markdown class. This allows one to insert the Table of Contents elsewhere in their page template. For example: >>> md = markdown.Markdown(extensions=['toc']) >>> html = md.convert(text) >>> page = render_some_template(context={'body': html, 'toc': md.toc}) The toc_tokens attribute is also available on the Markdown class and contains a nested list of dict objects. For example, the above document would result in the following object at md.toc_tokens : [ { 'level': 1, 'id': 'header-1', 'name': 'Header 1', 'html': 'Header 1', 'data-toc-label': '', 'children': [ {'level': 2, 'id': 'header-2', 'name': 'Header 2', 'children':[]} ] } ] Note that the level refers to the hn level. In other words, <h1> is level 1 and <h2> is level 2 , etc. Be aware that improperly nested levels in the input may result in odd nesting of the output. name is the sanitized value which would also be used as a label for the HTML version of the Table of Contents. html contains the fully rendered HTML content of the heading and has not been sanitized in any way. This may be used with your own custom sanitation to create custom table of contents. Custom Labels \u00b6 In most cases, the text label in the Table of Contents should match the text of the header. However, occasionally that is not desirable. In that case, if this extension is used in conjunction with the Attribute Lists Extension and a data-toc-label attribute is defined on the header, then the contents of that attribute will be used as the text label for the item in the Table of Contents. For example, the following Markdown: [TOC] # Functions ## `markdown.markdown(text [, **kwargs])` { #markdown data-toc-label='markdown.markdown' } would generate the following output: <div class=\"toc\"> <ul> <li><a href=\"#functions\">Functions</a></li> <ul> <li><a href=\"#markdown\">markdown.markdown</a></li> </ul> </ul> </div> <h1 id=\"functions\">Functions</h1> <h2 id=\"markdown\"><code>markdown.markdown(text [, **kwargs])</code></h2> Notice that the text in the Table of Contents is much cleaner and easier to read in the context of a Table of Contents. The data-toc-label is not included in the HTML header element. Also note that the ID was manually defined in the attribute list to provide a cleaner URL when linking to the header. If the ID is not manually defined, it is always derived from the text of the header, never from the data-toc-label attribute. The value of the data-toc-label attribute is sanitized and stripped of any HTML tags. However, toc_tokens will contain the raw content under data-toc-label . Usage \u00b6 See Extensions for general extension usage. Use toc as the name of the extension. See the Library Reference for information about configuring extensions. The following options are provided to configure the output: marker : Text to find and replace with the Table of Contents. Defaults to [TOC] . Set to an empty string to disable searching for a marker, which may save some time, especially on long documents. title : Title to insert in the Table of Contents\u2019 <div> . Defaults to None . title_class : CSS class used for the title contained in the Table of Contents. Defaults to toctitle . toc_class : CSS class(es) used for the <div> containing the Table of Contents. Defaults to toc . anchorlink : Set to True to cause all headers to link to themselves. Default is False . anchorlink_class : CSS class(es) used for the link. Defaults to toclink . permalink : Set to True or a string to generate permanent links at the end of each header. Useful with Sphinx style sheets. When set to True the paragraph symbol (\u00b6 or \u201c &para; \u201d) is used as the link text. When set to a string, the provided string is used as the link text. permalink_class : CSS class(es) used for the link. Defaults to headerlink . permalink_title : Title attribute of the permanent link. Defaults to Permanent link . permalink_leading : Set to True if the extension should generate leading permanent links. Default is False . Leading permanent links are placed at the start of the header tag, before any header content. The default permalink behavior (when permalink_leading is unset or set to False ) creates trailing permanent links, which are placed at the end of the header content. baselevel : Base level for headers. Defaults to 1 . The baselevel setting allows the header levels to be automatically adjusted to fit within the hierarchy of your HTML templates. For example, suppose the Markdown text for a page should not contain any headers higher than level 3 ( <h3> ). The following will accomplish that: >>> text = ''' ... #Some Header ... ## Next Level''' >>> from markdown.extensions.toc import TocExtension >>> html = markdown.markdown(text, extensions=[TocExtension(baselevel=3)]) >>> print html <h3 id=\"some_header\">Some Header</h3> <h4 id=\"next_level\">Next Level</h4>' slugify : Callable to generate anchors. Default: markdown.extensions.toc.slugify In order to use a different algorithm to define the id attributes, define and pass in a callable which takes the following two arguments: value : The string to slugify. separator : The Word Separator. The callable must return a string appropriate for use in HTML id attributes. An alternate version of the default callable supporting Unicode strings is also provided as markdown.extensions.toc.slugify_unicode . separator : Word separator. Character which replaces white space in id. Defaults to \u201c - \u201d. toc_depth Define the range of section levels to include in the Table of Contents. A single integer ( b ) defines the bottom section level ( <h1>..<hb> ) only. A string consisting of two digits separated by a hyphen in between ( \"2-5\" ), define the top ( t ) and the bottom ( b ) ( <ht>..<hb> ). Defaults to 6 (bottom). When used with conjunction with baselevel , this parameter will not take the fitted hierarchy from baselevel into account. That is, if both toc_depth and baselevel are 3 , then only the highest level will be present in the table. If you set baselevel to 3 and toc_depth to \"2-6\" , the first headline will be <h3> and so still included in the Table of Contents. To exclude this first level, you have to set toc_depth to \"4-6\" . A trivial example: markdown.markdown(some_text, extensions=['toc'])","title":"Table of Contents"},{"location":"extensions/toc/#table-of-contents","text":"","title":"Table of Contents"},{"location":"extensions/toc/#summary","text":"The Table of Contents extension generates a Table of Contents from a Markdown document and adds it into the resulting HTML document. This extension is included in the standard Markdown library.","title":"Summary"},{"location":"extensions/toc/#syntax","text":"By default, all headers will automatically have unique id attributes generated based upon the text of the header. Note this example, in which all three headers would have the same id : #Header #Header #Header Results in: <h1 id=\"header\">Header</h1> <h1 id=\"header_1\">Header</h1> <h1 id=\"header_2\">Header</h1> Place a marker in the document where you would like the Table of Contents to appear. Then, a nested list of all the headers in the document will replace the marker. The marker defaults to [TOC] so the following document: [TOC] # Header 1 ## Header 2 would generate the following output: <div class=\"toc\"> <ul> <li><a href=\"#header-1\">Header 1</a></li> <ul> <li><a href=\"#header-2\">Header 2</a></li> </ul> </ul> </div> <h1 id=\"header-1\">Header 1</h1> <h2 id=\"header-2\">Header 2</h2> Regardless of whether a marker is found in the document (or disabled), the Table of Contents is available as an attribute ( toc ) on the Markdown class. This allows one to insert the Table of Contents elsewhere in their page template. For example: >>> md = markdown.Markdown(extensions=['toc']) >>> html = md.convert(text) >>> page = render_some_template(context={'body': html, 'toc': md.toc}) The toc_tokens attribute is also available on the Markdown class and contains a nested list of dict objects. For example, the above document would result in the following object at md.toc_tokens : [ { 'level': 1, 'id': 'header-1', 'name': 'Header 1', 'html': 'Header 1', 'data-toc-label': '', 'children': [ {'level': 2, 'id': 'header-2', 'name': 'Header 2', 'children':[]} ] } ] Note that the level refers to the hn level. In other words, <h1> is level 1 and <h2> is level 2 , etc. Be aware that improperly nested levels in the input may result in odd nesting of the output. name is the sanitized value which would also be used as a label for the HTML version of the Table of Contents. html contains the fully rendered HTML content of the heading and has not been sanitized in any way. This may be used with your own custom sanitation to create custom table of contents.","title":"Syntax"},{"location":"extensions/toc/#custom-labels","text":"In most cases, the text label in the Table of Contents should match the text of the header. However, occasionally that is not desirable. In that case, if this extension is used in conjunction with the Attribute Lists Extension and a data-toc-label attribute is defined on the header, then the contents of that attribute will be used as the text label for the item in the Table of Contents. For example, the following Markdown: [TOC] # Functions ## `markdown.markdown(text [, **kwargs])` { #markdown data-toc-label='markdown.markdown' } would generate the following output: <div class=\"toc\"> <ul> <li><a href=\"#functions\">Functions</a></li> <ul> <li><a href=\"#markdown\">markdown.markdown</a></li> </ul> </ul> </div> <h1 id=\"functions\">Functions</h1> <h2 id=\"markdown\"><code>markdown.markdown(text [, **kwargs])</code></h2> Notice that the text in the Table of Contents is much cleaner and easier to read in the context of a Table of Contents. The data-toc-label is not included in the HTML header element. Also note that the ID was manually defined in the attribute list to provide a cleaner URL when linking to the header. If the ID is not manually defined, it is always derived from the text of the header, never from the data-toc-label attribute. The value of the data-toc-label attribute is sanitized and stripped of any HTML tags. However, toc_tokens will contain the raw content under data-toc-label .","title":"Custom Labels"},{"location":"extensions/toc/#usage","text":"See Extensions for general extension usage. Use toc as the name of the extension. See the Library Reference for information about configuring extensions. The following options are provided to configure the output: marker : Text to find and replace with the Table of Contents. Defaults to [TOC] . Set to an empty string to disable searching for a marker, which may save some time, especially on long documents. title : Title to insert in the Table of Contents\u2019 <div> . Defaults to None . title_class : CSS class used for the title contained in the Table of Contents. Defaults to toctitle . toc_class : CSS class(es) used for the <div> containing the Table of Contents. Defaults to toc . anchorlink : Set to True to cause all headers to link to themselves. Default is False . anchorlink_class : CSS class(es) used for the link. Defaults to toclink . permalink : Set to True or a string to generate permanent links at the end of each header. Useful with Sphinx style sheets. When set to True the paragraph symbol (\u00b6 or \u201c &para; \u201d) is used as the link text. When set to a string, the provided string is used as the link text. permalink_class : CSS class(es) used for the link. Defaults to headerlink . permalink_title : Title attribute of the permanent link. Defaults to Permanent link . permalink_leading : Set to True if the extension should generate leading permanent links. Default is False . Leading permanent links are placed at the start of the header tag, before any header content. The default permalink behavior (when permalink_leading is unset or set to False ) creates trailing permanent links, which are placed at the end of the header content. baselevel : Base level for headers. Defaults to 1 . The baselevel setting allows the header levels to be automatically adjusted to fit within the hierarchy of your HTML templates. For example, suppose the Markdown text for a page should not contain any headers higher than level 3 ( <h3> ). The following will accomplish that: >>> text = ''' ... #Some Header ... ## Next Level''' >>> from markdown.extensions.toc import TocExtension >>> html = markdown.markdown(text, extensions=[TocExtension(baselevel=3)]) >>> print html <h3 id=\"some_header\">Some Header</h3> <h4 id=\"next_level\">Next Level</h4>' slugify : Callable to generate anchors. Default: markdown.extensions.toc.slugify In order to use a different algorithm to define the id attributes, define and pass in a callable which takes the following two arguments: value : The string to slugify. separator : The Word Separator. The callable must return a string appropriate for use in HTML id attributes. An alternate version of the default callable supporting Unicode strings is also provided as markdown.extensions.toc.slugify_unicode . separator : Word separator. Character which replaces white space in id. Defaults to \u201c - \u201d. toc_depth Define the range of section levels to include in the Table of Contents. A single integer ( b ) defines the bottom section level ( <h1>..<hb> ) only. A string consisting of two digits separated by a hyphen in between ( \"2-5\" ), define the top ( t ) and the bottom ( b ) ( <ht>..<hb> ). Defaults to 6 (bottom). When used with conjunction with baselevel , this parameter will not take the fitted hierarchy from baselevel into account. That is, if both toc_depth and baselevel are 3 , then only the highest level will be present in the table. If you set baselevel to 3 and toc_depth to \"2-6\" , the first headline will be <h3> and so still included in the Table of Contents. To exclude this first level, you have to set toc_depth to \"4-6\" . A trivial example: markdown.markdown(some_text, extensions=['toc'])","title":"Usage"},{"location":"extensions/wikilinks/","text":"WikiLinks \u00b6 Summary \u00b6 The WikiLinks extension adds support for WikiLinks . Specifically, any [[bracketed]] word is converted to a link. This extension is included in the standard Markdown library. Syntax \u00b6 A [[bracketed]] word is any combination of upper or lower case letters, number, dashes, underscores and spaces surrounded by double brackets. Therefore [[Bracketed]] would produce the following HTML: <a href=\"/Bracketed/\" class=\"wikilink\">Bracketed</a> Note that WikiLinks are automatically assigned class=\"wikilink\" making it easy to style WikiLinks differently from other links on a page if one so desires. See below for ways to alter the class. Also note that when a space is used, the space is converted to an underscore in the link but left as-is in the label. Perhaps an example would illustrate this best: [[Wiki Link]] becomes <a href=\"/Wiki_Link/\" class=\"wikilink\">Wiki Link</a> Usage \u00b6 See Extensions for general extension usage. Use wikilinks as the name of the extension. See the Library Reference for information about configuring extensions. The default behavior is to point each link to the document root of the current domain and close with a trailing slash. Additionally, each link is assigned to the HTML class wikilink . The following options are provided to change the default behavior: base_url : String to append to beginning of URL. Default: '/' end_url : String to append to end of URL. Default: '/' html_class : CSS class. Leave blank for none. Default: 'wikilink' build_url : Callable which formats the URL from its parts. A trivial example: markdown.markdown(some_text, extensions=['wikilinks']) Examples \u00b6 For an example, let us suppose links should always point to the sub-directory /wiki/ and end with .html >>> from markdown.extensions.wikilinks import WikiLinkExtension >>> html = markdown.markdown(text, ... extensions=[WikiLinkExtension(base_url='/wiki/', end_url='.html')] ... ) The above would result in the following link for [[WikiLink]] . <a href=\"/wiki/WikiLink.html\" class=\"wikilink\">WikiLink</a> If you want to do more that just alter the base and/or end of the URL, you could also pass in a callable which must accept three arguments ( label , base , and end ). The callable must return the URL in it\u2019s entirety. >>> def my_url_builder(label, base, end): ... # do stuff ... return url ... >>> html = markdown.markdown(text, ... extensions=[WikiLinkExtension(build_url=my_url_builder)], ... ) The option is also provided to change or remove the class attribute. >>> html = markdown.markdown(text, ... extensions=[WikiLinkExtension(html_class='myclass')] ... ) Would cause all WikiLinks to be assigned to the class myclass . <a href=\"/WikiLink/\" class=\"myclass\">WikiLink</a> Using with Meta-Data extension \u00b6 The WikiLink extension also supports the Meta-Data extension. Please see the documentation for that extension for specifics. The supported meta-data keywords are: wiki_base_url wiki_end_url wiki_html_class When used, the meta-data will override the settings provided through the extension_configs interface. This document: wiki_base_url: http://example.com/ wiki_end_url: .html wiki_html_class: A [[WikiLink]] in the first paragraph. would result in the following output (notice the blank wiki_html_class ): <p>A <a href=\"http://example.com/WikiLink.html\">WikiLink</a> in the first paragraph.</p>","title":"WikiLinks"},{"location":"extensions/wikilinks/#wikilinks","text":"","title":"WikiLinks"},{"location":"extensions/wikilinks/#summary","text":"The WikiLinks extension adds support for WikiLinks . Specifically, any [[bracketed]] word is converted to a link. This extension is included in the standard Markdown library.","title":"Summary"},{"location":"extensions/wikilinks/#syntax","text":"A [[bracketed]] word is any combination of upper or lower case letters, number, dashes, underscores and spaces surrounded by double brackets. Therefore [[Bracketed]] would produce the following HTML: <a href=\"/Bracketed/\" class=\"wikilink\">Bracketed</a> Note that WikiLinks are automatically assigned class=\"wikilink\" making it easy to style WikiLinks differently from other links on a page if one so desires. See below for ways to alter the class. Also note that when a space is used, the space is converted to an underscore in the link but left as-is in the label. Perhaps an example would illustrate this best: [[Wiki Link]] becomes <a href=\"/Wiki_Link/\" class=\"wikilink\">Wiki Link</a>","title":"Syntax"},{"location":"extensions/wikilinks/#usage","text":"See Extensions for general extension usage. Use wikilinks as the name of the extension. See the Library Reference for information about configuring extensions. The default behavior is to point each link to the document root of the current domain and close with a trailing slash. Additionally, each link is assigned to the HTML class wikilink . The following options are provided to change the default behavior: base_url : String to append to beginning of URL. Default: '/' end_url : String to append to end of URL. Default: '/' html_class : CSS class. Leave blank for none. Default: 'wikilink' build_url : Callable which formats the URL from its parts. A trivial example: markdown.markdown(some_text, extensions=['wikilinks'])","title":"Usage"},{"location":"extensions/wikilinks/#examples","text":"For an example, let us suppose links should always point to the sub-directory /wiki/ and end with .html >>> from markdown.extensions.wikilinks import WikiLinkExtension >>> html = markdown.markdown(text, ... extensions=[WikiLinkExtension(base_url='/wiki/', end_url='.html')] ... ) The above would result in the following link for [[WikiLink]] . <a href=\"/wiki/WikiLink.html\" class=\"wikilink\">WikiLink</a> If you want to do more that just alter the base and/or end of the URL, you could also pass in a callable which must accept three arguments ( label , base , and end ). The callable must return the URL in it\u2019s entirety. >>> def my_url_builder(label, base, end): ... # do stuff ... return url ... >>> html = markdown.markdown(text, ... extensions=[WikiLinkExtension(build_url=my_url_builder)], ... ) The option is also provided to change or remove the class attribute. >>> html = markdown.markdown(text, ... extensions=[WikiLinkExtension(html_class='myclass')] ... ) Would cause all WikiLinks to be assigned to the class myclass . <a href=\"/WikiLink/\" class=\"myclass\">WikiLink</a>","title":"Examples"},{"location":"extensions/wikilinks/#using-with-meta-data-extension","text":"The WikiLink extension also supports the Meta-Data extension. Please see the documentation for that extension for specifics. The supported meta-data keywords are: wiki_base_url wiki_end_url wiki_html_class When used, the meta-data will override the settings provided through the extension_configs interface. This document: wiki_base_url: http://example.com/ wiki_end_url: .html wiki_html_class: A [[WikiLink]] in the first paragraph. would result in the following output (notice the blank wiki_html_class ): <p>A <a href=\"http://example.com/WikiLink.html\">WikiLink</a> in the first paragraph.</p>","title":"Using with Meta-Data extension"},{"location":"reference/SUMMARY/","text":"markdown preprocessors blockparser blockprocessors treeprocessors inlinepatterns postprocessors serializers util htmlparser test_tools extensions abbr admonition attr_list codehilite def_list extra fenced_code footnotes legacy_attrs legacy_em md_in_html meta nl2br sane_lists smarty tables toc wikilinks","title":"SUMMARY"},{"location":"reference/markdown/","text":"\u2039\u203a markdown \u00b6 Python-Markdown provides two public functions ( markdown.markdown and markdown.markdownFromFile ) both of which wrap the public class markdown.Markdown . All submodules support these public functions and class and/or provide extension support. Modules: core \u2013 Core functionality. preprocessors \u2013 Pre-processors. blockparser \u2013 Core Markdown block parser. blockprocessors \u2013 Block processors. treeprocessors \u2013 Tree processors. inlinepatterns \u2013 Inline patterns. postprocessors \u2013 Post-processors. serializers \u2013 Serializers. util \u2013 Utility functions. htmlparser \u2013 HTML parser. test_tools \u2013 Testing utilities. extensions \u2013 Markdown extensions. \u2039\u203a markdown.Markdown(**kwargs) \u00b6 A parser which converts Markdown to HTML. Attributes: Markdown.tab_length ( int ) \u2013 The number of spaces which correspond to a single tab. Default: 4 . Markdown.ESCAPED_CHARS ( list [ str ] ) \u2013 List of characters which get the backslash escape treatment. Markdown.block_level_elements ( list [ str ] ) \u2013 List of HTML tags which get treated as block-level elements. See markdown.util.BLOCK_LEVEL_ELEMENTS for the full list of elements. Markdown.registeredExtensions ( list [ Extension ] ) \u2013 List of extensions which have called registerExtension during setup. Markdown.doc_tag ( str ) \u2013 Element used to wrap document. Default: div . Markdown.stripTopLevelTags ( bool ) \u2013 Indicates whether the doc_tag should be removed. Default: \u2018True\u2019. Markdown.references ( dict [ str , tuple [ str , str ]] ) \u2013 A mapping of link references found in a parsed document where the key is the reference name and the value is a tuple of the URL and title. Markdown.htmlStash ( HtmlStash ) \u2013 The instance of the HtmlStash used by an instance of this class. Markdown.output_formats ( dict [ str , Callable [ Element ]] ) \u2013 A mapping of known output formats by name and their respective serializers. Each serializer must be a callable which accepts an Element and returns a str . Markdown.output_format ( str ) \u2013 The output format set by set_output_format . Markdown.serializer ( Callable [ Element ] ) \u2013 The serializer set by set_output_format . Markdown.preprocessors ( Registry ) \u2013 A collection of preprocessors . Markdown.parser ( BlockParser ) \u2013 A collection of blockprocessors . Markdown.inlinePatterns ( Registry ) \u2013 A collection of inlinepatterns . Markdown.treeprocessors ( Registry ) \u2013 A collection of treeprocessors . Markdown.postprocessors ( Registry ) \u2013 A collection of postprocessors . Other Parameters: extensions ( list [ Extension | str ] ) \u2013 A list of extensions. If an item is an instance of a subclass of markdown.extensions.Extension , the instance will be used as-is. If an item is of type str , it is passed to build_extension with its corresponding extension_configs and the returned instance of markdown.extensions.Extension is used. extension_configs ( dict [ str , dict [ str , Any ]] ) \u2013 Configuration settings for extensions. output_format ( str ) \u2013 Format of output. Supported formats are: xhtml : Outputs XHTML style tags. Default. html : Outputs HTML style tags. tab_length ( int ) \u2013 Length of tabs in the source. Default: 4 \u2039\u203a markdown.Markdown.output_formats: dict[str, Callable[[Element], str]] class-attribute \u00b6 A mapping of known output formats by name and their respective serializers. Each serializer must be a callable which accepts an Element and returns a str . Defined Value: output_formats: ClassVar[dict[str, Callable[[Element], str]]] = { 'html': to_html_string, 'xhtml': to_xhtml_string, } \u2039\u203a markdown.Markdown.ESCAPED_CHARS: list[str] instance-attribute \u00b6 List of characters which get the backslash escape treatment. Defined Value: self.ESCAPED_CHARS: list[str] = [ '\\\\', '`', '*', '_', '{', '}', '[', ']', '(', ')', '>', '#', '+', '-', '.', '!' ] \u2039\u203a markdown.Markdown.build_parser() -> Markdown \u00b6 Build the parser from the various parts. Assigns a value to each of the following attributes on the class instance: Markdown.preprocessors ( Registry ) \u2013 A collection of preprocessors . Markdown.parser ( BlockParser ) \u2013 A collection of blockprocessors . Markdown.inlinePatterns ( Registry ) \u2013 A collection of inlinepatterns . Markdown.treeprocessors ( Registry ) \u2013 A collection of treeprocessors . Markdown.postprocessors ( Registry ) \u2013 A collection of postprocessors . This method could be redefined in a subclass to build a custom parser which is made up of a different combination of processors and patterns. \u2039\u203a markdown.Markdown.registerExtensions(extensions: Sequence[Extension | str], configs: Mapping[str, dict[str, Any]]) -> Markdown \u00b6 Load a list of extensions into an instance of the Markdown class. Parameters: extensions ( list [ Extension | str ] ) \u2013 A list of extensions. If an item is an instance of a subclass of markdown.extensions.Extension , the instance will be used as-is. If an item is of type str , it is passed to build_extension with its corresponding configs and the returned instance of markdown.extensions.Extension is used. configs ( dict [ str , dict [ str , Any ]] ) \u2013 Configuration settings for extensions. \u2039\u203a markdown.Markdown.build_extension(ext_name: str, configs: Mapping[str, Any]) -> Extension \u00b6 Build extension from a string name, then return an instance using the given configs . Parameters: ext_name ( str ) \u2013 Name of extension as a string. configs ( Mapping [ str , Any ] ) \u2013 Configuration settings for extension. Returns: Extension \u2013 An instance of the extension with the given configuration settings. First attempt to load an entry point. The string name must be registered as an entry point in the markdown.extensions group which points to a subclass of the markdown.extensions.Extension class. If multiple distributions have registered the same name, the first one found is returned. If no entry point is found, assume dot notation ( path.to.module:ClassName ). Load the specified class and return an instance. If no class is specified, import the module and call a makeExtension function and return the markdown.extensions.Extension instance returned by that function. \u2039\u203a markdown.Markdown.registerExtension(extension: Extension) -> Markdown \u00b6 Register an extension as having a resettable state. Parameters: extension ( Extension ) \u2013 An instance of the extension to register. This should get called once by an extension during setup. A \u201cregistered\u201d extension\u2019s reset method is called by Markdown.reset() . Not all extensions have or need a resettable state, and so it should not be assumed that all extensions are \u201cregistered.\u201d \u2039\u203a markdown.Markdown.reset() -> Markdown \u00b6 Resets all state variables to prepare the parser instance for new input. Called once upon creation of a class instance. Should be called manually between calls to Markdown.convert . \u2039\u203a markdown.Markdown.set_output_format(format: str) -> Markdown \u00b6 Set the output format for the class instance. Parameters: format ( str ) \u2013 Must be a known value in Markdown.output_formats . \u2039\u203a markdown.Markdown.is_block_level(tag: Any) -> bool \u00b6 Check if the given tag is a block level HTML tag. Returns True for any string listed in Markdown.block_level_elements . A tag which is not a string always returns False . \u2039\u203a markdown.Markdown.convert(source: str) -> str \u00b6 Convert a Markdown string to a string in the specified output format. Parameters: source ( str ) \u2013 Markdown formatted text as Unicode or ASCII string. Returns: str \u2013 A string in the specified output format. Markdown parsing takes place in five steps: A bunch of preprocessors munge the input text. A BlockParser parses the high-level structural elements of the pre-processed text into an ElementTree object. A bunch of treeprocessors are run against the ElementTree object. One such treeprocessor ( markdown.treeprocessors.InlineProcessor ) runs inlinepatterns against the ElementTree object, parsing inline markup. Some postprocessors are run against the text after the ElementTree object has been serialized into text. The output is returned as a string. \u2039\u203a markdown.Markdown.convertFile(input: str | BinaryIO | None = None, output: str | BinaryIO | None = None, encoding: str | None = None) -> Markdown \u00b6 Converts a Markdown file and returns the HTML as a Unicode string. Decodes the file using the provided encoding (defaults to utf-8 ), passes the file content to markdown, and outputs the HTML to either the provided stream or the file with provided name, using the same encoding as the source file. The xmlcharrefreplace error handler is used when encoding the output. Note: This is the only place that decoding and encoding of Unicode takes place in Python-Markdown. (All other code is Unicode-in / Unicode-out.) Parameters: input ( str | BinaryIO | None , default: None ) \u2013 File object or path. Reads from stdin if None . output ( str | BinaryIO | None , default: None ) \u2013 File object or path. Writes to stdout if None . encoding ( str | None , default: None ) \u2013 Encoding of input and output files. Defaults to utf-8 . \u2039\u203a markdown.markdown(text: str, **kwargs: Any) -> str \u00b6 Convert a markdown string to HTML and return HTML as a Unicode string. This is a shortcut function for Markdown class to cover the most basic use case. It initializes an instance of Markdown , loads the necessary extensions and runs the parser on the given text. Parameters: text ( str ) \u2013 Markdown formatted text as Unicode or ASCII string. Other Parameters: **kwargs ( Any ) \u2013 Any arguments accepted by the Markdown class. Returns: str \u2013 A string in the specified output format. \u2039\u203a markdown.markdownFromFile(**kwargs: Any) \u00b6 Read Markdown text from a file and write output to a file or a stream. This is a shortcut function which initializes an instance of Markdown , and calls the convertFile method rather than convert . Other Parameters: input ( str | BinaryIO ) \u2013 A file name or readable object. output ( str | BinaryIO ) \u2013 A file name or writable object. encoding ( str ) \u2013 Encoding of input and output. **kwargs ( Any ) \u2013 Any arguments accepted by the Markdown class.","title":"<code>markdown</code>"},{"location":"reference/markdown/#markdown","text":"Python-Markdown provides two public functions ( markdown.markdown and markdown.markdownFromFile ) both of which wrap the public class markdown.Markdown . All submodules support these public functions and class and/or provide extension support. Modules: core \u2013 Core functionality. preprocessors \u2013 Pre-processors. blockparser \u2013 Core Markdown block parser. blockprocessors \u2013 Block processors. treeprocessors \u2013 Tree processors. inlinepatterns \u2013 Inline patterns. postprocessors \u2013 Post-processors. serializers \u2013 Serializers. util \u2013 Utility functions. htmlparser \u2013 HTML parser. test_tools \u2013 Testing utilities. extensions \u2013 Markdown extensions.","title":"markdown"},{"location":"reference/markdown/#markdown.Markdown","text":"A parser which converts Markdown to HTML. Attributes: Markdown.tab_length ( int ) \u2013 The number of spaces which correspond to a single tab. Default: 4 . Markdown.ESCAPED_CHARS ( list [ str ] ) \u2013 List of characters which get the backslash escape treatment. Markdown.block_level_elements ( list [ str ] ) \u2013 List of HTML tags which get treated as block-level elements. See markdown.util.BLOCK_LEVEL_ELEMENTS for the full list of elements. Markdown.registeredExtensions ( list [ Extension ] ) \u2013 List of extensions which have called registerExtension during setup. Markdown.doc_tag ( str ) \u2013 Element used to wrap document. Default: div . Markdown.stripTopLevelTags ( bool ) \u2013 Indicates whether the doc_tag should be removed. Default: \u2018True\u2019. Markdown.references ( dict [ str , tuple [ str , str ]] ) \u2013 A mapping of link references found in a parsed document where the key is the reference name and the value is a tuple of the URL and title. Markdown.htmlStash ( HtmlStash ) \u2013 The instance of the HtmlStash used by an instance of this class. Markdown.output_formats ( dict [ str , Callable [ Element ]] ) \u2013 A mapping of known output formats by name and their respective serializers. Each serializer must be a callable which accepts an Element and returns a str . Markdown.output_format ( str ) \u2013 The output format set by set_output_format . Markdown.serializer ( Callable [ Element ] ) \u2013 The serializer set by set_output_format . Markdown.preprocessors ( Registry ) \u2013 A collection of preprocessors . Markdown.parser ( BlockParser ) \u2013 A collection of blockprocessors . Markdown.inlinePatterns ( Registry ) \u2013 A collection of inlinepatterns . Markdown.treeprocessors ( Registry ) \u2013 A collection of treeprocessors . Markdown.postprocessors ( Registry ) \u2013 A collection of postprocessors . Other Parameters: extensions ( list [ Extension | str ] ) \u2013 A list of extensions. If an item is an instance of a subclass of markdown.extensions.Extension , the instance will be used as-is. If an item is of type str , it is passed to build_extension with its corresponding extension_configs and the returned instance of markdown.extensions.Extension is used. extension_configs ( dict [ str , dict [ str , Any ]] ) \u2013 Configuration settings for extensions. output_format ( str ) \u2013 Format of output. Supported formats are: xhtml : Outputs XHTML style tags. Default. html : Outputs HTML style tags. tab_length ( int ) \u2013 Length of tabs in the source. Default: 4","title":"Markdown"},{"location":"reference/markdown/#markdown.Markdown.output_formats","text":"A mapping of known output formats by name and their respective serializers. Each serializer must be a callable which accepts an Element and returns a str . Defined Value: output_formats: ClassVar[dict[str, Callable[[Element], str]]] = { 'html': to_html_string, 'xhtml': to_xhtml_string, }","title":"output_formats"},{"location":"reference/markdown/#markdown.Markdown.ESCAPED_CHARS","text":"List of characters which get the backslash escape treatment. Defined Value: self.ESCAPED_CHARS: list[str] = [ '\\\\', '`', '*', '_', '{', '}', '[', ']', '(', ')', '>', '#', '+', '-', '.', '!' ]","title":"ESCAPED_CHARS"},{"location":"reference/markdown/#markdown.Markdown.build_parser","text":"Build the parser from the various parts. Assigns a value to each of the following attributes on the class instance: Markdown.preprocessors ( Registry ) \u2013 A collection of preprocessors . Markdown.parser ( BlockParser ) \u2013 A collection of blockprocessors . Markdown.inlinePatterns ( Registry ) \u2013 A collection of inlinepatterns . Markdown.treeprocessors ( Registry ) \u2013 A collection of treeprocessors . Markdown.postprocessors ( Registry ) \u2013 A collection of postprocessors . This method could be redefined in a subclass to build a custom parser which is made up of a different combination of processors and patterns.","title":"build_parser"},{"location":"reference/markdown/#markdown.Markdown.registerExtensions","text":"Load a list of extensions into an instance of the Markdown class. Parameters: extensions ( list [ Extension | str ] ) \u2013 A list of extensions. If an item is an instance of a subclass of markdown.extensions.Extension , the instance will be used as-is. If an item is of type str , it is passed to build_extension with its corresponding configs and the returned instance of markdown.extensions.Extension is used. configs ( dict [ str , dict [ str , Any ]] ) \u2013 Configuration settings for extensions.","title":"registerExtensions"},{"location":"reference/markdown/#markdown.Markdown.build_extension","text":"Build extension from a string name, then return an instance using the given configs . Parameters: ext_name ( str ) \u2013 Name of extension as a string. configs ( Mapping [ str , Any ] ) \u2013 Configuration settings for extension. Returns: Extension \u2013 An instance of the extension with the given configuration settings. First attempt to load an entry point. The string name must be registered as an entry point in the markdown.extensions group which points to a subclass of the markdown.extensions.Extension class. If multiple distributions have registered the same name, the first one found is returned. If no entry point is found, assume dot notation ( path.to.module:ClassName ). Load the specified class and return an instance. If no class is specified, import the module and call a makeExtension function and return the markdown.extensions.Extension instance returned by that function.","title":"build_extension"},{"location":"reference/markdown/#markdown.Markdown.registerExtension","text":"Register an extension as having a resettable state. Parameters: extension ( Extension ) \u2013 An instance of the extension to register. This should get called once by an extension during setup. A \u201cregistered\u201d extension\u2019s reset method is called by Markdown.reset() . Not all extensions have or need a resettable state, and so it should not be assumed that all extensions are \u201cregistered.\u201d","title":"registerExtension"},{"location":"reference/markdown/#markdown.Markdown.reset","text":"Resets all state variables to prepare the parser instance for new input. Called once upon creation of a class instance. Should be called manually between calls to Markdown.convert .","title":"reset"},{"location":"reference/markdown/#markdown.Markdown.set_output_format","text":"Set the output format for the class instance. Parameters: format ( str ) \u2013 Must be a known value in Markdown.output_formats .","title":"set_output_format"},{"location":"reference/markdown/#markdown.Markdown.is_block_level","text":"Check if the given tag is a block level HTML tag. Returns True for any string listed in Markdown.block_level_elements . A tag which is not a string always returns False .","title":"is_block_level"},{"location":"reference/markdown/#markdown.Markdown.convert","text":"Convert a Markdown string to a string in the specified output format. Parameters: source ( str ) \u2013 Markdown formatted text as Unicode or ASCII string. Returns: str \u2013 A string in the specified output format. Markdown parsing takes place in five steps: A bunch of preprocessors munge the input text. A BlockParser parses the high-level structural elements of the pre-processed text into an ElementTree object. A bunch of treeprocessors are run against the ElementTree object. One such treeprocessor ( markdown.treeprocessors.InlineProcessor ) runs inlinepatterns against the ElementTree object, parsing inline markup. Some postprocessors are run against the text after the ElementTree object has been serialized into text. The output is returned as a string.","title":"convert"},{"location":"reference/markdown/#markdown.Markdown.convertFile","text":"Converts a Markdown file and returns the HTML as a Unicode string. Decodes the file using the provided encoding (defaults to utf-8 ), passes the file content to markdown, and outputs the HTML to either the provided stream or the file with provided name, using the same encoding as the source file. The xmlcharrefreplace error handler is used when encoding the output. Note: This is the only place that decoding and encoding of Unicode takes place in Python-Markdown. (All other code is Unicode-in / Unicode-out.) Parameters: input ( str | BinaryIO | None , default: None ) \u2013 File object or path. Reads from stdin if None . output ( str | BinaryIO | None , default: None ) \u2013 File object or path. Writes to stdout if None . encoding ( str | None , default: None ) \u2013 Encoding of input and output files. Defaults to utf-8 .","title":"convertFile"},{"location":"reference/markdown/#markdown.markdown","text":"Convert a markdown string to HTML and return HTML as a Unicode string. This is a shortcut function for Markdown class to cover the most basic use case. It initializes an instance of Markdown , loads the necessary extensions and runs the parser on the given text. Parameters: text ( str ) \u2013 Markdown formatted text as Unicode or ASCII string. Other Parameters: **kwargs ( Any ) \u2013 Any arguments accepted by the Markdown class. Returns: str \u2013 A string in the specified output format.","title":"markdown"},{"location":"reference/markdown/#markdown.markdownFromFile","text":"Read Markdown text from a file and write output to a file or a stream. This is a shortcut function which initializes an instance of Markdown , and calls the convertFile method rather than convert . Other Parameters: input ( str | BinaryIO ) \u2013 A file name or readable object. output ( str | BinaryIO ) \u2013 A file name or writable object. encoding ( str ) \u2013 Encoding of input and output. **kwargs ( Any ) \u2013 Any arguments accepted by the Markdown class.","title":"markdownFromFile"},{"location":"reference/markdown/blockparser/","text":"\u2039\u203a markdown.blockparser \u00b6 The block parser handles basic parsing of Markdown blocks. It doesn\u2019t concern itself with inline elements such as **bold** or *italics* , but rather just catches blocks, lists, quotes, etc. The BlockParser is made up of a bunch of BlockProcessors , each handling a different type of block. Extensions may add/replace/remove BlockProcessors as they need to alter how Markdown blocks are parsed. \u2039\u203a markdown.blockparser.State \u00b6 Bases: list Track the current and nested state of the parser. This utility class is used to track the state of the BlockParser and support multiple levels if nesting. It\u2019s just a simple API wrapped around a list. Each time a state is set, that state is appended to the end of the list. Each time a state is reset, that state is removed from the end of the list. Therefore, each time a state is set for a nested block, that state must be reset when we back out of that level of nesting or the state could be corrupted. While all the methods of a list object are available, only the three defined below need be used. \u2039\u203a markdown.blockparser.State.set(state: Any) \u00b6 Set a new state. \u2039\u203a markdown.blockparser.State.reset() -> None \u00b6 Step back one step in nested state. \u2039\u203a markdown.blockparser.State.isstate(state: Any) -> bool \u00b6 Test that top (current) level is of given state. \u2039\u203a markdown.blockparser.BlockParser(md: Markdown) \u00b6 Parse Markdown blocks into an ElementTree object. A wrapper class that stitches the various BlockProcessors together, looping through them and creating an ElementTree object. Parameters: md ( Markdown ) \u2013 A Markdown instance. Attributes: BlockParser.md ( Markdown ) \u2013 A Markdown instance. BlockParser.state ( State ) \u2013 Tracks the nesting level of current location in document being parsed. BlockParser.blockprocessors ( Registry ) \u2013 A collection of blockprocessors . \u2039\u203a markdown.blockparser.BlockParser.parseDocument(lines: Iterable[str]) -> etree.ElementTree \u00b6 Parse a Markdown document into an ElementTree . Given a list of lines, an ElementTree object (not just a parent Element ) is created and the root element is passed to the parser as the parent. The ElementTree object is returned. This should only be called on an entire document, not pieces. Parameters: lines ( Iterable [ str ] ) \u2013 A list of lines (strings). Returns: ElementTree \u2013 An element tree. \u2039\u203a markdown.blockparser.BlockParser.parseChunk(parent: etree.Element, text: str) -> None \u00b6 Parse a chunk of Markdown text and attach to given etree node. While the text argument is generally assumed to contain multiple blocks which will be split on blank lines, it could contain only one block. Generally, this method would be called by extensions when block parsing is required. The parent etree Element passed in is altered in place. Nothing is returned. Parameters: parent ( Element ) \u2013 The parent element. text ( str ) \u2013 The text to parse. \u2039\u203a markdown.blockparser.BlockParser.parseBlocks(parent: etree.Element, blocks: list[str]) -> None \u00b6 Process blocks of Markdown text and attach to given etree node. Given a list of blocks , each blockprocessor is stepped through until there are no blocks left. While an extension could potentially call this method directly, it\u2019s generally expected to be used internally. This is a public method as an extension may need to add/alter additional BlockProcessors which call this method to recursively parse a nested block. Parameters: parent ( Element ) \u2013 The parent element. blocks ( list [ str ] ) \u2013 The blocks of text to parse.","title":"<code>blockparser</code>"},{"location":"reference/markdown/blockparser/#markdown.blockparser","text":"The block parser handles basic parsing of Markdown blocks. It doesn\u2019t concern itself with inline elements such as **bold** or *italics* , but rather just catches blocks, lists, quotes, etc. The BlockParser is made up of a bunch of BlockProcessors , each handling a different type of block. Extensions may add/replace/remove BlockProcessors as they need to alter how Markdown blocks are parsed.","title":"blockparser"},{"location":"reference/markdown/blockparser/#markdown.blockparser.State","text":"Bases: list Track the current and nested state of the parser. This utility class is used to track the state of the BlockParser and support multiple levels if nesting. It\u2019s just a simple API wrapped around a list. Each time a state is set, that state is appended to the end of the list. Each time a state is reset, that state is removed from the end of the list. Therefore, each time a state is set for a nested block, that state must be reset when we back out of that level of nesting or the state could be corrupted. While all the methods of a list object are available, only the three defined below need be used.","title":"State"},{"location":"reference/markdown/blockparser/#markdown.blockparser.State.set","text":"Set a new state.","title":"set"},{"location":"reference/markdown/blockparser/#markdown.blockparser.State.reset","text":"Step back one step in nested state.","title":"reset"},{"location":"reference/markdown/blockparser/#markdown.blockparser.State.isstate","text":"Test that top (current) level is of given state.","title":"isstate"},{"location":"reference/markdown/blockparser/#markdown.blockparser.BlockParser","text":"Parse Markdown blocks into an ElementTree object. A wrapper class that stitches the various BlockProcessors together, looping through them and creating an ElementTree object. Parameters: md ( Markdown ) \u2013 A Markdown instance. Attributes: BlockParser.md ( Markdown ) \u2013 A Markdown instance. BlockParser.state ( State ) \u2013 Tracks the nesting level of current location in document being parsed. BlockParser.blockprocessors ( Registry ) \u2013 A collection of blockprocessors .","title":"BlockParser"},{"location":"reference/markdown/blockparser/#markdown.blockparser.BlockParser.parseDocument","text":"Parse a Markdown document into an ElementTree . Given a list of lines, an ElementTree object (not just a parent Element ) is created and the root element is passed to the parser as the parent. The ElementTree object is returned. This should only be called on an entire document, not pieces. Parameters: lines ( Iterable [ str ] ) \u2013 A list of lines (strings). Returns: ElementTree \u2013 An element tree.","title":"parseDocument"},{"location":"reference/markdown/blockparser/#markdown.blockparser.BlockParser.parseChunk","text":"Parse a chunk of Markdown text and attach to given etree node. While the text argument is generally assumed to contain multiple blocks which will be split on blank lines, it could contain only one block. Generally, this method would be called by extensions when block parsing is required. The parent etree Element passed in is altered in place. Nothing is returned. Parameters: parent ( Element ) \u2013 The parent element. text ( str ) \u2013 The text to parse.","title":"parseChunk"},{"location":"reference/markdown/blockparser/#markdown.blockparser.BlockParser.parseBlocks","text":"Process blocks of Markdown text and attach to given etree node. Given a list of blocks , each blockprocessor is stepped through until there are no blocks left. While an extension could potentially call this method directly, it\u2019s generally expected to be used internally. This is a public method as an extension may need to add/alter additional BlockProcessors which call this method to recursively parse a nested block. Parameters: parent ( Element ) \u2013 The parent element. blocks ( list [ str ] ) \u2013 The blocks of text to parse.","title":"parseBlocks"},{"location":"reference/markdown/blockprocessors/","text":"\u2039\u203a markdown.blockprocessors \u00b6 A block processor parses blocks of text and adds new elements to the ElementTree. Blocks of text, separated from other text by blank lines, may have a different syntax and produce a differently structured tree than other Markdown. Block processors excel at handling code formatting, equation layouts, tables, etc. \u2039\u203a markdown.blockprocessors.build_block_parser(md: Markdown, **kwargs: Any) -> BlockParser \u00b6 Build the default block parser used by Markdown. Return a BlockParser instance which contains the following collection of classes with their assigned names and priorities. Class Instance Name Priority EmptyBlockProcessor empty 100 ListIndentProcessor indent 90 CodeBlockProcessor code 80 HashHeaderProcessor hashheader 70 SetextHeaderProcessor setextheader 60 HRProcessor hr 50 OListProcessor olist 40 UListProcessor ulist 30 BlockQuoteProcessor quote 20 ReferenceProcessor reference 15 ParagraphProcessor paragraph 10 \u2039\u203a markdown.blockprocessors.BlockProcessor(parser: BlockParser) \u00b6 Base class for block processors. Each subclass will provide the methods below to work with the source and tree. Each processor will need to define it\u2019s own test and run methods. The test method should return True or False, to indicate whether the current block should be processed by this processor. If the test passes, the parser will call the processors run method. Attributes: BlockProcessor.parser ( BlockParser ) \u2013 The BlockParser instance this is attached to. BlockProcessor.tab_length ( int ) \u2013 The tab length set on the Markdown instance. \u2039\u203a markdown.blockprocessors.BlockProcessor.lastChild(parent: etree.Element) -> etree.Element | None \u00b6 Return the last child of an etree element. \u2039\u203a markdown.blockprocessors.BlockProcessor.detab(text: str, length: int | None = None) -> tuple[str, str] \u00b6 Remove a tab from the front of each line of the given text. \u2039\u203a markdown.blockprocessors.BlockProcessor.looseDetab(text: str, level: int = 1) -> str \u00b6 Remove a tab from front of lines but allowing dedented lines. \u2039\u203a markdown.blockprocessors.BlockProcessor.test(parent: etree.Element, block: str) -> bool \u00b6 Test for block type. Must be overridden by subclasses. As the parser loops through processors, it will call the test method on each to determine if the given block of text is of that type. This method must return a boolean True or False . The actual method of testing is left to the needs of that particular block type. It could be as simple as block.startswith(some_string) or a complex regular expression. As the block type may be different depending on the parent of the block (i.e. inside a list), the parent etree element is also provided and may be used as part of the test. Other Parameters: parent ( Element ) \u2013 An etree element which will be the parent of the block. block ( str ) \u2013 A block of text from the source which has been split at blank lines. \u2039\u203a markdown.blockprocessors.BlockProcessor.run(parent: etree.Element, blocks: list[str]) -> bool | None \u00b6 Run processor. Must be overridden by subclasses. When the parser determines the appropriate type of a block, the parser will call the corresponding processor\u2019s run method. This method should parse the individual lines of the block and append them to the etree . Note that both the parent and etree keywords are pointers to instances of the objects which should be edited in place. Each processor must make changes to the existing objects as there is no mechanism to return new/different objects to replace them. This means that this method should be adding SubElements or adding text to the parent, and should remove ( pop ) or add ( insert ) items to the list of blocks. If False is returned, this will have the same effect as returning False from the test method. Other Parameters: parent ( Element ) \u2013 An etree element which is the parent of the current block. blocks ( list [ str ] ) \u2013 A list of all remaining blocks of the document. \u2039\u203a markdown.blockprocessors.ListIndentProcessor(*args) \u00b6 Bases: BlockProcessor Process children of list items. Example * a list item process this part or this part \u2039\u203a markdown.blockprocessors.ListIndentProcessor.lastChild(parent: etree.Element) -> etree.Element | None \u00b6 Return the last child of an etree element. \u2039\u203a markdown.blockprocessors.ListIndentProcessor.detab(text: str, length: int | None = None) -> tuple[str, str] \u00b6 Remove a tab from the front of each line of the given text. \u2039\u203a markdown.blockprocessors.ListIndentProcessor.looseDetab(text: str, level: int = 1) -> str \u00b6 Remove a tab from front of lines but allowing dedented lines. \u2039\u203a markdown.blockprocessors.ListIndentProcessor.ITEM_TYPES class-attribute instance-attribute \u00b6 List of tags used for list items. Defined Value: ITEM_TYPES = ['li'] \u2039\u203a markdown.blockprocessors.ListIndentProcessor.LIST_TYPES class-attribute instance-attribute \u00b6 Types of lists this processor can operate on. Defined Value: LIST_TYPES = ['ul', 'ol'] \u2039\u203a markdown.blockprocessors.ListIndentProcessor.create_item(parent: etree.Element, block: str) -> None \u00b6 Create a new li and parse the block with it as the parent. \u2039\u203a markdown.blockprocessors.ListIndentProcessor.get_level(parent: etree.Element, block: str) -> tuple[int, etree.Element] \u00b6 Get level of indentation based on list level. \u2039\u203a markdown.blockprocessors.CodeBlockProcessor(parser: BlockParser) \u00b6 Bases: BlockProcessor Process code blocks. \u2039\u203a markdown.blockprocessors.CodeBlockProcessor.lastChild(parent: etree.Element) -> etree.Element | None \u00b6 Return the last child of an etree element. \u2039\u203a markdown.blockprocessors.CodeBlockProcessor.detab(text: str, length: int | None = None) -> tuple[str, str] \u00b6 Remove a tab from the front of each line of the given text. \u2039\u203a markdown.blockprocessors.CodeBlockProcessor.looseDetab(text: str, level: int = 1) -> str \u00b6 Remove a tab from front of lines but allowing dedented lines. \u2039\u203a markdown.blockprocessors.BlockQuoteProcessor(parser: BlockParser) \u00b6 Bases: BlockProcessor Process blockquotes. \u2039\u203a markdown.blockprocessors.BlockQuoteProcessor.lastChild(parent: etree.Element) -> etree.Element | None \u00b6 Return the last child of an etree element. \u2039\u203a markdown.blockprocessors.BlockQuoteProcessor.detab(text: str, length: int | None = None) -> tuple[str, str] \u00b6 Remove a tab from the front of each line of the given text. \u2039\u203a markdown.blockprocessors.BlockQuoteProcessor.looseDetab(text: str, level: int = 1) -> str \u00b6 Remove a tab from front of lines but allowing dedented lines. \u2039\u203a markdown.blockprocessors.BlockQuoteProcessor.clean(line: str) -> str \u00b6 Remove > from beginning of a line. \u2039\u203a markdown.blockprocessors.OListProcessor(parser: BlockParser) \u00b6 Bases: BlockProcessor Process ordered list blocks. \u2039\u203a markdown.blockprocessors.OListProcessor.lastChild(parent: etree.Element) -> etree.Element | None \u00b6 Return the last child of an etree element. \u2039\u203a markdown.blockprocessors.OListProcessor.detab(text: str, length: int | None = None) -> tuple[str, str] \u00b6 Remove a tab from the front of each line of the given text. \u2039\u203a markdown.blockprocessors.OListProcessor.looseDetab(text: str, level: int = 1) -> str \u00b6 Remove a tab from front of lines but allowing dedented lines. \u2039\u203a markdown.blockprocessors.OListProcessor.TAG: str class-attribute instance-attribute \u00b6 The tag used for the the wrapping element. Defined Value: TAG: str = 'ol' \u2039\u203a markdown.blockprocessors.OListProcessor.STARTSWITH: str class-attribute instance-attribute \u00b6 The integer (as a string ) with which the list starts. For example, if a list is initialized as 3. Item , then the ol tag will be assigned an HTML attribute of starts=\"3\" . Default: \"1\" . Defined Value: STARTSWITH: str = '1' \u2039\u203a markdown.blockprocessors.OListProcessor.LAZY_OL: bool class-attribute instance-attribute \u00b6 Ignore STARTSWITH if True . Defined Value: LAZY_OL: bool = True \u2039\u203a markdown.blockprocessors.OListProcessor.SIBLING_TAGS: list[str] class-attribute instance-attribute \u00b6 Markdown does not require the type of a new list item match the previous list item type. This is the list of types which can be mixed. Defined Value: SIBLING_TAGS: list[str] = ['ol', 'ul'] \u2039\u203a markdown.blockprocessors.OListProcessor.get_items(block: str) -> list[str] \u00b6 Break a block into list items. \u2039\u203a markdown.blockprocessors.UListProcessor(parser: BlockParser) \u00b6 Bases: OListProcessor Process unordered list blocks. \u2039\u203a markdown.blockprocessors.UListProcessor.lastChild(parent: etree.Element) -> etree.Element | None \u00b6 Return the last child of an etree element. \u2039\u203a markdown.blockprocessors.UListProcessor.detab(text: str, length: int | None = None) -> tuple[str, str] \u00b6 Remove a tab from the front of each line of the given text. \u2039\u203a markdown.blockprocessors.UListProcessor.looseDetab(text: str, level: int = 1) -> str \u00b6 Remove a tab from front of lines but allowing dedented lines. \u2039\u203a markdown.blockprocessors.UListProcessor.STARTSWITH: str class-attribute instance-attribute \u00b6 The integer (as a string ) with which the list starts. For example, if a list is initialized as 3. Item , then the ol tag will be assigned an HTML attribute of starts=\"3\" . Default: \"1\" . Defined Value: STARTSWITH: str = '1' \u2039\u203a markdown.blockprocessors.UListProcessor.LAZY_OL: bool class-attribute instance-attribute \u00b6 Ignore STARTSWITH if True . Defined Value: LAZY_OL: bool = True \u2039\u203a markdown.blockprocessors.UListProcessor.SIBLING_TAGS: list[str] class-attribute instance-attribute \u00b6 Markdown does not require the type of a new list item match the previous list item type. This is the list of types which can be mixed. Defined Value: SIBLING_TAGS: list[str] = ['ol', 'ul'] \u2039\u203a markdown.blockprocessors.UListProcessor.get_items(block: str) -> list[str] \u00b6 Break a block into list items. \u2039\u203a markdown.blockprocessors.UListProcessor.TAG: str class-attribute instance-attribute \u00b6 The tag used for the the wrapping element. Defined Value: TAG: str = 'ul' \u2039\u203a markdown.blockprocessors.HashHeaderProcessor(parser: BlockParser) \u00b6 Bases: BlockProcessor Process Hash Headers. \u2039\u203a markdown.blockprocessors.HashHeaderProcessor.lastChild(parent: etree.Element) -> etree.Element | None \u00b6 Return the last child of an etree element. \u2039\u203a markdown.blockprocessors.HashHeaderProcessor.detab(text: str, length: int | None = None) -> tuple[str, str] \u00b6 Remove a tab from the front of each line of the given text. \u2039\u203a markdown.blockprocessors.HashHeaderProcessor.looseDetab(text: str, level: int = 1) -> str \u00b6 Remove a tab from front of lines but allowing dedented lines. \u2039\u203a markdown.blockprocessors.SetextHeaderProcessor(parser: BlockParser) \u00b6 Bases: BlockProcessor Process Setext-style Headers. \u2039\u203a markdown.blockprocessors.SetextHeaderProcessor.lastChild(parent: etree.Element) -> etree.Element | None \u00b6 Return the last child of an etree element. \u2039\u203a markdown.blockprocessors.SetextHeaderProcessor.detab(text: str, length: int | None = None) -> tuple[str, str] \u00b6 Remove a tab from the front of each line of the given text. \u2039\u203a markdown.blockprocessors.SetextHeaderProcessor.looseDetab(text: str, level: int = 1) -> str \u00b6 Remove a tab from front of lines but allowing dedented lines. \u2039\u203a markdown.blockprocessors.HRProcessor(parser: BlockParser) \u00b6 Bases: BlockProcessor Process Horizontal Rules. \u2039\u203a markdown.blockprocessors.HRProcessor.lastChild(parent: etree.Element) -> etree.Element | None \u00b6 Return the last child of an etree element. \u2039\u203a markdown.blockprocessors.HRProcessor.detab(text: str, length: int | None = None) -> tuple[str, str] \u00b6 Remove a tab from the front of each line of the given text. \u2039\u203a markdown.blockprocessors.HRProcessor.looseDetab(text: str, level: int = 1) -> str \u00b6 Remove a tab from front of lines but allowing dedented lines. \u2039\u203a markdown.blockprocessors.EmptyBlockProcessor(parser: BlockParser) \u00b6 Bases: BlockProcessor Process blocks that are empty or start with an empty line. \u2039\u203a markdown.blockprocessors.EmptyBlockProcessor.lastChild(parent: etree.Element) -> etree.Element | None \u00b6 Return the last child of an etree element. \u2039\u203a markdown.blockprocessors.EmptyBlockProcessor.detab(text: str, length: int | None = None) -> tuple[str, str] \u00b6 Remove a tab from the front of each line of the given text. \u2039\u203a markdown.blockprocessors.EmptyBlockProcessor.looseDetab(text: str, level: int = 1) -> str \u00b6 Remove a tab from front of lines but allowing dedented lines. \u2039\u203a markdown.blockprocessors.ReferenceProcessor(parser: BlockParser) \u00b6 Bases: BlockProcessor Process link references. \u2039\u203a markdown.blockprocessors.ReferenceProcessor.lastChild(parent: etree.Element) -> etree.Element | None \u00b6 Return the last child of an etree element. \u2039\u203a markdown.blockprocessors.ReferenceProcessor.detab(text: str, length: int | None = None) -> tuple[str, str] \u00b6 Remove a tab from the front of each line of the given text. \u2039\u203a markdown.blockprocessors.ReferenceProcessor.looseDetab(text: str, level: int = 1) -> str \u00b6 Remove a tab from front of lines but allowing dedented lines. \u2039\u203a markdown.blockprocessors.ParagraphProcessor(parser: BlockParser) \u00b6 Bases: BlockProcessor Process Paragraph blocks. \u2039\u203a markdown.blockprocessors.ParagraphProcessor.lastChild(parent: etree.Element) -> etree.Element | None \u00b6 Return the last child of an etree element. \u2039\u203a markdown.blockprocessors.ParagraphProcessor.detab(text: str, length: int | None = None) -> tuple[str, str] \u00b6 Remove a tab from the front of each line of the given text. \u2039\u203a markdown.blockprocessors.ParagraphProcessor.looseDetab(text: str, level: int = 1) -> str \u00b6 Remove a tab from front of lines but allowing dedented lines.","title":"<code>blockprocessors</code>"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors","text":"A block processor parses blocks of text and adds new elements to the ElementTree. Blocks of text, separated from other text by blank lines, may have a different syntax and produce a differently structured tree than other Markdown. Block processors excel at handling code formatting, equation layouts, tables, etc.","title":"blockprocessors"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.build_block_parser","text":"Build the default block parser used by Markdown. Return a BlockParser instance which contains the following collection of classes with their assigned names and priorities. Class Instance Name Priority EmptyBlockProcessor empty 100 ListIndentProcessor indent 90 CodeBlockProcessor code 80 HashHeaderProcessor hashheader 70 SetextHeaderProcessor setextheader 60 HRProcessor hr 50 OListProcessor olist 40 UListProcessor ulist 30 BlockQuoteProcessor quote 20 ReferenceProcessor reference 15 ParagraphProcessor paragraph 10","title":"build_block_parser"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.BlockProcessor","text":"Base class for block processors. Each subclass will provide the methods below to work with the source and tree. Each processor will need to define it\u2019s own test and run methods. The test method should return True or False, to indicate whether the current block should be processed by this processor. If the test passes, the parser will call the processors run method. Attributes: BlockProcessor.parser ( BlockParser ) \u2013 The BlockParser instance this is attached to. BlockProcessor.tab_length ( int ) \u2013 The tab length set on the Markdown instance.","title":"BlockProcessor"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.BlockProcessor.lastChild","text":"Return the last child of an etree element.","title":"lastChild"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.BlockProcessor.detab","text":"Remove a tab from the front of each line of the given text.","title":"detab"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.BlockProcessor.looseDetab","text":"Remove a tab from front of lines but allowing dedented lines.","title":"looseDetab"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.BlockProcessor.test","text":"Test for block type. Must be overridden by subclasses. As the parser loops through processors, it will call the test method on each to determine if the given block of text is of that type. This method must return a boolean True or False . The actual method of testing is left to the needs of that particular block type. It could be as simple as block.startswith(some_string) or a complex regular expression. As the block type may be different depending on the parent of the block (i.e. inside a list), the parent etree element is also provided and may be used as part of the test. Other Parameters: parent ( Element ) \u2013 An etree element which will be the parent of the block. block ( str ) \u2013 A block of text from the source which has been split at blank lines.","title":"test"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.BlockProcessor.run","text":"Run processor. Must be overridden by subclasses. When the parser determines the appropriate type of a block, the parser will call the corresponding processor\u2019s run method. This method should parse the individual lines of the block and append them to the etree . Note that both the parent and etree keywords are pointers to instances of the objects which should be edited in place. Each processor must make changes to the existing objects as there is no mechanism to return new/different objects to replace them. This means that this method should be adding SubElements or adding text to the parent, and should remove ( pop ) or add ( insert ) items to the list of blocks. If False is returned, this will have the same effect as returning False from the test method. Other Parameters: parent ( Element ) \u2013 An etree element which is the parent of the current block. blocks ( list [ str ] ) \u2013 A list of all remaining blocks of the document.","title":"run"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.ListIndentProcessor","text":"Bases: BlockProcessor Process children of list items. Example * a list item process this part or this part","title":"ListIndentProcessor"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.ListIndentProcessor.lastChild","text":"Return the last child of an etree element.","title":"lastChild"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.ListIndentProcessor.detab","text":"Remove a tab from the front of each line of the given text.","title":"detab"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.ListIndentProcessor.looseDetab","text":"Remove a tab from front of lines but allowing dedented lines.","title":"looseDetab"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.ListIndentProcessor.ITEM_TYPES","text":"List of tags used for list items. Defined Value: ITEM_TYPES = ['li']","title":"ITEM_TYPES"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.ListIndentProcessor.LIST_TYPES","text":"Types of lists this processor can operate on. Defined Value: LIST_TYPES = ['ul', 'ol']","title":"LIST_TYPES"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.ListIndentProcessor.create_item","text":"Create a new li and parse the block with it as the parent.","title":"create_item"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.ListIndentProcessor.get_level","text":"Get level of indentation based on list level.","title":"get_level"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.CodeBlockProcessor","text":"Bases: BlockProcessor Process code blocks.","title":"CodeBlockProcessor"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.CodeBlockProcessor.lastChild","text":"Return the last child of an etree element.","title":"lastChild"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.CodeBlockProcessor.detab","text":"Remove a tab from the front of each line of the given text.","title":"detab"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.CodeBlockProcessor.looseDetab","text":"Remove a tab from front of lines but allowing dedented lines.","title":"looseDetab"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.BlockQuoteProcessor","text":"Bases: BlockProcessor Process blockquotes.","title":"BlockQuoteProcessor"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.BlockQuoteProcessor.lastChild","text":"Return the last child of an etree element.","title":"lastChild"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.BlockQuoteProcessor.detab","text":"Remove a tab from the front of each line of the given text.","title":"detab"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.BlockQuoteProcessor.looseDetab","text":"Remove a tab from front of lines but allowing dedented lines.","title":"looseDetab"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.BlockQuoteProcessor.clean","text":"Remove > from beginning of a line.","title":"clean"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.OListProcessor","text":"Bases: BlockProcessor Process ordered list blocks.","title":"OListProcessor"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.OListProcessor.lastChild","text":"Return the last child of an etree element.","title":"lastChild"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.OListProcessor.detab","text":"Remove a tab from the front of each line of the given text.","title":"detab"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.OListProcessor.looseDetab","text":"Remove a tab from front of lines but allowing dedented lines.","title":"looseDetab"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.OListProcessor.TAG","text":"The tag used for the the wrapping element. Defined Value: TAG: str = 'ol'","title":"TAG"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.OListProcessor.STARTSWITH","text":"The integer (as a string ) with which the list starts. For example, if a list is initialized as 3. Item , then the ol tag will be assigned an HTML attribute of starts=\"3\" . Default: \"1\" . Defined Value: STARTSWITH: str = '1'","title":"STARTSWITH"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.OListProcessor.LAZY_OL","text":"Ignore STARTSWITH if True . Defined Value: LAZY_OL: bool = True","title":"LAZY_OL"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.OListProcessor.SIBLING_TAGS","text":"Markdown does not require the type of a new list item match the previous list item type. This is the list of types which can be mixed. Defined Value: SIBLING_TAGS: list[str] = ['ol', 'ul']","title":"SIBLING_TAGS"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.OListProcessor.get_items","text":"Break a block into list items.","title":"get_items"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.UListProcessor","text":"Bases: OListProcessor Process unordered list blocks.","title":"UListProcessor"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.UListProcessor.lastChild","text":"Return the last child of an etree element.","title":"lastChild"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.UListProcessor.detab","text":"Remove a tab from the front of each line of the given text.","title":"detab"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.UListProcessor.looseDetab","text":"Remove a tab from front of lines but allowing dedented lines.","title":"looseDetab"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.UListProcessor.STARTSWITH","text":"The integer (as a string ) with which the list starts. For example, if a list is initialized as 3. Item , then the ol tag will be assigned an HTML attribute of starts=\"3\" . Default: \"1\" . Defined Value: STARTSWITH: str = '1'","title":"STARTSWITH"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.UListProcessor.LAZY_OL","text":"Ignore STARTSWITH if True . Defined Value: LAZY_OL: bool = True","title":"LAZY_OL"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.UListProcessor.SIBLING_TAGS","text":"Markdown does not require the type of a new list item match the previous list item type. This is the list of types which can be mixed. Defined Value: SIBLING_TAGS: list[str] = ['ol', 'ul']","title":"SIBLING_TAGS"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.UListProcessor.get_items","text":"Break a block into list items.","title":"get_items"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.UListProcessor.TAG","text":"The tag used for the the wrapping element. Defined Value: TAG: str = 'ul'","title":"TAG"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.HashHeaderProcessor","text":"Bases: BlockProcessor Process Hash Headers.","title":"HashHeaderProcessor"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.HashHeaderProcessor.lastChild","text":"Return the last child of an etree element.","title":"lastChild"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.HashHeaderProcessor.detab","text":"Remove a tab from the front of each line of the given text.","title":"detab"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.HashHeaderProcessor.looseDetab","text":"Remove a tab from front of lines but allowing dedented lines.","title":"looseDetab"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.SetextHeaderProcessor","text":"Bases: BlockProcessor Process Setext-style Headers.","title":"SetextHeaderProcessor"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.SetextHeaderProcessor.lastChild","text":"Return the last child of an etree element.","title":"lastChild"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.SetextHeaderProcessor.detab","text":"Remove a tab from the front of each line of the given text.","title":"detab"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.SetextHeaderProcessor.looseDetab","text":"Remove a tab from front of lines but allowing dedented lines.","title":"looseDetab"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.HRProcessor","text":"Bases: BlockProcessor Process Horizontal Rules.","title":"HRProcessor"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.HRProcessor.lastChild","text":"Return the last child of an etree element.","title":"lastChild"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.HRProcessor.detab","text":"Remove a tab from the front of each line of the given text.","title":"detab"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.HRProcessor.looseDetab","text":"Remove a tab from front of lines but allowing dedented lines.","title":"looseDetab"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.EmptyBlockProcessor","text":"Bases: BlockProcessor Process blocks that are empty or start with an empty line.","title":"EmptyBlockProcessor"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.EmptyBlockProcessor.lastChild","text":"Return the last child of an etree element.","title":"lastChild"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.EmptyBlockProcessor.detab","text":"Remove a tab from the front of each line of the given text.","title":"detab"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.EmptyBlockProcessor.looseDetab","text":"Remove a tab from front of lines but allowing dedented lines.","title":"looseDetab"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.ReferenceProcessor","text":"Bases: BlockProcessor Process link references.","title":"ReferenceProcessor"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.ReferenceProcessor.lastChild","text":"Return the last child of an etree element.","title":"lastChild"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.ReferenceProcessor.detab","text":"Remove a tab from the front of each line of the given text.","title":"detab"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.ReferenceProcessor.looseDetab","text":"Remove a tab from front of lines but allowing dedented lines.","title":"looseDetab"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.ParagraphProcessor","text":"Bases: BlockProcessor Process Paragraph blocks.","title":"ParagraphProcessor"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.ParagraphProcessor.lastChild","text":"Return the last child of an etree element.","title":"lastChild"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.ParagraphProcessor.detab","text":"Remove a tab from the front of each line of the given text.","title":"detab"},{"location":"reference/markdown/blockprocessors/#markdown.blockprocessors.ParagraphProcessor.looseDetab","text":"Remove a tab from front of lines but allowing dedented lines.","title":"looseDetab"},{"location":"reference/markdown/htmlparser/","text":"\u2039\u203a markdown.htmlparser \u00b6 This module imports a copy of html.parser.HTMLParser and modifies it heavily through monkey-patches. A copy is imported rather than the module being directly imported as this ensures that the user can import and use the unmodified library for their own needs. \u2039\u203a markdown.htmlparser.HTMLExtractor(md: Markdown, *args, **kwargs) \u00b6 Bases: HTMLParser Extract raw HTML from text. The raw HTML is stored in the htmlStash of the Markdown instance passed to md and the remaining text is stored in cleandoc as a list of strings. \u2039\u203a markdown.htmlparser.HTMLExtractor.reset() \u00b6 Reset this instance. Loses all unprocessed data. \u2039\u203a markdown.htmlparser.HTMLExtractor.close() \u00b6 Handle any buffered data. \u2039\u203a markdown.htmlparser.HTMLExtractor.line_offset: int property \u00b6 Returns char index in self.rawdata for the start of the current line. \u2039\u203a markdown.htmlparser.HTMLExtractor.at_line_start() -> bool \u00b6 Returns True if current position is at start of line. Allows for up to three blank spaces at start of line. \u2039\u203a markdown.htmlparser.HTMLExtractor.get_endtag_text(tag: str) -> str \u00b6 Returns the text of the end tag. If it fails to extract the actual text from the raw data, it builds a closing tag with tag . \u2039\u203a markdown.htmlparser.HTMLExtractor.handle_empty_tag(data: str, is_block: bool) \u00b6 Handle empty tags ( <data> ). \u2039\u203a markdown.htmlparser.HTMLExtractor.get_starttag_text() -> str \u00b6 Return full source of start tag: <...> .","title":"<code>htmlparser</code>"},{"location":"reference/markdown/htmlparser/#markdown.htmlparser","text":"This module imports a copy of html.parser.HTMLParser and modifies it heavily through monkey-patches. A copy is imported rather than the module being directly imported as this ensures that the user can import and use the unmodified library for their own needs.","title":"htmlparser"},{"location":"reference/markdown/htmlparser/#markdown.htmlparser.HTMLExtractor","text":"Bases: HTMLParser Extract raw HTML from text. The raw HTML is stored in the htmlStash of the Markdown instance passed to md and the remaining text is stored in cleandoc as a list of strings.","title":"HTMLExtractor"},{"location":"reference/markdown/htmlparser/#markdown.htmlparser.HTMLExtractor.reset","text":"Reset this instance. Loses all unprocessed data.","title":"reset"},{"location":"reference/markdown/htmlparser/#markdown.htmlparser.HTMLExtractor.close","text":"Handle any buffered data.","title":"close"},{"location":"reference/markdown/htmlparser/#markdown.htmlparser.HTMLExtractor.line_offset","text":"Returns char index in self.rawdata for the start of the current line.","title":"line_offset"},{"location":"reference/markdown/htmlparser/#markdown.htmlparser.HTMLExtractor.at_line_start","text":"Returns True if current position is at start of line. Allows for up to three blank spaces at start of line.","title":"at_line_start"},{"location":"reference/markdown/htmlparser/#markdown.htmlparser.HTMLExtractor.get_endtag_text","text":"Returns the text of the end tag. If it fails to extract the actual text from the raw data, it builds a closing tag with tag .","title":"get_endtag_text"},{"location":"reference/markdown/htmlparser/#markdown.htmlparser.HTMLExtractor.handle_empty_tag","text":"Handle empty tags ( <data> ).","title":"handle_empty_tag"},{"location":"reference/markdown/htmlparser/#markdown.htmlparser.HTMLExtractor.get_starttag_text","text":"Return full source of start tag: <...> .","title":"get_starttag_text"},{"location":"reference/markdown/inlinepatterns/","text":"\u2039\u203a markdown.inlinepatterns \u00b6 In version 3.0, a new, more flexible inline processor was added, markdown.inlinepatterns.InlineProcessor . The original inline patterns, which inherit from markdown.inlinepatterns.Pattern or one of its children are still supported, though users are encouraged to migrate. The new InlineProcessor provides two major enhancements to Patterns : Inline Processors no longer need to match the entire block, so regular expressions no longer need to start with r'^(.*?)' and end with r'(.*?)%' . This runs faster. The returned Match object will only contain what is explicitly matched in the pattern, and extension pattern groups now start with m.group(1) . The handleMatch method now takes an additional input called data , which is the entire block under analysis, not just what is matched with the specified pattern. The method now returns the element and the indexes relative to data that the return element is replacing (usually m.start(0) and m.end(0) ). If the boundaries are returned as None , it is assumed that the match did not take place, and nothing will be altered in data . This allows handling of more complex constructs than regular expressions can handle, e.g., matching nested brackets, and explicit control of the span \u201cconsumed\u201d by the processor. \u2039\u203a markdown.inlinepatterns.build_inlinepatterns(md: Markdown, **kwargs: Any) -> util.Registry[InlineProcessor] \u00b6 Build the default set of inline patterns for Markdown. The order in which processors and/or patterns are applied is very important - e.g. if we first replace http://.../ links with <a> tags and then try to replace inline HTML, we would end up with a mess. So, we apply the expressions in the following order: backticks and escaped characters have to be handled before everything else so that we can preempt any markdown patterns by escaping them; then we handle the various types of links (auto-links must be handled before inline HTML); then we handle inline HTML. At this point we will simply replace all inline HTML strings with a placeholder and add the actual HTML to a stash; finally we apply strong, emphasis, etc. Return a Registry instance which contains the following collection of classes with their assigned names and priorities. Class Instance Name Priority BacktickInlineProcessor ( BACKTICK_RE ) backtick 190 EscapeInlineProcessor ( ESCAPE_RE ) escape 180 ReferenceInlineProcessor ( REFERENCE_RE ) reference 170 LinkInlineProcessor ( LINK_RE ) link 160 ImageInlineProcessor ( IMAGE_LINK_RE ) image_link 150 ImageReferenceInlineProcessor ( IMAGE_REFERENCE_RE ) image_reference 140 ShortReferenceInlineProcessor ( REFERENCE_RE ) short_reference 130 ShortImageReferenceInlineProcessor ( IMAGE_REFERENCE_RE ) short_image_ref 125 AutolinkInlineProcessor ( AUTOLINK_RE ) autolink 120 AutomailInlineProcessor ( AUTOMAIL_RE ) automail 110 SubstituteTagInlineProcessor ( LINE_BREAK_RE ) linebreak 100 HtmlInlineProcessor ( HTML_RE ) html 90 HtmlInlineProcessor ( ENTITY_RE ) entity 80 SimpleTextInlineProcessor ( NOT_STRONG_RE ) not_strong 70 AsteriskProcessor ( \"\\*\" ) em_strong 60 UnderscoreProcessor ( \"_\" ) em_strong2 50 \u2039\u203a markdown.inlinepatterns.NOIMG module-attribute \u00b6 Match not an image. Partial regular expression which matches if not preceded by ! . Defined Value: NOIMG = r'(?<!\\!)' \u2039\u203a markdown.inlinepatterns.BACKTICK_RE module-attribute \u00b6 Match backtick quoted string ( `e=f()` or ``e=f(\"`\")`` ). Defined Value: BACKTICK_RE = r'(?:(?<!\\\\)((?:\\\\{2})+)(?=`+)|(?<!\\\\)(`+)(.+?)(?<!`)\\2(?!`))' \u2039\u203a markdown.inlinepatterns.ESCAPE_RE module-attribute \u00b6 Match a backslash escaped character ( \\< or \\* ). Defined Value: ESCAPE_RE = r'\\\\(.)' \u2039\u203a markdown.inlinepatterns.EMPHASIS_RE module-attribute \u00b6 Match emphasis with an asterisk ( *emphasis* ). Defined Value: EMPHASIS_RE = r'(\\*)([^\\*]+)\\1' \u2039\u203a markdown.inlinepatterns.STRONG_RE module-attribute \u00b6 Match strong with an asterisk ( **strong** ). Defined Value: STRONG_RE = r'(\\*{2})(.+?)\\1' \u2039\u203a markdown.inlinepatterns.SMART_STRONG_RE module-attribute \u00b6 Match strong with underscore while ignoring middle word underscores ( __smart__strong__ ). Defined Value: SMART_STRONG_RE = r'(?<!\\w)(_{2})(?!_)(.+?)(?<!_)\\1(?!\\w)' \u2039\u203a markdown.inlinepatterns.SMART_EMPHASIS_RE module-attribute \u00b6 Match emphasis with underscore while ignoring middle word underscores ( _smart_emphasis_ ). Defined Value: SMART_EMPHASIS_RE = r'(?<!\\w)(_)(?!_)(.+?)(?<!_)\\1(?!\\w)' \u2039\u203a markdown.inlinepatterns.SMART_STRONG_EM_RE module-attribute \u00b6 Match strong emphasis with underscores ( __strong _em__ ). Defined Value: SMART_STRONG_EM_RE = r'(?<!\\w)(\\_)\\1(?!\\1)(.+?)(?<!\\w)\\1(?!\\1)(.+?)\\1{3}(?!\\w)' \u2039\u203a markdown.inlinepatterns.EM_STRONG_RE module-attribute \u00b6 Match emphasis strong with asterisk ( ***strongem*** or ***em*strong** ). Defined Value: EM_STRONG_RE = r'(\\*)\\1{2}(.+?)\\1(.*?)\\1{2}' \u2039\u203a markdown.inlinepatterns.EM_STRONG2_RE module-attribute \u00b6 Match emphasis strong with underscores ( ___emstrong___ or ___em_strong__ ). Defined Value: EM_STRONG2_RE = r'(_)\\1{2}(.+?)\\1(.*?)\\1{2}' \u2039\u203a markdown.inlinepatterns.STRONG_EM_RE module-attribute \u00b6 Match strong emphasis with asterisk ( ***strong**em* ). Defined Value: STRONG_EM_RE = r'(\\*)\\1{2}(.+?)\\1{2}(.*?)\\1' \u2039\u203a markdown.inlinepatterns.STRONG_EM2_RE module-attribute \u00b6 Match strong emphasis with underscores ( ___strong__em_ ). Defined Value: STRONG_EM2_RE = r'(_)\\1{2}(.+?)\\1{2}(.*?)\\1' \u2039\u203a markdown.inlinepatterns.STRONG_EM3_RE module-attribute \u00b6 Match strong emphasis with asterisk ( **strong*em*** ). Defined Value: STRONG_EM3_RE = r'(\\*)\\1(?!\\1)([^*]+?)\\1(?!\\1)(.+?)\\1{3}' \u2039\u203a markdown.inlinepatterns.LINK_RE module-attribute \u00b6 Match start of in-line link ( [text](url) or [text](<url>) or [text](url \"title\") ). Defined Value: LINK_RE = NOIMG + r'\\[' \u2039\u203a markdown.inlinepatterns.IMAGE_LINK_RE module-attribute \u00b6 Match start of in-line image link ( ![alttxt](url) or ![alttxt](<url>) ). Defined Value: IMAGE_LINK_RE = r'\\!\\[' \u2039\u203a markdown.inlinepatterns.REFERENCE_RE module-attribute \u00b6 Match start of reference link ( [Label][3] ). Defined Value: REFERENCE_RE = LINK_RE \u2039\u203a markdown.inlinepatterns.IMAGE_REFERENCE_RE module-attribute \u00b6 Match start of image reference ( ![alt text][2] ). Defined Value: IMAGE_REFERENCE_RE = IMAGE_LINK_RE \u2039\u203a markdown.inlinepatterns.NOT_STRONG_RE module-attribute \u00b6 Match a stand-alone * or _ . Defined Value: NOT_STRONG_RE = r'((^|(?<=\\s))(\\*{1,3}|_{1,3})(?=\\s|$))' \u2039\u203a markdown.inlinepatterns.AUTOLINK_RE module-attribute \u00b6 Match an automatic link ( <http://www.example.com> ). Defined Value: AUTOLINK_RE = r'<((?:[Ff]|[Hh][Tt])[Tt][Pp][Ss]?://[^<>]*)>' \u2039\u203a markdown.inlinepatterns.AUTOMAIL_RE module-attribute \u00b6 Match an automatic email link ( <me@example.com> ). Defined Value: AUTOMAIL_RE = r'<([^<> !]+@[^@<> ]+)>' \u2039\u203a markdown.inlinepatterns.HTML_RE module-attribute \u00b6 Match an HTML tag ( <...> ). Defined Value: HTML_RE = r'(<(\\/?[a-zA-Z][^<>@ ]*( [^<>]*)?|!--(?:(?!<!--|-->).)*--)>)' \u2039\u203a markdown.inlinepatterns.ENTITY_RE module-attribute \u00b6 Match an HTML entity ( &#38; (decimal) or &#x26; (hex) or &amp; (named)). Defined Value: ENTITY_RE = r'(&(?:\\#[0-9]+|\\#x[0-9a-fA-F]+|[a-zA-Z0-9]+);)' \u2039\u203a markdown.inlinepatterns.LINE_BREAK_RE module-attribute \u00b6 Match two spaces at end of line. Defined Value: LINE_BREAK_RE = r' \\n' \u2039\u203a markdown.inlinepatterns.dequote(string: str) -> str \u00b6 Remove quotes from around a string. \u2039\u203a markdown.inlinepatterns.EmStrongItem \u00b6 Bases: NamedTuple Emphasis/strong pattern item. \u2039\u203a markdown.inlinepatterns.Pattern(pattern: str, md: Markdown | None = None) \u00b6 Base class that inline patterns subclass. Inline patterns are handled by means of Pattern subclasses, one per regular expression. Each pattern object uses a single regular expression and must support the following methods: getCompiledRegExp and handleMatch . All the regular expressions used by Pattern subclasses must capture the whole block. For this reason, they all start with ^(.*) and end with (.*)! . When passing a regular expression on class initialization, the ^(.*) and (.*)! are added automatically and the regular expression is pre-compiled. It is strongly suggested that the newer style markdown.inlinepatterns.InlineProcessor that use a more efficient and flexible search approach be used instead. However, the older style Pattern remains for backward compatibility with many existing third-party extensions. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. md ( Markdown | None , default: None ) \u2013 An optional pointer to the instance of markdown.Markdown and is available as self.md on the class instance. \u2039\u203a markdown.inlinepatterns.Pattern.ANCESTOR_EXCLUDES: Collection[str] class-attribute instance-attribute \u00b6 A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple() \u2039\u203a markdown.inlinepatterns.Pattern.getCompiledRegExp() -> re.Pattern \u00b6 Return a compiled regular expression. \u2039\u203a markdown.inlinepatterns.Pattern.handleMatch(m: re.Match[str]) -> etree.Element | str \u00b6 Return a ElementTree element from the given match. Subclasses should override this method. Parameters: m ( Match [ str ] ) \u2013 A match object containing a match of the pattern. Returns: An ElementTree Element object. \u2039\u203a markdown.inlinepatterns.Pattern.type() -> str \u00b6 Return class name, to define pattern type \u2039\u203a markdown.inlinepatterns.Pattern.unescape(text: str) -> str \u00b6 Return unescaped text given text with an inline placeholder. \u2039\u203a markdown.inlinepatterns.InlineProcessor(pattern: str, md: Markdown | None = None) \u00b6 Bases: Pattern Base class that inline processors subclass. This is the newer style inline processor that uses a more efficient and flexible search approach. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. md ( Markdown | None , default: None ) \u2013 An optional pointer to the instance of markdown.Markdown and is available as self.md on the class instance. \u2039\u203a markdown.inlinepatterns.InlineProcessor.ANCESTOR_EXCLUDES: Collection[str] class-attribute instance-attribute \u00b6 A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple() \u2039\u203a markdown.inlinepatterns.InlineProcessor.getCompiledRegExp() -> re.Pattern \u00b6 Return a compiled regular expression. \u2039\u203a markdown.inlinepatterns.InlineProcessor.type() -> str \u00b6 Return class name, to define pattern type \u2039\u203a markdown.inlinepatterns.InlineProcessor.unescape(text: str) -> str \u00b6 Return unescaped text given text with an inline placeholder. \u2039\u203a markdown.inlinepatterns.InlineProcessor.handleMatch(m: re.Match[str], data: str) -> tuple[etree.Element | str | None, int | None, int | None] \u00b6 Return a ElementTree element from the given match and the start and end index of the matched text. If start and/or end are returned as None , it will be assumed that the processor did not find a valid region of text. Subclasses should override this method. Parameters: m ( Match [ str ] ) \u2013 A re match object containing a match of the pattern. data ( str ) \u2013 The buffer currently under analysis. Returns: el ( Element | str | None ) \u2013 The ElementTree element, text or None. start ( int | None ) \u2013 The start of the region that has been matched or None. end ( int | None ) \u2013 The end of the region that has been matched or None. \u2039\u203a markdown.inlinepatterns.SimpleTextPattern(pattern: str, md: Markdown | None = None) \u00b6 Bases: Pattern Return a simple text of group(2) of a Pattern. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. md ( Markdown | None , default: None ) \u2013 An optional pointer to the instance of markdown.Markdown and is available as self.md on the class instance. \u2039\u203a markdown.inlinepatterns.SimpleTextPattern.ANCESTOR_EXCLUDES: Collection[str] class-attribute instance-attribute \u00b6 A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple() \u2039\u203a markdown.inlinepatterns.SimpleTextPattern.getCompiledRegExp() -> re.Pattern \u00b6 Return a compiled regular expression. \u2039\u203a markdown.inlinepatterns.SimpleTextPattern.type() -> str \u00b6 Return class name, to define pattern type \u2039\u203a markdown.inlinepatterns.SimpleTextPattern.unescape(text: str) -> str \u00b6 Return unescaped text given text with an inline placeholder. \u2039\u203a markdown.inlinepatterns.SimpleTextPattern.handleMatch(m: re.Match[str]) -> str \u00b6 Return string content of group(2) of a matching pattern. \u2039\u203a markdown.inlinepatterns.SimpleTextInlineProcessor(pattern: str, md: Markdown | None = None) \u00b6 Bases: InlineProcessor Return a simple text of group(1) of a Pattern. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. md ( Markdown | None , default: None ) \u2013 An optional pointer to the instance of markdown.Markdown and is available as self.md on the class instance. \u2039\u203a markdown.inlinepatterns.SimpleTextInlineProcessor.ANCESTOR_EXCLUDES: Collection[str] class-attribute instance-attribute \u00b6 A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple() \u2039\u203a markdown.inlinepatterns.SimpleTextInlineProcessor.getCompiledRegExp() -> re.Pattern \u00b6 Return a compiled regular expression. \u2039\u203a markdown.inlinepatterns.SimpleTextInlineProcessor.type() -> str \u00b6 Return class name, to define pattern type \u2039\u203a markdown.inlinepatterns.SimpleTextInlineProcessor.unescape(text: str) -> str \u00b6 Return unescaped text given text with an inline placeholder. \u2039\u203a markdown.inlinepatterns.SimpleTextInlineProcessor.handleMatch(m: re.Match[str], data: str) -> tuple[str, int, int] \u00b6 Return string content of group(1) of a matching pattern. \u2039\u203a markdown.inlinepatterns.EscapeInlineProcessor(pattern: str, md: Markdown | None = None) \u00b6 Bases: InlineProcessor Return an escaped character. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. md ( Markdown | None , default: None ) \u2013 An optional pointer to the instance of markdown.Markdown and is available as self.md on the class instance. \u2039\u203a markdown.inlinepatterns.EscapeInlineProcessor.ANCESTOR_EXCLUDES: Collection[str] class-attribute instance-attribute \u00b6 A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple() \u2039\u203a markdown.inlinepatterns.EscapeInlineProcessor.getCompiledRegExp() -> re.Pattern \u00b6 Return a compiled regular expression. \u2039\u203a markdown.inlinepatterns.EscapeInlineProcessor.type() -> str \u00b6 Return class name, to define pattern type \u2039\u203a markdown.inlinepatterns.EscapeInlineProcessor.unescape(text: str) -> str \u00b6 Return unescaped text given text with an inline placeholder. \u2039\u203a markdown.inlinepatterns.EscapeInlineProcessor.handleMatch(m: re.Match[str], data: str) -> tuple[str | None, int, int] \u00b6 If the character matched by group(1) of a pattern is in ESCAPED_CHARS then return the integer representing the character\u2019s Unicode code point (as returned by ord ) wrapped in util.STX and util.ETX . If the matched character is not in ESCAPED_CHARS , then return None . \u2039\u203a markdown.inlinepatterns.SimpleTagPattern(pattern: str, tag: str) \u00b6 Bases: Pattern Return element of type tag with a text attribute of group(3) of a Pattern. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. tag ( str ) \u2013 Tag of element. \u2039\u203a markdown.inlinepatterns.SimpleTagPattern.ANCESTOR_EXCLUDES: Collection[str] class-attribute instance-attribute \u00b6 A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple() \u2039\u203a markdown.inlinepatterns.SimpleTagPattern.getCompiledRegExp() -> re.Pattern \u00b6 Return a compiled regular expression. \u2039\u203a markdown.inlinepatterns.SimpleTagPattern.type() -> str \u00b6 Return class name, to define pattern type \u2039\u203a markdown.inlinepatterns.SimpleTagPattern.unescape(text: str) -> str \u00b6 Return unescaped text given text with an inline placeholder. \u2039\u203a markdown.inlinepatterns.SimpleTagPattern.tag instance-attribute \u00b6 The tag of the rendered element. Defined Value: self.tag = tag \u2039\u203a markdown.inlinepatterns.SimpleTagPattern.handleMatch(m: re.Match[str]) -> etree.Element \u00b6 Return Element of type tag with the string in group(3) of a matching pattern as the Element\u2019s text. \u2039\u203a markdown.inlinepatterns.SimpleTagInlineProcessor(pattern: str, tag: str) \u00b6 Bases: InlineProcessor Return element of type tag with a text attribute of group(2) of a Pattern. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. tag ( str ) \u2013 Tag of element. \u2039\u203a markdown.inlinepatterns.SimpleTagInlineProcessor.ANCESTOR_EXCLUDES: Collection[str] class-attribute instance-attribute \u00b6 A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple() \u2039\u203a markdown.inlinepatterns.SimpleTagInlineProcessor.getCompiledRegExp() -> re.Pattern \u00b6 Return a compiled regular expression. \u2039\u203a markdown.inlinepatterns.SimpleTagInlineProcessor.type() -> str \u00b6 Return class name, to define pattern type \u2039\u203a markdown.inlinepatterns.SimpleTagInlineProcessor.unescape(text: str) -> str \u00b6 Return unescaped text given text with an inline placeholder. \u2039\u203a markdown.inlinepatterns.SimpleTagInlineProcessor.tag instance-attribute \u00b6 The tag of the rendered element. Defined Value: self.tag = tag \u2039\u203a markdown.inlinepatterns.SimpleTagInlineProcessor.handleMatch(m: re.Match[str], data: str) -> tuple[etree.Element, int, int] \u00b6 Return Element of type tag with the string in group(2) of a matching pattern as the Element\u2019s text. \u2039\u203a markdown.inlinepatterns.SubstituteTagPattern(pattern: str, tag: str) \u00b6 Bases: SimpleTagPattern Return an element of type tag with no children. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. tag ( str ) \u2013 Tag of element. \u2039\u203a markdown.inlinepatterns.SubstituteTagPattern.ANCESTOR_EXCLUDES: Collection[str] class-attribute instance-attribute \u00b6 A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple() \u2039\u203a markdown.inlinepatterns.SubstituteTagPattern.getCompiledRegExp() -> re.Pattern \u00b6 Return a compiled regular expression. \u2039\u203a markdown.inlinepatterns.SubstituteTagPattern.type() -> str \u00b6 Return class name, to define pattern type \u2039\u203a markdown.inlinepatterns.SubstituteTagPattern.unescape(text: str) -> str \u00b6 Return unescaped text given text with an inline placeholder. \u2039\u203a markdown.inlinepatterns.SubstituteTagPattern.tag instance-attribute \u00b6 The tag of the rendered element. Defined Value: self.tag = tag \u2039\u203a markdown.inlinepatterns.SubstituteTagPattern.handleMatch(m: re.Match[str]) -> etree.Element \u00b6 Return empty Element of type tag . \u2039\u203a markdown.inlinepatterns.SubstituteTagInlineProcessor(pattern: str, tag: str) \u00b6 Bases: SimpleTagInlineProcessor Return an element of type tag with no children. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. tag ( str ) \u2013 Tag of element. \u2039\u203a markdown.inlinepatterns.SubstituteTagInlineProcessor.ANCESTOR_EXCLUDES: Collection[str] class-attribute instance-attribute \u00b6 A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple() \u2039\u203a markdown.inlinepatterns.SubstituteTagInlineProcessor.getCompiledRegExp() -> re.Pattern \u00b6 Return a compiled regular expression. \u2039\u203a markdown.inlinepatterns.SubstituteTagInlineProcessor.type() -> str \u00b6 Return class name, to define pattern type \u2039\u203a markdown.inlinepatterns.SubstituteTagInlineProcessor.unescape(text: str) -> str \u00b6 Return unescaped text given text with an inline placeholder. \u2039\u203a markdown.inlinepatterns.SubstituteTagInlineProcessor.tag instance-attribute \u00b6 The tag of the rendered element. Defined Value: self.tag = tag \u2039\u203a markdown.inlinepatterns.SubstituteTagInlineProcessor.handleMatch(m: re.Match[str], data: str) -> tuple[etree.Element, int, int] \u00b6 Return empty Element of type tag . \u2039\u203a markdown.inlinepatterns.BacktickInlineProcessor(pattern: str) \u00b6 Bases: InlineProcessor Return a <code> element containing the escaped matching text. \u2039\u203a markdown.inlinepatterns.BacktickInlineProcessor.ANCESTOR_EXCLUDES: Collection[str] class-attribute instance-attribute \u00b6 A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple() \u2039\u203a markdown.inlinepatterns.BacktickInlineProcessor.getCompiledRegExp() -> re.Pattern \u00b6 Return a compiled regular expression. \u2039\u203a markdown.inlinepatterns.BacktickInlineProcessor.type() -> str \u00b6 Return class name, to define pattern type \u2039\u203a markdown.inlinepatterns.BacktickInlineProcessor.unescape(text: str) -> str \u00b6 Return unescaped text given text with an inline placeholder. \u2039\u203a markdown.inlinepatterns.BacktickInlineProcessor.tag instance-attribute \u00b6 The tag of the rendered element. Defined Value: self.tag = 'code' \u2039\u203a markdown.inlinepatterns.BacktickInlineProcessor.handleMatch(m: re.Match[str], data: str) -> tuple[etree.Element | str, int, int] \u00b6 If the match contains group(3) of a pattern, then return a code Element which contains HTML escaped text (with code_escape ) as an AtomicString . If the match does not contain group(3) then return the text of group(1) backslash escaped. \u2039\u203a markdown.inlinepatterns.DoubleTagPattern(pattern: str, tag: str) \u00b6 Bases: SimpleTagPattern Return a ElementTree element nested in tag2 nested in tag1. Useful for strong emphasis etc. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. tag ( str ) \u2013 Tag of element. \u2039\u203a markdown.inlinepatterns.DoubleTagPattern.ANCESTOR_EXCLUDES: Collection[str] class-attribute instance-attribute \u00b6 A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple() \u2039\u203a markdown.inlinepatterns.DoubleTagPattern.getCompiledRegExp() -> re.Pattern \u00b6 Return a compiled regular expression. \u2039\u203a markdown.inlinepatterns.DoubleTagPattern.type() -> str \u00b6 Return class name, to define pattern type \u2039\u203a markdown.inlinepatterns.DoubleTagPattern.unescape(text: str) -> str \u00b6 Return unescaped text given text with an inline placeholder. \u2039\u203a markdown.inlinepatterns.DoubleTagPattern.tag instance-attribute \u00b6 The tag of the rendered element. Defined Value: self.tag = tag \u2039\u203a markdown.inlinepatterns.DoubleTagPattern.handleMatch(m: re.Match[str]) -> etree.Element \u00b6 Return Element in following format: <tag1><tag2>group(3)</tag2>group(4)</tag2> where group(4) is optional. \u2039\u203a markdown.inlinepatterns.DoubleTagInlineProcessor(pattern: str, tag: str) \u00b6 Bases: SimpleTagInlineProcessor Return a ElementTree element nested in tag2 nested in tag1. Useful for strong emphasis etc. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. tag ( str ) \u2013 Tag of element. \u2039\u203a markdown.inlinepatterns.DoubleTagInlineProcessor.ANCESTOR_EXCLUDES: Collection[str] class-attribute instance-attribute \u00b6 A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple() \u2039\u203a markdown.inlinepatterns.DoubleTagInlineProcessor.getCompiledRegExp() -> re.Pattern \u00b6 Return a compiled regular expression. \u2039\u203a markdown.inlinepatterns.DoubleTagInlineProcessor.type() -> str \u00b6 Return class name, to define pattern type \u2039\u203a markdown.inlinepatterns.DoubleTagInlineProcessor.unescape(text: str) -> str \u00b6 Return unescaped text given text with an inline placeholder. \u2039\u203a markdown.inlinepatterns.DoubleTagInlineProcessor.tag instance-attribute \u00b6 The tag of the rendered element. Defined Value: self.tag = tag \u2039\u203a markdown.inlinepatterns.DoubleTagInlineProcessor.handleMatch(m: re.Match[str], data: str) -> tuple[etree.Element, int, int] \u00b6 Return Element in following format: <tag1><tag2>group(2)</tag2>group(3)</tag2> where group(3) is optional. \u2039\u203a markdown.inlinepatterns.HtmlInlineProcessor(pattern: str, md: Markdown | None = None) \u00b6 Bases: InlineProcessor Store raw inline html and return a placeholder. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. md ( Markdown | None , default: None ) \u2013 An optional pointer to the instance of markdown.Markdown and is available as self.md on the class instance. \u2039\u203a markdown.inlinepatterns.HtmlInlineProcessor.ANCESTOR_EXCLUDES: Collection[str] class-attribute instance-attribute \u00b6 A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple() \u2039\u203a markdown.inlinepatterns.HtmlInlineProcessor.getCompiledRegExp() -> re.Pattern \u00b6 Return a compiled regular expression. \u2039\u203a markdown.inlinepatterns.HtmlInlineProcessor.type() -> str \u00b6 Return class name, to define pattern type \u2039\u203a markdown.inlinepatterns.HtmlInlineProcessor.handleMatch(m: re.Match[str], data: str) -> tuple[str, int, int] \u00b6 Store the text of group(1) of a pattern and return a placeholder string. \u2039\u203a markdown.inlinepatterns.HtmlInlineProcessor.unescape(text: str) -> str \u00b6 Return unescaped text given text with an inline placeholder. \u2039\u203a markdown.inlinepatterns.HtmlInlineProcessor.backslash_unescape(text: str) -> str \u00b6 Return text with backslash escapes undone (backslashes are restored). \u2039\u203a markdown.inlinepatterns.AsteriskProcessor(pattern: str, md: Markdown | None = None) \u00b6 Bases: InlineProcessor Emphasis processor for handling strong and em matches inside asterisks. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. md ( Markdown | None , default: None ) \u2013 An optional pointer to the instance of markdown.Markdown and is available as self.md on the class instance. \u2039\u203a markdown.inlinepatterns.AsteriskProcessor.ANCESTOR_EXCLUDES: Collection[str] class-attribute instance-attribute \u00b6 A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple() \u2039\u203a markdown.inlinepatterns.AsteriskProcessor.getCompiledRegExp() -> re.Pattern \u00b6 Return a compiled regular expression. \u2039\u203a markdown.inlinepatterns.AsteriskProcessor.type() -> str \u00b6 Return class name, to define pattern type \u2039\u203a markdown.inlinepatterns.AsteriskProcessor.unescape(text: str) -> str \u00b6 Return unescaped text given text with an inline placeholder. \u2039\u203a markdown.inlinepatterns.AsteriskProcessor.PATTERNS class-attribute instance-attribute \u00b6 The various strong and emphasis patterns handled by this processor. Defined Value: PATTERNS = [ EmStrongItem(re.compile(EM_STRONG_RE, re.DOTALL | re.UNICODE), 'double', 'strong,em'), EmStrongItem(re.compile(STRONG_EM_RE, re.DOTALL | re.UNICODE), 'double', 'em,strong'), EmStrongItem(re.compile(STRONG_EM3_RE, re.DOTALL | re.UNICODE), 'double2', 'strong,em'), EmStrongItem(re.compile(STRONG_RE, re.DOTALL | re.UNICODE), 'single', 'strong'), EmStrongItem(re.compile(EMPHASIS_RE, re.DOTALL | re.UNICODE), 'single', 'em') ] \u2039\u203a markdown.inlinepatterns.AsteriskProcessor.build_single(m: re.Match[str], tag: str, idx: int) -> etree.Element \u00b6 Return single tag. \u2039\u203a markdown.inlinepatterns.AsteriskProcessor.build_double(m: re.Match[str], tags: str, idx: int) -> etree.Element \u00b6 Return double tag. \u2039\u203a markdown.inlinepatterns.AsteriskProcessor.build_double2(m: re.Match[str], tags: str, idx: int) -> etree.Element \u00b6 Return double tags (variant 2): <strong>text <em>text</em></strong> . \u2039\u203a markdown.inlinepatterns.AsteriskProcessor.parse_sub_patterns(data: str, parent: etree.Element, last: etree.Element | None, idx: int) -> None \u00b6 Parses sub patterns. data : text to evaluate. parent : Parent to attach text and sub elements to. last : Last appended child to parent. Can also be None if parent has no children. idx : Current pattern index that was used to evaluate the parent. \u2039\u203a markdown.inlinepatterns.AsteriskProcessor.build_element(m: re.Match[str], builder: str, tags: str, index: int) -> etree.Element \u00b6 Element builder. \u2039\u203a markdown.inlinepatterns.AsteriskProcessor.handleMatch(m: re.Match[str], data: str) -> tuple[etree.Element | None, int | None, int | None] \u00b6 Parse patterns. \u2039\u203a markdown.inlinepatterns.UnderscoreProcessor(pattern: str, md: Markdown | None = None) \u00b6 Bases: AsteriskProcessor Emphasis processor for handling strong and em matches inside underscores. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. md ( Markdown | None , default: None ) \u2013 An optional pointer to the instance of markdown.Markdown and is available as self.md on the class instance. \u2039\u203a markdown.inlinepatterns.UnderscoreProcessor.ANCESTOR_EXCLUDES: Collection[str] class-attribute instance-attribute \u00b6 A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple() \u2039\u203a markdown.inlinepatterns.UnderscoreProcessor.getCompiledRegExp() -> re.Pattern \u00b6 Return a compiled regular expression. \u2039\u203a markdown.inlinepatterns.UnderscoreProcessor.handleMatch(m: re.Match[str], data: str) -> tuple[etree.Element | None, int | None, int | None] \u00b6 Parse patterns. \u2039\u203a markdown.inlinepatterns.UnderscoreProcessor.type() -> str \u00b6 Return class name, to define pattern type \u2039\u203a markdown.inlinepatterns.UnderscoreProcessor.unescape(text: str) -> str \u00b6 Return unescaped text given text with an inline placeholder. \u2039\u203a markdown.inlinepatterns.UnderscoreProcessor.build_single(m: re.Match[str], tag: str, idx: int) -> etree.Element \u00b6 Return single tag. \u2039\u203a markdown.inlinepatterns.UnderscoreProcessor.build_double(m: re.Match[str], tags: str, idx: int) -> etree.Element \u00b6 Return double tag. \u2039\u203a markdown.inlinepatterns.UnderscoreProcessor.build_double2(m: re.Match[str], tags: str, idx: int) -> etree.Element \u00b6 Return double tags (variant 2): <strong>text <em>text</em></strong> . \u2039\u203a markdown.inlinepatterns.UnderscoreProcessor.parse_sub_patterns(data: str, parent: etree.Element, last: etree.Element | None, idx: int) -> None \u00b6 Parses sub patterns. data : text to evaluate. parent : Parent to attach text and sub elements to. last : Last appended child to parent. Can also be None if parent has no children. idx : Current pattern index that was used to evaluate the parent. \u2039\u203a markdown.inlinepatterns.UnderscoreProcessor.build_element(m: re.Match[str], builder: str, tags: str, index: int) -> etree.Element \u00b6 Element builder. \u2039\u203a markdown.inlinepatterns.UnderscoreProcessor.PATTERNS class-attribute instance-attribute \u00b6 The various strong and emphasis patterns handled by this processor. Defined Value: PATTERNS = [ EmStrongItem(re.compile(EM_STRONG2_RE, re.DOTALL | re.UNICODE), 'double', 'strong,em'), EmStrongItem(re.compile(STRONG_EM2_RE, re.DOTALL | re.UNICODE), 'double', 'em,strong'), EmStrongItem(re.compile(SMART_STRONG_EM_RE, re.DOTALL | re.UNICODE), 'double2', 'strong,em'), EmStrongItem(re.compile(SMART_STRONG_RE, re.DOTALL | re.UNICODE), 'single', 'strong'), EmStrongItem(re.compile(SMART_EMPHASIS_RE, re.DOTALL | re.UNICODE), 'single', 'em') ] \u2039\u203a markdown.inlinepatterns.LinkInlineProcessor(pattern: str, md: Markdown | None = None) \u00b6 Bases: InlineProcessor Return a link element from the given match. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. md ( Markdown | None , default: None ) \u2013 An optional pointer to the instance of markdown.Markdown and is available as self.md on the class instance. \u2039\u203a markdown.inlinepatterns.LinkInlineProcessor.ANCESTOR_EXCLUDES: Collection[str] class-attribute instance-attribute \u00b6 A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple() \u2039\u203a markdown.inlinepatterns.LinkInlineProcessor.getCompiledRegExp() -> re.Pattern \u00b6 Return a compiled regular expression. \u2039\u203a markdown.inlinepatterns.LinkInlineProcessor.type() -> str \u00b6 Return class name, to define pattern type \u2039\u203a markdown.inlinepatterns.LinkInlineProcessor.unescape(text: str) -> str \u00b6 Return unescaped text given text with an inline placeholder. \u2039\u203a markdown.inlinepatterns.LinkInlineProcessor.handleMatch(m: re.Match[str], data: str) -> tuple[etree.Element | None, int | None, int | None] \u00b6 Return an a Element or (None, None, None) . \u2039\u203a markdown.inlinepatterns.LinkInlineProcessor.getLink(data: str, index: int) -> tuple[str, str | None, int, bool] \u00b6 Parse data between () of [Text]() allowing recursive () . \u2039\u203a markdown.inlinepatterns.LinkInlineProcessor.getText(data: str, index: int) -> tuple[str, int, bool] \u00b6 Parse the content between [] of the start of an image or link resolving nested square brackets. \u2039\u203a markdown.inlinepatterns.ImageInlineProcessor(pattern: str, md: Markdown | None = None) \u00b6 Bases: LinkInlineProcessor Return a img element from the given match. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. md ( Markdown | None , default: None ) \u2013 An optional pointer to the instance of markdown.Markdown and is available as self.md on the class instance. \u2039\u203a markdown.inlinepatterns.ImageInlineProcessor.ANCESTOR_EXCLUDES: Collection[str] class-attribute instance-attribute \u00b6 A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple() \u2039\u203a markdown.inlinepatterns.ImageInlineProcessor.getCompiledRegExp() -> re.Pattern \u00b6 Return a compiled regular expression. \u2039\u203a markdown.inlinepatterns.ImageInlineProcessor.type() -> str \u00b6 Return class name, to define pattern type \u2039\u203a markdown.inlinepatterns.ImageInlineProcessor.unescape(text: str) -> str \u00b6 Return unescaped text given text with an inline placeholder. \u2039\u203a markdown.inlinepatterns.ImageInlineProcessor.getLink(data: str, index: int) -> tuple[str, str | None, int, bool] \u00b6 Parse data between () of [Text]() allowing recursive () . \u2039\u203a markdown.inlinepatterns.ImageInlineProcessor.getText(data: str, index: int) -> tuple[str, int, bool] \u00b6 Parse the content between [] of the start of an image or link resolving nested square brackets. \u2039\u203a markdown.inlinepatterns.ImageInlineProcessor.handleMatch(m: re.Match[str], data: str) -> tuple[etree.Element | None, int | None, int | None] \u00b6 Return an img Element or (None, None, None) . \u2039\u203a markdown.inlinepatterns.ReferenceInlineProcessor(pattern: str, md: Markdown | None = None) \u00b6 Bases: LinkInlineProcessor Match to a stored reference and return link element. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. md ( Markdown | None , default: None ) \u2013 An optional pointer to the instance of markdown.Markdown and is available as self.md on the class instance. \u2039\u203a markdown.inlinepatterns.ReferenceInlineProcessor.ANCESTOR_EXCLUDES: Collection[str] class-attribute instance-attribute \u00b6 A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple() \u2039\u203a markdown.inlinepatterns.ReferenceInlineProcessor.getCompiledRegExp() -> re.Pattern \u00b6 Return a compiled regular expression. \u2039\u203a markdown.inlinepatterns.ReferenceInlineProcessor.type() -> str \u00b6 Return class name, to define pattern type \u2039\u203a markdown.inlinepatterns.ReferenceInlineProcessor.unescape(text: str) -> str \u00b6 Return unescaped text given text with an inline placeholder. \u2039\u203a markdown.inlinepatterns.ReferenceInlineProcessor.getLink(data: str, index: int) -> tuple[str, str | None, int, bool] \u00b6 Parse data between () of [Text]() allowing recursive () . \u2039\u203a markdown.inlinepatterns.ReferenceInlineProcessor.getText(data: str, index: int) -> tuple[str, int, bool] \u00b6 Parse the content between [] of the start of an image or link resolving nested square brackets. \u2039\u203a markdown.inlinepatterns.ReferenceInlineProcessor.handleMatch(m: re.Match[str], data: str) -> tuple[etree.Element | None, int | None, int | None] \u00b6 Return Element returned by makeTag method or (None, None, None) . \u2039\u203a markdown.inlinepatterns.ReferenceInlineProcessor.evalId(data: str, index: int, text: str) -> tuple[str | None, int, bool] \u00b6 Evaluate the id portion of [ref][id] . If [ref][] use [ref] . \u2039\u203a markdown.inlinepatterns.ReferenceInlineProcessor.makeTag(href: str, title: str, text: str) -> etree.Element \u00b6 Return an a Element . \u2039\u203a markdown.inlinepatterns.ShortReferenceInlineProcessor(pattern: str, md: Markdown | None = None) \u00b6 Bases: ReferenceInlineProcessor Short form of reference: [google] . Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. md ( Markdown | None , default: None ) \u2013 An optional pointer to the instance of markdown.Markdown and is available as self.md on the class instance. \u2039\u203a markdown.inlinepatterns.ShortReferenceInlineProcessor.ANCESTOR_EXCLUDES: Collection[str] class-attribute instance-attribute \u00b6 A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple() \u2039\u203a markdown.inlinepatterns.ShortReferenceInlineProcessor.getCompiledRegExp() -> re.Pattern \u00b6 Return a compiled regular expression. \u2039\u203a markdown.inlinepatterns.ShortReferenceInlineProcessor.handleMatch(m: re.Match[str], data: str) -> tuple[etree.Element | None, int | None, int | None] \u00b6 Return Element returned by makeTag method or (None, None, None) . \u2039\u203a markdown.inlinepatterns.ShortReferenceInlineProcessor.type() -> str \u00b6 Return class name, to define pattern type \u2039\u203a markdown.inlinepatterns.ShortReferenceInlineProcessor.unescape(text: str) -> str \u00b6 Return unescaped text given text with an inline placeholder. \u2039\u203a markdown.inlinepatterns.ShortReferenceInlineProcessor.getLink(data: str, index: int) -> tuple[str, str | None, int, bool] \u00b6 Parse data between () of [Text]() allowing recursive () . \u2039\u203a markdown.inlinepatterns.ShortReferenceInlineProcessor.getText(data: str, index: int) -> tuple[str, int, bool] \u00b6 Parse the content between [] of the start of an image or link resolving nested square brackets. \u2039\u203a markdown.inlinepatterns.ShortReferenceInlineProcessor.makeTag(href: str, title: str, text: str) -> etree.Element \u00b6 Return an a Element . \u2039\u203a markdown.inlinepatterns.ShortReferenceInlineProcessor.evalId(data: str, index: int, text: str) -> tuple[str, int, bool] \u00b6 Evaluate the id of [ref] . \u2039\u203a markdown.inlinepatterns.ImageReferenceInlineProcessor(pattern: str, md: Markdown | None = None) \u00b6 Bases: ReferenceInlineProcessor Match to a stored reference and return img element. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. md ( Markdown | None , default: None ) \u2013 An optional pointer to the instance of markdown.Markdown and is available as self.md on the class instance. \u2039\u203a markdown.inlinepatterns.ImageReferenceInlineProcessor.ANCESTOR_EXCLUDES: Collection[str] class-attribute instance-attribute \u00b6 A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple() \u2039\u203a markdown.inlinepatterns.ImageReferenceInlineProcessor.getCompiledRegExp() -> re.Pattern \u00b6 Return a compiled regular expression. \u2039\u203a markdown.inlinepatterns.ImageReferenceInlineProcessor.handleMatch(m: re.Match[str], data: str) -> tuple[etree.Element | None, int | None, int | None] \u00b6 Return Element returned by makeTag method or (None, None, None) . \u2039\u203a markdown.inlinepatterns.ImageReferenceInlineProcessor.type() -> str \u00b6 Return class name, to define pattern type \u2039\u203a markdown.inlinepatterns.ImageReferenceInlineProcessor.unescape(text: str) -> str \u00b6 Return unescaped text given text with an inline placeholder. \u2039\u203a markdown.inlinepatterns.ImageReferenceInlineProcessor.getLink(data: str, index: int) -> tuple[str, str | None, int, bool] \u00b6 Parse data between () of [Text]() allowing recursive () . \u2039\u203a markdown.inlinepatterns.ImageReferenceInlineProcessor.getText(data: str, index: int) -> tuple[str, int, bool] \u00b6 Parse the content between [] of the start of an image or link resolving nested square brackets. \u2039\u203a markdown.inlinepatterns.ImageReferenceInlineProcessor.evalId(data: str, index: int, text: str) -> tuple[str | None, int, bool] \u00b6 Evaluate the id portion of [ref][id] . If [ref][] use [ref] . \u2039\u203a markdown.inlinepatterns.ImageReferenceInlineProcessor.makeTag(href: str, title: str, text: str) -> etree.Element \u00b6 Return an img Element . \u2039\u203a markdown.inlinepatterns.ShortImageReferenceInlineProcessor(pattern: str, md: Markdown | None = None) \u00b6 Bases: ImageReferenceInlineProcessor Short form of image reference: ![ref] . Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. md ( Markdown | None , default: None ) \u2013 An optional pointer to the instance of markdown.Markdown and is available as self.md on the class instance. \u2039\u203a markdown.inlinepatterns.ShortImageReferenceInlineProcessor.ANCESTOR_EXCLUDES: Collection[str] class-attribute instance-attribute \u00b6 A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple() \u2039\u203a markdown.inlinepatterns.ShortImageReferenceInlineProcessor.getCompiledRegExp() -> re.Pattern \u00b6 Return a compiled regular expression. \u2039\u203a markdown.inlinepatterns.ShortImageReferenceInlineProcessor.handleMatch(m: re.Match[str], data: str) -> tuple[etree.Element | None, int | None, int | None] \u00b6 Return Element returned by makeTag method or (None, None, None) . \u2039\u203a markdown.inlinepatterns.ShortImageReferenceInlineProcessor.type() -> str \u00b6 Return class name, to define pattern type \u2039\u203a markdown.inlinepatterns.ShortImageReferenceInlineProcessor.unescape(text: str) -> str \u00b6 Return unescaped text given text with an inline placeholder. \u2039\u203a markdown.inlinepatterns.ShortImageReferenceInlineProcessor.getLink(data: str, index: int) -> tuple[str, str | None, int, bool] \u00b6 Parse data between () of [Text]() allowing recursive () . \u2039\u203a markdown.inlinepatterns.ShortImageReferenceInlineProcessor.getText(data: str, index: int) -> tuple[str, int, bool] \u00b6 Parse the content between [] of the start of an image or link resolving nested square brackets. \u2039\u203a markdown.inlinepatterns.ShortImageReferenceInlineProcessor.makeTag(href: str, title: str, text: str) -> etree.Element \u00b6 Return an img Element . \u2039\u203a markdown.inlinepatterns.ShortImageReferenceInlineProcessor.evalId(data: str, index: int, text: str) -> tuple[str, int, bool] \u00b6 Evaluate the id of [ref] . \u2039\u203a markdown.inlinepatterns.AutolinkInlineProcessor(pattern: str, md: Markdown | None = None) \u00b6 Bases: InlineProcessor Return a link Element given an auto-link ( <http://example/com> ). Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. md ( Markdown | None , default: None ) \u2013 An optional pointer to the instance of markdown.Markdown and is available as self.md on the class instance. \u2039\u203a markdown.inlinepatterns.AutolinkInlineProcessor.ANCESTOR_EXCLUDES: Collection[str] class-attribute instance-attribute \u00b6 A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple() \u2039\u203a markdown.inlinepatterns.AutolinkInlineProcessor.getCompiledRegExp() -> re.Pattern \u00b6 Return a compiled regular expression. \u2039\u203a markdown.inlinepatterns.AutolinkInlineProcessor.type() -> str \u00b6 Return class name, to define pattern type \u2039\u203a markdown.inlinepatterns.AutolinkInlineProcessor.unescape(text: str) -> str \u00b6 Return unescaped text given text with an inline placeholder. \u2039\u203a markdown.inlinepatterns.AutolinkInlineProcessor.handleMatch(m: re.Match[str], data: str) -> tuple[etree.Element, int, int] \u00b6 Return an a Element of group(1) . \u2039\u203a markdown.inlinepatterns.AutomailInlineProcessor(pattern: str, md: Markdown | None = None) \u00b6 Bases: InlineProcessor Return a mailto link Element given an auto-mail link ( <foo@example.com> ). Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. md ( Markdown | None , default: None ) \u2013 An optional pointer to the instance of markdown.Markdown and is available as self.md on the class instance. \u2039\u203a markdown.inlinepatterns.AutomailInlineProcessor.ANCESTOR_EXCLUDES: Collection[str] class-attribute instance-attribute \u00b6 A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple() \u2039\u203a markdown.inlinepatterns.AutomailInlineProcessor.getCompiledRegExp() -> re.Pattern \u00b6 Return a compiled regular expression. \u2039\u203a markdown.inlinepatterns.AutomailInlineProcessor.type() -> str \u00b6 Return class name, to define pattern type \u2039\u203a markdown.inlinepatterns.AutomailInlineProcessor.unescape(text: str) -> str \u00b6 Return unescaped text given text with an inline placeholder. \u2039\u203a markdown.inlinepatterns.AutomailInlineProcessor.handleMatch(m: re.Match[str], data: str) -> tuple[etree.Element, int, int] \u00b6 Return an Element containing a mailto link of group(1) .","title":"<code>inlinepatterns</code>"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns","text":"In version 3.0, a new, more flexible inline processor was added, markdown.inlinepatterns.InlineProcessor . The original inline patterns, which inherit from markdown.inlinepatterns.Pattern or one of its children are still supported, though users are encouraged to migrate. The new InlineProcessor provides two major enhancements to Patterns : Inline Processors no longer need to match the entire block, so regular expressions no longer need to start with r'^(.*?)' and end with r'(.*?)%' . This runs faster. The returned Match object will only contain what is explicitly matched in the pattern, and extension pattern groups now start with m.group(1) . The handleMatch method now takes an additional input called data , which is the entire block under analysis, not just what is matched with the specified pattern. The method now returns the element and the indexes relative to data that the return element is replacing (usually m.start(0) and m.end(0) ). If the boundaries are returned as None , it is assumed that the match did not take place, and nothing will be altered in data . This allows handling of more complex constructs than regular expressions can handle, e.g., matching nested brackets, and explicit control of the span \u201cconsumed\u201d by the processor.","title":"inlinepatterns"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.build_inlinepatterns","text":"Build the default set of inline patterns for Markdown. The order in which processors and/or patterns are applied is very important - e.g. if we first replace http://.../ links with <a> tags and then try to replace inline HTML, we would end up with a mess. So, we apply the expressions in the following order: backticks and escaped characters have to be handled before everything else so that we can preempt any markdown patterns by escaping them; then we handle the various types of links (auto-links must be handled before inline HTML); then we handle inline HTML. At this point we will simply replace all inline HTML strings with a placeholder and add the actual HTML to a stash; finally we apply strong, emphasis, etc. Return a Registry instance which contains the following collection of classes with their assigned names and priorities. Class Instance Name Priority BacktickInlineProcessor ( BACKTICK_RE ) backtick 190 EscapeInlineProcessor ( ESCAPE_RE ) escape 180 ReferenceInlineProcessor ( REFERENCE_RE ) reference 170 LinkInlineProcessor ( LINK_RE ) link 160 ImageInlineProcessor ( IMAGE_LINK_RE ) image_link 150 ImageReferenceInlineProcessor ( IMAGE_REFERENCE_RE ) image_reference 140 ShortReferenceInlineProcessor ( REFERENCE_RE ) short_reference 130 ShortImageReferenceInlineProcessor ( IMAGE_REFERENCE_RE ) short_image_ref 125 AutolinkInlineProcessor ( AUTOLINK_RE ) autolink 120 AutomailInlineProcessor ( AUTOMAIL_RE ) automail 110 SubstituteTagInlineProcessor ( LINE_BREAK_RE ) linebreak 100 HtmlInlineProcessor ( HTML_RE ) html 90 HtmlInlineProcessor ( ENTITY_RE ) entity 80 SimpleTextInlineProcessor ( NOT_STRONG_RE ) not_strong 70 AsteriskProcessor ( \"\\*\" ) em_strong 60 UnderscoreProcessor ( \"_\" ) em_strong2 50","title":"build_inlinepatterns"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.NOIMG","text":"Match not an image. Partial regular expression which matches if not preceded by ! . Defined Value: NOIMG = r'(?<!\\!)'","title":"NOIMG"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.BACKTICK_RE","text":"Match backtick quoted string ( `e=f()` or ``e=f(\"`\")`` ). Defined Value: BACKTICK_RE = r'(?:(?<!\\\\)((?:\\\\{2})+)(?=`+)|(?<!\\\\)(`+)(.+?)(?<!`)\\2(?!`))'","title":"BACKTICK_RE"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ESCAPE_RE","text":"Match a backslash escaped character ( \\< or \\* ). Defined Value: ESCAPE_RE = r'\\\\(.)'","title":"ESCAPE_RE"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.EMPHASIS_RE","text":"Match emphasis with an asterisk ( *emphasis* ). Defined Value: EMPHASIS_RE = r'(\\*)([^\\*]+)\\1'","title":"EMPHASIS_RE"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.STRONG_RE","text":"Match strong with an asterisk ( **strong** ). Defined Value: STRONG_RE = r'(\\*{2})(.+?)\\1'","title":"STRONG_RE"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SMART_STRONG_RE","text":"Match strong with underscore while ignoring middle word underscores ( __smart__strong__ ). Defined Value: SMART_STRONG_RE = r'(?<!\\w)(_{2})(?!_)(.+?)(?<!_)\\1(?!\\w)'","title":"SMART_STRONG_RE"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SMART_EMPHASIS_RE","text":"Match emphasis with underscore while ignoring middle word underscores ( _smart_emphasis_ ). Defined Value: SMART_EMPHASIS_RE = r'(?<!\\w)(_)(?!_)(.+?)(?<!_)\\1(?!\\w)'","title":"SMART_EMPHASIS_RE"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SMART_STRONG_EM_RE","text":"Match strong emphasis with underscores ( __strong _em__ ). Defined Value: SMART_STRONG_EM_RE = r'(?<!\\w)(\\_)\\1(?!\\1)(.+?)(?<!\\w)\\1(?!\\1)(.+?)\\1{3}(?!\\w)'","title":"SMART_STRONG_EM_RE"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.EM_STRONG_RE","text":"Match emphasis strong with asterisk ( ***strongem*** or ***em*strong** ). Defined Value: EM_STRONG_RE = r'(\\*)\\1{2}(.+?)\\1(.*?)\\1{2}'","title":"EM_STRONG_RE"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.EM_STRONG2_RE","text":"Match emphasis strong with underscores ( ___emstrong___ or ___em_strong__ ). Defined Value: EM_STRONG2_RE = r'(_)\\1{2}(.+?)\\1(.*?)\\1{2}'","title":"EM_STRONG2_RE"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.STRONG_EM_RE","text":"Match strong emphasis with asterisk ( ***strong**em* ). Defined Value: STRONG_EM_RE = r'(\\*)\\1{2}(.+?)\\1{2}(.*?)\\1'","title":"STRONG_EM_RE"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.STRONG_EM2_RE","text":"Match strong emphasis with underscores ( ___strong__em_ ). Defined Value: STRONG_EM2_RE = r'(_)\\1{2}(.+?)\\1{2}(.*?)\\1'","title":"STRONG_EM2_RE"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.STRONG_EM3_RE","text":"Match strong emphasis with asterisk ( **strong*em*** ). Defined Value: STRONG_EM3_RE = r'(\\*)\\1(?!\\1)([^*]+?)\\1(?!\\1)(.+?)\\1{3}'","title":"STRONG_EM3_RE"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.LINK_RE","text":"Match start of in-line link ( [text](url) or [text](<url>) or [text](url \"title\") ). Defined Value: LINK_RE = NOIMG + r'\\['","title":"LINK_RE"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.IMAGE_LINK_RE","text":"Match start of in-line image link ( ![alttxt](url) or ![alttxt](<url>) ). Defined Value: IMAGE_LINK_RE = r'\\!\\['","title":"IMAGE_LINK_RE"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.REFERENCE_RE","text":"Match start of reference link ( [Label][3] ). Defined Value: REFERENCE_RE = LINK_RE","title":"REFERENCE_RE"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.IMAGE_REFERENCE_RE","text":"Match start of image reference ( ![alt text][2] ). Defined Value: IMAGE_REFERENCE_RE = IMAGE_LINK_RE","title":"IMAGE_REFERENCE_RE"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.NOT_STRONG_RE","text":"Match a stand-alone * or _ . Defined Value: NOT_STRONG_RE = r'((^|(?<=\\s))(\\*{1,3}|_{1,3})(?=\\s|$))'","title":"NOT_STRONG_RE"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.AUTOLINK_RE","text":"Match an automatic link ( <http://www.example.com> ). Defined Value: AUTOLINK_RE = r'<((?:[Ff]|[Hh][Tt])[Tt][Pp][Ss]?://[^<>]*)>'","title":"AUTOLINK_RE"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.AUTOMAIL_RE","text":"Match an automatic email link ( <me@example.com> ). Defined Value: AUTOMAIL_RE = r'<([^<> !]+@[^@<> ]+)>'","title":"AUTOMAIL_RE"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.HTML_RE","text":"Match an HTML tag ( <...> ). Defined Value: HTML_RE = r'(<(\\/?[a-zA-Z][^<>@ ]*( [^<>]*)?|!--(?:(?!<!--|-->).)*--)>)'","title":"HTML_RE"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ENTITY_RE","text":"Match an HTML entity ( &#38; (decimal) or &#x26; (hex) or &amp; (named)). Defined Value: ENTITY_RE = r'(&(?:\\#[0-9]+|\\#x[0-9a-fA-F]+|[a-zA-Z0-9]+);)'","title":"ENTITY_RE"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.LINE_BREAK_RE","text":"Match two spaces at end of line. Defined Value: LINE_BREAK_RE = r' \\n'","title":"LINE_BREAK_RE"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.dequote","text":"Remove quotes from around a string.","title":"dequote"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.EmStrongItem","text":"Bases: NamedTuple Emphasis/strong pattern item.","title":"EmStrongItem"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.Pattern","text":"Base class that inline patterns subclass. Inline patterns are handled by means of Pattern subclasses, one per regular expression. Each pattern object uses a single regular expression and must support the following methods: getCompiledRegExp and handleMatch . All the regular expressions used by Pattern subclasses must capture the whole block. For this reason, they all start with ^(.*) and end with (.*)! . When passing a regular expression on class initialization, the ^(.*) and (.*)! are added automatically and the regular expression is pre-compiled. It is strongly suggested that the newer style markdown.inlinepatterns.InlineProcessor that use a more efficient and flexible search approach be used instead. However, the older style Pattern remains for backward compatibility with many existing third-party extensions. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. md ( Markdown | None , default: None ) \u2013 An optional pointer to the instance of markdown.Markdown and is available as self.md on the class instance.","title":"Pattern"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.Pattern.ANCESTOR_EXCLUDES","text":"A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple()","title":"ANCESTOR_EXCLUDES"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.Pattern.getCompiledRegExp","text":"Return a compiled regular expression.","title":"getCompiledRegExp"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.Pattern.handleMatch","text":"Return a ElementTree element from the given match. Subclasses should override this method. Parameters: m ( Match [ str ] ) \u2013 A match object containing a match of the pattern. Returns: An ElementTree Element object.","title":"handleMatch"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.Pattern.type","text":"Return class name, to define pattern type","title":"type"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.Pattern.unescape","text":"Return unescaped text given text with an inline placeholder.","title":"unescape"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.InlineProcessor","text":"Bases: Pattern Base class that inline processors subclass. This is the newer style inline processor that uses a more efficient and flexible search approach. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. md ( Markdown | None , default: None ) \u2013 An optional pointer to the instance of markdown.Markdown and is available as self.md on the class instance.","title":"InlineProcessor"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.InlineProcessor.ANCESTOR_EXCLUDES","text":"A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple()","title":"ANCESTOR_EXCLUDES"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.InlineProcessor.getCompiledRegExp","text":"Return a compiled regular expression.","title":"getCompiledRegExp"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.InlineProcessor.type","text":"Return class name, to define pattern type","title":"type"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.InlineProcessor.unescape","text":"Return unescaped text given text with an inline placeholder.","title":"unescape"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.InlineProcessor.handleMatch","text":"Return a ElementTree element from the given match and the start and end index of the matched text. If start and/or end are returned as None , it will be assumed that the processor did not find a valid region of text. Subclasses should override this method. Parameters: m ( Match [ str ] ) \u2013 A re match object containing a match of the pattern. data ( str ) \u2013 The buffer currently under analysis. Returns: el ( Element | str | None ) \u2013 The ElementTree element, text or None. start ( int | None ) \u2013 The start of the region that has been matched or None. end ( int | None ) \u2013 The end of the region that has been matched or None.","title":"handleMatch"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SimpleTextPattern","text":"Bases: Pattern Return a simple text of group(2) of a Pattern. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. md ( Markdown | None , default: None ) \u2013 An optional pointer to the instance of markdown.Markdown and is available as self.md on the class instance.","title":"SimpleTextPattern"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SimpleTextPattern.ANCESTOR_EXCLUDES","text":"A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple()","title":"ANCESTOR_EXCLUDES"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SimpleTextPattern.getCompiledRegExp","text":"Return a compiled regular expression.","title":"getCompiledRegExp"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SimpleTextPattern.type","text":"Return class name, to define pattern type","title":"type"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SimpleTextPattern.unescape","text":"Return unescaped text given text with an inline placeholder.","title":"unescape"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SimpleTextPattern.handleMatch","text":"Return string content of group(2) of a matching pattern.","title":"handleMatch"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SimpleTextInlineProcessor","text":"Bases: InlineProcessor Return a simple text of group(1) of a Pattern. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. md ( Markdown | None , default: None ) \u2013 An optional pointer to the instance of markdown.Markdown and is available as self.md on the class instance.","title":"SimpleTextInlineProcessor"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SimpleTextInlineProcessor.ANCESTOR_EXCLUDES","text":"A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple()","title":"ANCESTOR_EXCLUDES"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SimpleTextInlineProcessor.getCompiledRegExp","text":"Return a compiled regular expression.","title":"getCompiledRegExp"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SimpleTextInlineProcessor.type","text":"Return class name, to define pattern type","title":"type"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SimpleTextInlineProcessor.unescape","text":"Return unescaped text given text with an inline placeholder.","title":"unescape"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SimpleTextInlineProcessor.handleMatch","text":"Return string content of group(1) of a matching pattern.","title":"handleMatch"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.EscapeInlineProcessor","text":"Bases: InlineProcessor Return an escaped character. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. md ( Markdown | None , default: None ) \u2013 An optional pointer to the instance of markdown.Markdown and is available as self.md on the class instance.","title":"EscapeInlineProcessor"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.EscapeInlineProcessor.ANCESTOR_EXCLUDES","text":"A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple()","title":"ANCESTOR_EXCLUDES"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.EscapeInlineProcessor.getCompiledRegExp","text":"Return a compiled regular expression.","title":"getCompiledRegExp"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.EscapeInlineProcessor.type","text":"Return class name, to define pattern type","title":"type"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.EscapeInlineProcessor.unescape","text":"Return unescaped text given text with an inline placeholder.","title":"unescape"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.EscapeInlineProcessor.handleMatch","text":"If the character matched by group(1) of a pattern is in ESCAPED_CHARS then return the integer representing the character\u2019s Unicode code point (as returned by ord ) wrapped in util.STX and util.ETX . If the matched character is not in ESCAPED_CHARS , then return None .","title":"handleMatch"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SimpleTagPattern","text":"Bases: Pattern Return element of type tag with a text attribute of group(3) of a Pattern. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. tag ( str ) \u2013 Tag of element.","title":"SimpleTagPattern"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SimpleTagPattern.ANCESTOR_EXCLUDES","text":"A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple()","title":"ANCESTOR_EXCLUDES"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SimpleTagPattern.getCompiledRegExp","text":"Return a compiled regular expression.","title":"getCompiledRegExp"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SimpleTagPattern.type","text":"Return class name, to define pattern type","title":"type"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SimpleTagPattern.unescape","text":"Return unescaped text given text with an inline placeholder.","title":"unescape"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SimpleTagPattern.tag","text":"The tag of the rendered element. Defined Value: self.tag = tag","title":"tag"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SimpleTagPattern.handleMatch","text":"Return Element of type tag with the string in group(3) of a matching pattern as the Element\u2019s text.","title":"handleMatch"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SimpleTagInlineProcessor","text":"Bases: InlineProcessor Return element of type tag with a text attribute of group(2) of a Pattern. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. tag ( str ) \u2013 Tag of element.","title":"SimpleTagInlineProcessor"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SimpleTagInlineProcessor.ANCESTOR_EXCLUDES","text":"A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple()","title":"ANCESTOR_EXCLUDES"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SimpleTagInlineProcessor.getCompiledRegExp","text":"Return a compiled regular expression.","title":"getCompiledRegExp"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SimpleTagInlineProcessor.type","text":"Return class name, to define pattern type","title":"type"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SimpleTagInlineProcessor.unescape","text":"Return unescaped text given text with an inline placeholder.","title":"unescape"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SimpleTagInlineProcessor.tag","text":"The tag of the rendered element. Defined Value: self.tag = tag","title":"tag"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SimpleTagInlineProcessor.handleMatch","text":"Return Element of type tag with the string in group(2) of a matching pattern as the Element\u2019s text.","title":"handleMatch"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SubstituteTagPattern","text":"Bases: SimpleTagPattern Return an element of type tag with no children. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. tag ( str ) \u2013 Tag of element.","title":"SubstituteTagPattern"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SubstituteTagPattern.ANCESTOR_EXCLUDES","text":"A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple()","title":"ANCESTOR_EXCLUDES"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SubstituteTagPattern.getCompiledRegExp","text":"Return a compiled regular expression.","title":"getCompiledRegExp"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SubstituteTagPattern.type","text":"Return class name, to define pattern type","title":"type"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SubstituteTagPattern.unescape","text":"Return unescaped text given text with an inline placeholder.","title":"unescape"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SubstituteTagPattern.tag","text":"The tag of the rendered element. Defined Value: self.tag = tag","title":"tag"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SubstituteTagPattern.handleMatch","text":"Return empty Element of type tag .","title":"handleMatch"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SubstituteTagInlineProcessor","text":"Bases: SimpleTagInlineProcessor Return an element of type tag with no children. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. tag ( str ) \u2013 Tag of element.","title":"SubstituteTagInlineProcessor"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SubstituteTagInlineProcessor.ANCESTOR_EXCLUDES","text":"A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple()","title":"ANCESTOR_EXCLUDES"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SubstituteTagInlineProcessor.getCompiledRegExp","text":"Return a compiled regular expression.","title":"getCompiledRegExp"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SubstituteTagInlineProcessor.type","text":"Return class name, to define pattern type","title":"type"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SubstituteTagInlineProcessor.unescape","text":"Return unescaped text given text with an inline placeholder.","title":"unescape"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SubstituteTagInlineProcessor.tag","text":"The tag of the rendered element. Defined Value: self.tag = tag","title":"tag"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.SubstituteTagInlineProcessor.handleMatch","text":"Return empty Element of type tag .","title":"handleMatch"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.BacktickInlineProcessor","text":"Bases: InlineProcessor Return a <code> element containing the escaped matching text.","title":"BacktickInlineProcessor"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.BacktickInlineProcessor.ANCESTOR_EXCLUDES","text":"A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple()","title":"ANCESTOR_EXCLUDES"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.BacktickInlineProcessor.getCompiledRegExp","text":"Return a compiled regular expression.","title":"getCompiledRegExp"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.BacktickInlineProcessor.type","text":"Return class name, to define pattern type","title":"type"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.BacktickInlineProcessor.unescape","text":"Return unescaped text given text with an inline placeholder.","title":"unescape"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.BacktickInlineProcessor.tag","text":"The tag of the rendered element. Defined Value: self.tag = 'code'","title":"tag"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.BacktickInlineProcessor.handleMatch","text":"If the match contains group(3) of a pattern, then return a code Element which contains HTML escaped text (with code_escape ) as an AtomicString . If the match does not contain group(3) then return the text of group(1) backslash escaped.","title":"handleMatch"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.DoubleTagPattern","text":"Bases: SimpleTagPattern Return a ElementTree element nested in tag2 nested in tag1. Useful for strong emphasis etc. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. tag ( str ) \u2013 Tag of element.","title":"DoubleTagPattern"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.DoubleTagPattern.ANCESTOR_EXCLUDES","text":"A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple()","title":"ANCESTOR_EXCLUDES"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.DoubleTagPattern.getCompiledRegExp","text":"Return a compiled regular expression.","title":"getCompiledRegExp"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.DoubleTagPattern.type","text":"Return class name, to define pattern type","title":"type"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.DoubleTagPattern.unescape","text":"Return unescaped text given text with an inline placeholder.","title":"unescape"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.DoubleTagPattern.tag","text":"The tag of the rendered element. Defined Value: self.tag = tag","title":"tag"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.DoubleTagPattern.handleMatch","text":"Return Element in following format: <tag1><tag2>group(3)</tag2>group(4)</tag2> where group(4) is optional.","title":"handleMatch"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.DoubleTagInlineProcessor","text":"Bases: SimpleTagInlineProcessor Return a ElementTree element nested in tag2 nested in tag1. Useful for strong emphasis etc. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. tag ( str ) \u2013 Tag of element.","title":"DoubleTagInlineProcessor"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.DoubleTagInlineProcessor.ANCESTOR_EXCLUDES","text":"A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple()","title":"ANCESTOR_EXCLUDES"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.DoubleTagInlineProcessor.getCompiledRegExp","text":"Return a compiled regular expression.","title":"getCompiledRegExp"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.DoubleTagInlineProcessor.type","text":"Return class name, to define pattern type","title":"type"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.DoubleTagInlineProcessor.unescape","text":"Return unescaped text given text with an inline placeholder.","title":"unescape"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.DoubleTagInlineProcessor.tag","text":"The tag of the rendered element. Defined Value: self.tag = tag","title":"tag"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.DoubleTagInlineProcessor.handleMatch","text":"Return Element in following format: <tag1><tag2>group(2)</tag2>group(3)</tag2> where group(3) is optional.","title":"handleMatch"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.HtmlInlineProcessor","text":"Bases: InlineProcessor Store raw inline html and return a placeholder. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. md ( Markdown | None , default: None ) \u2013 An optional pointer to the instance of markdown.Markdown and is available as self.md on the class instance.","title":"HtmlInlineProcessor"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.HtmlInlineProcessor.ANCESTOR_EXCLUDES","text":"A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple()","title":"ANCESTOR_EXCLUDES"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.HtmlInlineProcessor.getCompiledRegExp","text":"Return a compiled regular expression.","title":"getCompiledRegExp"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.HtmlInlineProcessor.type","text":"Return class name, to define pattern type","title":"type"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.HtmlInlineProcessor.handleMatch","text":"Store the text of group(1) of a pattern and return a placeholder string.","title":"handleMatch"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.HtmlInlineProcessor.unescape","text":"Return unescaped text given text with an inline placeholder.","title":"unescape"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.HtmlInlineProcessor.backslash_unescape","text":"Return text with backslash escapes undone (backslashes are restored).","title":"backslash_unescape"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.AsteriskProcessor","text":"Bases: InlineProcessor Emphasis processor for handling strong and em matches inside asterisks. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. md ( Markdown | None , default: None ) \u2013 An optional pointer to the instance of markdown.Markdown and is available as self.md on the class instance.","title":"AsteriskProcessor"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.AsteriskProcessor.ANCESTOR_EXCLUDES","text":"A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple()","title":"ANCESTOR_EXCLUDES"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.AsteriskProcessor.getCompiledRegExp","text":"Return a compiled regular expression.","title":"getCompiledRegExp"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.AsteriskProcessor.type","text":"Return class name, to define pattern type","title":"type"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.AsteriskProcessor.unescape","text":"Return unescaped text given text with an inline placeholder.","title":"unescape"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.AsteriskProcessor.PATTERNS","text":"The various strong and emphasis patterns handled by this processor. Defined Value: PATTERNS = [ EmStrongItem(re.compile(EM_STRONG_RE, re.DOTALL | re.UNICODE), 'double', 'strong,em'), EmStrongItem(re.compile(STRONG_EM_RE, re.DOTALL | re.UNICODE), 'double', 'em,strong'), EmStrongItem(re.compile(STRONG_EM3_RE, re.DOTALL | re.UNICODE), 'double2', 'strong,em'), EmStrongItem(re.compile(STRONG_RE, re.DOTALL | re.UNICODE), 'single', 'strong'), EmStrongItem(re.compile(EMPHASIS_RE, re.DOTALL | re.UNICODE), 'single', 'em') ]","title":"PATTERNS"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.AsteriskProcessor.build_single","text":"Return single tag.","title":"build_single"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.AsteriskProcessor.build_double","text":"Return double tag.","title":"build_double"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.AsteriskProcessor.build_double2","text":"Return double tags (variant 2): <strong>text <em>text</em></strong> .","title":"build_double2"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.AsteriskProcessor.parse_sub_patterns","text":"Parses sub patterns. data : text to evaluate. parent : Parent to attach text and sub elements to. last : Last appended child to parent. Can also be None if parent has no children. idx : Current pattern index that was used to evaluate the parent.","title":"parse_sub_patterns"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.AsteriskProcessor.build_element","text":"Element builder.","title":"build_element"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.AsteriskProcessor.handleMatch","text":"Parse patterns.","title":"handleMatch"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.UnderscoreProcessor","text":"Bases: AsteriskProcessor Emphasis processor for handling strong and em matches inside underscores. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. md ( Markdown | None , default: None ) \u2013 An optional pointer to the instance of markdown.Markdown and is available as self.md on the class instance.","title":"UnderscoreProcessor"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.UnderscoreProcessor.ANCESTOR_EXCLUDES","text":"A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple()","title":"ANCESTOR_EXCLUDES"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.UnderscoreProcessor.getCompiledRegExp","text":"Return a compiled regular expression.","title":"getCompiledRegExp"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.UnderscoreProcessor.handleMatch","text":"Parse patterns.","title":"handleMatch"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.UnderscoreProcessor.type","text":"Return class name, to define pattern type","title":"type"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.UnderscoreProcessor.unescape","text":"Return unescaped text given text with an inline placeholder.","title":"unescape"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.UnderscoreProcessor.build_single","text":"Return single tag.","title":"build_single"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.UnderscoreProcessor.build_double","text":"Return double tag.","title":"build_double"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.UnderscoreProcessor.build_double2","text":"Return double tags (variant 2): <strong>text <em>text</em></strong> .","title":"build_double2"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.UnderscoreProcessor.parse_sub_patterns","text":"Parses sub patterns. data : text to evaluate. parent : Parent to attach text and sub elements to. last : Last appended child to parent. Can also be None if parent has no children. idx : Current pattern index that was used to evaluate the parent.","title":"parse_sub_patterns"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.UnderscoreProcessor.build_element","text":"Element builder.","title":"build_element"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.UnderscoreProcessor.PATTERNS","text":"The various strong and emphasis patterns handled by this processor. Defined Value: PATTERNS = [ EmStrongItem(re.compile(EM_STRONG2_RE, re.DOTALL | re.UNICODE), 'double', 'strong,em'), EmStrongItem(re.compile(STRONG_EM2_RE, re.DOTALL | re.UNICODE), 'double', 'em,strong'), EmStrongItem(re.compile(SMART_STRONG_EM_RE, re.DOTALL | re.UNICODE), 'double2', 'strong,em'), EmStrongItem(re.compile(SMART_STRONG_RE, re.DOTALL | re.UNICODE), 'single', 'strong'), EmStrongItem(re.compile(SMART_EMPHASIS_RE, re.DOTALL | re.UNICODE), 'single', 'em') ]","title":"PATTERNS"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.LinkInlineProcessor","text":"Bases: InlineProcessor Return a link element from the given match. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. md ( Markdown | None , default: None ) \u2013 An optional pointer to the instance of markdown.Markdown and is available as self.md on the class instance.","title":"LinkInlineProcessor"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.LinkInlineProcessor.ANCESTOR_EXCLUDES","text":"A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple()","title":"ANCESTOR_EXCLUDES"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.LinkInlineProcessor.getCompiledRegExp","text":"Return a compiled regular expression.","title":"getCompiledRegExp"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.LinkInlineProcessor.type","text":"Return class name, to define pattern type","title":"type"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.LinkInlineProcessor.unescape","text":"Return unescaped text given text with an inline placeholder.","title":"unescape"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.LinkInlineProcessor.handleMatch","text":"Return an a Element or (None, None, None) .","title":"handleMatch"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.LinkInlineProcessor.getLink","text":"Parse data between () of [Text]() allowing recursive () .","title":"getLink"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.LinkInlineProcessor.getText","text":"Parse the content between [] of the start of an image or link resolving nested square brackets.","title":"getText"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ImageInlineProcessor","text":"Bases: LinkInlineProcessor Return a img element from the given match. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. md ( Markdown | None , default: None ) \u2013 An optional pointer to the instance of markdown.Markdown and is available as self.md on the class instance.","title":"ImageInlineProcessor"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ImageInlineProcessor.ANCESTOR_EXCLUDES","text":"A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple()","title":"ANCESTOR_EXCLUDES"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ImageInlineProcessor.getCompiledRegExp","text":"Return a compiled regular expression.","title":"getCompiledRegExp"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ImageInlineProcessor.type","text":"Return class name, to define pattern type","title":"type"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ImageInlineProcessor.unescape","text":"Return unescaped text given text with an inline placeholder.","title":"unescape"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ImageInlineProcessor.getLink","text":"Parse data between () of [Text]() allowing recursive () .","title":"getLink"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ImageInlineProcessor.getText","text":"Parse the content between [] of the start of an image or link resolving nested square brackets.","title":"getText"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ImageInlineProcessor.handleMatch","text":"Return an img Element or (None, None, None) .","title":"handleMatch"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ReferenceInlineProcessor","text":"Bases: LinkInlineProcessor Match to a stored reference and return link element. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. md ( Markdown | None , default: None ) \u2013 An optional pointer to the instance of markdown.Markdown and is available as self.md on the class instance.","title":"ReferenceInlineProcessor"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ReferenceInlineProcessor.ANCESTOR_EXCLUDES","text":"A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple()","title":"ANCESTOR_EXCLUDES"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ReferenceInlineProcessor.getCompiledRegExp","text":"Return a compiled regular expression.","title":"getCompiledRegExp"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ReferenceInlineProcessor.type","text":"Return class name, to define pattern type","title":"type"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ReferenceInlineProcessor.unescape","text":"Return unescaped text given text with an inline placeholder.","title":"unescape"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ReferenceInlineProcessor.getLink","text":"Parse data between () of [Text]() allowing recursive () .","title":"getLink"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ReferenceInlineProcessor.getText","text":"Parse the content between [] of the start of an image or link resolving nested square brackets.","title":"getText"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ReferenceInlineProcessor.handleMatch","text":"Return Element returned by makeTag method or (None, None, None) .","title":"handleMatch"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ReferenceInlineProcessor.evalId","text":"Evaluate the id portion of [ref][id] . If [ref][] use [ref] .","title":"evalId"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ReferenceInlineProcessor.makeTag","text":"Return an a Element .","title":"makeTag"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ShortReferenceInlineProcessor","text":"Bases: ReferenceInlineProcessor Short form of reference: [google] . Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. md ( Markdown | None , default: None ) \u2013 An optional pointer to the instance of markdown.Markdown and is available as self.md on the class instance.","title":"ShortReferenceInlineProcessor"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ShortReferenceInlineProcessor.ANCESTOR_EXCLUDES","text":"A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple()","title":"ANCESTOR_EXCLUDES"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ShortReferenceInlineProcessor.getCompiledRegExp","text":"Return a compiled regular expression.","title":"getCompiledRegExp"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ShortReferenceInlineProcessor.handleMatch","text":"Return Element returned by makeTag method or (None, None, None) .","title":"handleMatch"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ShortReferenceInlineProcessor.type","text":"Return class name, to define pattern type","title":"type"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ShortReferenceInlineProcessor.unescape","text":"Return unescaped text given text with an inline placeholder.","title":"unescape"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ShortReferenceInlineProcessor.getLink","text":"Parse data between () of [Text]() allowing recursive () .","title":"getLink"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ShortReferenceInlineProcessor.getText","text":"Parse the content between [] of the start of an image or link resolving nested square brackets.","title":"getText"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ShortReferenceInlineProcessor.makeTag","text":"Return an a Element .","title":"makeTag"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ShortReferenceInlineProcessor.evalId","text":"Evaluate the id of [ref] .","title":"evalId"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ImageReferenceInlineProcessor","text":"Bases: ReferenceInlineProcessor Match to a stored reference and return img element. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. md ( Markdown | None , default: None ) \u2013 An optional pointer to the instance of markdown.Markdown and is available as self.md on the class instance.","title":"ImageReferenceInlineProcessor"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ImageReferenceInlineProcessor.ANCESTOR_EXCLUDES","text":"A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple()","title":"ANCESTOR_EXCLUDES"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ImageReferenceInlineProcessor.getCompiledRegExp","text":"Return a compiled regular expression.","title":"getCompiledRegExp"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ImageReferenceInlineProcessor.handleMatch","text":"Return Element returned by makeTag method or (None, None, None) .","title":"handleMatch"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ImageReferenceInlineProcessor.type","text":"Return class name, to define pattern type","title":"type"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ImageReferenceInlineProcessor.unescape","text":"Return unescaped text given text with an inline placeholder.","title":"unescape"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ImageReferenceInlineProcessor.getLink","text":"Parse data between () of [Text]() allowing recursive () .","title":"getLink"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ImageReferenceInlineProcessor.getText","text":"Parse the content between [] of the start of an image or link resolving nested square brackets.","title":"getText"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ImageReferenceInlineProcessor.evalId","text":"Evaluate the id portion of [ref][id] . If [ref][] use [ref] .","title":"evalId"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ImageReferenceInlineProcessor.makeTag","text":"Return an img Element .","title":"makeTag"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ShortImageReferenceInlineProcessor","text":"Bases: ImageReferenceInlineProcessor Short form of image reference: ![ref] . Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. md ( Markdown | None , default: None ) \u2013 An optional pointer to the instance of markdown.Markdown and is available as self.md on the class instance.","title":"ShortImageReferenceInlineProcessor"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ShortImageReferenceInlineProcessor.ANCESTOR_EXCLUDES","text":"A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple()","title":"ANCESTOR_EXCLUDES"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ShortImageReferenceInlineProcessor.getCompiledRegExp","text":"Return a compiled regular expression.","title":"getCompiledRegExp"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ShortImageReferenceInlineProcessor.handleMatch","text":"Return Element returned by makeTag method or (None, None, None) .","title":"handleMatch"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ShortImageReferenceInlineProcessor.type","text":"Return class name, to define pattern type","title":"type"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ShortImageReferenceInlineProcessor.unescape","text":"Return unescaped text given text with an inline placeholder.","title":"unescape"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ShortImageReferenceInlineProcessor.getLink","text":"Parse data between () of [Text]() allowing recursive () .","title":"getLink"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ShortImageReferenceInlineProcessor.getText","text":"Parse the content between [] of the start of an image or link resolving nested square brackets.","title":"getText"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ShortImageReferenceInlineProcessor.makeTag","text":"Return an img Element .","title":"makeTag"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.ShortImageReferenceInlineProcessor.evalId","text":"Evaluate the id of [ref] .","title":"evalId"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.AutolinkInlineProcessor","text":"Bases: InlineProcessor Return a link Element given an auto-link ( <http://example/com> ). Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. md ( Markdown | None , default: None ) \u2013 An optional pointer to the instance of markdown.Markdown and is available as self.md on the class instance.","title":"AutolinkInlineProcessor"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.AutolinkInlineProcessor.ANCESTOR_EXCLUDES","text":"A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple()","title":"ANCESTOR_EXCLUDES"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.AutolinkInlineProcessor.getCompiledRegExp","text":"Return a compiled regular expression.","title":"getCompiledRegExp"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.AutolinkInlineProcessor.type","text":"Return class name, to define pattern type","title":"type"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.AutolinkInlineProcessor.unescape","text":"Return unescaped text given text with an inline placeholder.","title":"unescape"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.AutolinkInlineProcessor.handleMatch","text":"Return an a Element of group(1) .","title":"handleMatch"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.AutomailInlineProcessor","text":"Bases: InlineProcessor Return a mailto link Element given an auto-mail link ( <foo@example.com> ). Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. md ( Markdown | None , default: None ) \u2013 An optional pointer to the instance of markdown.Markdown and is available as self.md on the class instance.","title":"AutomailInlineProcessor"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.AutomailInlineProcessor.ANCESTOR_EXCLUDES","text":"A collection of elements which are undesirable ancestors. The processor will be skipped if it would cause the content to be a descendant of one of the listed tag names. Defined Value: ANCESTOR_EXCLUDES: Collection[str] = tuple()","title":"ANCESTOR_EXCLUDES"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.AutomailInlineProcessor.getCompiledRegExp","text":"Return a compiled regular expression.","title":"getCompiledRegExp"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.AutomailInlineProcessor.type","text":"Return class name, to define pattern type","title":"type"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.AutomailInlineProcessor.unescape","text":"Return unescaped text given text with an inline placeholder.","title":"unescape"},{"location":"reference/markdown/inlinepatterns/#markdown.inlinepatterns.AutomailInlineProcessor.handleMatch","text":"Return an Element containing a mailto link of group(1) .","title":"handleMatch"},{"location":"reference/markdown/postprocessors/","text":"\u2039\u203a markdown.postprocessors \u00b6 Post-processors run on the text of the entire document after is has been serialized into a string. Postprocessors should be used to work with the text just before output. Usually, they are used add back sections that were extracted in a preprocessor, fix up outgoing encodings, or wrap the whole document. \u2039\u203a markdown.postprocessors.build_postprocessors(md: Markdown, **kwargs: Any) -> util.Registry[Postprocessor] \u00b6 Build the default postprocessors for Markdown. Return a Registry instance which contains the following collection of classes with their assigned names and priorities. Class Instance Name Priority RawHtmlPostprocessor raw_html 30 AndSubstitutePostprocessor amp_substitute 20 \u2039\u203a markdown.postprocessors.Postprocessor(md: Markdown | None = None) \u00b6 Bases: Processor Postprocessors are run after the ElementTree it converted back into text. Each Postprocessor implements a run method that takes a pointer to a text string, modifies it as necessary and returns a text string. Postprocessors must extend Postprocessor . \u2039\u203a markdown.postprocessors.Postprocessor.run(text: str) -> str \u00b6 Subclasses of Postprocessor should implement a run method, which takes the html document as a single text string and returns a (possibly modified) string. \u2039\u203a markdown.postprocessors.RawHtmlPostprocessor(md: Markdown | None = None) \u00b6 Bases: Postprocessor Restore raw html to the document. \u2039\u203a markdown.postprocessors.RawHtmlPostprocessor.run(text: str) -> str \u00b6 Iterate over html stash and restore html. \u2039\u203a markdown.postprocessors.RawHtmlPostprocessor.isblocklevel(html: str) -> bool \u00b6 Check is block of HTML is block-level. \u2039\u203a markdown.postprocessors.RawHtmlPostprocessor.stash_to_string(text: str) -> str \u00b6 Convert a stashed object to a string. \u2039\u203a markdown.postprocessors.AndSubstitutePostprocessor(md: Markdown | None = None) \u00b6 Bases: Postprocessor Restore valid entities \u2039\u203a markdown.postprocessors.UnescapePostprocessor(md: Markdown | None = None) deprecated \u00b6 Bases: Postprocessor Deprecated This class is deprecated and will be removed in the future; use UnescapeTreeprocessor instead. Restore escaped chars.","title":"<code>postprocessors</code>"},{"location":"reference/markdown/postprocessors/#markdown.postprocessors","text":"Post-processors run on the text of the entire document after is has been serialized into a string. Postprocessors should be used to work with the text just before output. Usually, they are used add back sections that were extracted in a preprocessor, fix up outgoing encodings, or wrap the whole document.","title":"postprocessors"},{"location":"reference/markdown/postprocessors/#markdown.postprocessors.build_postprocessors","text":"Build the default postprocessors for Markdown. Return a Registry instance which contains the following collection of classes with their assigned names and priorities. Class Instance Name Priority RawHtmlPostprocessor raw_html 30 AndSubstitutePostprocessor amp_substitute 20","title":"build_postprocessors"},{"location":"reference/markdown/postprocessors/#markdown.postprocessors.Postprocessor","text":"Bases: Processor Postprocessors are run after the ElementTree it converted back into text. Each Postprocessor implements a run method that takes a pointer to a text string, modifies it as necessary and returns a text string. Postprocessors must extend Postprocessor .","title":"Postprocessor"},{"location":"reference/markdown/postprocessors/#markdown.postprocessors.Postprocessor.run","text":"Subclasses of Postprocessor should implement a run method, which takes the html document as a single text string and returns a (possibly modified) string.","title":"run"},{"location":"reference/markdown/postprocessors/#markdown.postprocessors.RawHtmlPostprocessor","text":"Bases: Postprocessor Restore raw html to the document.","title":"RawHtmlPostprocessor"},{"location":"reference/markdown/postprocessors/#markdown.postprocessors.RawHtmlPostprocessor.run","text":"Iterate over html stash and restore html.","title":"run"},{"location":"reference/markdown/postprocessors/#markdown.postprocessors.RawHtmlPostprocessor.isblocklevel","text":"Check is block of HTML is block-level.","title":"isblocklevel"},{"location":"reference/markdown/postprocessors/#markdown.postprocessors.RawHtmlPostprocessor.stash_to_string","text":"Convert a stashed object to a string.","title":"stash_to_string"},{"location":"reference/markdown/postprocessors/#markdown.postprocessors.AndSubstitutePostprocessor","text":"Bases: Postprocessor Restore valid entities","title":"AndSubstitutePostprocessor"},{"location":"reference/markdown/postprocessors/#markdown.postprocessors.UnescapePostprocessor","text":"Bases: Postprocessor Deprecated This class is deprecated and will be removed in the future; use UnescapeTreeprocessor instead. Restore escaped chars.","title":"UnescapePostprocessor"},{"location":"reference/markdown/preprocessors/","text":"\u2039\u203a markdown.preprocessors \u00b6 Preprocessors work on source text before it is broken down into its individual parts. This is an excellent place to clean up bad characters or to extract portions for later processing that the parser may otherwise choke on. \u2039\u203a markdown.preprocessors.build_preprocessors(md: Markdown, **kwargs: Any) -> util.Registry[Preprocessor] \u00b6 Build and return the default set of preprocessors used by Markdown. Return a Registry instance which contains the following collection of classes with their assigned names and priorities. Class Instance Name Priority NormalizeWhitespace normalize_whitespace 30 HtmlBlockPreprocessor html_block 20 \u2039\u203a markdown.preprocessors.Preprocessor(md: Markdown | None = None) \u00b6 Bases: Processor Preprocessors are run after the text is broken into lines. Each preprocessor implements a run method that takes a pointer to a list of lines of the document, modifies it as necessary and returns either the same pointer or a pointer to a new list. Preprocessors must extend Preprocessor . \u2039\u203a markdown.preprocessors.Preprocessor.run(lines: list[str]) -> list[str] \u00b6 Each subclass of Preprocessor should override the run method, which takes the document as a list of strings split by newlines and returns the (possibly modified) list of lines. \u2039\u203a markdown.preprocessors.NormalizeWhitespace(md: Markdown | None = None) \u00b6 Bases: Preprocessor Normalize whitespace for consistent parsing. \u2039\u203a markdown.preprocessors.HtmlBlockPreprocessor(md: Markdown | None = None) \u00b6 Bases: Preprocessor Remove html blocks from the text and store them for later retrieval. The raw HTML is stored in the htmlStash of the Markdown instance.","title":"<code>preprocessors</code>"},{"location":"reference/markdown/preprocessors/#markdown.preprocessors","text":"Preprocessors work on source text before it is broken down into its individual parts. This is an excellent place to clean up bad characters or to extract portions for later processing that the parser may otherwise choke on.","title":"preprocessors"},{"location":"reference/markdown/preprocessors/#markdown.preprocessors.build_preprocessors","text":"Build and return the default set of preprocessors used by Markdown. Return a Registry instance which contains the following collection of classes with their assigned names and priorities. Class Instance Name Priority NormalizeWhitespace normalize_whitespace 30 HtmlBlockPreprocessor html_block 20","title":"build_preprocessors"},{"location":"reference/markdown/preprocessors/#markdown.preprocessors.Preprocessor","text":"Bases: Processor Preprocessors are run after the text is broken into lines. Each preprocessor implements a run method that takes a pointer to a list of lines of the document, modifies it as necessary and returns either the same pointer or a pointer to a new list. Preprocessors must extend Preprocessor .","title":"Preprocessor"},{"location":"reference/markdown/preprocessors/#markdown.preprocessors.Preprocessor.run","text":"Each subclass of Preprocessor should override the run method, which takes the document as a list of strings split by newlines and returns the (possibly modified) list of lines.","title":"run"},{"location":"reference/markdown/preprocessors/#markdown.preprocessors.NormalizeWhitespace","text":"Bases: Preprocessor Normalize whitespace for consistent parsing.","title":"NormalizeWhitespace"},{"location":"reference/markdown/preprocessors/#markdown.preprocessors.HtmlBlockPreprocessor","text":"Bases: Preprocessor Remove html blocks from the text and store them for later retrieval. The raw HTML is stored in the htmlStash of the Markdown instance.","title":"HtmlBlockPreprocessor"},{"location":"reference/markdown/serializers/","text":"\u2039\u203a markdown.serializers \u00b6 Python-Markdown provides two serializers which render ElementTree.Element objects to a string of HTML. Both functions wrap the same underlying code with only a few minor differences as outlined below: Empty (self-closing) tags are rendered as <tag> for HTML and as <tag /> for XHTML. Boolean attributes are rendered as attrname for HTML and as attrname=\"attrname\" for XHTML. \u2039\u203a markdown.serializers.to_html_string(element: Element) -> str \u00b6 Serialize element and its children to a string of HTML5. \u2039\u203a markdown.serializers.to_xhtml_string(element: Element) -> str \u00b6 Serialize element and its children to a string of XHTML.","title":"<code>serializers</code>"},{"location":"reference/markdown/serializers/#markdown.serializers","text":"Python-Markdown provides two serializers which render ElementTree.Element objects to a string of HTML. Both functions wrap the same underlying code with only a few minor differences as outlined below: Empty (self-closing) tags are rendered as <tag> for HTML and as <tag /> for XHTML. Boolean attributes are rendered as attrname for HTML and as attrname=\"attrname\" for XHTML.","title":"serializers"},{"location":"reference/markdown/serializers/#markdown.serializers.to_html_string","text":"Serialize element and its children to a string of HTML5.","title":"to_html_string"},{"location":"reference/markdown/serializers/#markdown.serializers.to_xhtml_string","text":"Serialize element and its children to a string of XHTML.","title":"to_xhtml_string"},{"location":"reference/markdown/test_tools/","text":"\u2039\u203a markdown.test_tools \u00b6 A collection of tools for testing the Markdown code base and extensions. \u2039\u203a markdown.test_tools.TestCase \u00b6 Bases: TestCase A unittest.TestCase subclass with helpers for testing Markdown output. Define default_kwargs as a dict of keywords to pass to Markdown for each test. The defaults can be overridden on individual tests. The assertMarkdownRenders method accepts the source text, the expected output, and any keywords to pass to Markdown. The default_kwargs are used except where overridden by kwargs . The output and expected output are passed to TestCase.assertMultiLineEqual . An AssertionError is raised with a diff if the actual output does not equal the expected output. The dedent method is available to dedent triple-quoted strings if necessary. In all other respects, behaves as unittest.TestCase . \u2039\u203a markdown.test_tools.TestCase.default_kwargs: dict[str, Any] class-attribute instance-attribute \u00b6 Default options to pass to Markdown for each test. Defined Value: default_kwargs: dict[str, Any] = {} \u2039\u203a markdown.test_tools.TestCase.assertMarkdownRenders(source, expected, expected_attrs=None, **kwargs) \u00b6 Test that source Markdown text renders to expected output with given keywords. expected_attrs accepts a dict . Each key should be the name of an attribute on the Markdown instance and the value should be the expected value after the source text is parsed by Markdown. After the expected output is tested, the expected value for each attribute is compared against the actual attribute of the Markdown instance using TestCase.assertEqual . \u2039\u203a markdown.test_tools.TestCase.dedent(text) \u00b6 Dedent text. \u2039\u203a markdown.test_tools.recursionlimit(limit) \u00b6 A context manager which temporarily modifies the Python recursion limit. The testing framework, coverage, etc. may add an arbitrary number of levels to the depth. To maintain consistency in the tests, the current stack depth is determined when called, then added to the provided limit. Example usage: with recursionlimit(20): # test code here See https://stackoverflow.com/a/50120316/866026 . \u2039\u203a markdown.test_tools.Kwargs \u00b6 Bases: dict A dict like class for holding keyword arguments. \u2039\u203a markdown.test_tools.LegacyTestCase \u00b6 Bases: TestCase A unittest.TestCase subclass for running Markdown\u2019s legacy file-based tests. A subclass should define various properties which point to a directory of text-based test files and define various behaviors/defaults for those tests. The following properties are supported: Attributes: location ( str ) \u2013 A path to the directory of test files. An absolute path is preferred. exclude ( list [ str ] ) \u2013 A list of tests to exclude. Each test name should comprise the filename without an extension. normalize ( bool ) \u2013 A boolean value indicating if the HTML should be normalized. Default: False . input_ext ( str ) \u2013 A string containing the file extension of input files. Default: .txt . output_ext ( str ) \u2013 A string containing the file extension of expected output files. Default: html . default_kwargs ( Kwargs [ str , Any ] ) \u2013 The default set of keyword arguments for all test files in the directory. In addition, properties can be defined for each individual set of test files within the directory. The property should be given the name of the file without the file extension. Any spaces and dashes in the filename should be replaced with underscores. The value of the property should be a Kwargs instance which contains the keyword arguments that should be passed to Markdown for that test file. The keyword arguments will \u201cupdate\u201d the default_kwargs . When the class instance is created, it will walk the given directory and create a separate Unitttest for each set of test files using the naming scheme: test_filename . One Unittest will be run for each set of input and output files.","title":"<code>test_tools</code>"},{"location":"reference/markdown/test_tools/#markdown.test_tools","text":"A collection of tools for testing the Markdown code base and extensions.","title":"test_tools"},{"location":"reference/markdown/test_tools/#markdown.test_tools.TestCase","text":"Bases: TestCase A unittest.TestCase subclass with helpers for testing Markdown output. Define default_kwargs as a dict of keywords to pass to Markdown for each test. The defaults can be overridden on individual tests. The assertMarkdownRenders method accepts the source text, the expected output, and any keywords to pass to Markdown. The default_kwargs are used except where overridden by kwargs . The output and expected output are passed to TestCase.assertMultiLineEqual . An AssertionError is raised with a diff if the actual output does not equal the expected output. The dedent method is available to dedent triple-quoted strings if necessary. In all other respects, behaves as unittest.TestCase .","title":"TestCase"},{"location":"reference/markdown/test_tools/#markdown.test_tools.TestCase.default_kwargs","text":"Default options to pass to Markdown for each test. Defined Value: default_kwargs: dict[str, Any] = {}","title":"default_kwargs"},{"location":"reference/markdown/test_tools/#markdown.test_tools.TestCase.assertMarkdownRenders","text":"Test that source Markdown text renders to expected output with given keywords. expected_attrs accepts a dict . Each key should be the name of an attribute on the Markdown instance and the value should be the expected value after the source text is parsed by Markdown. After the expected output is tested, the expected value for each attribute is compared against the actual attribute of the Markdown instance using TestCase.assertEqual .","title":"assertMarkdownRenders"},{"location":"reference/markdown/test_tools/#markdown.test_tools.TestCase.dedent","text":"Dedent text.","title":"dedent"},{"location":"reference/markdown/test_tools/#markdown.test_tools.recursionlimit","text":"A context manager which temporarily modifies the Python recursion limit. The testing framework, coverage, etc. may add an arbitrary number of levels to the depth. To maintain consistency in the tests, the current stack depth is determined when called, then added to the provided limit. Example usage: with recursionlimit(20): # test code here See https://stackoverflow.com/a/50120316/866026 .","title":"recursionlimit"},{"location":"reference/markdown/test_tools/#markdown.test_tools.Kwargs","text":"Bases: dict A dict like class for holding keyword arguments.","title":"Kwargs"},{"location":"reference/markdown/test_tools/#markdown.test_tools.LegacyTestCase","text":"Bases: TestCase A unittest.TestCase subclass for running Markdown\u2019s legacy file-based tests. A subclass should define various properties which point to a directory of text-based test files and define various behaviors/defaults for those tests. The following properties are supported: Attributes: location ( str ) \u2013 A path to the directory of test files. An absolute path is preferred. exclude ( list [ str ] ) \u2013 A list of tests to exclude. Each test name should comprise the filename without an extension. normalize ( bool ) \u2013 A boolean value indicating if the HTML should be normalized. Default: False . input_ext ( str ) \u2013 A string containing the file extension of input files. Default: .txt . output_ext ( str ) \u2013 A string containing the file extension of expected output files. Default: html . default_kwargs ( Kwargs [ str , Any ] ) \u2013 The default set of keyword arguments for all test files in the directory. In addition, properties can be defined for each individual set of test files within the directory. The property should be given the name of the file without the file extension. Any spaces and dashes in the filename should be replaced with underscores. The value of the property should be a Kwargs instance which contains the keyword arguments that should be passed to Markdown for that test file. The keyword arguments will \u201cupdate\u201d the default_kwargs . When the class instance is created, it will walk the given directory and create a separate Unitttest for each set of test files using the naming scheme: test_filename . One Unittest will be run for each set of input and output files.","title":"LegacyTestCase"},{"location":"reference/markdown/treeprocessors/","text":"\u2039\u203a markdown.treeprocessors \u00b6 Tree processors manipulate the tree created by block processors. They can even create an entirely new ElementTree object. This is an excellent place for creating summaries, adding collected references, or last minute adjustments. \u2039\u203a markdown.treeprocessors.build_treeprocessors(md: Markdown, **kwargs: Any) -> util.Registry[Treeprocessor] \u00b6 Build the default treeprocessors for Markdown. Return a Registry instance which contains the following collection of classes with their assigned names and priorities. Class Instance Name Priority InlineProcessor inline 20 PrettifyTreeprocessor prettify 10 UnescapeTreeprocessor unescape 0 \u2039\u203a markdown.treeprocessors.isString(s: object) -> bool \u00b6 Return True if object is a string but not an AtomicString . \u2039\u203a markdown.treeprocessors.Treeprocessor(md: Markdown | None = None) \u00b6 Bases: Processor Treeprocessor s are run on the ElementTree object before serialization. Each Treeprocessor implements a run method that takes a pointer to an Element and modifies it as necessary. Treeprocessors must extend markdown.Treeprocessor . \u2039\u203a markdown.treeprocessors.Treeprocessor.run(root: etree.Element) -> etree.Element | None \u00b6 Subclasses of Treeprocessor should implement a run method, which takes a root Element . This method can return another Element object, and the existing root Element will be replaced, or it can modify the current tree and return None . \u2039\u203a markdown.treeprocessors.InlineProcessor(md: Markdown) \u00b6 Bases: Treeprocessor A Treeprocessor that traverses a tree, applying inline patterns. \u2039\u203a markdown.treeprocessors.InlineProcessor.run(tree: etree.Element, ancestors: list[str] | None = None) -> etree.Element \u00b6 Apply inline patterns to a parsed Markdown tree. Iterate over Element , find elements with inline tag, apply inline patterns and append newly created Elements to tree. To avoid further processing of string with inline patterns, instead of normal string, use subclass AtomicString : node.text = markdown.util.AtomicString(\"This will not be processed.\") Parameters: tree ( Element ) \u2013 Element object, representing Markdown tree. ancestors ( list [ str ] | None , default: None ) \u2013 List of parent tag names that precede the tree node (if needed). Returns: Element \u2013 An element tree object with applied inline patterns. \u2039\u203a markdown.treeprocessors.PrettifyTreeprocessor(md: Markdown | None = None) \u00b6 Bases: Treeprocessor Add line breaks to the html document. \u2039\u203a markdown.treeprocessors.PrettifyTreeprocessor.run(root: etree.Element) -> None \u00b6 Add line breaks to Element object and its children. \u2039\u203a markdown.treeprocessors.UnescapeTreeprocessor(md: Markdown | None = None) \u00b6 Bases: Treeprocessor Restore escaped chars \u2039\u203a markdown.treeprocessors.UnescapeTreeprocessor.run(root: etree.Element) -> None \u00b6 Loop over all elements and unescape all text.","title":"<code>treeprocessors</code>"},{"location":"reference/markdown/treeprocessors/#markdown.treeprocessors","text":"Tree processors manipulate the tree created by block processors. They can even create an entirely new ElementTree object. This is an excellent place for creating summaries, adding collected references, or last minute adjustments.","title":"treeprocessors"},{"location":"reference/markdown/treeprocessors/#markdown.treeprocessors.build_treeprocessors","text":"Build the default treeprocessors for Markdown. Return a Registry instance which contains the following collection of classes with their assigned names and priorities. Class Instance Name Priority InlineProcessor inline 20 PrettifyTreeprocessor prettify 10 UnescapeTreeprocessor unescape 0","title":"build_treeprocessors"},{"location":"reference/markdown/treeprocessors/#markdown.treeprocessors.isString","text":"Return True if object is a string but not an AtomicString .","title":"isString"},{"location":"reference/markdown/treeprocessors/#markdown.treeprocessors.Treeprocessor","text":"Bases: Processor Treeprocessor s are run on the ElementTree object before serialization. Each Treeprocessor implements a run method that takes a pointer to an Element and modifies it as necessary. Treeprocessors must extend markdown.Treeprocessor .","title":"Treeprocessor"},{"location":"reference/markdown/treeprocessors/#markdown.treeprocessors.Treeprocessor.run","text":"Subclasses of Treeprocessor should implement a run method, which takes a root Element . This method can return another Element object, and the existing root Element will be replaced, or it can modify the current tree and return None .","title":"run"},{"location":"reference/markdown/treeprocessors/#markdown.treeprocessors.InlineProcessor","text":"Bases: Treeprocessor A Treeprocessor that traverses a tree, applying inline patterns.","title":"InlineProcessor"},{"location":"reference/markdown/treeprocessors/#markdown.treeprocessors.InlineProcessor.run","text":"Apply inline patterns to a parsed Markdown tree. Iterate over Element , find elements with inline tag, apply inline patterns and append newly created Elements to tree. To avoid further processing of string with inline patterns, instead of normal string, use subclass AtomicString : node.text = markdown.util.AtomicString(\"This will not be processed.\") Parameters: tree ( Element ) \u2013 Element object, representing Markdown tree. ancestors ( list [ str ] | None , default: None ) \u2013 List of parent tag names that precede the tree node (if needed). Returns: Element \u2013 An element tree object with applied inline patterns.","title":"run"},{"location":"reference/markdown/treeprocessors/#markdown.treeprocessors.PrettifyTreeprocessor","text":"Bases: Treeprocessor Add line breaks to the html document.","title":"PrettifyTreeprocessor"},{"location":"reference/markdown/treeprocessors/#markdown.treeprocessors.PrettifyTreeprocessor.run","text":"Add line breaks to Element object and its children.","title":"run"},{"location":"reference/markdown/treeprocessors/#markdown.treeprocessors.UnescapeTreeprocessor","text":"Bases: Treeprocessor Restore escaped chars","title":"UnescapeTreeprocessor"},{"location":"reference/markdown/treeprocessors/#markdown.treeprocessors.UnescapeTreeprocessor.run","text":"Loop over all elements and unescape all text.","title":"run"},{"location":"reference/markdown/util/","text":"\u2039\u203a markdown.util \u00b6 This module contains various contacts, classes and functions which get referenced and used throughout the code base. \u2039\u203a markdown.util.BLOCK_LEVEL_ELEMENTS: list[str] module-attribute \u00b6 List of HTML tags which get treated as block-level elements. Same as the block_level_elements attribute of the Markdown class. Generally one should use the attribute on the class. This remains for compatibility with older extensions. Defined Value: BLOCK_LEVEL_ELEMENTS: list[str] = [ # Elements which are invalid to wrap in a `<p>` tag. # See https://w3c.github.io/html/grouping-content.html#the-p-element 'address', 'article', 'aside', 'blockquote', 'details', 'div', 'dl', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'main', 'menu', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul', # Other elements which Markdown should not be mucking up the contents of. 'canvas', 'colgroup', 'dd', 'body', 'dt', 'group', 'html', 'iframe', 'li', 'legend', 'math', 'map', 'noscript', 'output', 'object', 'option', 'progress', 'script', 'style', 'summary', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'tr', 'video' ] \u2039\u203a markdown.util.STX module-attribute \u00b6 \u201cStart of Text\u201d marker for placeholder templates. Defined Value: STX = '\\u0002' \u2039\u203a markdown.util.ETX module-attribute \u00b6 \u201cEnd of Text\u201d marker for placeholder templates. Defined Value: ETX = '\\u0003' \u2039\u203a markdown.util.INLINE_PLACEHOLDER_PREFIX module-attribute \u00b6 Prefix for inline placeholder template. Defined Value: INLINE_PLACEHOLDER_PREFIX = STX+\"klzzwxh:\" \u2039\u203a markdown.util.INLINE_PLACEHOLDER module-attribute \u00b6 Placeholder template for stashed inline text. Defined Value: INLINE_PLACEHOLDER = INLINE_PLACEHOLDER_PREFIX + \"%s\" + ETX \u2039\u203a markdown.util.INLINE_PLACEHOLDER_RE module-attribute \u00b6 Regular Expression which matches inline placeholders. Defined Value: INLINE_PLACEHOLDER_RE = re.compile(INLINE_PLACEHOLDER % r'([0-9]+)') \u2039\u203a markdown.util.AMP_SUBSTITUTE module-attribute \u00b6 Placeholder template for HTML entities. Defined Value: AMP_SUBSTITUTE = STX+\"amp\"+ETX \u2039\u203a markdown.util.HTML_PLACEHOLDER module-attribute \u00b6 Placeholder template for raw HTML. Defined Value: HTML_PLACEHOLDER = STX + \"wzxhzdk:%s\" + ETX \u2039\u203a markdown.util.HTML_PLACEHOLDER_RE module-attribute \u00b6 Regular expression which matches HTML placeholders. Defined Value: HTML_PLACEHOLDER_RE = re.compile(HTML_PLACEHOLDER % r'([0-9]+)') \u2039\u203a markdown.util.TAG_PLACEHOLDER module-attribute \u00b6 Placeholder template for tags. Defined Value: TAG_PLACEHOLDER = STX + \"hzzhzkh:%s\" + ETX \u2039\u203a markdown.util.get_installed_extensions() cached \u00b6 Return all entry_points in the markdown.extensions group. \u2039\u203a markdown.util.deprecated(message: str, stacklevel: int = 2) \u00b6 Raise a DeprecationWarning when wrapped function/method is called. Usage: @deprecated(\"This method will be removed in version X; use Y instead.\") def some_method(): pass \u2039\u203a markdown.util.parseBoolValue(value: str | None, fail_on_errors: bool = True, preserve_none: bool = False) -> bool | None \u00b6 Parses a string representing a boolean value. If parsing was successful, returns True or False . If preserve_none=True , returns True , False , or None . If parsing was not successful, raises ValueError , or, if fail_on_errors=False , returns None . \u2039\u203a markdown.util.code_escape(text: str) -> str \u00b6 HTML escape a string of code. \u2039\u203a markdown.util.nearing_recursion_limit() -> bool \u00b6 Return true if current stack depth is within 100 of maximum limit. \u2039\u203a markdown.util.AtomicString \u00b6 Bases: str A string which should not be further processed. \u2039\u203a markdown.util.Processor(md: Markdown | None = None) \u00b6 The base class for all processors. Attributes: Processor.md \u2013 The Markdown instance passed in an initialization. Parameters: md ( Markdown | None , default: None ) \u2013 The Markdown instance this processor is a part of. \u2039\u203a markdown.util.HtmlStash() \u00b6 This class is used for stashing HTML objects that we extract in the beginning and replace with place-holders. \u2039\u203a markdown.util.HtmlStash.store(html: str | etree.Element) -> str \u00b6 Saves an HTML segment for later reinsertion. Returns a placeholder string that needs to be inserted into the document. Other Parameters: html ( str | Element ) \u2013 An html segment. Returns: str \u2013 A placeholder string. \u2039\u203a markdown.util.HtmlStash.reset() -> None \u00b6 Clear the stash. \u2039\u203a markdown.util.HtmlStash.store_tag(tag: str, attrs: dict[str, str], left_index: int, right_index: int) -> str \u00b6 Store tag data and return a placeholder. \u2039\u203a markdown.util.Registry() \u00b6 Bases: Generic [ _T ] A priority sorted registry. A Registry instance provides two public methods to alter the data of the registry: register and deregister . Use register to add items and deregister to remove items. See each method for specifics. When registering an item, a \u201cname\u201d and a \u201cpriority\u201d must be provided. All items are automatically sorted by \u201cpriority\u201d from highest to lowest. The \u201cname\u201d is used to remove (\u201cderegister\u201d) and get items. A Registry instance it like a list (which maintains order) when reading data. You may iterate over the items, get an item and get a count (length) of all items. You may also check that the registry contains an item. When getting an item you may use either the index of the item or the string-based \u201cname\u201d. For example: registry = Registry() registry.register(SomeItem(), 'itemname', 20) # Get the item by index item = registry[0] # Get the item by name item = registry['itemname'] When checking that the registry contains an item, you may use either the string-based \u201cname\u201d, or a reference to the actual item. For example: someitem = SomeItem() registry.register(someitem, 'itemname', 20) # Contains the name assert 'itemname' in registry # Contains the item instance assert someitem in registry The method get_index_for_name is also available to obtain the index of an item using that item\u2019s assigned \u201cname\u201d. \u2039\u203a markdown.util.Registry.get_index_for_name(name: str) -> int \u00b6 Return the index of the given name. \u2039\u203a markdown.util.Registry.register(item: _T, name: str, priority: float) -> None \u00b6 Add an item to the registry with the given name and priority. Parameters: item ( _T ) \u2013 The item being registered. name ( str ) \u2013 A string used to reference the item. priority ( float ) \u2013 An integer or float used to sort against all items. If an item is registered with a \u201cname\u201d which already exists, the existing item is replaced with the new item. Treat carefully as the old item is lost with no way to recover it. The new item will be sorted according to its priority and will not retain the position of the old item. \u2039\u203a markdown.util.Registry.deregister(name: str, strict: bool = True) -> None \u00b6 Remove an item from the registry. Set strict=False to fail silently. Otherwise a ValueError is raised for an unknown name .","title":"<code>util</code>"},{"location":"reference/markdown/util/#markdown.util","text":"This module contains various contacts, classes and functions which get referenced and used throughout the code base.","title":"util"},{"location":"reference/markdown/util/#markdown.util.BLOCK_LEVEL_ELEMENTS","text":"List of HTML tags which get treated as block-level elements. Same as the block_level_elements attribute of the Markdown class. Generally one should use the attribute on the class. This remains for compatibility with older extensions. Defined Value: BLOCK_LEVEL_ELEMENTS: list[str] = [ # Elements which are invalid to wrap in a `<p>` tag. # See https://w3c.github.io/html/grouping-content.html#the-p-element 'address', 'article', 'aside', 'blockquote', 'details', 'div', 'dl', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'main', 'menu', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul', # Other elements which Markdown should not be mucking up the contents of. 'canvas', 'colgroup', 'dd', 'body', 'dt', 'group', 'html', 'iframe', 'li', 'legend', 'math', 'map', 'noscript', 'output', 'object', 'option', 'progress', 'script', 'style', 'summary', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'tr', 'video' ]","title":"BLOCK_LEVEL_ELEMENTS"},{"location":"reference/markdown/util/#markdown.util.STX","text":"\u201cStart of Text\u201d marker for placeholder templates. Defined Value: STX = '\\u0002'","title":"STX"},{"location":"reference/markdown/util/#markdown.util.ETX","text":"\u201cEnd of Text\u201d marker for placeholder templates. Defined Value: ETX = '\\u0003'","title":"ETX"},{"location":"reference/markdown/util/#markdown.util.INLINE_PLACEHOLDER_PREFIX","text":"Prefix for inline placeholder template. Defined Value: INLINE_PLACEHOLDER_PREFIX = STX+\"klzzwxh:\"","title":"INLINE_PLACEHOLDER_PREFIX"},{"location":"reference/markdown/util/#markdown.util.INLINE_PLACEHOLDER","text":"Placeholder template for stashed inline text. Defined Value: INLINE_PLACEHOLDER = INLINE_PLACEHOLDER_PREFIX + \"%s\" + ETX","title":"INLINE_PLACEHOLDER"},{"location":"reference/markdown/util/#markdown.util.INLINE_PLACEHOLDER_RE","text":"Regular Expression which matches inline placeholders. Defined Value: INLINE_PLACEHOLDER_RE = re.compile(INLINE_PLACEHOLDER % r'([0-9]+)')","title":"INLINE_PLACEHOLDER_RE"},{"location":"reference/markdown/util/#markdown.util.AMP_SUBSTITUTE","text":"Placeholder template for HTML entities. Defined Value: AMP_SUBSTITUTE = STX+\"amp\"+ETX","title":"AMP_SUBSTITUTE"},{"location":"reference/markdown/util/#markdown.util.HTML_PLACEHOLDER","text":"Placeholder template for raw HTML. Defined Value: HTML_PLACEHOLDER = STX + \"wzxhzdk:%s\" + ETX","title":"HTML_PLACEHOLDER"},{"location":"reference/markdown/util/#markdown.util.HTML_PLACEHOLDER_RE","text":"Regular expression which matches HTML placeholders. Defined Value: HTML_PLACEHOLDER_RE = re.compile(HTML_PLACEHOLDER % r'([0-9]+)')","title":"HTML_PLACEHOLDER_RE"},{"location":"reference/markdown/util/#markdown.util.TAG_PLACEHOLDER","text":"Placeholder template for tags. Defined Value: TAG_PLACEHOLDER = STX + \"hzzhzkh:%s\" + ETX","title":"TAG_PLACEHOLDER"},{"location":"reference/markdown/util/#markdown.util.get_installed_extensions","text":"Return all entry_points in the markdown.extensions group.","title":"get_installed_extensions"},{"location":"reference/markdown/util/#markdown.util.deprecated","text":"Raise a DeprecationWarning when wrapped function/method is called. Usage: @deprecated(\"This method will be removed in version X; use Y instead.\") def some_method(): pass","title":"deprecated"},{"location":"reference/markdown/util/#markdown.util.parseBoolValue","text":"Parses a string representing a boolean value. If parsing was successful, returns True or False . If preserve_none=True , returns True , False , or None . If parsing was not successful, raises ValueError , or, if fail_on_errors=False , returns None .","title":"parseBoolValue"},{"location":"reference/markdown/util/#markdown.util.code_escape","text":"HTML escape a string of code.","title":"code_escape"},{"location":"reference/markdown/util/#markdown.util.nearing_recursion_limit","text":"Return true if current stack depth is within 100 of maximum limit.","title":"nearing_recursion_limit"},{"location":"reference/markdown/util/#markdown.util.AtomicString","text":"Bases: str A string which should not be further processed.","title":"AtomicString"},{"location":"reference/markdown/util/#markdown.util.Processor","text":"The base class for all processors. Attributes: Processor.md \u2013 The Markdown instance passed in an initialization. Parameters: md ( Markdown | None , default: None ) \u2013 The Markdown instance this processor is a part of.","title":"Processor"},{"location":"reference/markdown/util/#markdown.util.HtmlStash","text":"This class is used for stashing HTML objects that we extract in the beginning and replace with place-holders.","title":"HtmlStash"},{"location":"reference/markdown/util/#markdown.util.HtmlStash.store","text":"Saves an HTML segment for later reinsertion. Returns a placeholder string that needs to be inserted into the document. Other Parameters: html ( str | Element ) \u2013 An html segment. Returns: str \u2013 A placeholder string.","title":"store"},{"location":"reference/markdown/util/#markdown.util.HtmlStash.reset","text":"Clear the stash.","title":"reset"},{"location":"reference/markdown/util/#markdown.util.HtmlStash.store_tag","text":"Store tag data and return a placeholder.","title":"store_tag"},{"location":"reference/markdown/util/#markdown.util.Registry","text":"Bases: Generic [ _T ] A priority sorted registry. A Registry instance provides two public methods to alter the data of the registry: register and deregister . Use register to add items and deregister to remove items. See each method for specifics. When registering an item, a \u201cname\u201d and a \u201cpriority\u201d must be provided. All items are automatically sorted by \u201cpriority\u201d from highest to lowest. The \u201cname\u201d is used to remove (\u201cderegister\u201d) and get items. A Registry instance it like a list (which maintains order) when reading data. You may iterate over the items, get an item and get a count (length) of all items. You may also check that the registry contains an item. When getting an item you may use either the index of the item or the string-based \u201cname\u201d. For example: registry = Registry() registry.register(SomeItem(), 'itemname', 20) # Get the item by index item = registry[0] # Get the item by name item = registry['itemname'] When checking that the registry contains an item, you may use either the string-based \u201cname\u201d, or a reference to the actual item. For example: someitem = SomeItem() registry.register(someitem, 'itemname', 20) # Contains the name assert 'itemname' in registry # Contains the item instance assert someitem in registry The method get_index_for_name is also available to obtain the index of an item using that item\u2019s assigned \u201cname\u201d.","title":"Registry"},{"location":"reference/markdown/util/#markdown.util.Registry.get_index_for_name","text":"Return the index of the given name.","title":"get_index_for_name"},{"location":"reference/markdown/util/#markdown.util.Registry.register","text":"Add an item to the registry with the given name and priority. Parameters: item ( _T ) \u2013 The item being registered. name ( str ) \u2013 A string used to reference the item. priority ( float ) \u2013 An integer or float used to sort against all items. If an item is registered with a \u201cname\u201d which already exists, the existing item is replaced with the new item. Treat carefully as the old item is lost with no way to recover it. The new item will be sorted according to its priority and will not retain the position of the old item.","title":"register"},{"location":"reference/markdown/util/#markdown.util.Registry.deregister","text":"Remove an item from the registry. Set strict=False to fail silently. Otherwise a ValueError is raised for an unknown name .","title":"deregister"},{"location":"reference/markdown/extensions/","text":"\u2039\u203a markdown.extensions \u00b6 Markdown accepts an Extension instance for each extension. Therefore, each extension must to define a class that extends Extension and over-rides the extendMarkdown method. Within this class one can manage configuration options for their extension and attach the various processors and patterns which make up an extension to the Markdown instance. \u2039\u203a markdown.extensions.Extension(**kwargs) \u00b6 Base class for extensions to subclass. \u2039\u203a markdown.extensions.Extension.config: Mapping[str, list] class-attribute instance-attribute \u00b6 Default configuration for an extension. This attribute is to be defined in a subclass and must be of the following format: config = { 'key': ['value', 'description'] } Note that setConfig will raise a KeyError if a default is not set for each option. Defined Value: config: Mapping[str, list] = {} \u2039\u203a markdown.extensions.Extension.getConfig(key: str, default: Any = '') -> Any \u00b6 Return a single configuration option value. Parameters: key ( str ) \u2013 The configuration option name. default ( Any , default: '' ) \u2013 Default value to return if key is not set. Returns: Any \u2013 Value of stored configuration option. \u2039\u203a markdown.extensions.Extension.getConfigs() -> dict[str, Any] \u00b6 Return all configuration options. Returns: dict [ str , Any ] \u2013 All configuration options. \u2039\u203a markdown.extensions.Extension.getConfigInfo() -> list[tuple[str, str]] \u00b6 Return descriptions of all configuration options. Returns: list [ tuple [ str , str ]] \u2013 All descriptions of configuration options. \u2039\u203a markdown.extensions.Extension.setConfig(key: str, value: Any) -> None \u00b6 Set a configuration option. If the corresponding default value set in config is a bool value or None , then value is passed through parseBoolValue before being stored. Parameters: key ( str ) \u2013 Name of configuration option to set. value ( Any ) \u2013 Value to assign to option. Raises: KeyError \u2013 If key is not known. \u2039\u203a markdown.extensions.Extension.setConfigs(items: Mapping[str, Any] | Iterable[tuple[str, Any]]) -> None \u00b6 Loop through a collection of configuration options, passing each to setConfig . Parameters: items ( Mapping [ str , Any ] | Iterable [ tuple [ str , Any ]] ) \u2013 Collection of configuration options. Raises: KeyError \u2013 for any unknown key. \u2039\u203a markdown.extensions.Extension.extendMarkdown(md: Markdown) -> None \u00b6 Add the various processors and patterns to the Markdown Instance. This method must be overridden by every extension. Parameters: md ( Markdown ) \u2013 The Markdown instance.","title":"<code>extensions</code>"},{"location":"reference/markdown/extensions/#markdown.extensions","text":"Markdown accepts an Extension instance for each extension. Therefore, each extension must to define a class that extends Extension and over-rides the extendMarkdown method. Within this class one can manage configuration options for their extension and attach the various processors and patterns which make up an extension to the Markdown instance.","title":"extensions"},{"location":"reference/markdown/extensions/#markdown.extensions.Extension","text":"Base class for extensions to subclass.","title":"Extension"},{"location":"reference/markdown/extensions/#markdown.extensions.Extension.config","text":"Default configuration for an extension. This attribute is to be defined in a subclass and must be of the following format: config = { 'key': ['value', 'description'] } Note that setConfig will raise a KeyError if a default is not set for each option. Defined Value: config: Mapping[str, list] = {}","title":"config"},{"location":"reference/markdown/extensions/#markdown.extensions.Extension.getConfig","text":"Return a single configuration option value. Parameters: key ( str ) \u2013 The configuration option name. default ( Any , default: '' ) \u2013 Default value to return if key is not set. Returns: Any \u2013 Value of stored configuration option.","title":"getConfig"},{"location":"reference/markdown/extensions/#markdown.extensions.Extension.getConfigs","text":"Return all configuration options. Returns: dict [ str , Any ] \u2013 All configuration options.","title":"getConfigs"},{"location":"reference/markdown/extensions/#markdown.extensions.Extension.getConfigInfo","text":"Return descriptions of all configuration options. Returns: list [ tuple [ str , str ]] \u2013 All descriptions of configuration options.","title":"getConfigInfo"},{"location":"reference/markdown/extensions/#markdown.extensions.Extension.setConfig","text":"Set a configuration option. If the corresponding default value set in config is a bool value or None , then value is passed through parseBoolValue before being stored. Parameters: key ( str ) \u2013 Name of configuration option to set. value ( Any ) \u2013 Value to assign to option. Raises: KeyError \u2013 If key is not known.","title":"setConfig"},{"location":"reference/markdown/extensions/#markdown.extensions.Extension.setConfigs","text":"Loop through a collection of configuration options, passing each to setConfig . Parameters: items ( Mapping [ str , Any ] | Iterable [ tuple [ str , Any ]] ) \u2013 Collection of configuration options. Raises: KeyError \u2013 for any unknown key.","title":"setConfigs"},{"location":"reference/markdown/extensions/#markdown.extensions.Extension.extendMarkdown","text":"Add the various processors and patterns to the Markdown Instance. This method must be overridden by every extension. Parameters: md ( Markdown ) \u2013 The Markdown instance.","title":"extendMarkdown"},{"location":"reference/markdown/extensions/abbr/","text":"\u2039\u203a markdown.extensions.abbr \u00b6 This extension adds abbreviation handling to Python-Markdown. See the documentation for details. \u2039\u203a markdown.extensions.abbr.AbbrExtension(**kwargs) \u00b6 Bases: Extension Abbreviation Extension for Python-Markdown. \u2039\u203a markdown.extensions.abbr.AbbrExtension.extendMarkdown(md) \u00b6 Insert AbbrPreprocessor before ReferencePreprocessor . \u2039\u203a markdown.extensions.abbr.AbbrPreprocessor(parser: BlockParser) \u00b6 Bases: BlockProcessor Abbreviation Preprocessor - parse text for abbr references. \u2039\u203a markdown.extensions.abbr.AbbrPreprocessor.run(parent: etree.Element, blocks: list[str]) -> bool \u00b6 Find and remove all Abbreviation references from the text. Each reference is set as a new AbbrPattern in the markdown instance. \u2039\u203a markdown.extensions.abbr.AbbrInlineProcessor(pattern: str, title: str) \u00b6 Bases: InlineProcessor Abbreviation inline pattern.","title":"<code>abbr</code>"},{"location":"reference/markdown/extensions/abbr/#markdown.extensions.abbr","text":"This extension adds abbreviation handling to Python-Markdown. See the documentation for details.","title":"abbr"},{"location":"reference/markdown/extensions/abbr/#markdown.extensions.abbr.AbbrExtension","text":"Bases: Extension Abbreviation Extension for Python-Markdown.","title":"AbbrExtension"},{"location":"reference/markdown/extensions/abbr/#markdown.extensions.abbr.AbbrExtension.extendMarkdown","text":"Insert AbbrPreprocessor before ReferencePreprocessor .","title":"extendMarkdown"},{"location":"reference/markdown/extensions/abbr/#markdown.extensions.abbr.AbbrPreprocessor","text":"Bases: BlockProcessor Abbreviation Preprocessor - parse text for abbr references.","title":"AbbrPreprocessor"},{"location":"reference/markdown/extensions/abbr/#markdown.extensions.abbr.AbbrPreprocessor.run","text":"Find and remove all Abbreviation references from the text. Each reference is set as a new AbbrPattern in the markdown instance.","title":"run"},{"location":"reference/markdown/extensions/abbr/#markdown.extensions.abbr.AbbrInlineProcessor","text":"Bases: InlineProcessor Abbreviation inline pattern.","title":"AbbrInlineProcessor"},{"location":"reference/markdown/extensions/admonition/","text":"\u2039\u203a markdown.extensions.admonition \u00b6 Adds rST-style admonitions. Inspired by rST feature with the same name. See the documentation for details. \u2039\u203a markdown.extensions.admonition.AdmonitionExtension(**kwargs) \u00b6 Bases: Extension Admonition extension for Python-Markdown. \u2039\u203a markdown.extensions.admonition.AdmonitionExtension.extendMarkdown(md) \u00b6 Add Admonition to Markdown instance. \u2039\u203a markdown.extensions.admonition.AdmonitionProcessor(parser: blockparser.BlockParser) \u00b6 Bases: BlockProcessor \u2039\u203a markdown.extensions.admonition.AdmonitionProcessor.parse_content(parent: etree.Element, block: str) -> tuple[etree.Element | None, str, str] \u00b6 Get sibling admonition. Retrieve the appropriate sibling element. This can get tricky when dealing with lists.","title":"<code>admonition</code>"},{"location":"reference/markdown/extensions/admonition/#markdown.extensions.admonition","text":"Adds rST-style admonitions. Inspired by rST feature with the same name. See the documentation for details.","title":"admonition"},{"location":"reference/markdown/extensions/admonition/#markdown.extensions.admonition.AdmonitionExtension","text":"Bases: Extension Admonition extension for Python-Markdown.","title":"AdmonitionExtension"},{"location":"reference/markdown/extensions/admonition/#markdown.extensions.admonition.AdmonitionExtension.extendMarkdown","text":"Add Admonition to Markdown instance.","title":"extendMarkdown"},{"location":"reference/markdown/extensions/admonition/#markdown.extensions.admonition.AdmonitionProcessor","text":"Bases: BlockProcessor","title":"AdmonitionProcessor"},{"location":"reference/markdown/extensions/admonition/#markdown.extensions.admonition.AdmonitionProcessor.parse_content","text":"Get sibling admonition. Retrieve the appropriate sibling element. This can get tricky when dealing with lists.","title":"parse_content"},{"location":"reference/markdown/extensions/attr_list/","text":"\u2039\u203a markdown.extensions.attr_list \u00b6 Adds attribute list syntax. Inspired by Maruku \u2019s feature of the same name. See the documentation for details. \u2039\u203a markdown.extensions.attr_list.get_attrs_and_remainder(attrs_string: str) -> tuple[list[tuple[str, str]], str] \u00b6 Parse attribute list and return a list of attribute tuples. Additionally, return any text that remained after a curly brace. In typical cases, its presence should mean that the input does not match the intended attribute list syntax. \u2039\u203a markdown.extensions.attr_list.get_attrs(str: str) -> list[tuple[str, str]] \u00b6 Soft-deprecated. Prefer get_attrs_and_remainder . \u2039\u203a markdown.extensions.attr_list.AttrListTreeprocessor(md: Markdown | None = None) \u00b6 Bases: Treeprocessor \u2039\u203a markdown.extensions.attr_list.AttrListTreeprocessor.assign_attrs(elem: Element, attrs_string: str, *, strict: bool = False) -> str \u00b6 Assign attrs to element. If the attrs_string has an extra closing curly brace, the remaining text is returned. The strict argument controls whether to still assign attrs if there is a remaining } . \u2039\u203a markdown.extensions.attr_list.AttrListTreeprocessor.sanitize_name(name: str) -> str \u00b6 Sanitize name as \u2018an XML Name, minus the : .\u2019 See https://www.w3.org/TR/REC-xml-names/#NT-NCName . \u2039\u203a markdown.extensions.attr_list.AttrListExtension(**kwargs) \u00b6 Bases: Extension Attribute List extension for Python-Markdown","title":"<code>attr_list</code>"},{"location":"reference/markdown/extensions/attr_list/#markdown.extensions.attr_list","text":"Adds attribute list syntax. Inspired by Maruku \u2019s feature of the same name. See the documentation for details.","title":"attr_list"},{"location":"reference/markdown/extensions/attr_list/#markdown.extensions.attr_list.get_attrs_and_remainder","text":"Parse attribute list and return a list of attribute tuples. Additionally, return any text that remained after a curly brace. In typical cases, its presence should mean that the input does not match the intended attribute list syntax.","title":"get_attrs_and_remainder"},{"location":"reference/markdown/extensions/attr_list/#markdown.extensions.attr_list.get_attrs","text":"Soft-deprecated. Prefer get_attrs_and_remainder .","title":"get_attrs"},{"location":"reference/markdown/extensions/attr_list/#markdown.extensions.attr_list.AttrListTreeprocessor","text":"Bases: Treeprocessor","title":"AttrListTreeprocessor"},{"location":"reference/markdown/extensions/attr_list/#markdown.extensions.attr_list.AttrListTreeprocessor.assign_attrs","text":"Assign attrs to element. If the attrs_string has an extra closing curly brace, the remaining text is returned. The strict argument controls whether to still assign attrs if there is a remaining } .","title":"assign_attrs"},{"location":"reference/markdown/extensions/attr_list/#markdown.extensions.attr_list.AttrListTreeprocessor.sanitize_name","text":"Sanitize name as \u2018an XML Name, minus the : .\u2019 See https://www.w3.org/TR/REC-xml-names/#NT-NCName .","title":"sanitize_name"},{"location":"reference/markdown/extensions/attr_list/#markdown.extensions.attr_list.AttrListExtension","text":"Bases: Extension Attribute List extension for Python-Markdown","title":"AttrListExtension"},{"location":"reference/markdown/extensions/codehilite/","text":"\u2039\u203a markdown.extensions.codehilite \u00b6 Adds code/syntax highlighting to standard Python-Markdown code blocks. See the documentation for details. \u2039\u203a markdown.extensions.codehilite.parse_hl_lines(expr: str) -> list[int] \u00b6 Support our syntax for emphasizing certain lines of code. expr should be like \u20181 2\u2019 to emphasize lines 1 and 2 of a code block. Returns a list of integers, the line numbers to emphasize. \u2039\u203a markdown.extensions.codehilite.CodeHilite(src: str, **options) \u00b6 Determine language of source code, and pass it on to the Pygments highlighter. Usage: code = CodeHilite(src=some_code, lang='python') html = code.hilite() Parameters: src ( str ) \u2013 Source string or any object with a .readline attribute. Other Parameters: lang ( str ) \u2013 String name of Pygments lexer to use for highlighting. Default: None . guess_lang ( bool ) \u2013 Auto-detect which lexer to use. Ignored if lang is set to a valid value. Default: True . use_pygments ( bool ) \u2013 Pass code to Pygments for code highlighting. If False , the code is instead wrapped for highlighting by a JavaScript library. Default: True . pygments_formatter ( str ) \u2013 The name of a Pygments formatter or a formatter class used for highlighting the code blocks. Default: html . linenums ( bool ) \u2013 An alias to Pygments linenos formatter option. Default: None . css_class ( str ) \u2013 An alias to Pygments cssclass formatter option. Default: \u2018codehilite\u2019. lang_prefix ( str ) \u2013 Prefix prepended to the language. Default: \u201clanguage-\u201c. Other Options: Any other options are accepted and passed on to the lexer and formatter. Therefore, valid options include any options which are accepted by the html formatter or whichever lexer the code\u2019s language uses. Note that most lexers do not have any options. However, a few have very useful options, such as PHP\u2019s startinline option. Any invalid options are ignored without error. Formatter options : https://pygments.org/docs/formatters/#HtmlFormatter Lexer Options : https://pygments.org/docs/lexers/ Additionally, when Pygments is enabled, the code\u2019s language is passed to the formatter as an extra option lang_str , whose value being {lang_prefix}{lang} . This option has no effect to the Pygments\u2019 builtin formatters. Advanced Usage: code = CodeHilite( src = some_code, lang = 'php', startinline = True, # Lexer option. Snippet does not start with `<?php`. linenostart = 42, # Formatter option. Snippet starts on line 42. hl_lines = [45, 49, 50], # Formatter option. Highlight lines 45, 49, and 50. linenos = 'inline' # Formatter option. Avoid alignment problems. ) html = code.hilite() \u2039\u203a markdown.extensions.codehilite.CodeHilite.hilite(shebang: bool = True) -> str \u00b6 Pass code to the Pygments highlighter with optional line numbers. The output should then be styled with CSS to your liking. No styles are applied by default - only styling hooks (i.e.: <span class=\"k\"> ). returns : A string of html. \u2039\u203a markdown.extensions.codehilite.HiliteTreeprocessor(md: Markdown | None = None) \u00b6 Bases: Treeprocessor Highlight source code in code blocks. \u2039\u203a markdown.extensions.codehilite.HiliteTreeprocessor.code_unescape(text: str) -> str \u00b6 Unescape code. \u2039\u203a markdown.extensions.codehilite.HiliteTreeprocessor.run(root: etree.Element) -> None \u00b6 Find code blocks and store in htmlStash . \u2039\u203a markdown.extensions.codehilite.CodeHiliteExtension(**kwargs) \u00b6 Bases: Extension Add source code highlighting to markdown code blocks. \u2039\u203a markdown.extensions.codehilite.CodeHiliteExtension.config instance-attribute \u00b6 Default configuration options. Defined Value: self.config = { 'linenums': [ None, \"Use lines numbers. True|table|inline=yes, False=no, None=auto. Default: `None`.\" ], 'guess_lang': [ True, \"Automatic language detection - Default: `True`.\" ], 'css_class': [ \"codehilite\", \"Set class name for wrapper <div> - Default: `codehilite`.\" ], 'pygments_style': [ 'default', 'Pygments HTML Formatter Style (Colorscheme). Default: `default`.' ], 'noclasses': [ False, 'Use inline styles instead of CSS classes - Default `False`.' ], 'use_pygments': [ True, 'Highlight code blocks with pygments. Disable if using a JavaScript library. Default: `True`.' ], 'lang_prefix': [ 'language-', 'Prefix prepended to the language when `use_pygments` is false. Default: `language-`.' ], 'pygments_formatter': [ 'html', 'Use a specific formatter for Pygments highlighting. Default: `html`.' ], } \u2039\u203a markdown.extensions.codehilite.CodeHiliteExtension.extendMarkdown(md) \u00b6 Add HilitePostprocessor to Markdown instance.","title":"<code>codehilite</code>"},{"location":"reference/markdown/extensions/codehilite/#markdown.extensions.codehilite","text":"Adds code/syntax highlighting to standard Python-Markdown code blocks. See the documentation for details.","title":"codehilite"},{"location":"reference/markdown/extensions/codehilite/#markdown.extensions.codehilite.parse_hl_lines","text":"Support our syntax for emphasizing certain lines of code. expr should be like \u20181 2\u2019 to emphasize lines 1 and 2 of a code block. Returns a list of integers, the line numbers to emphasize.","title":"parse_hl_lines"},{"location":"reference/markdown/extensions/codehilite/#markdown.extensions.codehilite.CodeHilite","text":"Determine language of source code, and pass it on to the Pygments highlighter. Usage: code = CodeHilite(src=some_code, lang='python') html = code.hilite() Parameters: src ( str ) \u2013 Source string or any object with a .readline attribute. Other Parameters: lang ( str ) \u2013 String name of Pygments lexer to use for highlighting. Default: None . guess_lang ( bool ) \u2013 Auto-detect which lexer to use. Ignored if lang is set to a valid value. Default: True . use_pygments ( bool ) \u2013 Pass code to Pygments for code highlighting. If False , the code is instead wrapped for highlighting by a JavaScript library. Default: True . pygments_formatter ( str ) \u2013 The name of a Pygments formatter or a formatter class used for highlighting the code blocks. Default: html . linenums ( bool ) \u2013 An alias to Pygments linenos formatter option. Default: None . css_class ( str ) \u2013 An alias to Pygments cssclass formatter option. Default: \u2018codehilite\u2019. lang_prefix ( str ) \u2013 Prefix prepended to the language. Default: \u201clanguage-\u201c. Other Options: Any other options are accepted and passed on to the lexer and formatter. Therefore, valid options include any options which are accepted by the html formatter or whichever lexer the code\u2019s language uses. Note that most lexers do not have any options. However, a few have very useful options, such as PHP\u2019s startinline option. Any invalid options are ignored without error. Formatter options : https://pygments.org/docs/formatters/#HtmlFormatter Lexer Options : https://pygments.org/docs/lexers/ Additionally, when Pygments is enabled, the code\u2019s language is passed to the formatter as an extra option lang_str , whose value being {lang_prefix}{lang} . This option has no effect to the Pygments\u2019 builtin formatters. Advanced Usage: code = CodeHilite( src = some_code, lang = 'php', startinline = True, # Lexer option. Snippet does not start with `<?php`. linenostart = 42, # Formatter option. Snippet starts on line 42. hl_lines = [45, 49, 50], # Formatter option. Highlight lines 45, 49, and 50. linenos = 'inline' # Formatter option. Avoid alignment problems. ) html = code.hilite()","title":"CodeHilite"},{"location":"reference/markdown/extensions/codehilite/#markdown.extensions.codehilite.CodeHilite.hilite","text":"Pass code to the Pygments highlighter with optional line numbers. The output should then be styled with CSS to your liking. No styles are applied by default - only styling hooks (i.e.: <span class=\"k\"> ). returns : A string of html.","title":"hilite"},{"location":"reference/markdown/extensions/codehilite/#markdown.extensions.codehilite.HiliteTreeprocessor","text":"Bases: Treeprocessor Highlight source code in code blocks.","title":"HiliteTreeprocessor"},{"location":"reference/markdown/extensions/codehilite/#markdown.extensions.codehilite.HiliteTreeprocessor.code_unescape","text":"Unescape code.","title":"code_unescape"},{"location":"reference/markdown/extensions/codehilite/#markdown.extensions.codehilite.HiliteTreeprocessor.run","text":"Find code blocks and store in htmlStash .","title":"run"},{"location":"reference/markdown/extensions/codehilite/#markdown.extensions.codehilite.CodeHiliteExtension","text":"Bases: Extension Add source code highlighting to markdown code blocks.","title":"CodeHiliteExtension"},{"location":"reference/markdown/extensions/codehilite/#markdown.extensions.codehilite.CodeHiliteExtension.config","text":"Default configuration options. Defined Value: self.config = { 'linenums': [ None, \"Use lines numbers. True|table|inline=yes, False=no, None=auto. Default: `None`.\" ], 'guess_lang': [ True, \"Automatic language detection - Default: `True`.\" ], 'css_class': [ \"codehilite\", \"Set class name for wrapper <div> - Default: `codehilite`.\" ], 'pygments_style': [ 'default', 'Pygments HTML Formatter Style (Colorscheme). Default: `default`.' ], 'noclasses': [ False, 'Use inline styles instead of CSS classes - Default `False`.' ], 'use_pygments': [ True, 'Highlight code blocks with pygments. Disable if using a JavaScript library. Default: `True`.' ], 'lang_prefix': [ 'language-', 'Prefix prepended to the language when `use_pygments` is false. Default: `language-`.' ], 'pygments_formatter': [ 'html', 'Use a specific formatter for Pygments highlighting. Default: `html`.' ], }","title":"config"},{"location":"reference/markdown/extensions/codehilite/#markdown.extensions.codehilite.CodeHiliteExtension.extendMarkdown","text":"Add HilitePostprocessor to Markdown instance.","title":"extendMarkdown"},{"location":"reference/markdown/extensions/def_list/","text":"\u2039\u203a markdown.extensions.def_list \u00b6 Adds parsing of Definition Lists to Python-Markdown. See the documentation for details. \u2039\u203a markdown.extensions.def_list.DefListProcessor(parser: BlockParser) \u00b6 Bases: BlockProcessor Process Definition Lists. \u2039\u203a markdown.extensions.def_list.DefListIndentProcessor(*args) \u00b6 Bases: ListIndentProcessor Process indented children of definition list items. \u2039\u203a markdown.extensions.def_list.DefListIndentProcessor.ITEM_TYPES class-attribute instance-attribute \u00b6 Include dd in list item types. Defined Value: ITEM_TYPES = ['dd', 'li'] \u2039\u203a markdown.extensions.def_list.DefListIndentProcessor.LIST_TYPES class-attribute instance-attribute \u00b6 Include dl is list types. Defined Value: LIST_TYPES = ['dl', 'ol', 'ul'] \u2039\u203a markdown.extensions.def_list.DefListIndentProcessor.create_item(parent: etree.Element, block: str) -> None \u00b6 Create a new dd or li (depending on parent) and parse the block with it as the parent. \u2039\u203a markdown.extensions.def_list.DefListExtension(**kwargs) \u00b6 Bases: Extension Add definition lists to Markdown. \u2039\u203a markdown.extensions.def_list.DefListExtension.extendMarkdown(md) \u00b6 Add an instance of DefListProcessor to BlockParser .","title":"<code>def_list</code>"},{"location":"reference/markdown/extensions/def_list/#markdown.extensions.def_list","text":"Adds parsing of Definition Lists to Python-Markdown. See the documentation for details.","title":"def_list"},{"location":"reference/markdown/extensions/def_list/#markdown.extensions.def_list.DefListProcessor","text":"Bases: BlockProcessor Process Definition Lists.","title":"DefListProcessor"},{"location":"reference/markdown/extensions/def_list/#markdown.extensions.def_list.DefListIndentProcessor","text":"Bases: ListIndentProcessor Process indented children of definition list items.","title":"DefListIndentProcessor"},{"location":"reference/markdown/extensions/def_list/#markdown.extensions.def_list.DefListIndentProcessor.ITEM_TYPES","text":"Include dd in list item types. Defined Value: ITEM_TYPES = ['dd', 'li']","title":"ITEM_TYPES"},{"location":"reference/markdown/extensions/def_list/#markdown.extensions.def_list.DefListIndentProcessor.LIST_TYPES","text":"Include dl is list types. Defined Value: LIST_TYPES = ['dl', 'ol', 'ul']","title":"LIST_TYPES"},{"location":"reference/markdown/extensions/def_list/#markdown.extensions.def_list.DefListIndentProcessor.create_item","text":"Create a new dd or li (depending on parent) and parse the block with it as the parent.","title":"create_item"},{"location":"reference/markdown/extensions/def_list/#markdown.extensions.def_list.DefListExtension","text":"Bases: Extension Add definition lists to Markdown.","title":"DefListExtension"},{"location":"reference/markdown/extensions/def_list/#markdown.extensions.def_list.DefListExtension.extendMarkdown","text":"Add an instance of DefListProcessor to BlockParser .","title":"extendMarkdown"},{"location":"reference/markdown/extensions/extra/","text":"\u2039\u203a markdown.extensions.extra \u00b6 A compilation of various Python-Markdown extensions that imitates PHP Markdown Extra . Note that each of the individual extensions still need to be available on your PYTHONPATH . This extension simply wraps them all up as a convenience so that only one extension needs to be listed when initiating Markdown. See the documentation for each individual extension for specifics about that extension. There may be additional extensions that are distributed with Python-Markdown that are not included here in Extra. Those extensions are not part of PHP Markdown Extra, and therefore, not part of Python-Markdown Extra. If you really would like Extra to include additional extensions, we suggest creating your own clone of Extra under a different name. You could also edit the extensions global variable defined below, but be aware that such changes may be lost when you upgrade to any future version of Python-Markdown. See the documentation for details. \u2039\u203a markdown.extensions.extra.extensions module-attribute \u00b6 The list of included extensions. Defined Value: extensions = [ 'fenced_code', 'footnotes', 'attr_list', 'def_list', 'tables', 'abbr', 'md_in_html' ] \u2039\u203a markdown.extensions.extra.ExtraExtension(**kwargs) \u00b6 Bases: Extension Add various extensions to Markdown class. \u2039\u203a markdown.extensions.extra.ExtraExtension.extendMarkdown(md) \u00b6 Register extension instances.","title":"<code>extra</code>"},{"location":"reference/markdown/extensions/extra/#markdown.extensions.extra","text":"A compilation of various Python-Markdown extensions that imitates PHP Markdown Extra . Note that each of the individual extensions still need to be available on your PYTHONPATH . This extension simply wraps them all up as a convenience so that only one extension needs to be listed when initiating Markdown. See the documentation for each individual extension for specifics about that extension. There may be additional extensions that are distributed with Python-Markdown that are not included here in Extra. Those extensions are not part of PHP Markdown Extra, and therefore, not part of Python-Markdown Extra. If you really would like Extra to include additional extensions, we suggest creating your own clone of Extra under a different name. You could also edit the extensions global variable defined below, but be aware that such changes may be lost when you upgrade to any future version of Python-Markdown. See the documentation for details.","title":"extra"},{"location":"reference/markdown/extensions/extra/#markdown.extensions.extra.extensions","text":"The list of included extensions. Defined Value: extensions = [ 'fenced_code', 'footnotes', 'attr_list', 'def_list', 'tables', 'abbr', 'md_in_html' ]","title":"extensions"},{"location":"reference/markdown/extensions/extra/#markdown.extensions.extra.ExtraExtension","text":"Bases: Extension Add various extensions to Markdown class.","title":"ExtraExtension"},{"location":"reference/markdown/extensions/extra/#markdown.extensions.extra.ExtraExtension.extendMarkdown","text":"Register extension instances.","title":"extendMarkdown"},{"location":"reference/markdown/extensions/fenced_code/","text":"\u2039\u203a markdown.extensions.fenced_code \u00b6 This extension adds Fenced Code Blocks to Python-Markdown. See the documentation for details. \u2039\u203a markdown.extensions.fenced_code.FencedCodeExtension(**kwargs) \u00b6 Bases: Extension \u2039\u203a markdown.extensions.fenced_code.FencedCodeExtension.config instance-attribute \u00b6 Default configuration options. Defined Value: self.config = { 'lang_prefix': ['language-', 'Prefix prepended to the language. Default: \"language-\"'] } \u2039\u203a markdown.extensions.fenced_code.FencedCodeExtension.extendMarkdown(md) \u00b6 Add FencedBlockPreprocessor to the Markdown instance. \u2039\u203a markdown.extensions.fenced_code.FencedBlockPreprocessor(md: Markdown, config: dict[str, Any]) \u00b6 Bases: Preprocessor Find and extract fenced code blocks. \u2039\u203a markdown.extensions.fenced_code.FencedBlockPreprocessor.run(lines: list[str]) -> list[str] \u00b6 Match and store Fenced Code Blocks in the HtmlStash . \u2039\u203a markdown.extensions.fenced_code.FencedBlockPreprocessor.handle_attrs(attrs: Iterable[tuple[str, str]]) -> tuple[str, list[str], dict[str, Any]] \u00b6 Return tuple: (id, [list, of, classes], {configs})","title":"<code>fenced_code</code>"},{"location":"reference/markdown/extensions/fenced_code/#markdown.extensions.fenced_code","text":"This extension adds Fenced Code Blocks to Python-Markdown. See the documentation for details.","title":"fenced_code"},{"location":"reference/markdown/extensions/fenced_code/#markdown.extensions.fenced_code.FencedCodeExtension","text":"Bases: Extension","title":"FencedCodeExtension"},{"location":"reference/markdown/extensions/fenced_code/#markdown.extensions.fenced_code.FencedCodeExtension.config","text":"Default configuration options. Defined Value: self.config = { 'lang_prefix': ['language-', 'Prefix prepended to the language. Default: \"language-\"'] }","title":"config"},{"location":"reference/markdown/extensions/fenced_code/#markdown.extensions.fenced_code.FencedCodeExtension.extendMarkdown","text":"Add FencedBlockPreprocessor to the Markdown instance.","title":"extendMarkdown"},{"location":"reference/markdown/extensions/fenced_code/#markdown.extensions.fenced_code.FencedBlockPreprocessor","text":"Bases: Preprocessor Find and extract fenced code blocks.","title":"FencedBlockPreprocessor"},{"location":"reference/markdown/extensions/fenced_code/#markdown.extensions.fenced_code.FencedBlockPreprocessor.run","text":"Match and store Fenced Code Blocks in the HtmlStash .","title":"run"},{"location":"reference/markdown/extensions/fenced_code/#markdown.extensions.fenced_code.FencedBlockPreprocessor.handle_attrs","text":"Return tuple: (id, [list, of, classes], {configs})","title":"handle_attrs"},{"location":"reference/markdown/extensions/footnotes/","text":"\u2039\u203a markdown.extensions.footnotes \u00b6 Adds footnote handling to Python-Markdown. See the documentation for details. \u2039\u203a markdown.extensions.footnotes.FootnoteExtension(**kwargs) \u00b6 Bases: Extension Footnote Extension. \u2039\u203a markdown.extensions.footnotes.FootnoteExtension.config instance-attribute \u00b6 Default configuration options. Defined Value: self.config = { 'PLACE_MARKER': [ '///Footnotes Go Here///', 'The text string that marks where the footnotes go' ], 'UNIQUE_IDS': [ False, 'Avoid name collisions across multiple calls to `reset()`.' ], 'BACKLINK_TEXT': [ '&#8617;', \"The text string that links from the footnote to the reader's place.\" ], 'SUPERSCRIPT_TEXT': [ '{}', \"The text string that links from the reader's place to the footnote.\" ], 'BACKLINK_TITLE': [ 'Jump back to footnote %d in the text', 'The text string used for the title HTML attribute of the backlink. ' '%d will be replaced by the footnote number.' ], 'SEPARATOR': [ ':', 'Footnote separator.' ] } \u2039\u203a markdown.extensions.footnotes.FootnoteExtension.extendMarkdown(md) \u00b6 Add pieces to Markdown. \u2039\u203a markdown.extensions.footnotes.FootnoteExtension.reset() -> None \u00b6 Clear footnotes on reset, and prepare for distinct document. \u2039\u203a markdown.extensions.footnotes.FootnoteExtension.unique_ref(reference: str, found: bool = False) -> str \u00b6 Get a unique reference if there are duplicates. \u2039\u203a markdown.extensions.footnotes.FootnoteExtension.findFootnotesPlaceholder(root: etree.Element) -> tuple[etree.Element, etree.Element, bool] | None \u00b6 Return ElementTree Element that contains Footnote placeholder. \u2039\u203a markdown.extensions.footnotes.FootnoteExtension.setFootnote(id: str, text: str) -> None \u00b6 Store a footnote for later retrieval. \u2039\u203a markdown.extensions.footnotes.FootnoteExtension.get_separator() -> str \u00b6 Get the footnote separator. \u2039\u203a markdown.extensions.footnotes.FootnoteExtension.makeFootnoteId(id: str) -> str \u00b6 Return footnote link id. \u2039\u203a markdown.extensions.footnotes.FootnoteExtension.makeFootnoteRefId(id: str, found: bool = False) -> str \u00b6 Return footnote back-link id. \u2039\u203a markdown.extensions.footnotes.FootnoteExtension.makeFootnotesDiv(root: etree.Element) -> etree.Element | None \u00b6 Return div of footnotes as etree Element. \u2039\u203a markdown.extensions.footnotes.FootnoteBlockProcessor(footnotes: FootnoteExtension) \u00b6 Bases: BlockProcessor Find all footnote references and store for later use. \u2039\u203a markdown.extensions.footnotes.FootnoteBlockProcessor.run(parent: etree.Element, blocks: list[str]) -> bool \u00b6 Find, set, and remove footnote definitions. \u2039\u203a markdown.extensions.footnotes.FootnoteBlockProcessor.detectTabbed(blocks: list[str]) -> list[str] \u00b6 Find indented text and remove indent before further processing. Returns: list [ str ] \u2013 A list of blocks with indentation removed. \u2039\u203a markdown.extensions.footnotes.FootnoteBlockProcessor.detab(block: str) -> str \u00b6 Remove one level of indent from a block. Preserve lazily indented blocks by only removing indent from indented lines. \u2039\u203a markdown.extensions.footnotes.FootnoteInlineProcessor(pattern: str, footnotes: FootnoteExtension) \u00b6 Bases: InlineProcessor InlineProcessor for footnote markers in a document\u2019s body text. \u2039\u203a markdown.extensions.footnotes.FootnotePostTreeprocessor(footnotes: FootnoteExtension) \u00b6 Bases: Treeprocessor Amend footnote div with duplicates. \u2039\u203a markdown.extensions.footnotes.FootnotePostTreeprocessor.add_duplicates(li: etree.Element, duplicates: int) -> None \u00b6 Adjust current li and add the duplicates: fnref2 , fnref3 , etc. \u2039\u203a markdown.extensions.footnotes.FootnotePostTreeprocessor.get_num_duplicates(li: etree.Element) -> int \u00b6 Get the number of duplicate refs of the footnote. \u2039\u203a markdown.extensions.footnotes.FootnotePostTreeprocessor.handle_duplicates(parent: etree.Element) -> None \u00b6 Find duplicate footnotes and format and add the duplicates. \u2039\u203a markdown.extensions.footnotes.FootnotePostTreeprocessor.run(root: etree.Element) -> None \u00b6 Crawl the footnote div and add missing duplicate footnotes. \u2039\u203a markdown.extensions.footnotes.FootnoteTreeprocessor(footnotes: FootnoteExtension) \u00b6 Bases: Treeprocessor Build and append footnote div to end of document. \u2039\u203a markdown.extensions.footnotes.FootnotePostprocessor(footnotes: FootnoteExtension) \u00b6 Bases: Postprocessor Replace placeholders with html entities. \u2039\u203a markdown.extensions.footnotes.makeExtension(**kwargs) \u00b6 Return an instance of the FootnoteExtension","title":"<code>footnotes</code>"},{"location":"reference/markdown/extensions/footnotes/#markdown.extensions.footnotes","text":"Adds footnote handling to Python-Markdown. See the documentation for details.","title":"footnotes"},{"location":"reference/markdown/extensions/footnotes/#markdown.extensions.footnotes.FootnoteExtension","text":"Bases: Extension Footnote Extension.","title":"FootnoteExtension"},{"location":"reference/markdown/extensions/footnotes/#markdown.extensions.footnotes.FootnoteExtension.config","text":"Default configuration options. Defined Value: self.config = { 'PLACE_MARKER': [ '///Footnotes Go Here///', 'The text string that marks where the footnotes go' ], 'UNIQUE_IDS': [ False, 'Avoid name collisions across multiple calls to `reset()`.' ], 'BACKLINK_TEXT': [ '&#8617;', \"The text string that links from the footnote to the reader's place.\" ], 'SUPERSCRIPT_TEXT': [ '{}', \"The text string that links from the reader's place to the footnote.\" ], 'BACKLINK_TITLE': [ 'Jump back to footnote %d in the text', 'The text string used for the title HTML attribute of the backlink. ' '%d will be replaced by the footnote number.' ], 'SEPARATOR': [ ':', 'Footnote separator.' ] }","title":"config"},{"location":"reference/markdown/extensions/footnotes/#markdown.extensions.footnotes.FootnoteExtension.extendMarkdown","text":"Add pieces to Markdown.","title":"extendMarkdown"},{"location":"reference/markdown/extensions/footnotes/#markdown.extensions.footnotes.FootnoteExtension.reset","text":"Clear footnotes on reset, and prepare for distinct document.","title":"reset"},{"location":"reference/markdown/extensions/footnotes/#markdown.extensions.footnotes.FootnoteExtension.unique_ref","text":"Get a unique reference if there are duplicates.","title":"unique_ref"},{"location":"reference/markdown/extensions/footnotes/#markdown.extensions.footnotes.FootnoteExtension.findFootnotesPlaceholder","text":"Return ElementTree Element that contains Footnote placeholder.","title":"findFootnotesPlaceholder"},{"location":"reference/markdown/extensions/footnotes/#markdown.extensions.footnotes.FootnoteExtension.setFootnote","text":"Store a footnote for later retrieval.","title":"setFootnote"},{"location":"reference/markdown/extensions/footnotes/#markdown.extensions.footnotes.FootnoteExtension.get_separator","text":"Get the footnote separator.","title":"get_separator"},{"location":"reference/markdown/extensions/footnotes/#markdown.extensions.footnotes.FootnoteExtension.makeFootnoteId","text":"Return footnote link id.","title":"makeFootnoteId"},{"location":"reference/markdown/extensions/footnotes/#markdown.extensions.footnotes.FootnoteExtension.makeFootnoteRefId","text":"Return footnote back-link id.","title":"makeFootnoteRefId"},{"location":"reference/markdown/extensions/footnotes/#markdown.extensions.footnotes.FootnoteExtension.makeFootnotesDiv","text":"Return div of footnotes as etree Element.","title":"makeFootnotesDiv"},{"location":"reference/markdown/extensions/footnotes/#markdown.extensions.footnotes.FootnoteBlockProcessor","text":"Bases: BlockProcessor Find all footnote references and store for later use.","title":"FootnoteBlockProcessor"},{"location":"reference/markdown/extensions/footnotes/#markdown.extensions.footnotes.FootnoteBlockProcessor.run","text":"Find, set, and remove footnote definitions.","title":"run"},{"location":"reference/markdown/extensions/footnotes/#markdown.extensions.footnotes.FootnoteBlockProcessor.detectTabbed","text":"Find indented text and remove indent before further processing. Returns: list [ str ] \u2013 A list of blocks with indentation removed.","title":"detectTabbed"},{"location":"reference/markdown/extensions/footnotes/#markdown.extensions.footnotes.FootnoteBlockProcessor.detab","text":"Remove one level of indent from a block. Preserve lazily indented blocks by only removing indent from indented lines.","title":"detab"},{"location":"reference/markdown/extensions/footnotes/#markdown.extensions.footnotes.FootnoteInlineProcessor","text":"Bases: InlineProcessor InlineProcessor for footnote markers in a document\u2019s body text.","title":"FootnoteInlineProcessor"},{"location":"reference/markdown/extensions/footnotes/#markdown.extensions.footnotes.FootnotePostTreeprocessor","text":"Bases: Treeprocessor Amend footnote div with duplicates.","title":"FootnotePostTreeprocessor"},{"location":"reference/markdown/extensions/footnotes/#markdown.extensions.footnotes.FootnotePostTreeprocessor.add_duplicates","text":"Adjust current li and add the duplicates: fnref2 , fnref3 , etc.","title":"add_duplicates"},{"location":"reference/markdown/extensions/footnotes/#markdown.extensions.footnotes.FootnotePostTreeprocessor.get_num_duplicates","text":"Get the number of duplicate refs of the footnote.","title":"get_num_duplicates"},{"location":"reference/markdown/extensions/footnotes/#markdown.extensions.footnotes.FootnotePostTreeprocessor.handle_duplicates","text":"Find duplicate footnotes and format and add the duplicates.","title":"handle_duplicates"},{"location":"reference/markdown/extensions/footnotes/#markdown.extensions.footnotes.FootnotePostTreeprocessor.run","text":"Crawl the footnote div and add missing duplicate footnotes.","title":"run"},{"location":"reference/markdown/extensions/footnotes/#markdown.extensions.footnotes.FootnoteTreeprocessor","text":"Bases: Treeprocessor Build and append footnote div to end of document.","title":"FootnoteTreeprocessor"},{"location":"reference/markdown/extensions/footnotes/#markdown.extensions.footnotes.FootnotePostprocessor","text":"Bases: Postprocessor Replace placeholders with html entities.","title":"FootnotePostprocessor"},{"location":"reference/markdown/extensions/footnotes/#markdown.extensions.footnotes.makeExtension","text":"Return an instance of the FootnoteExtension","title":"makeExtension"},{"location":"reference/markdown/extensions/legacy_attrs/","text":"\u2039\u203a markdown.extensions.legacy_attrs \u00b6 An extension to Python Markdown which implements legacy attributes. Prior to Python-Markdown version 3.0, the Markdown class had an enable_attributes keyword which was on by default and provided for attributes to be defined for elements using the format {@key=value} . This extension is provided as a replacement for backward compatibility. New documents should be authored using attr_lists . However, numerous documents exist which have been using the old attribute format for many years. This extension can be used to continue to render those documents correctly. \u2039\u203a markdown.extensions.legacy_attrs.LegacyAttrs(md: Markdown | None = None) \u00b6 Bases: Treeprocessor \u2039\u203a markdown.extensions.legacy_attrs.LegacyAttrs.run(doc: etree.Element) -> None \u00b6 Find and set values of attributes ({ @key =value}). \u2039\u203a markdown.extensions.legacy_attrs.LegacyAttrs.handleAttributes(el: etree.Element, txt: str) -> str \u00b6 Set attributes and return text without definitions. \u2039\u203a markdown.extensions.legacy_attrs.LegacyAttrExtension(**kwargs) \u00b6 Bases: Extension \u2039\u203a markdown.extensions.legacy_attrs.LegacyAttrExtension.extendMarkdown(md) \u00b6 Add LegacyAttrs to Markdown instance.","title":"<code>legacy_attrs</code>"},{"location":"reference/markdown/extensions/legacy_attrs/#markdown.extensions.legacy_attrs","text":"An extension to Python Markdown which implements legacy attributes. Prior to Python-Markdown version 3.0, the Markdown class had an enable_attributes keyword which was on by default and provided for attributes to be defined for elements using the format {@key=value} . This extension is provided as a replacement for backward compatibility. New documents should be authored using attr_lists . However, numerous documents exist which have been using the old attribute format for many years. This extension can be used to continue to render those documents correctly.","title":"legacy_attrs"},{"location":"reference/markdown/extensions/legacy_attrs/#markdown.extensions.legacy_attrs.LegacyAttrs","text":"Bases: Treeprocessor","title":"LegacyAttrs"},{"location":"reference/markdown/extensions/legacy_attrs/#markdown.extensions.legacy_attrs.LegacyAttrs.run","text":"Find and set values of attributes ({ @key =value}).","title":"run"},{"location":"reference/markdown/extensions/legacy_attrs/#markdown.extensions.legacy_attrs.LegacyAttrs.handleAttributes","text":"Set attributes and return text without definitions.","title":"handleAttributes"},{"location":"reference/markdown/extensions/legacy_attrs/#markdown.extensions.legacy_attrs.LegacyAttrExtension","text":"Bases: Extension","title":"LegacyAttrExtension"},{"location":"reference/markdown/extensions/legacy_attrs/#markdown.extensions.legacy_attrs.LegacyAttrExtension.extendMarkdown","text":"Add LegacyAttrs to Markdown instance.","title":"extendMarkdown"},{"location":"reference/markdown/extensions/legacy_em/","text":"\u2039\u203a markdown.extensions.legacy_em \u00b6 This extension provides legacy behavior for connected_words . \u2039\u203a markdown.extensions.legacy_em.LegacyUnderscoreProcessor(pattern: str, md: Markdown | None = None) \u00b6 Bases: UnderscoreProcessor Emphasis processor for handling strong and em matches inside underscores. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. md ( Markdown | None , default: None ) \u2013 An optional pointer to the instance of markdown.Markdown and is available as self.md on the class instance. \u2039\u203a markdown.extensions.legacy_em.LegacyEmExtension(**kwargs) \u00b6 Bases: Extension Add legacy_em extension to Markdown class. \u2039\u203a markdown.extensions.legacy_em.LegacyEmExtension.extendMarkdown(md) \u00b6 Modify inline patterns. \u2039\u203a markdown.extensions.legacy_em.makeExtension(**kwargs) \u00b6 Return an instance of the LegacyEmExtension","title":"<code>legacy_em</code>"},{"location":"reference/markdown/extensions/legacy_em/#markdown.extensions.legacy_em","text":"This extension provides legacy behavior for connected_words .","title":"legacy_em"},{"location":"reference/markdown/extensions/legacy_em/#markdown.extensions.legacy_em.LegacyUnderscoreProcessor","text":"Bases: UnderscoreProcessor Emphasis processor for handling strong and em matches inside underscores. Parameters: pattern ( str ) \u2013 A regular expression that matches a pattern. md ( Markdown | None , default: None ) \u2013 An optional pointer to the instance of markdown.Markdown and is available as self.md on the class instance.","title":"LegacyUnderscoreProcessor"},{"location":"reference/markdown/extensions/legacy_em/#markdown.extensions.legacy_em.LegacyEmExtension","text":"Bases: Extension Add legacy_em extension to Markdown class.","title":"LegacyEmExtension"},{"location":"reference/markdown/extensions/legacy_em/#markdown.extensions.legacy_em.LegacyEmExtension.extendMarkdown","text":"Modify inline patterns.","title":"extendMarkdown"},{"location":"reference/markdown/extensions/legacy_em/#markdown.extensions.legacy_em.makeExtension","text":"Return an instance of the LegacyEmExtension","title":"makeExtension"},{"location":"reference/markdown/extensions/md_in_html/","text":"\u2039\u203a markdown.extensions.md_in_html \u00b6 An implementation of PHP Markdown Extra \u2019s parsing of Markdown syntax in raw HTML. See the documentation for details. \u2039\u203a markdown.extensions.md_in_html.HTMLExtractorExtra(md: Markdown, *args, **kwargs) \u00b6 Bases: HTMLExtractor Override HTMLExtractor and create etree Elements for any elements which should have content parsed as Markdown. \u2039\u203a markdown.extensions.md_in_html.HTMLExtractorExtra.reset() \u00b6 Reset this instance. Loses all unprocessed data. \u2039\u203a markdown.extensions.md_in_html.HTMLExtractorExtra.close() \u00b6 Handle any buffered data. \u2039\u203a markdown.extensions.md_in_html.HTMLExtractorExtra.get_element() -> etree.Element \u00b6 Return element from treebuilder and reset treebuilder for later use. \u2039\u203a markdown.extensions.md_in_html.HTMLExtractorExtra.get_state(tag, attrs: Mapping[str, str]) -> Literal['block', 'span', 'off', None] \u00b6 Return state from tag and markdown attribute. One of \u2018block\u2019, \u2018span\u2019, or \u2018off\u2019. \u2039\u203a markdown.extensions.md_in_html.HtmlBlockPreprocessor(md: Markdown | None = None) \u00b6 Bases: Preprocessor Remove html blocks from the text and store them for later retrieval. \u2039\u203a markdown.extensions.md_in_html.MarkdownInHtmlProcessor(parser: BlockParser) \u00b6 Bases: BlockProcessor Process Markdown Inside HTML Blocks which have been stored in the HtmlStash . \u2039\u203a markdown.extensions.md_in_html.MarkdownInHtmlProcessor.parse_element_content(element: etree.Element) -> None \u00b6 Recursively parse the text content of an etree Element as Markdown. Any block level elements generated from the Markdown will be inserted as children of the element in place of the text content. All markdown attributes are removed. For any elements in which Markdown parsing has been disabled, the text content of it and its children are wrapped in an AtomicString . \u2039\u203a markdown.extensions.md_in_html.MarkdownInHTMLPostprocessor(md: Markdown | None = None) \u00b6 Bases: RawHtmlPostprocessor \u2039\u203a markdown.extensions.md_in_html.MarkdownInHTMLPostprocessor.stash_to_string(text: str | etree.Element) -> str \u00b6 Override default to handle any etree elements still in the stash. \u2039\u203a markdown.extensions.md_in_html.MarkdownInHtmlExtension(**kwargs) \u00b6 Bases: Extension Add Markdown parsing in HTML to Markdown class. \u2039\u203a markdown.extensions.md_in_html.MarkdownInHtmlExtension.extendMarkdown(md) \u00b6 Register extension instances.","title":"<code>md_in_html</code>"},{"location":"reference/markdown/extensions/md_in_html/#markdown.extensions.md_in_html","text":"An implementation of PHP Markdown Extra \u2019s parsing of Markdown syntax in raw HTML. See the documentation for details.","title":"md_in_html"},{"location":"reference/markdown/extensions/md_in_html/#markdown.extensions.md_in_html.HTMLExtractorExtra","text":"Bases: HTMLExtractor Override HTMLExtractor and create etree Elements for any elements which should have content parsed as Markdown.","title":"HTMLExtractorExtra"},{"location":"reference/markdown/extensions/md_in_html/#markdown.extensions.md_in_html.HTMLExtractorExtra.reset","text":"Reset this instance. Loses all unprocessed data.","title":"reset"},{"location":"reference/markdown/extensions/md_in_html/#markdown.extensions.md_in_html.HTMLExtractorExtra.close","text":"Handle any buffered data.","title":"close"},{"location":"reference/markdown/extensions/md_in_html/#markdown.extensions.md_in_html.HTMLExtractorExtra.get_element","text":"Return element from treebuilder and reset treebuilder for later use.","title":"get_element"},{"location":"reference/markdown/extensions/md_in_html/#markdown.extensions.md_in_html.HTMLExtractorExtra.get_state","text":"Return state from tag and markdown attribute. One of \u2018block\u2019, \u2018span\u2019, or \u2018off\u2019.","title":"get_state"},{"location":"reference/markdown/extensions/md_in_html/#markdown.extensions.md_in_html.HtmlBlockPreprocessor","text":"Bases: Preprocessor Remove html blocks from the text and store them for later retrieval.","title":"HtmlBlockPreprocessor"},{"location":"reference/markdown/extensions/md_in_html/#markdown.extensions.md_in_html.MarkdownInHtmlProcessor","text":"Bases: BlockProcessor Process Markdown Inside HTML Blocks which have been stored in the HtmlStash .","title":"MarkdownInHtmlProcessor"},{"location":"reference/markdown/extensions/md_in_html/#markdown.extensions.md_in_html.MarkdownInHtmlProcessor.parse_element_content","text":"Recursively parse the text content of an etree Element as Markdown. Any block level elements generated from the Markdown will be inserted as children of the element in place of the text content. All markdown attributes are removed. For any elements in which Markdown parsing has been disabled, the text content of it and its children are wrapped in an AtomicString .","title":"parse_element_content"},{"location":"reference/markdown/extensions/md_in_html/#markdown.extensions.md_in_html.MarkdownInHTMLPostprocessor","text":"Bases: RawHtmlPostprocessor","title":"MarkdownInHTMLPostprocessor"},{"location":"reference/markdown/extensions/md_in_html/#markdown.extensions.md_in_html.MarkdownInHTMLPostprocessor.stash_to_string","text":"Override default to handle any etree elements still in the stash.","title":"stash_to_string"},{"location":"reference/markdown/extensions/md_in_html/#markdown.extensions.md_in_html.MarkdownInHtmlExtension","text":"Bases: Extension Add Markdown parsing in HTML to Markdown class.","title":"MarkdownInHtmlExtension"},{"location":"reference/markdown/extensions/md_in_html/#markdown.extensions.md_in_html.MarkdownInHtmlExtension.extendMarkdown","text":"Register extension instances.","title":"extendMarkdown"},{"location":"reference/markdown/extensions/meta/","text":"\u2039\u203a markdown.extensions.meta \u00b6 This extension adds Meta Data handling to markdown. See the documentation for details. \u2039\u203a markdown.extensions.meta.MetaExtension(**kwargs) \u00b6 Bases: Extension Meta-Data extension for Python-Markdown. \u2039\u203a markdown.extensions.meta.MetaExtension.extendMarkdown(md) \u00b6 Add MetaPreprocessor to Markdown instance. \u2039\u203a markdown.extensions.meta.MetaPreprocessor(md: Markdown | None = None) \u00b6 Bases: Preprocessor Get Meta-Data. \u2039\u203a markdown.extensions.meta.MetaPreprocessor.run(lines: list[str]) -> list[str] \u00b6 Parse Meta-Data and store in Markdown.Meta.","title":"<code>meta</code>"},{"location":"reference/markdown/extensions/meta/#markdown.extensions.meta","text":"This extension adds Meta Data handling to markdown. See the documentation for details.","title":"meta"},{"location":"reference/markdown/extensions/meta/#markdown.extensions.meta.MetaExtension","text":"Bases: Extension Meta-Data extension for Python-Markdown.","title":"MetaExtension"},{"location":"reference/markdown/extensions/meta/#markdown.extensions.meta.MetaExtension.extendMarkdown","text":"Add MetaPreprocessor to Markdown instance.","title":"extendMarkdown"},{"location":"reference/markdown/extensions/meta/#markdown.extensions.meta.MetaPreprocessor","text":"Bases: Preprocessor Get Meta-Data.","title":"MetaPreprocessor"},{"location":"reference/markdown/extensions/meta/#markdown.extensions.meta.MetaPreprocessor.run","text":"Parse Meta-Data and store in Markdown.Meta.","title":"run"},{"location":"reference/markdown/extensions/nl2br/","text":"\u2039\u203a markdown.extensions.nl2br \u00b6 A Python-Markdown extension to treat newlines as hard breaks; like GitHub-flavored Markdown does. See the documentation for details. \u2039\u203a markdown.extensions.nl2br.Nl2BrExtension(**kwargs) \u00b6 Bases: Extension \u2039\u203a markdown.extensions.nl2br.Nl2BrExtension.extendMarkdown(md) \u00b6 Add a SubstituteTagInlineProcessor to Markdown.","title":"<code>nl2br</code>"},{"location":"reference/markdown/extensions/nl2br/#markdown.extensions.nl2br","text":"A Python-Markdown extension to treat newlines as hard breaks; like GitHub-flavored Markdown does. See the documentation for details.","title":"nl2br"},{"location":"reference/markdown/extensions/nl2br/#markdown.extensions.nl2br.Nl2BrExtension","text":"Bases: Extension","title":"Nl2BrExtension"},{"location":"reference/markdown/extensions/nl2br/#markdown.extensions.nl2br.Nl2BrExtension.extendMarkdown","text":"Add a SubstituteTagInlineProcessor to Markdown.","title":"extendMarkdown"},{"location":"reference/markdown/extensions/sane_lists/","text":"\u2039\u203a markdown.extensions.sane_lists \u00b6 Modify the behavior of Lists in Python-Markdown to act in a sane manor. See documentation for details. \u2039\u203a markdown.extensions.sane_lists.SaneOListProcessor(parser: blockparser.BlockParser) \u00b6 Bases: OListProcessor Override SIBLING_TAGS to not include ul and set LAZY_OL to False . \u2039\u203a markdown.extensions.sane_lists.SaneOListProcessor.SIBLING_TAGS class-attribute instance-attribute \u00b6 Exclude ul from list of siblings. Defined Value: SIBLING_TAGS = ['ol'] \u2039\u203a markdown.extensions.sane_lists.SaneOListProcessor.LAZY_OL class-attribute instance-attribute \u00b6 Disable lazy list behavior. Defined Value: LAZY_OL = False \u2039\u203a markdown.extensions.sane_lists.SaneUListProcessor(parser: blockparser.BlockParser) \u00b6 Bases: UListProcessor Override SIBLING_TAGS to not include ol . \u2039\u203a markdown.extensions.sane_lists.SaneUListProcessor.SIBLING_TAGS class-attribute instance-attribute \u00b6 Exclude ol from list of siblings. Defined Value: SIBLING_TAGS = ['ul'] \u2039\u203a markdown.extensions.sane_lists.SaneListExtension(**kwargs) \u00b6 Bases: Extension Add sane lists to Markdown. \u2039\u203a markdown.extensions.sane_lists.SaneListExtension.extendMarkdown(md) \u00b6 Override existing Processors.","title":"<code>sane_lists</code>"},{"location":"reference/markdown/extensions/sane_lists/#markdown.extensions.sane_lists","text":"Modify the behavior of Lists in Python-Markdown to act in a sane manor. See documentation for details.","title":"sane_lists"},{"location":"reference/markdown/extensions/sane_lists/#markdown.extensions.sane_lists.SaneOListProcessor","text":"Bases: OListProcessor Override SIBLING_TAGS to not include ul and set LAZY_OL to False .","title":"SaneOListProcessor"},{"location":"reference/markdown/extensions/sane_lists/#markdown.extensions.sane_lists.SaneOListProcessor.SIBLING_TAGS","text":"Exclude ul from list of siblings. Defined Value: SIBLING_TAGS = ['ol']","title":"SIBLING_TAGS"},{"location":"reference/markdown/extensions/sane_lists/#markdown.extensions.sane_lists.SaneOListProcessor.LAZY_OL","text":"Disable lazy list behavior. Defined Value: LAZY_OL = False","title":"LAZY_OL"},{"location":"reference/markdown/extensions/sane_lists/#markdown.extensions.sane_lists.SaneUListProcessor","text":"Bases: UListProcessor Override SIBLING_TAGS to not include ol .","title":"SaneUListProcessor"},{"location":"reference/markdown/extensions/sane_lists/#markdown.extensions.sane_lists.SaneUListProcessor.SIBLING_TAGS","text":"Exclude ol from list of siblings. Defined Value: SIBLING_TAGS = ['ul']","title":"SIBLING_TAGS"},{"location":"reference/markdown/extensions/sane_lists/#markdown.extensions.sane_lists.SaneListExtension","text":"Bases: Extension Add sane lists to Markdown.","title":"SaneListExtension"},{"location":"reference/markdown/extensions/sane_lists/#markdown.extensions.sane_lists.SaneListExtension.extendMarkdown","text":"Override existing Processors.","title":"extendMarkdown"},{"location":"reference/markdown/extensions/smarty/","text":"\u2039\u203a markdown.extensions.smarty \u00b6 Adds conversion of ASCII dashes, quotes and ellipses to their HTML entity equivalents. See the documentation for details. \u2039\u203a markdown.extensions.smarty.SubstituteTextPattern(pattern: str, replace: Sequence[int | str | etree.Element], md: Markdown) \u00b6 Bases: HtmlInlineProcessor \u2039\u203a markdown.extensions.smarty.SmartyExtension(**kwargs) \u00b6 Bases: Extension Add Smarty to Markdown. \u2039\u203a markdown.extensions.smarty.SmartyExtension.config instance-attribute \u00b6 Default configuration options. Defined Value: self.config = { 'smart_quotes': [True, 'Educate quotes'], 'smart_angled_quotes': [False, 'Educate angled quotes'], 'smart_dashes': [True, 'Educate dashes'], 'smart_ellipses': [True, 'Educate ellipses'], 'substitutions': [{}, 'Overwrite default substitutions'], }","title":"<code>smarty</code>"},{"location":"reference/markdown/extensions/smarty/#markdown.extensions.smarty","text":"Adds conversion of ASCII dashes, quotes and ellipses to their HTML entity equivalents. See the documentation for details.","title":"smarty"},{"location":"reference/markdown/extensions/smarty/#markdown.extensions.smarty.SubstituteTextPattern","text":"Bases: HtmlInlineProcessor","title":"SubstituteTextPattern"},{"location":"reference/markdown/extensions/smarty/#markdown.extensions.smarty.SmartyExtension","text":"Bases: Extension Add Smarty to Markdown.","title":"SmartyExtension"},{"location":"reference/markdown/extensions/smarty/#markdown.extensions.smarty.SmartyExtension.config","text":"Default configuration options. Defined Value: self.config = { 'smart_quotes': [True, 'Educate quotes'], 'smart_angled_quotes': [False, 'Educate angled quotes'], 'smart_dashes': [True, 'Educate dashes'], 'smart_ellipses': [True, 'Educate ellipses'], 'substitutions': [{}, 'Overwrite default substitutions'], }","title":"config"},{"location":"reference/markdown/extensions/tables/","text":"\u2039\u203a markdown.extensions.tables \u00b6 Added parsing of tables to Python-Markdown. See the documentation for details. \u2039\u203a markdown.extensions.tables.TableProcessor(parser: blockparser.BlockParser, config: dict[str, Any]) \u00b6 Bases: BlockProcessor Process Tables. \u2039\u203a markdown.extensions.tables.TableProcessor.test(parent: etree.Element, block: str) -> bool \u00b6 Ensure first two rows (column header and separator row) are valid table rows. Keep border check and separator row do avoid repeating the work. \u2039\u203a markdown.extensions.tables.TableProcessor.run(parent: etree.Element, blocks: list[str]) -> None \u00b6 Parse a table block and build table. \u2039\u203a markdown.extensions.tables.TableExtension(**kwargs) \u00b6 Bases: Extension Add tables to Markdown. \u2039\u203a markdown.extensions.tables.TableExtension.config instance-attribute \u00b6 Default configuration options. Defined Value: self.config = { 'use_align_attribute': [False, 'True to use align attribute instead of style.'], } \u2039\u203a markdown.extensions.tables.TableExtension.extendMarkdown(md) \u00b6 Add an instance of TableProcessor to BlockParser .","title":"<code>tables</code>"},{"location":"reference/markdown/extensions/tables/#markdown.extensions.tables","text":"Added parsing of tables to Python-Markdown. See the documentation for details.","title":"tables"},{"location":"reference/markdown/extensions/tables/#markdown.extensions.tables.TableProcessor","text":"Bases: BlockProcessor Process Tables.","title":"TableProcessor"},{"location":"reference/markdown/extensions/tables/#markdown.extensions.tables.TableProcessor.test","text":"Ensure first two rows (column header and separator row) are valid table rows. Keep border check and separator row do avoid repeating the work.","title":"test"},{"location":"reference/markdown/extensions/tables/#markdown.extensions.tables.TableProcessor.run","text":"Parse a table block and build table.","title":"run"},{"location":"reference/markdown/extensions/tables/#markdown.extensions.tables.TableExtension","text":"Bases: Extension Add tables to Markdown.","title":"TableExtension"},{"location":"reference/markdown/extensions/tables/#markdown.extensions.tables.TableExtension.config","text":"Default configuration options. Defined Value: self.config = { 'use_align_attribute': [False, 'True to use align attribute instead of style.'], }","title":"config"},{"location":"reference/markdown/extensions/tables/#markdown.extensions.tables.TableExtension.extendMarkdown","text":"Add an instance of TableProcessor to BlockParser .","title":"extendMarkdown"},{"location":"reference/markdown/extensions/toc/","text":"\u2039\u203a markdown.extensions.toc \u00b6 Add table of contents support to Python-Markdown. See the documentation for details. \u2039\u203a markdown.extensions.toc.slugify(value: str, separator: str, unicode: bool = False) -> str \u00b6 Slugify a string, to make it URL friendly. \u2039\u203a markdown.extensions.toc.slugify_unicode(value: str, separator: str) -> str \u00b6 Slugify a string, to make it URL friendly while preserving Unicode characters. \u2039\u203a markdown.extensions.toc.unique(id: str, ids: MutableSet[str]) -> str \u00b6 Ensure id is unique in set of ids. Append \u2018_1\u2019, \u2018_2\u2019\u2026 if not \u2039\u203a markdown.extensions.toc.get_name(el: etree.Element) -> str deprecated \u00b6 Deprecated Use render_inner_html and striptags instead. Get title name. \u2039\u203a markdown.extensions.toc.stashedHTML2text(text: str, md: Markdown, strip_entities: bool = True) -> str deprecated \u00b6 Deprecated Use run_postprocessors , render_inner_html and/or striptags instead. Extract raw HTML from stash, reduce to plain text and swap with placeholder. \u2039\u203a markdown.extensions.toc.unescape(text: str) -> str \u00b6 Unescape Markdown backslash escaped text. \u2039\u203a markdown.extensions.toc.strip_tags(text: str) -> str \u00b6 Strip HTML tags and return plain text. Note: HTML entities are unaffected. \u2039\u203a markdown.extensions.toc.escape_cdata(text: str) -> str \u00b6 Escape character data. \u2039\u203a markdown.extensions.toc.run_postprocessors(text: str, md: Markdown) -> str \u00b6 Run postprocessors from Markdown instance on text. \u2039\u203a markdown.extensions.toc.render_inner_html(el: etree.Element, md: Markdown) -> str \u00b6 Fully render inner html of an etree element as a string. \u2039\u203a markdown.extensions.toc.remove_fnrefs(root: etree.Element) -> etree.Element \u00b6 Remove footnote references from a copy of the element, if any are present. \u2039\u203a markdown.extensions.toc.nest_toc_tokens(toc_list) \u00b6 Given an unsorted list with errors and skips, return a nested one. [{'level': 1}, {'level': 2}] => [{'level': 1, 'children': [{'level': 2, 'children': []}]}] A wrong list is also converted: [{'level': 2}, {'level': 1}] => [{'level': 2, 'children': []}, {'level': 1, 'children': []}] \u2039\u203a markdown.extensions.toc.TocTreeprocessor(md: Markdown, config: dict[str, Any]) \u00b6 Bases: Treeprocessor Step through document and build TOC. \u2039\u203a markdown.extensions.toc.TocTreeprocessor.iterparent(node: etree.Element) -> Iterator[tuple[etree.Element, etree.Element]] \u00b6 Iterator wrapper to get allowed parent and child all at once. \u2039\u203a markdown.extensions.toc.TocTreeprocessor.replace_marker(root: etree.Element, elem: etree.Element) -> None \u00b6 Replace marker with elem. \u2039\u203a markdown.extensions.toc.TocTreeprocessor.set_level(elem: etree.Element) -> None \u00b6 Adjust header level according to base level. \u2039\u203a markdown.extensions.toc.TocTreeprocessor.build_toc_div(toc_list: list) -> etree.Element \u00b6 Return a string div given a toc list. \u2039\u203a markdown.extensions.toc.TocExtension(**kwargs) \u00b6 Bases: Extension \u2039\u203a markdown.extensions.toc.TocExtension.config instance-attribute \u00b6 Default configuration options. Defined Value: self.config = { 'marker': [ '[TOC]', 'Text to find and replace with Table of Contents. Set to an empty string to disable. ' 'Default: `[TOC]`.' ], 'title': [ '', 'Title to insert into TOC `<div>`. Default: an empty string.' ], 'title_class': [ 'toctitle', 'CSS class used for the title. Default: `toctitle`.' ], 'toc_class': [ 'toc', 'CSS class(es) used for the link. Default: `toclink`.' ], 'anchorlink': [ False, 'True if header should be a self link. Default: `False`.' ], 'anchorlink_class': [ 'toclink', 'CSS class(es) used for the link. Defaults: `toclink`.' ], 'permalink': [ 0, 'True or link text if a Sphinx-style permalink should be added. Default: `False`.' ], 'permalink_class': [ 'headerlink', 'CSS class(es) used for the link. Default: `headerlink`.' ], 'permalink_title': [ 'Permanent link', 'Title attribute of the permalink. Default: `Permanent link`.' ], 'permalink_leading': [ False, 'True if permalinks should be placed at start of the header, rather than end. Default: False.' ], 'baselevel': ['1', 'Base level for headers. Default: `1`.'], 'slugify': [ slugify, 'Function to generate anchors based on header text. Default: `slugify`.' ], 'separator': ['-', 'Word separator. Default: `-`.'], 'toc_depth': [ 6, 'Define the range of section levels to include in the Table of Contents. A single integer ' '(b) defines the bottom section level (<h1>..<hb>) only. A string consisting of two digits ' 'separated by a hyphen in between (`2-5`) defines the top (t) and the bottom (b) (<ht>..<hb>). ' 'Default: `6` (bottom).' ], } \u2039\u203a markdown.extensions.toc.TocExtension.extendMarkdown(md) \u00b6 Add TOC tree processor to Markdown.","title":"<code>toc</code>"},{"location":"reference/markdown/extensions/toc/#markdown.extensions.toc","text":"Add table of contents support to Python-Markdown. See the documentation for details.","title":"toc"},{"location":"reference/markdown/extensions/toc/#markdown.extensions.toc.slugify","text":"Slugify a string, to make it URL friendly.","title":"slugify"},{"location":"reference/markdown/extensions/toc/#markdown.extensions.toc.slugify_unicode","text":"Slugify a string, to make it URL friendly while preserving Unicode characters.","title":"slugify_unicode"},{"location":"reference/markdown/extensions/toc/#markdown.extensions.toc.unique","text":"Ensure id is unique in set of ids. Append \u2018_1\u2019, \u2018_2\u2019\u2026 if not","title":"unique"},{"location":"reference/markdown/extensions/toc/#markdown.extensions.toc.get_name","text":"Deprecated Use render_inner_html and striptags instead. Get title name.","title":"get_name"},{"location":"reference/markdown/extensions/toc/#markdown.extensions.toc.stashedHTML2text","text":"Deprecated Use run_postprocessors , render_inner_html and/or striptags instead. Extract raw HTML from stash, reduce to plain text and swap with placeholder.","title":"stashedHTML2text"},{"location":"reference/markdown/extensions/toc/#markdown.extensions.toc.unescape","text":"Unescape Markdown backslash escaped text.","title":"unescape"},{"location":"reference/markdown/extensions/toc/#markdown.extensions.toc.strip_tags","text":"Strip HTML tags and return plain text. Note: HTML entities are unaffected.","title":"strip_tags"},{"location":"reference/markdown/extensions/toc/#markdown.extensions.toc.escape_cdata","text":"Escape character data.","title":"escape_cdata"},{"location":"reference/markdown/extensions/toc/#markdown.extensions.toc.run_postprocessors","text":"Run postprocessors from Markdown instance on text.","title":"run_postprocessors"},{"location":"reference/markdown/extensions/toc/#markdown.extensions.toc.render_inner_html","text":"Fully render inner html of an etree element as a string.","title":"render_inner_html"},{"location":"reference/markdown/extensions/toc/#markdown.extensions.toc.remove_fnrefs","text":"Remove footnote references from a copy of the element, if any are present.","title":"remove_fnrefs"},{"location":"reference/markdown/extensions/toc/#markdown.extensions.toc.nest_toc_tokens","text":"Given an unsorted list with errors and skips, return a nested one. [{'level': 1}, {'level': 2}] => [{'level': 1, 'children': [{'level': 2, 'children': []}]}] A wrong list is also converted: [{'level': 2}, {'level': 1}] => [{'level': 2, 'children': []}, {'level': 1, 'children': []}]","title":"nest_toc_tokens"},{"location":"reference/markdown/extensions/toc/#markdown.extensions.toc.TocTreeprocessor","text":"Bases: Treeprocessor Step through document and build TOC.","title":"TocTreeprocessor"},{"location":"reference/markdown/extensions/toc/#markdown.extensions.toc.TocTreeprocessor.iterparent","text":"Iterator wrapper to get allowed parent and child all at once.","title":"iterparent"},{"location":"reference/markdown/extensions/toc/#markdown.extensions.toc.TocTreeprocessor.replace_marker","text":"Replace marker with elem.","title":"replace_marker"},{"location":"reference/markdown/extensions/toc/#markdown.extensions.toc.TocTreeprocessor.set_level","text":"Adjust header level according to base level.","title":"set_level"},{"location":"reference/markdown/extensions/toc/#markdown.extensions.toc.TocTreeprocessor.build_toc_div","text":"Return a string div given a toc list.","title":"build_toc_div"},{"location":"reference/markdown/extensions/toc/#markdown.extensions.toc.TocExtension","text":"Bases: Extension","title":"TocExtension"},{"location":"reference/markdown/extensions/toc/#markdown.extensions.toc.TocExtension.config","text":"Default configuration options. Defined Value: self.config = { 'marker': [ '[TOC]', 'Text to find and replace with Table of Contents. Set to an empty string to disable. ' 'Default: `[TOC]`.' ], 'title': [ '', 'Title to insert into TOC `<div>`. Default: an empty string.' ], 'title_class': [ 'toctitle', 'CSS class used for the title. Default: `toctitle`.' ], 'toc_class': [ 'toc', 'CSS class(es) used for the link. Default: `toclink`.' ], 'anchorlink': [ False, 'True if header should be a self link. Default: `False`.' ], 'anchorlink_class': [ 'toclink', 'CSS class(es) used for the link. Defaults: `toclink`.' ], 'permalink': [ 0, 'True or link text if a Sphinx-style permalink should be added. Default: `False`.' ], 'permalink_class': [ 'headerlink', 'CSS class(es) used for the link. Default: `headerlink`.' ], 'permalink_title': [ 'Permanent link', 'Title attribute of the permalink. Default: `Permanent link`.' ], 'permalink_leading': [ False, 'True if permalinks should be placed at start of the header, rather than end. Default: False.' ], 'baselevel': ['1', 'Base level for headers. Default: `1`.'], 'slugify': [ slugify, 'Function to generate anchors based on header text. Default: `slugify`.' ], 'separator': ['-', 'Word separator. Default: `-`.'], 'toc_depth': [ 6, 'Define the range of section levels to include in the Table of Contents. A single integer ' '(b) defines the bottom section level (<h1>..<hb>) only. A string consisting of two digits ' 'separated by a hyphen in between (`2-5`) defines the top (t) and the bottom (b) (<ht>..<hb>). ' 'Default: `6` (bottom).' ], }","title":"config"},{"location":"reference/markdown/extensions/toc/#markdown.extensions.toc.TocExtension.extendMarkdown","text":"Add TOC tree processor to Markdown.","title":"extendMarkdown"},{"location":"reference/markdown/extensions/wikilinks/","text":"\u2039\u203a markdown.extensions.wikilinks \u00b6 Converts [[WikiLinks]] to relative links. See the documentation for details. \u2039\u203a markdown.extensions.wikilinks.build_url(label: str, base: str, end: str) -> str \u00b6 Build a URL from the label, a base, and an end. \u2039\u203a markdown.extensions.wikilinks.WikiLinkExtension(**kwargs) \u00b6 Bases: Extension Add inline processor to Markdown. \u2039\u203a markdown.extensions.wikilinks.WikiLinkExtension.config instance-attribute \u00b6 Default configuration options. Defined Value: self.config = { 'base_url': ['/', 'String to append to beginning or URL.'], 'end_url': ['/', 'String to append to end of URL.'], 'html_class': ['wikilink', 'CSS hook. Leave blank for none.'], 'build_url': [build_url, 'Callable formats URL from label.'], } \u2039\u203a markdown.extensions.wikilinks.WikiLinksInlineProcessor(pattern: str, config: dict[str, Any]) \u00b6 Bases: InlineProcessor Build link from wikilink .","title":"<code>wikilinks</code>"},{"location":"reference/markdown/extensions/wikilinks/#markdown.extensions.wikilinks","text":"Converts [[WikiLinks]] to relative links. See the documentation for details.","title":"wikilinks"},{"location":"reference/markdown/extensions/wikilinks/#markdown.extensions.wikilinks.build_url","text":"Build a URL from the label, a base, and an end.","title":"build_url"},{"location":"reference/markdown/extensions/wikilinks/#markdown.extensions.wikilinks.WikiLinkExtension","text":"Bases: Extension Add inline processor to Markdown.","title":"WikiLinkExtension"},{"location":"reference/markdown/extensions/wikilinks/#markdown.extensions.wikilinks.WikiLinkExtension.config","text":"Default configuration options. Defined Value: self.config = { 'base_url': ['/', 'String to append to beginning or URL.'], 'end_url': ['/', 'String to append to end of URL.'], 'html_class': ['wikilink', 'CSS hook. Leave blank for none.'], 'build_url': [build_url, 'Callable formats URL from label.'], }","title":"config"},{"location":"reference/markdown/extensions/wikilinks/#markdown.extensions.wikilinks.WikiLinksInlineProcessor","text":"Bases: InlineProcessor Build link from wikilink .","title":"WikiLinksInlineProcessor"}]}