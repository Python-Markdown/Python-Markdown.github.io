{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python-Markdown \u00b6 This is a Python implementation of John Gruber\u2019s Markdown . It is almost completely compliant with the reference implementation, though there are a few very minor differences . See John\u2019s Syntax Documentation for the syntax rules. To get started, see the installation instructions , the library reference , and the command line interface . Goals \u00b6 The Python-Markdown project is developed with the following goals in mind: Maintain a Python library (with an optional CLI wrapper) suited to use in web server environments (never raise an exception, never write to stdout, etc.) as an implementation of the markdown parser that follows the syntax rules and the behavior of the original (markdown.pl) implementation as reasonably as possible (see differences for a few exceptions). Provide an Extension API which makes it possible to change and/or extend the behavior of the parser. Features \u00b6 In addition to the basic markdown syntax, Python-Markdown supports the following features: International Input Python-Markdown will accept input in any language supported by Unicode including bi-directional text. In fact the test suite includes documents written in Russian and Arabic. Extensions Various extensions are provided (including extra ) to change and/or extend the base syntax. Additionally, a public Extension API is available to write your own extensions. Output Formats Python-Markdown can output documents with either HTML or XHTML style tags. See the Library Reference for details. Command Line Interface In addition to being a Python Library, a command line script is available for your convenience. Differences \u00b6 While Python-Markdown strives to fully implement markdown as described in the syntax rules , the rules can be interpreted in different ways and different implementations occasionally vary in their behavior (see the Babelmark FAQ for some examples). Known and intentional differences found in Python-Markdown are summarized below: Middle-Word Emphasis Python-Markdown defaults to ignoring middle-word emphasis (and strong emphasis). In other words, some_long_filename.txt will not become some<em>long</em>filename.txt . This can be switched off if desired. See the Legacy EM Extension for details. Indentation/Tab Length The syntax rules clearly state that when a list item consists of multiple paragraphs, \u201ceach subsequent paragraph in a list item must be indented by either 4 spaces or one tab\u201d (emphasis added). However, many implementations do not enforce this rule and allow less than 4 spaces of indentation. The implementers of Python-Markdown consider it a bug to not enforce this rule. This applies to any block level elements nested in a list, including paragraphs, sub-lists, blockquotes, code blocks, etc. They must always be indented by at least four spaces (or one tab) for each level of nesting. In the event that one would prefer different behavior, tab_length can be set to whatever length is desired. Be warned however, as this will affect indentation for all aspects of the syntax (including root level code blocks). Alternatively, a third party extension may offer a solution that meets your needs. Consecutive Lists While the syntax rules are not clear on this, many implementations (including the original) do not end one list and start a second list when the list marker (asterisks, pluses, hyphens, and numbers) changes. For consistency, Python-Markdown maintains the same behavior with no plans to change in the foreseeable future. That said, the Sane List Extension is available to provide a less surprising behavior. Support \u00b6 You may report bugs, ask for help, and discuss various other issues on the bug tracker .","title":"Python-Markdown"},{"location":"#python-markdown","text":"This is a Python implementation of John Gruber\u2019s Markdown . It is almost completely compliant with the reference implementation, though there are a few very minor differences . See John\u2019s Syntax Documentation for the syntax rules. To get started, see the installation instructions , the library reference , and the command line interface .","title":"Python-Markdown"},{"location":"#goals","text":"The Python-Markdown project is developed with the following goals in mind: Maintain a Python library (with an optional CLI wrapper) suited to use in web server environments (never raise an exception, never write to stdout, etc.) as an implementation of the markdown parser that follows the syntax rules and the behavior of the original (markdown.pl) implementation as reasonably as possible (see differences for a few exceptions). Provide an Extension API which makes it possible to change and/or extend the behavior of the parser.","title":"Goals"},{"location":"#features","text":"In addition to the basic markdown syntax, Python-Markdown supports the following features: International Input Python-Markdown will accept input in any language supported by Unicode including bi-directional text. In fact the test suite includes documents written in Russian and Arabic. Extensions Various extensions are provided (including extra ) to change and/or extend the base syntax. Additionally, a public Extension API is available to write your own extensions. Output Formats Python-Markdown can output documents with either HTML or XHTML style tags. See the Library Reference for details. Command Line Interface In addition to being a Python Library, a command line script is available for your convenience.","title":"Features"},{"location":"#differences","text":"While Python-Markdown strives to fully implement markdown as described in the syntax rules , the rules can be interpreted in different ways and different implementations occasionally vary in their behavior (see the Babelmark FAQ for some examples). Known and intentional differences found in Python-Markdown are summarized below: Middle-Word Emphasis Python-Markdown defaults to ignoring middle-word emphasis (and strong emphasis). In other words, some_long_filename.txt will not become some<em>long</em>filename.txt . This can be switched off if desired. See the Legacy EM Extension for details. Indentation/Tab Length The syntax rules clearly state that when a list item consists of multiple paragraphs, \u201ceach subsequent paragraph in a list item must be indented by either 4 spaces or one tab\u201d (emphasis added). However, many implementations do not enforce this rule and allow less than 4 spaces of indentation. The implementers of Python-Markdown consider it a bug to not enforce this rule. This applies to any block level elements nested in a list, including paragraphs, sub-lists, blockquotes, code blocks, etc. They must always be indented by at least four spaces (or one tab) for each level of nesting. In the event that one would prefer different behavior, tab_length can be set to whatever length is desired. Be warned however, as this will affect indentation for all aspects of the syntax (including root level code blocks). Alternatively, a third party extension may offer a solution that meets your needs. Consecutive Lists While the syntax rules are not clear on this, many implementations (including the original) do not end one list and start a second list when the list marker (asterisks, pluses, hyphens, and numbers) changes. For consistency, Python-Markdown maintains the same behavior with no plans to change in the foreseeable future. That said, the Sane List Extension is available to provide a less surprising behavior.","title":"Differences"},{"location":"#support","text":"You may report bugs, ask for help, and discuss various other issues on the bug tracker .","title":"Support"},{"location":"authors/","text":"Primary Authors \u00b6 Waylan Limberg @waylan is the current maintainer of the code and has written much of the current code base, included a complete refactor of the core for version 2.0. He started out by authoring many of the available extensions and later was asked to join Yuri, where he began fixing numerous bugs, adding documentation and making general improvements to the existing code base. Dmitry Shachnev @mitya57 joined the team after providing a number of helpful patches and has been assisting with maintenance, reviewing pull requests and ticket triage. Isaac Muse @facelessuser joined the team after providing a number of helpful patches and has been assisting with maintenance, reviewing pull requests and ticket triage. Yuri Takteyev Yuri wrote most of the code found in version 1.x while procrastinating his Ph.D. Various pieces of his code still exist, most notably the basic structure. Manfed Stienstra Manfed wrote the original version of the script and is responsible for various parts of the existing code base. Artem Yunusov Artem, who as part of a 2008 GSoC project, refactored inline patterns, replaced the NanoDOM with ElementTree support and made various other improvements. David Wolever David refactored the extension API and made other improvements as he helped to integrate Markdown into Dr.Project. Other Contributors \u00b6 The incomplete list of individuals below have provided patches or otherwise contributed to the project prior to the project being hosted on GitHub. See the GitHub commit log for a list of recent contributors. We would like to thank everyone who has contributed to the project in any way. Eric Abrahamsen Jeff Balogh Sergej Chodarev Chris Clark Tiago Cogumbreiro Kjell Magne Fauske G. Clark Haynes Daniel Krech Steward Midwinter Jack Miller Neale Pickett Paul Stansifer John Szakmeister Malcolm Tredinnick Ben Wilson and many others who helped by reporting bugs","title":"Authors"},{"location":"authors/#primary-authors","text":"Waylan Limberg @waylan is the current maintainer of the code and has written much of the current code base, included a complete refactor of the core for version 2.0. He started out by authoring many of the available extensions and later was asked to join Yuri, where he began fixing numerous bugs, adding documentation and making general improvements to the existing code base. Dmitry Shachnev @mitya57 joined the team after providing a number of helpful patches and has been assisting with maintenance, reviewing pull requests and ticket triage. Isaac Muse @facelessuser joined the team after providing a number of helpful patches and has been assisting with maintenance, reviewing pull requests and ticket triage. Yuri Takteyev Yuri wrote most of the code found in version 1.x while procrastinating his Ph.D. Various pieces of his code still exist, most notably the basic structure. Manfed Stienstra Manfed wrote the original version of the script and is responsible for various parts of the existing code base. Artem Yunusov Artem, who as part of a 2008 GSoC project, refactored inline patterns, replaced the NanoDOM with ElementTree support and made various other improvements. David Wolever David refactored the extension API and made other improvements as he helped to integrate Markdown into Dr.Project.","title":"Primary Authors"},{"location":"authors/#other-contributors","text":"The incomplete list of individuals below have provided patches or otherwise contributed to the project prior to the project being hosted on GitHub. See the GitHub commit log for a list of recent contributors. We would like to thank everyone who has contributed to the project in any way. Eric Abrahamsen Jeff Balogh Sergej Chodarev Chris Clark Tiago Cogumbreiro Kjell Magne Fauske G. Clark Haynes Daniel Krech Steward Midwinter Jack Miller Neale Pickett Paul Stansifer John Szakmeister Malcolm Tredinnick Ben Wilson and many others who helped by reporting bugs","title":"Other Contributors"},{"location":"cli/","text":"Using Python-Markdown on the Command Line \u00b6 While Python-Markdown is primarily a python library, a command line script is included as well. While there are many other command line implementations of Markdown, you may not have them installed, or you may prefer to use Python-Markdown\u2019s various extensions. Generally, you will want to have the Markdown library fully installed on your system to run the command line script. See the Installation instructions for details. Python-Markdown\u2019s command line script takes advantage of Python\u2019s -m flag. Therefore, assuming the python executable is on your system path, use the following format: python -m markdown [ options ] [ args ] That will run the module as a script with the options and arguments provided. At its most basic usage, one would simply pass in a file name as the only argument: python -m markdown input_file.txt Piping input and output (on STDIN and STDOUT ) is fully supported as well. For example: echo \"Some **Markdown** text.\" | python -m markdown > output.html Use the --help option for a list all available options and arguments: python -m markdown --help If you don\u2019t want to call the python executable directly (using the -m flag), follow the instructions below to use a wrapper script: Setup \u00b6 Upon installation, the markdown_py script will have been copied to your Python \u201cScripts\u201d directory. Different systems require different methods to ensure that any files in the Python \u201cScripts\u201d directory are on your system path. Windows : Assuming a default install of Python on Windows, your \u201cScripts\u201d directory is most likely something like C:\\\\Python26\\Scripts . Verify the location of your \u201cScripts\u201d directory and add it to you system path. Calling markdown_py from the command line will call the wrapper batch file markdown_py.bat in the \"Scripts\" directory created during install. *nix (Linux, OSX, BSD, Unix, etc.): As each *nix distribution is different and we can\u2019t possibly document all of them here, we\u2019ll provide a few helpful pointers: Some systems will automatically install the script on your path. Try it and see if it works. Just run markdown_py from the command line. Other systems may maintain a separate \u201cScripts\u201d (\u201cbin\u201d) directory which you need to add to your path. Find it (check with your distribution) and either add it to your path or make a symbolic link to it from your path. If you are sure markdown_py is on your path, but it still is not being found, check the permissions of the file and make sure it is executable. As an alternative, you could just cd into the directory which contains the source distribution, and run it from there. However, remember that your markdown text files will not likely be in that directory, so it is much more convenient to have markdown_py on your path. Note Python-Markdown uses \"markdown_py\" as a script name because the Perl implementation has already taken the more obvious name \u201cmarkdown\u201d. Additionally, the default Python configuration on some systems would cause a script named \"markdown.py\" to fail by importing itself rather than the markdown library. Therefore, the script has been named \"markdown_py\" as a compromise. If you prefer a different name for the script on your system, it is suggested that you create a symbolic link to markdown_py with your preferred name. Usage \u00b6 To use markdown_py from the command line, run it as markdown_py input_file.txt or markdown_py input_file.txt > output_file.html For a complete list of options, run markdown_py --help Using Extensions \u00b6 To load a Python-Markdown extension from the command line use the -x (or --extension ) option. The extension module must be on your PYTHONPATH (see the Extension API for details). The extension can then be invoked by the name assigned to an entry point or using Python\u2019s dot notation to point to an extension For example, to load an extension with the assigned entry point name myext , run the following command: python -m markdown -x myext input.txt And to load an extension with Python\u2019s dot notation: python -m markdown -x path.to.module:MyExtClass input.txt To load multiple extensions, specify an -x option for each extension: python -m markdown -x myext -x path.to.module:MyExtClass input.txt If the extension supports configuration options (see the documentation for the extension you are using to determine what settings it supports, if any), you can pass them in as well: python -m markdown -x myext -c config.yml input.txt The -c (or --extension_configs ) option accepts a file name. The file must be in either the YAML or JSON format and contain YAML or JSON data that would map to a Python Dictionary in the format required by the extension_configs keyword of the markdown.Markdown class. Therefore, the file config.yaml referenced in the above example might look like this: myext : option1 : 'value1' option2 : True Similarly, a JSON configuration file might look like this: { \"myext\" : { \"option1\" : \"value1\" , \"option2\" : \"value2\" } } Note that while the --extension_configs option does specify the myext extension, you still need to load the extension with the -x option, or the configuration for that extension will be ignored. Further, if an extension requires a value that cannot be parsed in JSON (for example a reference to a function), one has to use a YAML configuration file. The --extension_configs option will only support YAML configuration files if PyYAML is installed on your system. JSON should work with no additional dependencies. The format of your configuration file is automatically detected.","title":"Command Line"},{"location":"cli/#using-python-markdown-on-the-command-line","text":"While Python-Markdown is primarily a python library, a command line script is included as well. While there are many other command line implementations of Markdown, you may not have them installed, or you may prefer to use Python-Markdown\u2019s various extensions. Generally, you will want to have the Markdown library fully installed on your system to run the command line script. See the Installation instructions for details. Python-Markdown\u2019s command line script takes advantage of Python\u2019s -m flag. Therefore, assuming the python executable is on your system path, use the following format: python -m markdown [ options ] [ args ] That will run the module as a script with the options and arguments provided. At its most basic usage, one would simply pass in a file name as the only argument: python -m markdown input_file.txt Piping input and output (on STDIN and STDOUT ) is fully supported as well. For example: echo \"Some **Markdown** text.\" | python -m markdown > output.html Use the --help option for a list all available options and arguments: python -m markdown --help If you don\u2019t want to call the python executable directly (using the -m flag), follow the instructions below to use a wrapper script:","title":"Using Python-Markdown on the Command Line"},{"location":"cli/#setup","text":"Upon installation, the markdown_py script will have been copied to your Python \u201cScripts\u201d directory. Different systems require different methods to ensure that any files in the Python \u201cScripts\u201d directory are on your system path. Windows : Assuming a default install of Python on Windows, your \u201cScripts\u201d directory is most likely something like C:\\\\Python26\\Scripts . Verify the location of your \u201cScripts\u201d directory and add it to you system path. Calling markdown_py from the command line will call the wrapper batch file markdown_py.bat in the \"Scripts\" directory created during install. *nix (Linux, OSX, BSD, Unix, etc.): As each *nix distribution is different and we can\u2019t possibly document all of them here, we\u2019ll provide a few helpful pointers: Some systems will automatically install the script on your path. Try it and see if it works. Just run markdown_py from the command line. Other systems may maintain a separate \u201cScripts\u201d (\u201cbin\u201d) directory which you need to add to your path. Find it (check with your distribution) and either add it to your path or make a symbolic link to it from your path. If you are sure markdown_py is on your path, but it still is not being found, check the permissions of the file and make sure it is executable. As an alternative, you could just cd into the directory which contains the source distribution, and run it from there. However, remember that your markdown text files will not likely be in that directory, so it is much more convenient to have markdown_py on your path. Note Python-Markdown uses \"markdown_py\" as a script name because the Perl implementation has already taken the more obvious name \u201cmarkdown\u201d. Additionally, the default Python configuration on some systems would cause a script named \"markdown.py\" to fail by importing itself rather than the markdown library. Therefore, the script has been named \"markdown_py\" as a compromise. If you prefer a different name for the script on your system, it is suggested that you create a symbolic link to markdown_py with your preferred name.","title":"Setup"},{"location":"cli/#usage","text":"To use markdown_py from the command line, run it as markdown_py input_file.txt or markdown_py input_file.txt > output_file.html For a complete list of options, run markdown_py --help","title":"Usage"},{"location":"cli/#using-extensions","text":"To load a Python-Markdown extension from the command line use the -x (or --extension ) option. The extension module must be on your PYTHONPATH (see the Extension API for details). The extension can then be invoked by the name assigned to an entry point or using Python\u2019s dot notation to point to an extension For example, to load an extension with the assigned entry point name myext , run the following command: python -m markdown -x myext input.txt And to load an extension with Python\u2019s dot notation: python -m markdown -x path.to.module:MyExtClass input.txt To load multiple extensions, specify an -x option for each extension: python -m markdown -x myext -x path.to.module:MyExtClass input.txt If the extension supports configuration options (see the documentation for the extension you are using to determine what settings it supports, if any), you can pass them in as well: python -m markdown -x myext -c config.yml input.txt The -c (or --extension_configs ) option accepts a file name. The file must be in either the YAML or JSON format and contain YAML or JSON data that would map to a Python Dictionary in the format required by the extension_configs keyword of the markdown.Markdown class. Therefore, the file config.yaml referenced in the above example might look like this: myext : option1 : 'value1' option2 : True Similarly, a JSON configuration file might look like this: { \"myext\" : { \"option1\" : \"value1\" , \"option2\" : \"value2\" } } Note that while the --extension_configs option does specify the myext extension, you still need to load the extension with the -x option, or the configuration for that extension will be ignored. Further, if an extension requires a value that cannot be parsed in JSON (for example a reference to a function), one has to use a YAML configuration file. The --extension_configs option will only support YAML configuration files if PyYAML is installed on your system. JSON should work with no additional dependencies. The format of your configuration file is automatically detected.","title":"Using Extensions"},{"location":"contributing/","text":"Contributing to Python-Markdown \u00b6 The following is a set of guidelines for contributing to Python-Markdown and its extensions, which are hosted in the Python-Markdown Organization on GitHub. These are mostly guidelines, not rules. Use your best judgment, and feel free to propose changes to this document in a pull request. Code of Conduct \u00b6 This project and everyone participating in it is governed by the Python-Markdown Code of Conduct . By participating, you are expected to uphold this code. Please report unacceptable behavior to markdown@freewisdom.org . Project Organization \u00b6 The core Python-Markdown code base and any built-in extensions are hosted in the Python-Markdown/markdown project on GitHub. Other extensions maintained by the Python-Markdown project may be hosted as separate repositories in the Python-Markdown Organization on GitHub and must follow best practices for third-party extensions. The Python-Markdown/markdown project is organized as follows: Branch master should generally be stable and release-ready at all times. Version branches should be used for bug-fixes back-ported to the most recent PATCH release. No other branches should be created. Any other branches which exist are preserved for historical reasons only. Issues \u00b6 Feature requests, bug reports, usage questions, and other issues can all be raised on the GitHub issue tracker . When describing issues try to phrase your ticket in terms of the behavior you think needs to change rather than the code you think needs to change. Make sure you\u2019re running the latest version of Python-Markdown before reporting an issue. Search the issue list first for related items. Be sure to check closed issues and pull requests. GitHub\u2019s search only checks open issues by default. You may want to check the syntax rules and/or Babelmark to confirm that your expectations align with the rules and/or other implementations of Markdown. If reporting a syntax bug, you must provide the minimal input which exhibits the behavior, the actual output and the output you expected. All three items must be provided as textual code blocks (screen-shots are not helpful). It may also be helpful to point to the syntax rules which specifically address the area of concern. Feature requests will often be closed with a recommendation that they be implemented as third party extensions outside of the core Python-Markdown library. Keeping new feature requests implemented as third party extensions allows us to keep the maintenance overhead of Python-Markdown to a minimum, so that the focus can be on continued stability, bug fixes, and documentation. Closing an issue does not necessarily mean the end of a discussion. If you believe your issue has been closed incorrectly, explain why and we\u2019ll consider if it needs to be reopened. Pull Requests \u00b6 A pull request often represents the start of a discussion, and does not necessarily need to be the final, finished submission. In fact, if you discover an issue and intend to provide a fix for it, there is no need to open an issue first. You can report the issue and provide the fix together in a pull request. All pull requests should be made from your personal fork of the library hosted in your personal GitHub account. Do not create branches on the Python-Markdown/markdown project for pull requests. All pull requests should be implemented in a new branch with a unique name. Remember that if you have an outstanding pull request, pushing new commits to the related branch of your GitHub repository will also automatically update the pull request. It may help to review GitHub\u2019s documentation on Creating a pull request from a fork . If you are providing a fix for a previously reported issue, you must reference the issue in your commit message. Be sure to prefix the reference with one of GitHub\u2019s action words which will automatically close the issue when the pull request is merged. For example, fixes #42 and closes #42 would be acceptable, whereas ref #42 would not. Of course, if merging a pull request should not cause an issue to be closed, then the action word should not be included when referencing that issue. Before being accepted, each pull request must include the applicable code, new tests of all new features, updated tests for any changed features, documentation updates, and an appropriate update to the release notes. All changes must follow the applicable style guides. Failure to meet any one of the requirements is likely to delay any serious consideration of your pull request and may even cause it to be closed. Of course, if you are in the early stages of development, you may include a note in the pull request acknowledging that it is incomplete along with a request for feedback. Pull requests will generally not be accepted if any tests are failing. Therefore, it is recommended that you run the tests before submitting your pull request. After making a pull request, check the Travis build status in the GitHub interface to ensure that all tests are running as expected. If any checks fail, you may push additional commits to your branch. GitHub will add those commits to the pull request and rerun the checks. Style Guides \u00b6 In an effort to maintain consistency, Python-Markdown adheres to the following style guides in its code and documentation. A pull request may be rejected if it fails to match the relevant style guides. Code Style Guide \u00b6 Except as noted below, all pull requests should follow Python\u2019s standard PEP8 Style Guide and are run through Flake8 to ensure that the style guide is followed. Legacy code which does not follow the guidelines should only be updated if and when other changes (bug fix, feature addition, etc.) are being made to that section of code. While new features should be given names that follow modern Python naming conventions, existing names should be preserved to avoid backward incompatible changes. Line length is limited to a maximum of 119 characters. When a line of code does not fit within the line length limit, continuation lines should align elements wrapped inside parentheses, brackets and braces using a hanging indent . When using a hanging indent there should be no arguments on the first line and further indentation should be used to clearly distinguish itself as a continuation line. The closing parenthesis, bracket or brace should be on a line by itself and should line up under the first character of the line that starts the multi-line construct. my_list = [ 1 , 2 , 3 , 4 , 5 , 6 , ] result = some_function_that_takes_arguments ( 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , ) When the conditional part of an if -statement is long enough to require that it be written across multiple lines, extra indentation should be included on the conditional continuation line. if ( this_is_one_thing and that_is_another_thing ): do_something () Documentation Style Guide \u00b6 Documentation should be in American English. The tone of the documentation should be simple, plain, objective and well-balanced where possible. Keep paragraphs reasonably short. With the exception of code blocks, limit line length to 79 characters. You may want to use your editor\u2019s tools to automatically hard wrap lines of text. Don\u2019t use abbreviations such as \u2018e.g.\u2019 but instead use the long form, such as \u2018For example\u2019. The documentation is built from the Markdown source files in the docs directory by the MkDocs static site generator. In addition to the basic Markdown syntax, the following extensions are supported: extra , admonition , smarty , codehilite , and toc . There are a few conventions you should follow when working on the documentation. Headers \u00b6 Headers should use the hash style. For example: ## Some important topic The underline style should not be used. Don\u2019t do this: Some important topic ==================== Links \u00b6 Links should always use the reference style, with the referenced hyperlinks kept at the end of the document. Here is a link to [ some other thing ][ other-thing ]. More text... [ other-thing ]: http://example.com/other/thing This style helps keep the documentation source consistent and readable. If you are linking to another document within Python-Markdown\u2019s documentation, you should use a relative link, and link to the .md suffix. If applicable, it is preferred that the link includes a hash fragment pointing to the specific section of the page. For example: [ authentication ]: reference.md#Markdown Linking in this style ensures that the links work when browsing the documentation on GitHub. If your Markdown editor makes links clickable, they will work there as well. When the documentation is built, these links will be converted into regular links which point to the built HTML pages. Notes and Warnings \u00b6 If you want to draw attention to a note or warning, use the syntax defined in Python-Markdown\u2019s Admonition Extension : !!! note This is the content of the note. Commit Message Style Guide \u00b6 Use the present tense (\u201cAdd feature\u201d not \u201cAdded feature\u201d). Use the imperative mood (\u201cMove item to\u2026\u201d not \u201cMoves item to\u2026\u201d). Limit the first line to 72 characters or less. Reference issues and pull requests liberally after the first line. Include a summary of the changes/additions made without replicating the content of the documentation or release notes. This is where an explanation of the choices made should be found. References to issues and pull requests should only provide the context in which a choice was made. However, the commit should be able to stand on its own. Development Environment \u00b6 To start developing on Python-Markdown is it best to create a fork of the project on GitHub. After cloning your fork to your local system, you will want to configure a remote that points to the upstream repository so that you can sync changes made in the original repository with your fork. It is recommended that all development be done from within a Python virtual environment , which isolates any experimental code from the general system. To create a virtual environment, use the following command from the root of the local working copy of your GitHub fork: virtualenv venv That creates a virtual environment which is contained in the venv directory within your local working copy. Note that the repository is configured so that git will ignore any files within a directory named venv or ENV for this very reason. On Posix systems (Linux, BSD, MacOS, etc.), use the following command to activate the environment: source venv/bin/activate On Windows, use this command instead: venv/Scripts/activate See the User Guide for more information on using virtual environments. To be able to run the Markdown library directly while working on it, install the working copy into the environment in Development Mode after activating the virtual environment for the first time: pip install --editable . Now any saved changes will immediately be available within the virtual environment. You can run the command line script with the following command: python -m markdown And you can directly run the tests with: python -m unittest discover tests Note Some tests require the PyTidyLib library, which depends on the HTML Tidy library. If you do not have PyTidyLib installed, the tests which depend upon it will be skipped. Given the difficulty in installing the HTML Tidy library on many systems, you may choose to leave both libraries uninstalled and depend on the Travis server to run those tests when you submit a pull request. The above setup will only run tests against the code in one version of Python. However, Python-Markdown supports multiple versions of Python. Therefore, a tox configuration is included in the repository, which includes test environments for all supported Python versions, a Flake8 test environment, and a spellchecker for the documentation. While it is generally fine to leave those tests for the Travis server to run when a pull request is submitted, for more advanced changes, you may want to run those tests locally. To do so, simply install tox: pip install tox Then, to run all configured test environments, simply call the command tox with no arguments. See help ( tox -h ) for more options. Note The tox environments expect that some dependencies are already installed on your system. For example, by default, any Python version specific environment will fail if that version of Python is not installed. Additionally, the tox environments assume that the HTML Tidy library is installed and may fail when attempting to install PyTidyLib if it is not. Finally, the spellchecker environment requires aspell and the aspell-en dictionary to be installed. Unfortunately, installing those dependencies may differ significantly from system to system and is outside the scope of this guide. See Also Python-Markdown provides test tools which simply testing Markdown syntax. Understanding those tools will often help in understanding why a test may be failing. Versions \u00b6 Python-Markdown follows Semantic Versioning and uses the MAJOR.MINOR.PATCH[.dev#|a#|b#|rc#] format for identifying releases. The status of the master branch should always be identified in the __version_info__ tuple defined in markdown/__init__.py . The contents of that tuple will automatically be converted into a normalized version which conforms to PEP 440 . An invalid __version_info__ tuple will raise an error, preventing the library from running and the package from building. Version Status \u00b6 A MAJOR version is in development status when the MINOR version is 0 , the PATCH version is 0 , and the version includes a dev segment. A MINOR version is in development status when the MINOR version is not 0 , the PATCH version is 0 , and the version includes a dev segment. At all other times, the code is considered stable and release-ready. MAJOR and MINOR releases may or may not get pre-releases (alpha, beta, release candidate, etc.) at the discretion of the project maintainers. Version Workflow \u00b6 Bug fixes may be merged from a pull request to the master branch at any time so long as all tests pass, including one or more new tests which would have failed prior to the change. New features and backward incompatible changes may only be merged to the master branch when the MAJOR and/or MINOR version is in development status pursuant to Semantic Versioning . A separate commit to the master branch should be made to bump up the MAJOR and/or MINOR version and set development status. Only then will any pull requests implementing new features or backward incompatible changes be accepted. If a bug fix is deemed to be important and the master branch is in development status, a back-port of the fix should be committed to a version branch. If the appropriate version branch does not exist, then it should be created and a pull request back-porting the fix made against that branch. The version branch should be named with the most recently released MINOR version. For example, if the master branch is at 3.1.dev0 and the most recent MINOR release was 3.0.4 , then the version branch would be named 3.0 and any releases from that branch would increment the PATCH version only ( 3.0.5 , 3.0.6 \u2026). Release Process \u00b6 When a new release is being prepared, the release manager should follow the following steps: Verify that all outstanding issues and pull requests related to the release have been resolved. Confirm that the release notes and change log have been updated and indicate the date of the new release. Update the version defined in markdown/__init__.py . Build a local copy of the documentation, browse through the pages and confirm that no obvious issues exist with the documentation. Create a pull request with a commit message in the following format: Bump version to X . X . X After all checks (Travis, etc.) have passed, merge the pull request. Create a git tag with the new version as the tag name and push to the Python-Markdown/markdown repository. Deploy the release to PyPI with the command make deploy . Deploy an update to the documentation using MkDocs . The following example assumes that local clones of the Python-Markdown/markdown and Python-Markdown/Python-Markdown.github.io repositories are in sibling directories named markdown and Python-Markdown.github.io respectively. cd Python - Markdown . github . io mkdocs gh - deploy --config-file ../markdown/mkdocs.yml --remote-branch master Issue and Pull Request Labels \u00b6 Below are the labels used to track and manages issues and pull requests. The labels are loosely grouped by their purpose, but it is not necessary for every issue to have a label from every group, and an issue may have more than one label from the same group. Type of Issue or Pull Request \u00b6 Label name Description bug Bug report. feature Feature request. support Support request. process Discussions regarding policies and development process. Category of Issue or Pull Request \u00b6 Label name Description core Related to the core parser code. extension Related to one or more of the included extensions. docs Related to the project documentation. Status of Issue \u00b6 Label name Description more-info-needed More information needs to be provided. needs-confirmation The alleged behavior needs to be confirmed. needs-decision A decision needs to be made regarding request. confirmed Confirmed bug report or approved feature request. someday-maybe Approved low priority request. duplicate The issue has been previously reported. wontfix The issue will not be fixed for the stated reasons. invalid Invalid report (user error, upstream issue, etc). 3rd-party Should be implemented as a third party extension. Status of Pull Request \u00b6 Label name Description work-in-progress A partial solution. More changes will be coming. needs-review Needs to be reviewed and/or approved. requires-changes Awaiting updates after a review. approved The pull request is ready to be merged. rejected The pull request is rejected for the stated reasons. /* GitHub Label Styles */ code.label { color: #000000; font-weight: 600; line-height: 15px; display: inline-block; padding: 4px 6px; } code.bug { background-color: #c45b46; } code.feature { background-color: #7b17d8; color: #ffffff; } code.support { background-color: #efbe62; } code.process { background-color: #eec9ff; } code.core { background-color: #0b02e1; color: #ffffff; } code.extension { background-color: #709ad8; } code.docs { background-color: #b2ffeb; } code.approved { background-color: #beed6d; } code.low { background-color: #dddddd; } code.pending { background-color: #f0f49a; } code.rejected { background-color: #f7c7be; }","title":"Contributing to Python-Markdown"},{"location":"contributing/#contributing-to-python-markdown","text":"The following is a set of guidelines for contributing to Python-Markdown and its extensions, which are hosted in the Python-Markdown Organization on GitHub. These are mostly guidelines, not rules. Use your best judgment, and feel free to propose changes to this document in a pull request.","title":"Contributing to Python-Markdown"},{"location":"contributing/#code-of-conduct","text":"This project and everyone participating in it is governed by the Python-Markdown Code of Conduct . By participating, you are expected to uphold this code. Please report unacceptable behavior to markdown@freewisdom.org .","title":"Code of Conduct"},{"location":"contributing/#project-organization","text":"The core Python-Markdown code base and any built-in extensions are hosted in the Python-Markdown/markdown project on GitHub. Other extensions maintained by the Python-Markdown project may be hosted as separate repositories in the Python-Markdown Organization on GitHub and must follow best practices for third-party extensions. The Python-Markdown/markdown project is organized as follows: Branch master should generally be stable and release-ready at all times. Version branches should be used for bug-fixes back-ported to the most recent PATCH release. No other branches should be created. Any other branches which exist are preserved for historical reasons only.","title":"Project Organization"},{"location":"contributing/#issues","text":"Feature requests, bug reports, usage questions, and other issues can all be raised on the GitHub issue tracker . When describing issues try to phrase your ticket in terms of the behavior you think needs to change rather than the code you think needs to change. Make sure you\u2019re running the latest version of Python-Markdown before reporting an issue. Search the issue list first for related items. Be sure to check closed issues and pull requests. GitHub\u2019s search only checks open issues by default. You may want to check the syntax rules and/or Babelmark to confirm that your expectations align with the rules and/or other implementations of Markdown. If reporting a syntax bug, you must provide the minimal input which exhibits the behavior, the actual output and the output you expected. All three items must be provided as textual code blocks (screen-shots are not helpful). It may also be helpful to point to the syntax rules which specifically address the area of concern. Feature requests will often be closed with a recommendation that they be implemented as third party extensions outside of the core Python-Markdown library. Keeping new feature requests implemented as third party extensions allows us to keep the maintenance overhead of Python-Markdown to a minimum, so that the focus can be on continued stability, bug fixes, and documentation. Closing an issue does not necessarily mean the end of a discussion. If you believe your issue has been closed incorrectly, explain why and we\u2019ll consider if it needs to be reopened.","title":"Issues"},{"location":"contributing/#pull-requests","text":"A pull request often represents the start of a discussion, and does not necessarily need to be the final, finished submission. In fact, if you discover an issue and intend to provide a fix for it, there is no need to open an issue first. You can report the issue and provide the fix together in a pull request. All pull requests should be made from your personal fork of the library hosted in your personal GitHub account. Do not create branches on the Python-Markdown/markdown project for pull requests. All pull requests should be implemented in a new branch with a unique name. Remember that if you have an outstanding pull request, pushing new commits to the related branch of your GitHub repository will also automatically update the pull request. It may help to review GitHub\u2019s documentation on Creating a pull request from a fork . If you are providing a fix for a previously reported issue, you must reference the issue in your commit message. Be sure to prefix the reference with one of GitHub\u2019s action words which will automatically close the issue when the pull request is merged. For example, fixes #42 and closes #42 would be acceptable, whereas ref #42 would not. Of course, if merging a pull request should not cause an issue to be closed, then the action word should not be included when referencing that issue. Before being accepted, each pull request must include the applicable code, new tests of all new features, updated tests for any changed features, documentation updates, and an appropriate update to the release notes. All changes must follow the applicable style guides. Failure to meet any one of the requirements is likely to delay any serious consideration of your pull request and may even cause it to be closed. Of course, if you are in the early stages of development, you may include a note in the pull request acknowledging that it is incomplete along with a request for feedback. Pull requests will generally not be accepted if any tests are failing. Therefore, it is recommended that you run the tests before submitting your pull request. After making a pull request, check the Travis build status in the GitHub interface to ensure that all tests are running as expected. If any checks fail, you may push additional commits to your branch. GitHub will add those commits to the pull request and rerun the checks.","title":"Pull Requests"},{"location":"contributing/#style-guides","text":"In an effort to maintain consistency, Python-Markdown adheres to the following style guides in its code and documentation. A pull request may be rejected if it fails to match the relevant style guides.","title":"Style Guides"},{"location":"contributing/#code-style-guide","text":"Except as noted below, all pull requests should follow Python\u2019s standard PEP8 Style Guide and are run through Flake8 to ensure that the style guide is followed. Legacy code which does not follow the guidelines should only be updated if and when other changes (bug fix, feature addition, etc.) are being made to that section of code. While new features should be given names that follow modern Python naming conventions, existing names should be preserved to avoid backward incompatible changes. Line length is limited to a maximum of 119 characters. When a line of code does not fit within the line length limit, continuation lines should align elements wrapped inside parentheses, brackets and braces using a hanging indent . When using a hanging indent there should be no arguments on the first line and further indentation should be used to clearly distinguish itself as a continuation line. The closing parenthesis, bracket or brace should be on a line by itself and should line up under the first character of the line that starts the multi-line construct. my_list = [ 1 , 2 , 3 , 4 , 5 , 6 , ] result = some_function_that_takes_arguments ( 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , ) When the conditional part of an if -statement is long enough to require that it be written across multiple lines, extra indentation should be included on the conditional continuation line. if ( this_is_one_thing and that_is_another_thing ): do_something ()","title":"Code Style Guide"},{"location":"contributing/#documentation-style-guide","text":"Documentation should be in American English. The tone of the documentation should be simple, plain, objective and well-balanced where possible. Keep paragraphs reasonably short. With the exception of code blocks, limit line length to 79 characters. You may want to use your editor\u2019s tools to automatically hard wrap lines of text. Don\u2019t use abbreviations such as \u2018e.g.\u2019 but instead use the long form, such as \u2018For example\u2019. The documentation is built from the Markdown source files in the docs directory by the MkDocs static site generator. In addition to the basic Markdown syntax, the following extensions are supported: extra , admonition , smarty , codehilite , and toc . There are a few conventions you should follow when working on the documentation.","title":"Documentation Style Guide"},{"location":"contributing/#headers","text":"Headers should use the hash style. For example: ## Some important topic The underline style should not be used. Don\u2019t do this: Some important topic ====================","title":"Headers"},{"location":"contributing/#links","text":"Links should always use the reference style, with the referenced hyperlinks kept at the end of the document. Here is a link to [ some other thing ][ other-thing ]. More text... [ other-thing ]: http://example.com/other/thing This style helps keep the documentation source consistent and readable. If you are linking to another document within Python-Markdown\u2019s documentation, you should use a relative link, and link to the .md suffix. If applicable, it is preferred that the link includes a hash fragment pointing to the specific section of the page. For example: [ authentication ]: reference.md#Markdown Linking in this style ensures that the links work when browsing the documentation on GitHub. If your Markdown editor makes links clickable, they will work there as well. When the documentation is built, these links will be converted into regular links which point to the built HTML pages.","title":"Links"},{"location":"contributing/#notes-and-warnings","text":"If you want to draw attention to a note or warning, use the syntax defined in Python-Markdown\u2019s Admonition Extension : !!! note This is the content of the note.","title":"Notes and Warnings"},{"location":"contributing/#commit-message-style-guide","text":"Use the present tense (\u201cAdd feature\u201d not \u201cAdded feature\u201d). Use the imperative mood (\u201cMove item to\u2026\u201d not \u201cMoves item to\u2026\u201d). Limit the first line to 72 characters or less. Reference issues and pull requests liberally after the first line. Include a summary of the changes/additions made without replicating the content of the documentation or release notes. This is where an explanation of the choices made should be found. References to issues and pull requests should only provide the context in which a choice was made. However, the commit should be able to stand on its own.","title":"Commit Message Style Guide"},{"location":"contributing/#development-environment","text":"To start developing on Python-Markdown is it best to create a fork of the project on GitHub. After cloning your fork to your local system, you will want to configure a remote that points to the upstream repository so that you can sync changes made in the original repository with your fork. It is recommended that all development be done from within a Python virtual environment , which isolates any experimental code from the general system. To create a virtual environment, use the following command from the root of the local working copy of your GitHub fork: virtualenv venv That creates a virtual environment which is contained in the venv directory within your local working copy. Note that the repository is configured so that git will ignore any files within a directory named venv or ENV for this very reason. On Posix systems (Linux, BSD, MacOS, etc.), use the following command to activate the environment: source venv/bin/activate On Windows, use this command instead: venv/Scripts/activate See the User Guide for more information on using virtual environments. To be able to run the Markdown library directly while working on it, install the working copy into the environment in Development Mode after activating the virtual environment for the first time: pip install --editable . Now any saved changes will immediately be available within the virtual environment. You can run the command line script with the following command: python -m markdown And you can directly run the tests with: python -m unittest discover tests Note Some tests require the PyTidyLib library, which depends on the HTML Tidy library. If you do not have PyTidyLib installed, the tests which depend upon it will be skipped. Given the difficulty in installing the HTML Tidy library on many systems, you may choose to leave both libraries uninstalled and depend on the Travis server to run those tests when you submit a pull request. The above setup will only run tests against the code in one version of Python. However, Python-Markdown supports multiple versions of Python. Therefore, a tox configuration is included in the repository, which includes test environments for all supported Python versions, a Flake8 test environment, and a spellchecker for the documentation. While it is generally fine to leave those tests for the Travis server to run when a pull request is submitted, for more advanced changes, you may want to run those tests locally. To do so, simply install tox: pip install tox Then, to run all configured test environments, simply call the command tox with no arguments. See help ( tox -h ) for more options. Note The tox environments expect that some dependencies are already installed on your system. For example, by default, any Python version specific environment will fail if that version of Python is not installed. Additionally, the tox environments assume that the HTML Tidy library is installed and may fail when attempting to install PyTidyLib if it is not. Finally, the spellchecker environment requires aspell and the aspell-en dictionary to be installed. Unfortunately, installing those dependencies may differ significantly from system to system and is outside the scope of this guide. See Also Python-Markdown provides test tools which simply testing Markdown syntax. Understanding those tools will often help in understanding why a test may be failing.","title":"Development Environment"},{"location":"contributing/#versions","text":"Python-Markdown follows Semantic Versioning and uses the MAJOR.MINOR.PATCH[.dev#|a#|b#|rc#] format for identifying releases. The status of the master branch should always be identified in the __version_info__ tuple defined in markdown/__init__.py . The contents of that tuple will automatically be converted into a normalized version which conforms to PEP 440 . An invalid __version_info__ tuple will raise an error, preventing the library from running and the package from building.","title":"Versions"},{"location":"contributing/#version-status","text":"A MAJOR version is in development status when the MINOR version is 0 , the PATCH version is 0 , and the version includes a dev segment. A MINOR version is in development status when the MINOR version is not 0 , the PATCH version is 0 , and the version includes a dev segment. At all other times, the code is considered stable and release-ready. MAJOR and MINOR releases may or may not get pre-releases (alpha, beta, release candidate, etc.) at the discretion of the project maintainers.","title":"Version Status"},{"location":"contributing/#version-workflow","text":"Bug fixes may be merged from a pull request to the master branch at any time so long as all tests pass, including one or more new tests which would have failed prior to the change. New features and backward incompatible changes may only be merged to the master branch when the MAJOR and/or MINOR version is in development status pursuant to Semantic Versioning . A separate commit to the master branch should be made to bump up the MAJOR and/or MINOR version and set development status. Only then will any pull requests implementing new features or backward incompatible changes be accepted. If a bug fix is deemed to be important and the master branch is in development status, a back-port of the fix should be committed to a version branch. If the appropriate version branch does not exist, then it should be created and a pull request back-porting the fix made against that branch. The version branch should be named with the most recently released MINOR version. For example, if the master branch is at 3.1.dev0 and the most recent MINOR release was 3.0.4 , then the version branch would be named 3.0 and any releases from that branch would increment the PATCH version only ( 3.0.5 , 3.0.6 \u2026).","title":"Version Workflow"},{"location":"contributing/#release-process","text":"When a new release is being prepared, the release manager should follow the following steps: Verify that all outstanding issues and pull requests related to the release have been resolved. Confirm that the release notes and change log have been updated and indicate the date of the new release. Update the version defined in markdown/__init__.py . Build a local copy of the documentation, browse through the pages and confirm that no obvious issues exist with the documentation. Create a pull request with a commit message in the following format: Bump version to X . X . X After all checks (Travis, etc.) have passed, merge the pull request. Create a git tag with the new version as the tag name and push to the Python-Markdown/markdown repository. Deploy the release to PyPI with the command make deploy . Deploy an update to the documentation using MkDocs . The following example assumes that local clones of the Python-Markdown/markdown and Python-Markdown/Python-Markdown.github.io repositories are in sibling directories named markdown and Python-Markdown.github.io respectively. cd Python - Markdown . github . io mkdocs gh - deploy --config-file ../markdown/mkdocs.yml --remote-branch master","title":"Release Process"},{"location":"contributing/#issue-and-pull-request-labels","text":"Below are the labels used to track and manages issues and pull requests. The labels are loosely grouped by their purpose, but it is not necessary for every issue to have a label from every group, and an issue may have more than one label from the same group.","title":"Issue and Pull Request Labels"},{"location":"contributing/#type-of-issue-or-pull-request","text":"Label name Description bug Bug report. feature Feature request. support Support request. process Discussions regarding policies and development process.","title":"Type of Issue or Pull Request"},{"location":"contributing/#category-of-issue-or-pull-request","text":"Label name Description core Related to the core parser code. extension Related to one or more of the included extensions. docs Related to the project documentation.","title":"Category of Issue or Pull Request"},{"location":"contributing/#status-of-issue","text":"Label name Description more-info-needed More information needs to be provided. needs-confirmation The alleged behavior needs to be confirmed. needs-decision A decision needs to be made regarding request. confirmed Confirmed bug report or approved feature request. someday-maybe Approved low priority request. duplicate The issue has been previously reported. wontfix The issue will not be fixed for the stated reasons. invalid Invalid report (user error, upstream issue, etc). 3rd-party Should be implemented as a third party extension.","title":"Status of Issue"},{"location":"contributing/#status-of-pull-request","text":"Label name Description work-in-progress A partial solution. More changes will be coming. needs-review Needs to be reviewed and/or approved. requires-changes Awaiting updates after a review. approved The pull request is ready to be merged. rejected The pull request is rejected for the stated reasons. /* GitHub Label Styles */ code.label { color: #000000; font-weight: 600; line-height: 15px; display: inline-block; padding: 4px 6px; } code.bug { background-color: #c45b46; } code.feature { background-color: #7b17d8; color: #ffffff; } code.support { background-color: #efbe62; } code.process { background-color: #eec9ff; } code.core { background-color: #0b02e1; color: #ffffff; } code.extension { background-color: #709ad8; } code.docs { background-color: #b2ffeb; } code.approved { background-color: #beed6d; } code.low { background-color: #dddddd; } code.pending { background-color: #f0f49a; } code.rejected { background-color: #f7c7be; }","title":"Status of Pull Request"},{"location":"install/","text":"Installing Python-Markdown \u00b6 The Easy Way \u00b6 The easiest way to install Python-Markdown is simply to type the following command from the command line: pip install markdown That\u2019s it! You\u2019re ready to use Python-Markdown. Enjoy! For more detailed instructions on installing Python packages, see the Installing Packages tutorial in the Python Packaging User Guide . Using the Git Repository \u00b6 If you\u2019re the type that likes to live on the edge, you may want to keep up with the latest additions and bug fixes in the repository between releases. Python-Markdown is maintained in a Git repository on GitHub.com. To get a copy of Python-Markdown from the repository do the following from the command line: pip install git+https://github.com/Python-Markdown/markdown.git","title":"Installation"},{"location":"install/#installing-python-markdown","text":"","title":"Installing Python-Markdown"},{"location":"install/#the-easy-way","text":"The easiest way to install Python-Markdown is simply to type the following command from the command line: pip install markdown That\u2019s it! You\u2019re ready to use Python-Markdown. Enjoy! For more detailed instructions on installing Python packages, see the Installing Packages tutorial in the Python Packaging User Guide .","title":"The Easy Way"},{"location":"install/#git","text":"If you\u2019re the type that likes to live on the edge, you may want to keep up with the latest additions and bug fixes in the repository between releases. Python-Markdown is maintained in a Git repository on GitHub.com. To get a copy of Python-Markdown from the repository do the following from the command line: pip install git+https://github.com/Python-Markdown/markdown.git","title":"Using the Git Repository"},{"location":"reference/","text":"Using Markdown as a Python Library \u00b6 First and foremost, Python-Markdown is intended to be a python library module used by various projects to convert Markdown syntax into HTML. The Basics \u00b6 To use markdown as a module: import markdown html = markdown . markdown ( your_text_string ) The Details \u00b6 Python-Markdown provides two public functions ( markdown.markdown and markdown.markdownFromFile ) both of which wrap the public class markdown.Markdown . If you\u2019re processing one document at a time, these functions will serve your needs. However, if you need to process multiple documents, it may be advantageous to create a single instance of the markdown.Markdown class and pass multiple documents through it. If you do use a single instance though, make sure to call the reset method appropriately ( see below ). markdown.markdown(text [, **kwargs]) \u00b6 The following options are available on the markdown.markdown function: text The source Unicode string. (required) Important Python-Markdown expects Unicode as input (although some simple ASCII strings may work) and returns output as Unicode. Do not pass encoded strings to it! If your input is encoded, (e.g. as UTF-8), it is your responsibility to decode it. For example: input_file = codecs . open ( \"some_file.txt\" , mode = \"r\" , encoding = \"utf-8\" ) text = input_file . read () html = markdown . markdown ( text ) If you want to write the output to disk, you must encode it yourself: output_file = codecs . open ( \"some_file.html\" , \"w\" , encoding = \"utf-8\" , errors = \"xmlcharrefreplace\" ) output_file . write ( html ) extensions A list of extensions. Python-Markdown provides an API for third parties to write extensions to the parser adding their own additions or changes to the syntax. A few commonly used extensions are shipped with the markdown library. See the extension documentation for a list of available extensions. The list of extensions may contain instances of extensions and/or strings of extension names. extensions = [ MyExtClass (), 'myext' , 'path.to.my.ext:MyExtClass' ] Note The preferred method is to pass in an instance of an extension. Strings should only be used when it is impossible to import the Extension Class directly (from the command line or in a template). When passing in extension instances, each class instance must be a subclass of markdown.extensions.Extension and any configuration options should be defined when initiating the class instance rather than using the extension_configs keyword. For example: from markdown.extensions import Extension class MyExtClass ( Extension ): # define your extension here... markdown . markdown ( text , extensions = [ MyExtClass ( option = 'value' )]) If an extension name is provided as a string, the string must either be the registered entry point of any installed extension or the importable path using Python\u2019s dot notation. See the documentation specific to an extension for the string name assigned to an extension as an entry point. Simply include the defined name as a string in the list of extensions. For example, if an extension has the name myext assigned to it and the extension is properly installed, then do the following: markdown . markdown ( text , extensions = [ 'myext' ]) If an extension does not have a registered entry point, Python\u2019s dot notation may be used instead. The extension must be installed as a Python module on your PYTHONPATH. Generally, a class should be specified in the name. The class must be at the end of the name and be separated by a colon from the module. Therefore, if you were to import the class like this: from path.to.module import MyExtClass Then load the extension as follows: markdown . markdown ( text , extensions = [ 'path.to.module:MyExtClass' ]) If only one extension is defined within a module and the module includes a makeExtension function which returns an instance of the extension, then the class name is not necessary. For example, in that case one could do extensions=['path.to.module'] . Check the documentation for a specific extension to determine if it supports this feature. When loading an extension by name (as a string), you can only pass in configuration settings to the extension by using the extension_configs keyword. See Also See the documentation of the Extension API for assistance in creating extensions. extension_configs A dictionary of configuration settings for extensions. Any configuration settings will only be passed to extensions loaded by name (as a string). When loading extensions as class instances, pass the configuration settings directly to the class when initializing it. Note The preferred method is to pass in an instance of an extension, which does not require use of the extension_configs keyword at all. See the extensions keyword for details. The dictionary of configuration settings must be in the following format: extension_configs = { 'extension_name_1' : { 'option_1' : 'value_1' , 'option_2' : 'value_2' }, 'extension_name_2' : { 'option_1' : 'value_1' } } When specifying the extension name, be sure to use the exact same string as is used in the extensions keyword to load the extension. Otherwise, the configuration settings will not be applied to the extension. In other words, you cannot use the entry point in on place and Python dot notation in the other. While both may be valid for a given extension, they will not be recognized as being the same extension by Markdown. See the documentation specific to the extension you are using for help in specifying configuration settings for that extension. output_format : Format of output. Supported formats are: \"xhtml\" : Outputs XHTML style tags. Default . \"html5\" : Outputs HTML style tags. The values can be in either lowercase or uppercase. tab_length : Length of tabs in the source. Default: 4 markdown.markdownFromFile (**kwargs) \u00b6 With a few exceptions, markdown.markdownFromFile accepts the same options as markdown.markdown . It does not accept a text (or Unicode) string. Instead, it accepts the following required options: input (required) The source text file. input may be set to one of three options: a string which contains a path to a readable file on the file system, a readable file-like object, or None (default) which will read from stdin . output The target which output is written to. output may be set to one of three options: a string which contains a path to a writable file on the file system, a writable file-like object, or None (default) which will write to stdout . encoding The encoding of the source text file. Defaults to \"utf-8\" . The same encoding will always be used for input and output. The xmlcharrefreplace error handler is used when encoding the output. Note This is the only place that decoding and encoding of Unicode takes place in Python-Markdown. If this rather naive solution does not meet your specific needs, it is suggested that you write your own code to handle your encoding/decoding needs. markdown.Markdown([**kwargs]) \u00b6 The same options are available when initializing the markdown.Markdown class as on the markdown.markdown function, except that the class does not accept a source text string on initialization. Rather, the source text string must be passed to one of two instance methods. Warning Instances of the markdown.Markdown class are only thread safe within the thread they were created in. A single instance should not be accessed from multiple threads. Markdown.convert(source) \u00b6 The source text must meet the same requirements as the text argument of the markdown.markdown function. You should also use this method if you want to process multiple strings without creating a new instance of the class for each string. md = markdown . Markdown () html1 = md . convert ( text1 ) html2 = md . convert ( text2 ) Depending on which options and/or extensions are being used, the parser may need its state reset between each call to convert , otherwise performance can degrade drastically: html1 = md . convert ( text1 ) md . reset () html2 = md . convert ( text2 ) To make this easier, you can also chain calls to reset together: html3 = md . reset () . convert ( text3 ) Markdown.convertFile(**kwargs) \u00b6 The arguments of this method are identical to the arguments of the same name on the markdown.markdownFromFile function ( input , output , and encoding ). As with the convert method, this method should be used to process multiple files without creating a new instance of the class for each document. State may need to be reset between each call to convertFile as is the case with convert .","title":"Library Reference"},{"location":"reference/#using-markdown-as-a-python-library","text":"First and foremost, Python-Markdown is intended to be a python library module used by various projects to convert Markdown syntax into HTML.","title":"Using Markdown as a Python Library"},{"location":"reference/#the-basics","text":"To use markdown as a module: import markdown html = markdown . markdown ( your_text_string )","title":"The Basics"},{"location":"reference/#the-details","text":"Python-Markdown provides two public functions ( markdown.markdown and markdown.markdownFromFile ) both of which wrap the public class markdown.Markdown . If you\u2019re processing one document at a time, these functions will serve your needs. However, if you need to process multiple documents, it may be advantageous to create a single instance of the markdown.Markdown class and pass multiple documents through it. If you do use a single instance though, make sure to call the reset method appropriately ( see below ).","title":"The Details"},{"location":"reference/#markdown","text":"The following options are available on the markdown.markdown function: text The source Unicode string. (required) Important Python-Markdown expects Unicode as input (although some simple ASCII strings may work) and returns output as Unicode. Do not pass encoded strings to it! If your input is encoded, (e.g. as UTF-8), it is your responsibility to decode it. For example: input_file = codecs . open ( \"some_file.txt\" , mode = \"r\" , encoding = \"utf-8\" ) text = input_file . read () html = markdown . markdown ( text ) If you want to write the output to disk, you must encode it yourself: output_file = codecs . open ( \"some_file.html\" , \"w\" , encoding = \"utf-8\" , errors = \"xmlcharrefreplace\" ) output_file . write ( html ) extensions A list of extensions. Python-Markdown provides an API for third parties to write extensions to the parser adding their own additions or changes to the syntax. A few commonly used extensions are shipped with the markdown library. See the extension documentation for a list of available extensions. The list of extensions may contain instances of extensions and/or strings of extension names. extensions = [ MyExtClass (), 'myext' , 'path.to.my.ext:MyExtClass' ] Note The preferred method is to pass in an instance of an extension. Strings should only be used when it is impossible to import the Extension Class directly (from the command line or in a template). When passing in extension instances, each class instance must be a subclass of markdown.extensions.Extension and any configuration options should be defined when initiating the class instance rather than using the extension_configs keyword. For example: from markdown.extensions import Extension class MyExtClass ( Extension ): # define your extension here... markdown . markdown ( text , extensions = [ MyExtClass ( option = 'value' )]) If an extension name is provided as a string, the string must either be the registered entry point of any installed extension or the importable path using Python\u2019s dot notation. See the documentation specific to an extension for the string name assigned to an extension as an entry point. Simply include the defined name as a string in the list of extensions. For example, if an extension has the name myext assigned to it and the extension is properly installed, then do the following: markdown . markdown ( text , extensions = [ 'myext' ]) If an extension does not have a registered entry point, Python\u2019s dot notation may be used instead. The extension must be installed as a Python module on your PYTHONPATH. Generally, a class should be specified in the name. The class must be at the end of the name and be separated by a colon from the module. Therefore, if you were to import the class like this: from path.to.module import MyExtClass Then load the extension as follows: markdown . markdown ( text , extensions = [ 'path.to.module:MyExtClass' ]) If only one extension is defined within a module and the module includes a makeExtension function which returns an instance of the extension, then the class name is not necessary. For example, in that case one could do extensions=['path.to.module'] . Check the documentation for a specific extension to determine if it supports this feature. When loading an extension by name (as a string), you can only pass in configuration settings to the extension by using the extension_configs keyword. See Also See the documentation of the Extension API for assistance in creating extensions. extension_configs A dictionary of configuration settings for extensions. Any configuration settings will only be passed to extensions loaded by name (as a string). When loading extensions as class instances, pass the configuration settings directly to the class when initializing it. Note The preferred method is to pass in an instance of an extension, which does not require use of the extension_configs keyword at all. See the extensions keyword for details. The dictionary of configuration settings must be in the following format: extension_configs = { 'extension_name_1' : { 'option_1' : 'value_1' , 'option_2' : 'value_2' }, 'extension_name_2' : { 'option_1' : 'value_1' } } When specifying the extension name, be sure to use the exact same string as is used in the extensions keyword to load the extension. Otherwise, the configuration settings will not be applied to the extension. In other words, you cannot use the entry point in on place and Python dot notation in the other. While both may be valid for a given extension, they will not be recognized as being the same extension by Markdown. See the documentation specific to the extension you are using for help in specifying configuration settings for that extension. output_format : Format of output. Supported formats are: \"xhtml\" : Outputs XHTML style tags. Default . \"html5\" : Outputs HTML style tags. The values can be in either lowercase or uppercase. tab_length : Length of tabs in the source. Default: 4","title":"markdown.markdown(text [, **kwargs])"},{"location":"reference/#markdownFromFile","text":"With a few exceptions, markdown.markdownFromFile accepts the same options as markdown.markdown . It does not accept a text (or Unicode) string. Instead, it accepts the following required options: input (required) The source text file. input may be set to one of three options: a string which contains a path to a readable file on the file system, a readable file-like object, or None (default) which will read from stdin . output The target which output is written to. output may be set to one of three options: a string which contains a path to a writable file on the file system, a writable file-like object, or None (default) which will write to stdout . encoding The encoding of the source text file. Defaults to \"utf-8\" . The same encoding will always be used for input and output. The xmlcharrefreplace error handler is used when encoding the output. Note This is the only place that decoding and encoding of Unicode takes place in Python-Markdown. If this rather naive solution does not meet your specific needs, it is suggested that you write your own code to handle your encoding/decoding needs.","title":"markdown.markdownFromFile (**kwargs)"},{"location":"reference/#Markdown","text":"The same options are available when initializing the markdown.Markdown class as on the markdown.markdown function, except that the class does not accept a source text string on initialization. Rather, the source text string must be passed to one of two instance methods. Warning Instances of the markdown.Markdown class are only thread safe within the thread they were created in. A single instance should not be accessed from multiple threads.","title":"markdown.Markdown([**kwargs])"},{"location":"reference/#convert","text":"The source text must meet the same requirements as the text argument of the markdown.markdown function. You should also use this method if you want to process multiple strings without creating a new instance of the class for each string. md = markdown . Markdown () html1 = md . convert ( text1 ) html2 = md . convert ( text2 ) Depending on which options and/or extensions are being used, the parser may need its state reset between each call to convert , otherwise performance can degrade drastically: html1 = md . convert ( text1 ) md . reset () html2 = md . convert ( text2 ) To make this easier, you can also chain calls to reset together: html3 = md . reset () . convert ( text3 )","title":"Markdown.convert(source)"},{"location":"reference/#convertFile","text":"The arguments of this method are identical to the arguments of the same name on the markdown.markdownFromFile function ( input , output , and encoding ). As with the convert method, this method should be used to process multiple files without creating a new instance of the class for each document. State may need to be reset between each call to convertFile as is the case with convert .","title":"Markdown.convertFile(**kwargs)"},{"location":"test_tools/","text":"Test Tools \u00b6 Python-Markdown provides some testing tools which simplify testing actual Markdown output against expected output. The tools are built on the Python standard library unittest . Therefore, no additional libraries are required. While Python-Markdown uses the tools for its own tests, they were designed and built so that third party extensions could use them as well. Therefore, the tools are importable from markdown.test_tools . The test tools include two different unittest.TestCase subclasses: markdown.test_tools.TestCase and markdown.test_tools.LegacyTestCase . markdown.test_tools.TestCase \u00b6 The markdown.test_tools.TestCase class is a unittest.TestCase subclass with a few additional helpers to make testing Markdown output easier. Properties default_kwargs : A dict of keywords to pass to Markdown for each test. The defaults can be overridden on individual tests. Methods assertMarkdownRenders : accepts the source text, the expected output, and any keywords to pass to Markdown. The default_kwargs defined on the class are used except where overridden by keyword arguments. The output and expected output are passed to TestCase.assertMultiLineEqual . An AssertionError is raised with a diff if the actual output does not equal the expected output. dedent : Dedent triple-quoted strings. In all other respects, markdown.test_tools.TestCase behaves as unittest.TestCase . In fact, assertMarkdownRenders tests could be mixed with other unittest style tests within the same test class. An example Markdown test might look like this: from markdown.test_tools import TestCase class TestHr ( TestCase ): def test_hr_before_paragraph ( self ): self . assertMarkdownRenders ( # The Markdown source text used as input self . dedent ( \"\"\" *** An HR followed by a paragraph with no blank line. \"\"\" ), # The expected HTML output self . dedent ( \"\"\" <hr> <p>An HR followed by a paragraph with no blank line.</p> \"\"\" ), # Other keyword arguments to pass to `markdown.markdown` output_format = 'html' ) markdown.test_tools.LegacyTestCase \u00b6 In the past Python-Markdown exclusively used file-based tests. Many of those tests still exist in Python-Markdown\u2019s test suite, including the test files from the reference implementation ( markdown.pl ) and PHP Markdown . Each test consists of a matching pair of text and HTML files. The text file contains a snippet of Markdown source text formatted for a specific syntax feature and the HTML file contains the expected HTML output of that snippet. When the test suite is run, each text file is run through Markdown and the output is compared with the HTML file as a separate unit test. When a test fails, the error report includes a diff of the expected output compared to the actual output to easily identify any problems. A separate markdown.test_tools.LegacyTestCase subclass must be created for each directory of test files. Various properties can be defined within the subclass to point to a directory of text-based test files and define various behaviors/defaults for those tests. The following properties are supported: location : A path to the directory of test files. An absolute path is preferred. exclude : A list of tests to skip. Each test name should comprise of a file name without an extension. normalize : A boolean value indicating if the HTML should be normalized. Default: False . Note: Normalization of HTML requires that PyTidyLib be installed on the system. If PyTidyLib is not installed and normalize is set to True , then the test will be skipped, regardless of any other settings. input_ext : A string containing the file extension of input files. Default: .txt . output_ext : A string containing the file extension of expected output files. Default: html . default_kwargs : A markdown.test_tools.Kwargs instance which stores the default set of keyword arguments for all test files in the directory. In addition, properties can be defined for each individual set of test files within the directory. The property should be given the name of the file without the file extension. Any spaces and dashes in the file name should be replaced with underscores. The value of the property should be a markdown.test_tools.Kwargs instance which contains the keyword arguments that should be passed to markdown.markdown for that test file. The keyword arguments will \u201cupdate\u201d the default_kwargs . When the class instance is created during a test run, it will walk the given directory and create a separate unit test for each set of test files using the naming scheme: test_filename . One unit test will be run for each set of input and output files. The definition of an example set of tests might look like this: from markdown.test_tools import LegacyTestCase , Kwargs import os # Get location of this file and use to find text file dirs. parent_test_dir = os . path . abspath ( os . path . dirname ( __file__ )) class TestFoo ( LegacyTestCase ): # Define location of text file directory. In this case, the directory is # named \"foo\" and is in the same parent directory as this file. location = os . path . join ( parent_test_dir , 'foo' ) # Define default keyword arguments. In this case, unless specified # differently, all tests should use the output format \"html\". default_kwargs = Kwargs ( output_format = 'html' ) # The \"xhtml\" test should override the output format and use \"xhtml\". xhtml = Kwargs ( output_format = 'xhtml' ) # The \"toc\" test should use the \"toc\" extension with a custom permalink # setting. toc = Kwargs ( extensions = [ 'markdown.extensions.toc' ], extension_configs = { 'markdown.extensions.toc' : { 'permalink' : \"[link]\" }} ) Note that in the above example, the text file directory may contain many more text-based test files than xhtml ( xhtml.txt and xhtml.html ) and toc ( toc.txt and toc.html ). As long as each set of files exists as a pair, a test will be created and run for each of them. Only the xhtml and toc tests needed to be specifically identified as they had specific, non-default settings which needed to be defined. Running Python-Markdown\u2019s Tests \u00b6 As all of the tests for the markdown library are unit tests, standard unittest methods of calling tests can be used. For example, to run all of Python-Markdown\u2019s tests, from the root of the git repository, run the following command: python -m unittest discover tests That simple command will search everything in the tests directory and it\u2019s sub-directories and run all unittest tests that it finds, including unittest.TestCase , markdown.test_tools.TestCase , and markdown.test_tools.LegacyTestCase subclasses. Normal unittest discovery rules apply. See Also See the Contributing Guide for instructions on setting up a development environment for running the tests.","title":"Test Tools"},{"location":"test_tools/#test-tools","text":"Python-Markdown provides some testing tools which simplify testing actual Markdown output against expected output. The tools are built on the Python standard library unittest . Therefore, no additional libraries are required. While Python-Markdown uses the tools for its own tests, they were designed and built so that third party extensions could use them as well. Therefore, the tools are importable from markdown.test_tools . The test tools include two different unittest.TestCase subclasses: markdown.test_tools.TestCase and markdown.test_tools.LegacyTestCase .","title":"Test Tools"},{"location":"test_tools/#markdowntest_toolstestcase","text":"The markdown.test_tools.TestCase class is a unittest.TestCase subclass with a few additional helpers to make testing Markdown output easier. Properties default_kwargs : A dict of keywords to pass to Markdown for each test. The defaults can be overridden on individual tests. Methods assertMarkdownRenders : accepts the source text, the expected output, and any keywords to pass to Markdown. The default_kwargs defined on the class are used except where overridden by keyword arguments. The output and expected output are passed to TestCase.assertMultiLineEqual . An AssertionError is raised with a diff if the actual output does not equal the expected output. dedent : Dedent triple-quoted strings. In all other respects, markdown.test_tools.TestCase behaves as unittest.TestCase . In fact, assertMarkdownRenders tests could be mixed with other unittest style tests within the same test class. An example Markdown test might look like this: from markdown.test_tools import TestCase class TestHr ( TestCase ): def test_hr_before_paragraph ( self ): self . assertMarkdownRenders ( # The Markdown source text used as input self . dedent ( \"\"\" *** An HR followed by a paragraph with no blank line. \"\"\" ), # The expected HTML output self . dedent ( \"\"\" <hr> <p>An HR followed by a paragraph with no blank line.</p> \"\"\" ), # Other keyword arguments to pass to `markdown.markdown` output_format = 'html' )","title":"markdown.test_tools.TestCase"},{"location":"test_tools/#markdowntest_toolslegacytestcase","text":"In the past Python-Markdown exclusively used file-based tests. Many of those tests still exist in Python-Markdown\u2019s test suite, including the test files from the reference implementation ( markdown.pl ) and PHP Markdown . Each test consists of a matching pair of text and HTML files. The text file contains a snippet of Markdown source text formatted for a specific syntax feature and the HTML file contains the expected HTML output of that snippet. When the test suite is run, each text file is run through Markdown and the output is compared with the HTML file as a separate unit test. When a test fails, the error report includes a diff of the expected output compared to the actual output to easily identify any problems. A separate markdown.test_tools.LegacyTestCase subclass must be created for each directory of test files. Various properties can be defined within the subclass to point to a directory of text-based test files and define various behaviors/defaults for those tests. The following properties are supported: location : A path to the directory of test files. An absolute path is preferred. exclude : A list of tests to skip. Each test name should comprise of a file name without an extension. normalize : A boolean value indicating if the HTML should be normalized. Default: False . Note: Normalization of HTML requires that PyTidyLib be installed on the system. If PyTidyLib is not installed and normalize is set to True , then the test will be skipped, regardless of any other settings. input_ext : A string containing the file extension of input files. Default: .txt . output_ext : A string containing the file extension of expected output files. Default: html . default_kwargs : A markdown.test_tools.Kwargs instance which stores the default set of keyword arguments for all test files in the directory. In addition, properties can be defined for each individual set of test files within the directory. The property should be given the name of the file without the file extension. Any spaces and dashes in the file name should be replaced with underscores. The value of the property should be a markdown.test_tools.Kwargs instance which contains the keyword arguments that should be passed to markdown.markdown for that test file. The keyword arguments will \u201cupdate\u201d the default_kwargs . When the class instance is created during a test run, it will walk the given directory and create a separate unit test for each set of test files using the naming scheme: test_filename . One unit test will be run for each set of input and output files. The definition of an example set of tests might look like this: from markdown.test_tools import LegacyTestCase , Kwargs import os # Get location of this file and use to find text file dirs. parent_test_dir = os . path . abspath ( os . path . dirname ( __file__ )) class TestFoo ( LegacyTestCase ): # Define location of text file directory. In this case, the directory is # named \"foo\" and is in the same parent directory as this file. location = os . path . join ( parent_test_dir , 'foo' ) # Define default keyword arguments. In this case, unless specified # differently, all tests should use the output format \"html\". default_kwargs = Kwargs ( output_format = 'html' ) # The \"xhtml\" test should override the output format and use \"xhtml\". xhtml = Kwargs ( output_format = 'xhtml' ) # The \"toc\" test should use the \"toc\" extension with a custom permalink # setting. toc = Kwargs ( extensions = [ 'markdown.extensions.toc' ], extension_configs = { 'markdown.extensions.toc' : { 'permalink' : \"[link]\" }} ) Note that in the above example, the text file directory may contain many more text-based test files than xhtml ( xhtml.txt and xhtml.html ) and toc ( toc.txt and toc.html ). As long as each set of files exists as a pair, a test will be created and run for each of them. Only the xhtml and toc tests needed to be specifically identified as they had specific, non-default settings which needed to be defined.","title":"markdown.test_tools.LegacyTestCase"},{"location":"test_tools/#running-python-markdowns-tests","text":"As all of the tests for the markdown library are unit tests, standard unittest methods of calling tests can be used. For example, to run all of Python-Markdown\u2019s tests, from the root of the git repository, run the following command: python -m unittest discover tests That simple command will search everything in the tests directory and it\u2019s sub-directories and run all unittest tests that it finds, including unittest.TestCase , markdown.test_tools.TestCase , and markdown.test_tools.LegacyTestCase subclasses. Normal unittest discovery rules apply. See Also See the Contributing Guide for instructions on setting up a development environment for running the tests.","title":"Running Python-Markdown's Tests"},{"location":"change_log/","text":"Python-Markdown Change Log \u00b6 Feb 12, 2020: Released version 3.2.1 (a bug-fix release). The name property in toc_tokens from the TOC extension now escapes HTML special characters ( < , > , and & ). Feb 7, 2020: Released version 3.2 ( Notes ). May 20, 2019: Released version 3.1.1 (a bug-fix release). Fixed import failure in setup.py when the source directory is not on sys.path (#823). Prefer public packaging module to pkg_resources\u2019 private copy of it (#825). Mar 25, 2019: Released version 3.1 ( Notes ). Sept 28, 2018: Released version 3.0.1 (a bug-fix release). Brought back the version and version_info variables (#709). Added support for hexadecimal HTML entities (#712). Sept 21, 2018: Released version 3.0 ( Notes ). Jan 4, 2018: Released version 2.6.11 (a bug-fix release). Added a new BACKLINK-TITLE option to the footnote extension so that non-English users can provide a custom title to back links (see #610). Dec 7, 2017: Released version 2.6.10 (a documentation update). Aug 17, 2017: Released version 2.6.9 (a bug-fix release). Jan 25, 2017: Released version 2.6.8 (a bug-fix release). Sept 23, 2016: Released version 2.6.7 (a bug-fix release). Mar 20, 2016: Released version 2.6.6 (a bug-fix release). Nov 24, 2015: Released version 2.6.5 (a bug-fix release). Nov 6, 2015: Released version 2.6.4 (a bug-fix release). Oct 26, 2015: Released version 2.6.3 (a bug-fix release). Apr 20, 2015: Released version 2.6.2 (a bug-fix release). Mar 8, 2015: Released version 2.6.1 (a bug-fix release). The (new) yaml option has been removed from the Meta-Data Extension as it was buggy (see #390 ). Feb 19, 2015: Released version 2.6 ( Notes ). Nov 19, 2014: Released version 2.5.2 (a bug-fix release). Sept 26, 2014: Released version 2.5.1 (a bug-fix release). Sept 12, 2014: Released version 2.5.0 ( Notes ). Feb 16, 2014: Released version 2.4.0 ( Notes ). Mar 22, 2013: Released version 2.3.1 (a bug-fix release). Mar 14, 2013: Released version 2.3.0 ( Notes ) Nov 4, 2012: Released version 2.2.1 (a bug-fix release). Jul 5, 2012: Released version 2.2.0 ( Notes ). Jan 22, 2012: Released version 2.1.1 (a bug-fix release). Nov 24, 2011: Released version 2.1.0 ( Notes ). Oct 7, 2009: Released version 2.0.3. (a bug-fix release). Sept 28, 2009: Released version 2.0.2 (a bug-fix release). May 20, 2009: Released version 2.0.1 (a bug-fix release). Mar 30, 2009: Released version 2.0 ( Notes ). Mar 8, 2009: Release Candidate 2.0-rc-1. Feb 2009: Added support for multi-level lists to new Blockprocessors. Jan 2009: Added HTML 4 output as an option (thanks Eric Abrahamsen) Nov 2008: Added Definition List ext. Replaced old core with Blockprocessors. Broken up into multiple files. Oct 2008: Changed logging behavior to work better with other systems. Refactored tree traversing. Added treap implementation, then replaced with OrderedDict. Renamed various processors to better reflect what they actually do. Refactored footnote ext to match PHP Extra\u2019s output. Sept 2008: Moved prettifyTree to a Postprocessor, replaced WikiLink ext with WikiLinks (note the s) ext (uses bracketed links instead of CamelCase) and various bug fixes. August 18 2008: Reorganized directory structure. Added a \u2018docs\u2019 directory and moved all extensions into a \u2018markdown-extensions\u2019 package. Added additional documentation and a few bug fixes. (v2.0-beta) August 4 2008: Updated included extensions to ElementTree. Added a separate command line script. (v2.0-alpha) July 2008: Switched from home-grown NanoDOM to ElementTree and various related bugs (thanks Artem Yunusov). June 2008: Fixed issues with nested inline patterns and cleaned up testing framework (thanks Artem Yunusov). May 2008: Added a number of additional extensions to the distribution and other minor changes. Moved repository to git from svn. Mar 2008: Refactored extension API to accept either an extension name (as a string) or an instance of an extension (Thanks David Wolever). Fixed various bugs and added doc strings. Feb 2008: Various bug-fixes mostly regarding extensions. Feb 18, 2008: Version 1.7. Feb 13, 2008: A little code cleanup and better documentation and inheritance for Preprocessors/Postprocessors. Feb 9, 2008: Double-quotes no longer HTML escaped and raw HTML honors <?foo> , <@foo> , and <%foo> for those who run markdown on template syntax. Dec 12, 2007: Updated docs. Removed encoding argument from Markdown and markdown as per list discussion. Clean up in prep for 1.7. Nov 29, 2007: Added support for images inside links. Also fixed a few bugs in the footnote extension. Nov 19, 2007: message now uses python\u2019s logging module. Also removed limit imposed by recursion in _process_section() . You can now parse as long of a document as your memory can handle. Nov 5, 2007: Moved safe_mode code to a textPostprocessor and added escaping option. Nov 3, 2007: Fixed convert method to accept empty strings. Oct 30, 2007: Fixed BOM removal (thanks Malcolm Tredinnick). Fixed infinite loop in bracket regular expression for inline links. Oct 11, 2007: LineBreaks is now an inlinePattern . Fixed HR in blockquotes. Refactored _processSection method (see tracker #1793419). Oct 9, 2007: Added textPreprocessor (from 1.6b). Oct 8, 2008: Fixed Lazy Blockquote. Fixed code block on first line. Fixed empty inline image link. Oct 7, 2007: Limit recursion on inline patterns. Added a \u2018safe\u2019 tag to htmlStash . March 18, 2007: Fixed or merged a bunch of minor bugs, including multi-line comments and markup inside links. (Tracker #s: 1683066, 1671153, 1661751, 1627935, 1544371, 1458139.) -> v. 1.6b Oct 10, 2006: Fixed a bug that caused some text to be lost after comments. Added \u201csafe mode\u201d (user\u2019s HTML tags are removed). Sept 6, 2006: Added exception for PHP tags when handling HTML blocks. August 7, 2006: Incorporated Sergej Chodarev\u2019s patch to fix a problem with ampersand normalization and HTML blocks. July 10, 2006: Switched to using optparse . Added proper support for Unicode. July 9, 2006: Fixed the <!--@address.com> problem (Tracker #1501354). May 18, 2006: Stopped catching unquoted titles in reference links. Stopped creating blank headers. May 15, 2006: A bug with lists, recursion on block-level elements, run-in headers, spaces before headers, Unicode input (thanks to Aaron Swartz). Sourceforge tracker #s: 1489313, 1489312, 1489311, 1488370, 1485178, 1485176. (v. 1.5) Mar. 24, 2006: Switched to a not-so-recursive algorithm with _handleInline . (Version 1.4) Mar. 15, 2006: Replaced some instance variables with class variables (a patch from Stelios Xanthakis). Chris Clark\u2019s new regexps that do not trigger mid-word underlining. Feb. 28, 2006: Clean-up and command-line handling by Stewart Midwinter. (Version 1.3) Feb. 24, 2006: Fixed a bug with the last line of the list appearing again as a separate paragraph. Incorporated Chris Clark\u2019s \u201cmail-to\u201d patch. Added support for <br /> at the end of lines ending in two or more spaces. Fixed a crashing bug when using ImageReferencePattern . Added several utility methods to Nanodom . (Version 1.2) Jan. 31, 2006: Added hr and hr/ to BLOCK_LEVEL_ELEMENTS and changed <hr/> to <hr /> . (Thanks to Sergej Chodarev.) Nov. 26, 2005: Fixed a bug with certain tabbed lines inside lists getting wrapped in <pre><code> . (v. 1.1) Nov. 19, 2005: Made <!... , <?... , etc. behave like block-level HTML tags. Nov. 14, 2005: Added entity code and email auto-link fix by Tiago Cogumbreiro. Fixed some small issues with backticks to get 100% compliance with John\u2019s test suite. (v. 1.0) Nov. 7, 2005: Added an unlink method for documents to aid with memory collection (per Doug Sauder\u2019s suggestion). Oct. 29, 2005: Restricted a set of HTML tags that get treated as block-level elements. Sept. 18, 2005: Refactored the whole script to make it easier to customize it and made footnote functionality into an extension. (v. 0.9) Sept. 5, 2005: Fixed a bug with multi-paragraph footnotes. Added attribute support. Sept. 1, 2005: Changed the way headers are handled to allow inline syntax in headers (e.g. links) and got the lists to use p-tags correctly (v. 0.8) Aug. 29, 2005: Added flexible tabs, fixed a few small issues, added basic support for footnotes. Got rid of xml.dom.minidom and added pretty-printing. (v. 0.7) Aug. 13, 2005: Fixed a number of small bugs in order to conform to the test suite. (v. 0.6) Aug. 11, 2005: Added support for inline HTML and entities, inline images, auto-links, underscore emphasis. Cleaned up and refactored the code, added some more comments. Feb. 19, 2005: Rewrote the handling of high-level elements to allow multi-line list items and all sorts of nesting. Feb. 3, 2005: Reference-style links, single-line lists, backticks, escape, emphasis in the beginning of the paragraph. Nov. 2004: Added links, blockquotes, HTML blocks to Manfred Stienstra\u2019s code Apr. 2004: Manfred\u2019s version at http://www.dwerg.net/projects/markdown/","title":"Change Log"},{"location":"change_log/#python-markdown-change-log","text":"Feb 12, 2020: Released version 3.2.1 (a bug-fix release). The name property in toc_tokens from the TOC extension now escapes HTML special characters ( < , > , and & ). Feb 7, 2020: Released version 3.2 ( Notes ). May 20, 2019: Released version 3.1.1 (a bug-fix release). Fixed import failure in setup.py when the source directory is not on sys.path (#823). Prefer public packaging module to pkg_resources\u2019 private copy of it (#825). Mar 25, 2019: Released version 3.1 ( Notes ). Sept 28, 2018: Released version 3.0.1 (a bug-fix release). Brought back the version and version_info variables (#709). Added support for hexadecimal HTML entities (#712). Sept 21, 2018: Released version 3.0 ( Notes ). Jan 4, 2018: Released version 2.6.11 (a bug-fix release). Added a new BACKLINK-TITLE option to the footnote extension so that non-English users can provide a custom title to back links (see #610). Dec 7, 2017: Released version 2.6.10 (a documentation update). Aug 17, 2017: Released version 2.6.9 (a bug-fix release). Jan 25, 2017: Released version 2.6.8 (a bug-fix release). Sept 23, 2016: Released version 2.6.7 (a bug-fix release). Mar 20, 2016: Released version 2.6.6 (a bug-fix release). Nov 24, 2015: Released version 2.6.5 (a bug-fix release). Nov 6, 2015: Released version 2.6.4 (a bug-fix release). Oct 26, 2015: Released version 2.6.3 (a bug-fix release). Apr 20, 2015: Released version 2.6.2 (a bug-fix release). Mar 8, 2015: Released version 2.6.1 (a bug-fix release). The (new) yaml option has been removed from the Meta-Data Extension as it was buggy (see #390 ). Feb 19, 2015: Released version 2.6 ( Notes ). Nov 19, 2014: Released version 2.5.2 (a bug-fix release). Sept 26, 2014: Released version 2.5.1 (a bug-fix release). Sept 12, 2014: Released version 2.5.0 ( Notes ). Feb 16, 2014: Released version 2.4.0 ( Notes ). Mar 22, 2013: Released version 2.3.1 (a bug-fix release). Mar 14, 2013: Released version 2.3.0 ( Notes ) Nov 4, 2012: Released version 2.2.1 (a bug-fix release). Jul 5, 2012: Released version 2.2.0 ( Notes ). Jan 22, 2012: Released version 2.1.1 (a bug-fix release). Nov 24, 2011: Released version 2.1.0 ( Notes ). Oct 7, 2009: Released version 2.0.3. (a bug-fix release). Sept 28, 2009: Released version 2.0.2 (a bug-fix release). May 20, 2009: Released version 2.0.1 (a bug-fix release). Mar 30, 2009: Released version 2.0 ( Notes ). Mar 8, 2009: Release Candidate 2.0-rc-1. Feb 2009: Added support for multi-level lists to new Blockprocessors. Jan 2009: Added HTML 4 output as an option (thanks Eric Abrahamsen) Nov 2008: Added Definition List ext. Replaced old core with Blockprocessors. Broken up into multiple files. Oct 2008: Changed logging behavior to work better with other systems. Refactored tree traversing. Added treap implementation, then replaced with OrderedDict. Renamed various processors to better reflect what they actually do. Refactored footnote ext to match PHP Extra\u2019s output. Sept 2008: Moved prettifyTree to a Postprocessor, replaced WikiLink ext with WikiLinks (note the s) ext (uses bracketed links instead of CamelCase) and various bug fixes. August 18 2008: Reorganized directory structure. Added a \u2018docs\u2019 directory and moved all extensions into a \u2018markdown-extensions\u2019 package. Added additional documentation and a few bug fixes. (v2.0-beta) August 4 2008: Updated included extensions to ElementTree. Added a separate command line script. (v2.0-alpha) July 2008: Switched from home-grown NanoDOM to ElementTree and various related bugs (thanks Artem Yunusov). June 2008: Fixed issues with nested inline patterns and cleaned up testing framework (thanks Artem Yunusov). May 2008: Added a number of additional extensions to the distribution and other minor changes. Moved repository to git from svn. Mar 2008: Refactored extension API to accept either an extension name (as a string) or an instance of an extension (Thanks David Wolever). Fixed various bugs and added doc strings. Feb 2008: Various bug-fixes mostly regarding extensions. Feb 18, 2008: Version 1.7. Feb 13, 2008: A little code cleanup and better documentation and inheritance for Preprocessors/Postprocessors. Feb 9, 2008: Double-quotes no longer HTML escaped and raw HTML honors <?foo> , <@foo> , and <%foo> for those who run markdown on template syntax. Dec 12, 2007: Updated docs. Removed encoding argument from Markdown and markdown as per list discussion. Clean up in prep for 1.7. Nov 29, 2007: Added support for images inside links. Also fixed a few bugs in the footnote extension. Nov 19, 2007: message now uses python\u2019s logging module. Also removed limit imposed by recursion in _process_section() . You can now parse as long of a document as your memory can handle. Nov 5, 2007: Moved safe_mode code to a textPostprocessor and added escaping option. Nov 3, 2007: Fixed convert method to accept empty strings. Oct 30, 2007: Fixed BOM removal (thanks Malcolm Tredinnick). Fixed infinite loop in bracket regular expression for inline links. Oct 11, 2007: LineBreaks is now an inlinePattern . Fixed HR in blockquotes. Refactored _processSection method (see tracker #1793419). Oct 9, 2007: Added textPreprocessor (from 1.6b). Oct 8, 2008: Fixed Lazy Blockquote. Fixed code block on first line. Fixed empty inline image link. Oct 7, 2007: Limit recursion on inline patterns. Added a \u2018safe\u2019 tag to htmlStash . March 18, 2007: Fixed or merged a bunch of minor bugs, including multi-line comments and markup inside links. (Tracker #s: 1683066, 1671153, 1661751, 1627935, 1544371, 1458139.) -> v. 1.6b Oct 10, 2006: Fixed a bug that caused some text to be lost after comments. Added \u201csafe mode\u201d (user\u2019s HTML tags are removed). Sept 6, 2006: Added exception for PHP tags when handling HTML blocks. August 7, 2006: Incorporated Sergej Chodarev\u2019s patch to fix a problem with ampersand normalization and HTML blocks. July 10, 2006: Switched to using optparse . Added proper support for Unicode. July 9, 2006: Fixed the <!--@address.com> problem (Tracker #1501354). May 18, 2006: Stopped catching unquoted titles in reference links. Stopped creating blank headers. May 15, 2006: A bug with lists, recursion on block-level elements, run-in headers, spaces before headers, Unicode input (thanks to Aaron Swartz). Sourceforge tracker #s: 1489313, 1489312, 1489311, 1488370, 1485178, 1485176. (v. 1.5) Mar. 24, 2006: Switched to a not-so-recursive algorithm with _handleInline . (Version 1.4) Mar. 15, 2006: Replaced some instance variables with class variables (a patch from Stelios Xanthakis). Chris Clark\u2019s new regexps that do not trigger mid-word underlining. Feb. 28, 2006: Clean-up and command-line handling by Stewart Midwinter. (Version 1.3) Feb. 24, 2006: Fixed a bug with the last line of the list appearing again as a separate paragraph. Incorporated Chris Clark\u2019s \u201cmail-to\u201d patch. Added support for <br /> at the end of lines ending in two or more spaces. Fixed a crashing bug when using ImageReferencePattern . Added several utility methods to Nanodom . (Version 1.2) Jan. 31, 2006: Added hr and hr/ to BLOCK_LEVEL_ELEMENTS and changed <hr/> to <hr /> . (Thanks to Sergej Chodarev.) Nov. 26, 2005: Fixed a bug with certain tabbed lines inside lists getting wrapped in <pre><code> . (v. 1.1) Nov. 19, 2005: Made <!... , <?... , etc. behave like block-level HTML tags. Nov. 14, 2005: Added entity code and email auto-link fix by Tiago Cogumbreiro. Fixed some small issues with backticks to get 100% compliance with John\u2019s test suite. (v. 1.0) Nov. 7, 2005: Added an unlink method for documents to aid with memory collection (per Doug Sauder\u2019s suggestion). Oct. 29, 2005: Restricted a set of HTML tags that get treated as block-level elements. Sept. 18, 2005: Refactored the whole script to make it easier to customize it and made footnote functionality into an extension. (v. 0.9) Sept. 5, 2005: Fixed a bug with multi-paragraph footnotes. Added attribute support. Sept. 1, 2005: Changed the way headers are handled to allow inline syntax in headers (e.g. links) and got the lists to use p-tags correctly (v. 0.8) Aug. 29, 2005: Added flexible tabs, fixed a few small issues, added basic support for footnotes. Got rid of xml.dom.minidom and added pretty-printing. (v. 0.7) Aug. 13, 2005: Fixed a number of small bugs in order to conform to the test suite. (v. 0.6) Aug. 11, 2005: Added support for inline HTML and entities, inline images, auto-links, underscore emphasis. Cleaned up and refactored the code, added some more comments. Feb. 19, 2005: Rewrote the handling of high-level elements to allow multi-line list items and all sorts of nesting. Feb. 3, 2005: Reference-style links, single-line lists, backticks, escape, emphasis in the beginning of the paragraph. Nov. 2004: Added links, blockquotes, HTML blocks to Manfred Stienstra\u2019s code Apr. 2004: Manfred\u2019s version at http://www.dwerg.net/projects/markdown/","title":"Python-Markdown Change Log"},{"location":"change_log/release-2.0/","text":"Python-Markdown 2.0 Release Notes \u00b6 We are happy to release Python-Markdown 2.0, which has been over a year in the making. We have rewritten significant portions of the code, dramatically extending the extension API, increased performance, and added numerous extensions to the distribution (including an extension that mimics PHP Markdown Extra), all while maintaining backward compatibility with the end user API in version 1.7. Python-Markdown supports Python versions 2.3, 2.4, 2.5, and 2.6. We have even released a version converted to Python 3.0! Backwards-incompatible Changes \u00b6 While Python-Markdown has experienced numerous internal changes, those changes should only affect extension authors. If you have not written your own extensions, then you should not need to make any changes to your code. However, you may want to ensure that any third party extensions you are using are compatible with the new API. The new extension API is fully documented in the docs. Below is a summary of the significant changes: The old home-grown NanoDOM has been replaced with ElementTree. Therefore all extensions must use ElementTree rather than the old NanoDOM. The various processors and patterns are now stored with OrderedDicts rather than lists. Any code adding processors and/or patterns into Python-Markdown will need to be adjusted to use the new API using OrderedDicts. The various types of processors available have been either combined, added, or removed. Ensure that your processors match the currently supported types. What\u2019s New in Python-Markdown 2.0 \u00b6 Thanks to the work of Artem Yunusov as part of GSoC 2008, Python-Markdown uses ElementTree internally to build the (X)HTML document from markdown source text. This has resolved various issues with the older home-grown NanoDOM and made notable increases in performance. Artem also refactored the Inline Patterns to better support nested patterns which has resolved many inconsistencies in Python-Markdown\u2019s parsing of the markdown syntax. The core parser had been completely rewritten, increasing performance and, for the first time, making it possible to override/add/change the way block level content is parsed. Python-Markdown now parses markdown source text more closely to the other popular implementations (Perl, PHP, etc.) than it ever has before. With the exception of a few minor insignificant differences, any difference should be considered a bug, rather than a limitation of the parser. The option to return HTML4 output as apposed to XHTML has been added. In addition, extensions should be able to easily add additional output formats. As part of implementing markdown in the Dr. Project project (a Trac fork), among other things, David Wolever refactored the \u201cextension\u201d keyword so that it accepts either the extension names as strings or instances of extensions. This makes it possible to include multiple extensions in a single module. Numerous extensions are included in the distribution by default. See available_extensions for a complete list. See the Change Log for a full list of changes.","title":"Release Notes for v.2.0"},{"location":"change_log/release-2.0/#python-markdown-20-release-notes","text":"We are happy to release Python-Markdown 2.0, which has been over a year in the making. We have rewritten significant portions of the code, dramatically extending the extension API, increased performance, and added numerous extensions to the distribution (including an extension that mimics PHP Markdown Extra), all while maintaining backward compatibility with the end user API in version 1.7. Python-Markdown supports Python versions 2.3, 2.4, 2.5, and 2.6. We have even released a version converted to Python 3.0!","title":"Python-Markdown 2.0 Release Notes"},{"location":"change_log/release-2.0/#backwards-incompatible-changes","text":"While Python-Markdown has experienced numerous internal changes, those changes should only affect extension authors. If you have not written your own extensions, then you should not need to make any changes to your code. However, you may want to ensure that any third party extensions you are using are compatible with the new API. The new extension API is fully documented in the docs. Below is a summary of the significant changes: The old home-grown NanoDOM has been replaced with ElementTree. Therefore all extensions must use ElementTree rather than the old NanoDOM. The various processors and patterns are now stored with OrderedDicts rather than lists. Any code adding processors and/or patterns into Python-Markdown will need to be adjusted to use the new API using OrderedDicts. The various types of processors available have been either combined, added, or removed. Ensure that your processors match the currently supported types.","title":"Backwards-incompatible Changes"},{"location":"change_log/release-2.0/#whats-new-in-python-markdown-20","text":"Thanks to the work of Artem Yunusov as part of GSoC 2008, Python-Markdown uses ElementTree internally to build the (X)HTML document from markdown source text. This has resolved various issues with the older home-grown NanoDOM and made notable increases in performance. Artem also refactored the Inline Patterns to better support nested patterns which has resolved many inconsistencies in Python-Markdown\u2019s parsing of the markdown syntax. The core parser had been completely rewritten, increasing performance and, for the first time, making it possible to override/add/change the way block level content is parsed. Python-Markdown now parses markdown source text more closely to the other popular implementations (Perl, PHP, etc.) than it ever has before. With the exception of a few minor insignificant differences, any difference should be considered a bug, rather than a limitation of the parser. The option to return HTML4 output as apposed to XHTML has been added. In addition, extensions should be able to easily add additional output formats. As part of implementing markdown in the Dr. Project project (a Trac fork), among other things, David Wolever refactored the \u201cextension\u201d keyword so that it accepts either the extension names as strings or instances of extensions. This makes it possible to include multiple extensions in a single module. Numerous extensions are included in the distribution by default. See available_extensions for a complete list. See the Change Log for a full list of changes.","title":"What's New in Python-Markdown 2.0"},{"location":"change_log/release-2.1/","text":"Python-Markdown 2.1 Release Notes \u00b6 We are pleased to release Python-Markdown 2.1 which makes many improvements on 2.0. In fact, we consider 2.1 to be what 2.0 should have been. While 2.1 consists mostly of bug fixes, bringing Python-Markdown more inline with other implementations, some internal improvements were made to the parser, a few new built-in extensions were added, and HTML5 support was added. Python-Markdown supports Python versions 2.4, 2.5, 2.6, 2.7, 3.1, and 3.2 out of the box. In fact, the same code base installs on Python 3.1 and 3.2 with no extra work by the end user. Backwards-incompatible Changes \u00b6 While Python-Markdown has received only minor internal changes since the last release, there are a few backward-incompatible changes to note: Support had been dropped for Python 2.3. No guarantees are made that the library will work in any version of Python lower than 2.4. Additionally, while the library had been tested with Python 2.4, consider Python 2.4 support to be depreciated. It is not likely that any future versions will continue to support any version of Python less than 2.5. Note that Python 3.0 is not supported due to a bug in its 2to3 tool. If you must use Python-Markdown with Python 3.0, it is suggested you manually use Python 3.1\u2019s 2to3 tool to do a conversion. Python-Markdown previously accepted positional arguments on its class and wrapper methods. It now expects keyword arguments. Currently, the positional arguments should continue to work, but the solution feels hacky and may be removed in a future version. All users are encouraged to use keyword arguments as documented in the Library Reference . Past versions of Python-Markdown provided module level Global variables which controlled the behavior of a few different aspects of the parser. Those global variables have been replaced with attributes on the Markdown class. Additionally, those attributes are settable as keyword arguments when initializing a class instance. Therefore, if you were editing the global variables (either by editing the source or by overriding them in your code), you should now set them on the class. See the Library Reference for the options available. If you have been using the HeaderId extension to define custom ids on headers, you will want to switch to using the new Attribute List extension. The HeaderId extension now only auto-generates ids on headers which have not already had ids defined. Note that the Extra extension has been switched to use Attribute Lists instead of HeaderId as it did previously. Some code was moved into the markdown.util namespace which was previously in the markdown namespace. Extension authors may need to adjust a few import statements in their extensions to work with the changes. The command line script name was changed to markdown_py . The previous name ( markdown ) was conflicting with people (and Linux package systems) who also had markdown.pl installed on there system as markdown.pl\u2019s command line script was also named markdown . Be aware that installing Python-Markdown 2.1 will not remove the old versions of the script with different names. You may want to remove them yourself as they are unlikely to work properly. What\u2019s New in Python-Markdown 2.1 \u00b6 Three new extensions were added. Attribute Lists , which was inspired by Maruku\u2019s feature of the same name, Newline to Break , which was inspired by GitHub Flavored Markdown, and Smart Strong, which fills a hole in the Extra extension. HTML5 is now supported. All this really means is that new block level elements introduced in the HTML5 spec are now properly recognized as raw HTML. As valid HTML5 can consist of either HTML4 or XHTML1, there is no need to add a new HTML5 serializers. That said, html5 and xhtml5 have been added as aliases of the html4 and xhtml1 serializers respectively. An XHTML serializer has been added. Previously, ElementTree\u2019s XML serializer was being used for XHTML output. With the new serializer we are able to avoid more invalid output like empty elements (i.e., <p /> ) which can choke browsers. Improved support for Python 3.x. Now when running setupy.py install in Python 3.1 or greater the 2to3 tool is run automatically. Note that Python 3.0 is not supported due to a bug in its 2to3 tool. If you must use Python-Markdown with Python 3.0, it is suggested you manually use Python 3.1\u2019s 2to3 tool to do a conversion. Methods on instances of the Markdown class that do not return results can now be changed allowing one to do md.reset().convert(moretext) . The Markdown class was refactored so that a subclass could define its own build_parser method which would build a completely different parser. In other words, one could use the basic machinery in the markdown library to build a parser of a different markup language without the overhead of building the markdown parser and throwing it away. Import statements within markdown have been improved so that third party libraries can embed the markdown library if they desire (licensing permitting). Added support for Python\u2019s -m command line option. You can run the markdown package as a command line script. Do python -m markdown [options] [args] . Note that this is only fully supported in Python 2.7+. Python 2.5 & 2.6 require you to call the module directly ( markdown.__main__ ) rather than the package ( markdown ). This does not work in Python 2.4. The command line script has been renamed to markdown_py which avoids all the various problems we had with previous names. Also improved the command line script to accept input on stdin . The testing framework has been completely rebuilt using the Nose testing framework. This provides a number of benefits including the ability to better test the built-in extensions and other options available to change the parsing behavior. See the Test Suite documentation for details. Various bug fixes have been made, which are too numerous to list here. See the commit log for a complete history of the changes.","title":"Release Notes for v.2.1"},{"location":"change_log/release-2.1/#python-markdown-21-release-notes","text":"We are pleased to release Python-Markdown 2.1 which makes many improvements on 2.0. In fact, we consider 2.1 to be what 2.0 should have been. While 2.1 consists mostly of bug fixes, bringing Python-Markdown more inline with other implementations, some internal improvements were made to the parser, a few new built-in extensions were added, and HTML5 support was added. Python-Markdown supports Python versions 2.4, 2.5, 2.6, 2.7, 3.1, and 3.2 out of the box. In fact, the same code base installs on Python 3.1 and 3.2 with no extra work by the end user.","title":"Python-Markdown 2.1 Release Notes"},{"location":"change_log/release-2.1/#backwards-incompatible-changes","text":"While Python-Markdown has received only minor internal changes since the last release, there are a few backward-incompatible changes to note: Support had been dropped for Python 2.3. No guarantees are made that the library will work in any version of Python lower than 2.4. Additionally, while the library had been tested with Python 2.4, consider Python 2.4 support to be depreciated. It is not likely that any future versions will continue to support any version of Python less than 2.5. Note that Python 3.0 is not supported due to a bug in its 2to3 tool. If you must use Python-Markdown with Python 3.0, it is suggested you manually use Python 3.1\u2019s 2to3 tool to do a conversion. Python-Markdown previously accepted positional arguments on its class and wrapper methods. It now expects keyword arguments. Currently, the positional arguments should continue to work, but the solution feels hacky and may be removed in a future version. All users are encouraged to use keyword arguments as documented in the Library Reference . Past versions of Python-Markdown provided module level Global variables which controlled the behavior of a few different aspects of the parser. Those global variables have been replaced with attributes on the Markdown class. Additionally, those attributes are settable as keyword arguments when initializing a class instance. Therefore, if you were editing the global variables (either by editing the source or by overriding them in your code), you should now set them on the class. See the Library Reference for the options available. If you have been using the HeaderId extension to define custom ids on headers, you will want to switch to using the new Attribute List extension. The HeaderId extension now only auto-generates ids on headers which have not already had ids defined. Note that the Extra extension has been switched to use Attribute Lists instead of HeaderId as it did previously. Some code was moved into the markdown.util namespace which was previously in the markdown namespace. Extension authors may need to adjust a few import statements in their extensions to work with the changes. The command line script name was changed to markdown_py . The previous name ( markdown ) was conflicting with people (and Linux package systems) who also had markdown.pl installed on there system as markdown.pl\u2019s command line script was also named markdown . Be aware that installing Python-Markdown 2.1 will not remove the old versions of the script with different names. You may want to remove them yourself as they are unlikely to work properly.","title":"Backwards-incompatible Changes"},{"location":"change_log/release-2.1/#whats-new-in-python-markdown-21","text":"Three new extensions were added. Attribute Lists , which was inspired by Maruku\u2019s feature of the same name, Newline to Break , which was inspired by GitHub Flavored Markdown, and Smart Strong, which fills a hole in the Extra extension. HTML5 is now supported. All this really means is that new block level elements introduced in the HTML5 spec are now properly recognized as raw HTML. As valid HTML5 can consist of either HTML4 or XHTML1, there is no need to add a new HTML5 serializers. That said, html5 and xhtml5 have been added as aliases of the html4 and xhtml1 serializers respectively. An XHTML serializer has been added. Previously, ElementTree\u2019s XML serializer was being used for XHTML output. With the new serializer we are able to avoid more invalid output like empty elements (i.e., <p /> ) which can choke browsers. Improved support for Python 3.x. Now when running setupy.py install in Python 3.1 or greater the 2to3 tool is run automatically. Note that Python 3.0 is not supported due to a bug in its 2to3 tool. If you must use Python-Markdown with Python 3.0, it is suggested you manually use Python 3.1\u2019s 2to3 tool to do a conversion. Methods on instances of the Markdown class that do not return results can now be changed allowing one to do md.reset().convert(moretext) . The Markdown class was refactored so that a subclass could define its own build_parser method which would build a completely different parser. In other words, one could use the basic machinery in the markdown library to build a parser of a different markup language without the overhead of building the markdown parser and throwing it away. Import statements within markdown have been improved so that third party libraries can embed the markdown library if they desire (licensing permitting). Added support for Python\u2019s -m command line option. You can run the markdown package as a command line script. Do python -m markdown [options] [args] . Note that this is only fully supported in Python 2.7+. Python 2.5 & 2.6 require you to call the module directly ( markdown.__main__ ) rather than the package ( markdown ). This does not work in Python 2.4. The command line script has been renamed to markdown_py which avoids all the various problems we had with previous names. Also improved the command line script to accept input on stdin . The testing framework has been completely rebuilt using the Nose testing framework. This provides a number of benefits including the ability to better test the built-in extensions and other options available to change the parsing behavior. See the Test Suite documentation for details. Various bug fixes have been made, which are too numerous to list here. See the commit log for a complete history of the changes.","title":"What's New in Python-Markdown 2.1"},{"location":"change_log/release-2.2/","text":"Python-Markdown 2.2 Release Notes \u00b6 We are pleased to release Python-Markdown 2.2 which makes improvements on 2.1. While 2.2 is primarily a bug fix release, some internal improvements were made to the parser, and a few security issues were resolved. Python-Markdown supports Python versions 2.5, 2.6, 2.7, 3.1, and 3.2 out of the box. Backwards-incompatible Changes \u00b6 While Python-Markdown has received only minor internal changes since the last release, there are a few backward-incompatible changes to note: Support had been dropped for Python 2.4. No guarantees are made that the library will work in any version of Python lower than 2.5. Additionally, while the library had been tested with Python 2.5, consider Python 2.5 support to be depreciated. It is not likely that any future versions will continue to support any version of Python less than 2.6. For many years Python-Markdown has identified <ins> and <del> tags in raw HTML input as block level tags. As they are actually inline level tags, this behavior has been changed. This may result in slightly different output. While in most cases, the new output is more correct, there may be a few edge cases where a document author has relied on the previous incorrect behavior. It is likely that a few adjustments may need to be made to those documents. The behavior of the enable_attributes keyword has been slightly altered. If authors have been using attributes in documents with safe_mode on, those attributes will no longer be parsed unless enable_attributes is explicitly set to True . This change was made to prevent untrusted authors from injecting potentially harmful JavaScript in documents. This change had no effect when not in safe_mode . What\u2019s New in Python-Markdown 2.2 \u00b6 The docs were refactored and can now be found at http://packages.python.org/Markdown/ . The docs are now maintained in the Repository and are generated by the setup.py build_docs command. The Sane_Lists extension was added. The Sane Lists Extension alters the behavior of the Markdown List syntax to be less surprising by not allowing the mixing of list types. In other words, an ordered list will not continue when an unordered list item is encountered and vice versa. Markdown now excepts a full path to an extension module. In other words, your extensions no longer need to be in the primary namespace (and start with mdx_ ) for Markdown to find them. Just do Markdown(extension=['path.to.some.module']) . As long as the provided module contains a compatible extension, the extension will be loaded. The BlockParser API was slightly altered to allow blockprocessor.run to return True or False which provides more control to the block processor loop from within any Blockprocessor instance. Various bug fixes have been made. See the commit log for a complete history of the changes.","title":"Release Notes for v.2.2"},{"location":"change_log/release-2.2/#python-markdown-22-release-notes","text":"We are pleased to release Python-Markdown 2.2 which makes improvements on 2.1. While 2.2 is primarily a bug fix release, some internal improvements were made to the parser, and a few security issues were resolved. Python-Markdown supports Python versions 2.5, 2.6, 2.7, 3.1, and 3.2 out of the box.","title":"Python-Markdown 2.2 Release Notes"},{"location":"change_log/release-2.2/#backwards-incompatible-changes","text":"While Python-Markdown has received only minor internal changes since the last release, there are a few backward-incompatible changes to note: Support had been dropped for Python 2.4. No guarantees are made that the library will work in any version of Python lower than 2.5. Additionally, while the library had been tested with Python 2.5, consider Python 2.5 support to be depreciated. It is not likely that any future versions will continue to support any version of Python less than 2.6. For many years Python-Markdown has identified <ins> and <del> tags in raw HTML input as block level tags. As they are actually inline level tags, this behavior has been changed. This may result in slightly different output. While in most cases, the new output is more correct, there may be a few edge cases where a document author has relied on the previous incorrect behavior. It is likely that a few adjustments may need to be made to those documents. The behavior of the enable_attributes keyword has been slightly altered. If authors have been using attributes in documents with safe_mode on, those attributes will no longer be parsed unless enable_attributes is explicitly set to True . This change was made to prevent untrusted authors from injecting potentially harmful JavaScript in documents. This change had no effect when not in safe_mode .","title":"Backwards-incompatible Changes"},{"location":"change_log/release-2.2/#whats-new-in-python-markdown-22","text":"The docs were refactored and can now be found at http://packages.python.org/Markdown/ . The docs are now maintained in the Repository and are generated by the setup.py build_docs command. The Sane_Lists extension was added. The Sane Lists Extension alters the behavior of the Markdown List syntax to be less surprising by not allowing the mixing of list types. In other words, an ordered list will not continue when an unordered list item is encountered and vice versa. Markdown now excepts a full path to an extension module. In other words, your extensions no longer need to be in the primary namespace (and start with mdx_ ) for Markdown to find them. Just do Markdown(extension=['path.to.some.module']) . As long as the provided module contains a compatible extension, the extension will be loaded. The BlockParser API was slightly altered to allow blockprocessor.run to return True or False which provides more control to the block processor loop from within any Blockprocessor instance. Various bug fixes have been made. See the commit log for a complete history of the changes.","title":"What's New in Python-Markdown 2.2"},{"location":"change_log/release-2.3/","text":"Python-Markdown 2.3 Release Notes \u00b6 We are pleased to release Python-Markdown 2.3 which adds one new extension, removes a few old (obsolete) extensions, and now runs on both Python 2 and Python 3 without running the 2to3 conversion tool. See the list of changes below for details. Python-Markdown supports Python versions 2.6, 2.7, 3.1, 3.2, and 3.3. Backwards-incompatible Changes \u00b6 Support has been dropped for Python 2.5. No guarantees are made that the library will work in any version of Python lower than 2.6. As all supported Python versions include the ElementTree library, Python-Markdown will no longer try to import a third-party installation of ElementTree. All classes are now \u201cnew-style\u201d classes. In other words, all classes subclass from \u2018object\u2019. While this is not likely to affect most users, extension authors may need to make a few minor adjustments to their code. \u201csafe_mode\u201d has been further restricted. Markdown formatted links must be of a known white-listed scheme when in \u201csafe_mode\u201d or the URL is discarded. The white-listed schemes are: \u2018HTTP\u2019, \u2018HTTPS\u2019, \u2018FTP\u2019, \u2018FTPS\u2019, \u2018MAILTO\u2019, and \u2018news\u2019. Schemeless URLs are also permitted, but are checked in other ways - as they have been for some time. The ids assigned to footnotes now contain a dash ( - ) rather than a colon ( : ) when output_format it set to \"html5\" or \"xhtml5\" . If you are making reference to those ids in your JavaScript or CSS and using the HTML5 output, you will need to update your code accordingly. No changes are necessary if you are outputting XHTML (the default) or HTML4. The force_linenos configuration setting of the CodeHilite extension has been marked as Pending Deprecation and a new setting linenums has been added to replace it. See documentation for the CodeHilite Extension for an explanation of the new linenums setting. The new setting will honor the old force_linenos if it is set, but it will raise a PendingDeprecationWarning and will likely be removed in a future version of Python-Markdown. The \u201cRSS\u201d extension has been removed and no longer ships with Python-Markdown. If you would like to continue using the extension (not recommended), it is archived on GitHub . The \u201cHTML Tidy\u201d Extension has been removed and no longer ships with Python-Markdown. If you would like to continue using the extension (not recommended), it is archived on GitHub . Note that the underlying library, uTidylib, is not Python 3 compatible. Instead, it is recommended that the newer PyTidyLib (version 0.2.2+ for Python 3 comparability - install from GitHub not PyPI) be used. As the API for that library is rather simple, it is recommended that the output of Markdown be wrapped in a call to PyTidyLib rather than using an extension (for example: tidylib.tidy_fragment(markdown.markdown(source), options={...}) ). What\u2019s New in Python-Markdown 2.3 \u00b6 The entire code base now universally runs in Python 2 and Python 3 without any need for running the 2to3 conversion tool. This not only simplifies testing, but by using Unicode_literals, results in more consistent behavior across Python versions. Additionally, the relative imports (made possible in Python 2 via absolute_import) allows the entire library to more easily be embedded in a sub-directory of another project. The various files within the library will still import each other properly even though \u2018markdown\u2019 may not be in Python\u2019s root namespace. The Admonition Extension has been added, which implements rST-style admonitions in the Markdown syntax. However, be warned that this extension is experimental and the syntax and behavior is still subject to change. Please try it out and report bugs and/or improvements. Various bug fixes have been made. See the commit log for a complete history of the changes.","title":"Release Notes for v.2.3"},{"location":"change_log/release-2.3/#python-markdown-23-release-notes","text":"We are pleased to release Python-Markdown 2.3 which adds one new extension, removes a few old (obsolete) extensions, and now runs on both Python 2 and Python 3 without running the 2to3 conversion tool. See the list of changes below for details. Python-Markdown supports Python versions 2.6, 2.7, 3.1, 3.2, and 3.3.","title":"Python-Markdown 2.3 Release Notes"},{"location":"change_log/release-2.3/#backwards-incompatible-changes","text":"Support has been dropped for Python 2.5. No guarantees are made that the library will work in any version of Python lower than 2.6. As all supported Python versions include the ElementTree library, Python-Markdown will no longer try to import a third-party installation of ElementTree. All classes are now \u201cnew-style\u201d classes. In other words, all classes subclass from \u2018object\u2019. While this is not likely to affect most users, extension authors may need to make a few minor adjustments to their code. \u201csafe_mode\u201d has been further restricted. Markdown formatted links must be of a known white-listed scheme when in \u201csafe_mode\u201d or the URL is discarded. The white-listed schemes are: \u2018HTTP\u2019, \u2018HTTPS\u2019, \u2018FTP\u2019, \u2018FTPS\u2019, \u2018MAILTO\u2019, and \u2018news\u2019. Schemeless URLs are also permitted, but are checked in other ways - as they have been for some time. The ids assigned to footnotes now contain a dash ( - ) rather than a colon ( : ) when output_format it set to \"html5\" or \"xhtml5\" . If you are making reference to those ids in your JavaScript or CSS and using the HTML5 output, you will need to update your code accordingly. No changes are necessary if you are outputting XHTML (the default) or HTML4. The force_linenos configuration setting of the CodeHilite extension has been marked as Pending Deprecation and a new setting linenums has been added to replace it. See documentation for the CodeHilite Extension for an explanation of the new linenums setting. The new setting will honor the old force_linenos if it is set, but it will raise a PendingDeprecationWarning and will likely be removed in a future version of Python-Markdown. The \u201cRSS\u201d extension has been removed and no longer ships with Python-Markdown. If you would like to continue using the extension (not recommended), it is archived on GitHub . The \u201cHTML Tidy\u201d Extension has been removed and no longer ships with Python-Markdown. If you would like to continue using the extension (not recommended), it is archived on GitHub . Note that the underlying library, uTidylib, is not Python 3 compatible. Instead, it is recommended that the newer PyTidyLib (version 0.2.2+ for Python 3 comparability - install from GitHub not PyPI) be used. As the API for that library is rather simple, it is recommended that the output of Markdown be wrapped in a call to PyTidyLib rather than using an extension (for example: tidylib.tidy_fragment(markdown.markdown(source), options={...}) ).","title":"Backwards-incompatible Changes"},{"location":"change_log/release-2.3/#whats-new-in-python-markdown-23","text":"The entire code base now universally runs in Python 2 and Python 3 without any need for running the 2to3 conversion tool. This not only simplifies testing, but by using Unicode_literals, results in more consistent behavior across Python versions. Additionally, the relative imports (made possible in Python 2 via absolute_import) allows the entire library to more easily be embedded in a sub-directory of another project. The various files within the library will still import each other properly even though \u2018markdown\u2019 may not be in Python\u2019s root namespace. The Admonition Extension has been added, which implements rST-style admonitions in the Markdown syntax. However, be warned that this extension is experimental and the syntax and behavior is still subject to change. Please try it out and report bugs and/or improvements. Various bug fixes have been made. See the commit log for a complete history of the changes.","title":"What's New in Python-Markdown 2.3"},{"location":"change_log/release-2.4/","text":"Python-Markdown 2.4 Release Notes \u00b6 We are pleased to release Python-Markdown 2.4 which adds one new extension and fixes various bugs. See the list of changes below for details. Python-Markdown supports Python versions 2.6, 2.7, 3.1, 3.2, and 3.3. Backwards-incompatible Changes \u00b6 The force_linenos configuration setting of the CodeHilite extension has been marked as Deprecated . It had previously been marked as \u201cPending Deprecation\u201d in version 2.3 when a new setting linenums was added to replace it. See documentation for the CodeHilite Extension for an explanation of the new linenums setting. The new setting will honor the old force_linenos if it is set, but force_linenos will raise a DeprecationWarning and will likely be removed in a future version of Python-Markdown. URLs are no longer percent-encoded. This improves compatibility with the original (written in Perl) Markdown implementation. Please percent-encode your URLs manually when needed. What\u2019s New in Python-Markdown 2.4 \u00b6 Thanks to the hard work of Dmitry Shachnev the Smarty Extension has been added, which implements SmartyPants using Python-Markdown\u2019s Extension API. This offers a few benefits over a third party script. The HTML does not need to be \u201ctokenized\u201d twice, no hacks are required to combine SmartyPants and code highlighting, and we get markdown\u2019s escaping feature for free. Please try it out and report bugs and/or improvements. The Table of Contents Extension now supports new permalink option for creating Sphinx -style anchor links. It is now possible to enable Markdown formatting inside HTML blocks by appending markdown=1 to opening tag attributes. See Markdown Inside HTML Blocks section for details. Thanks to ryneeverett for implementing this feature. The code blocks now support emphasizing some of the code lines. To use this feature, specify hl_lines option after language name, for example (using the Fenced Code Extension ): ``` . python hl_lines = \"1 3\" # This line will be emphasized . # This one won ' t . # This one will be also emphasized . ``` Thanks to A. Jesse Jiryu Davis for implementing this feature. Various bug fixes have been made. See the commit log for a complete history of the changes.","title":"Release Notes for v.2.4"},{"location":"change_log/release-2.4/#python-markdown-24-release-notes","text":"We are pleased to release Python-Markdown 2.4 which adds one new extension and fixes various bugs. See the list of changes below for details. Python-Markdown supports Python versions 2.6, 2.7, 3.1, 3.2, and 3.3.","title":"Python-Markdown 2.4 Release Notes"},{"location":"change_log/release-2.4/#backwards-incompatible-changes","text":"The force_linenos configuration setting of the CodeHilite extension has been marked as Deprecated . It had previously been marked as \u201cPending Deprecation\u201d in version 2.3 when a new setting linenums was added to replace it. See documentation for the CodeHilite Extension for an explanation of the new linenums setting. The new setting will honor the old force_linenos if it is set, but force_linenos will raise a DeprecationWarning and will likely be removed in a future version of Python-Markdown. URLs are no longer percent-encoded. This improves compatibility with the original (written in Perl) Markdown implementation. Please percent-encode your URLs manually when needed.","title":"Backwards-incompatible Changes"},{"location":"change_log/release-2.4/#whats-new-in-python-markdown-24","text":"Thanks to the hard work of Dmitry Shachnev the Smarty Extension has been added, which implements SmartyPants using Python-Markdown\u2019s Extension API. This offers a few benefits over a third party script. The HTML does not need to be \u201ctokenized\u201d twice, no hacks are required to combine SmartyPants and code highlighting, and we get markdown\u2019s escaping feature for free. Please try it out and report bugs and/or improvements. The Table of Contents Extension now supports new permalink option for creating Sphinx -style anchor links. It is now possible to enable Markdown formatting inside HTML blocks by appending markdown=1 to opening tag attributes. See Markdown Inside HTML Blocks section for details. Thanks to ryneeverett for implementing this feature. The code blocks now support emphasizing some of the code lines. To use this feature, specify hl_lines option after language name, for example (using the Fenced Code Extension ): ``` . python hl_lines = \"1 3\" # This line will be emphasized . # This one won ' t . # This one will be also emphasized . ``` Thanks to A. Jesse Jiryu Davis for implementing this feature. Various bug fixes have been made. See the commit log for a complete history of the changes.","title":"What's New in Python-Markdown 2.4"},{"location":"change_log/release-2.5/","text":"Python-Markdown 2.5 Release Notes \u00b6 We are pleased to release Python-Markdown 2.5 which adds a few new features and fixes various bugs. See the list of changes below for details. Python-Markdown version 2.5 supports Python versions 2.7, 3.2, 3.3, and 3.4. Backwards-incompatible Changes \u00b6 Python-Markdown no longer supports Python version 2.6. You must be using Python versions 2.7, 3.2, 3.3, or 3.4. The force_linenos configuration key on the CodeHilite Extension has been deprecated and will raise a KeyError if provided. In the previous release (2.4), it was issuing a DeprecationWarning . The linenums keyword should be used instead, which provides more control of the output. Both safe_mode and the associated html_replacement_text keywords will be deprecated in version 2.6 and will raise a PendingDeprecationWarning in 2.5. The so-called \u201csafe mode\u201d was never actually \u201csafe\u201d which has resulted in many people having a false sense of security when using it. As an alternative, the developers of Python-Markdown recommend that any untrusted content be passed through an HTML sanitizer (like Bleach ) after being converted to HTML by markdown. If your code previously looked like this: html = markdown . markdown ( text , same_mode = True ) Then it is recommended that you change your code to read something like this: import bleach html = bleach . clean ( markdown . markdown ( text )) If you are not interested in sanitizing untrusted text, but simply desire to escape raw HTML, then that can be accomplished through an extension which removes HTML parsing: from markdown.extensions import Extension class EscapeHtml ( Extension ): def extendMarkdown ( self , md , md_globals ): del md . preprocessors [ 'html_block' ] del md . inlinePatterns [ 'html' ] html = markdown . markdown ( text , extensions = [ EscapeHtml ()]) As the HTML would not be parsed with the above Extension, then the serializer will escape the raw HTML, which is exactly what happens now when safe_mode=\"escape\" . Positional arguments on the markdown.Markdown() are pending deprecation as are all except the text argument on the markdown.markdown() wrapper function. Only keyword arguments should be used. For example, if your code previously looked like this: html = markdown . markdown ( text , [ 'extra' ]) Then it is recommended that you change it to read something like this: html = markdown . markdown ( text , extensions = [ 'extra' ]) Note This change is being made as a result of deprecating \"safe_mode\" as the safe_mode argument was one of the positional arguments. When that argument is removed, the two arguments following it will no longer be at the correct position. It is recommended that you always use keywords when they are supported for this reason. In previous versions of Python-Markdown, the built-in extensions received special status and did not require the full path to be provided. Additionally, third party extensions whose name started with \"mdx_\" received the same special treatment. This behavior will be deprecated in version 2.6 and will raise a PendingDeprecationWarning in 2.5. Ensure that you always use the full path to your extensions. For example, if you previously did the following: markdown . markdown ( text , extensions = [ 'extra' ]) You should change your code to the following: markdown . markdown ( text , extensions = [ 'markdown.extensions.extra' ]) The same applies to the command line: $ python -m markdown -x markdown.extensions.extra input.txt See the documentation for a full explanation of the current behavior. The previously documented method of appending the extension configuration as a string to the extension name will be deprecated in Python-Markdown version 2.6 and will raise a PendingDeprecationWarning in 2.5. The extension_configs keyword should be used instead. See the documentation for a full explanation of the current behavior. What\u2019s New in Python-Markdown 2.5 \u00b6 The Smarty Extension has had a number of additional configuration settings added, which allows one to define their own substitutions to better support languages other than English. Thanks to Martin Altmayer for implementing this feature. Named Extensions (strings passed to the extensions keyword of markdown.Markdown ) can now point to any module and/or Class on your PYTHONPATH. While dot notation was previously supported, a module could not be at the root of your PYTHONPATH. The name had to contain at least one dot (requiring it to be a sub-module). This restriction no longer exists. Additionally, a Class may be specified in the name. The class must be at the end of the name (which uses dot notation from PYTHONPATH) and be separated by a colon from the module. Therefore, if you were to import the class like this: from path.to.module import SomeExtensionClass Then the named extension would comprise this string: \"path.to.module:SomeExtensionClass\" This allows multiple extensions to be implemented within the same module and still accessible when the user is not able to import the extension directly (perhaps from a template filter or the command line). This also means that extension modules are no longer required to include the makeExtension function which returns an instance of the extension class. However, if the user does not specify the class name (she only provides \"path.to.module\" ) the extension will fail to load without the makeExtension function included in the module. Extension authors will want to document carefully what is required to load their extensions. The Extension Configuration code has been refactored to make it a little easier for extension authors to work with configuration settings. As a result, the extension_configs keyword now accepts a dictionary rather than requiring a list of tuples. A list of tuples is still supported so no one needs to change their existing code. This should also simplify the learning curve for new users. Extension authors are encouraged to review the new methods available on the markdown.extnesions.Extension class for handling configuration and adjust their code going forward. The included extensions provide a model for best practices. See the API documentation for a full explanation. The Command Line Interface now accepts a --extensions_config (or -c ) option which accepts a file name and passes the parsed content of a YAML or JSON file to the extension_configs keyword of the markdown.Markdown class. The contents of the YAML or JSON must map to a Python Dictionary which matches the format required by the extension_configs keyword. Note that PyYAML is required to parse YAML files. The Admonition Extension is no longer considered \u201cexperimental.\u201d There have been various refactors of the testing framework. While those changes will not directly effect end users, the code is being better tested which will benefit everyone. Various bug fixes have been made. See the commit log for a complete history of the changes.","title":"Release Notes for v.2.5"},{"location":"change_log/release-2.5/#python-markdown-25-release-notes","text":"We are pleased to release Python-Markdown 2.5 which adds a few new features and fixes various bugs. See the list of changes below for details. Python-Markdown version 2.5 supports Python versions 2.7, 3.2, 3.3, and 3.4.","title":"Python-Markdown 2.5 Release Notes"},{"location":"change_log/release-2.5/#backwards-incompatible-changes","text":"Python-Markdown no longer supports Python version 2.6. You must be using Python versions 2.7, 3.2, 3.3, or 3.4. The force_linenos configuration key on the CodeHilite Extension has been deprecated and will raise a KeyError if provided. In the previous release (2.4), it was issuing a DeprecationWarning . The linenums keyword should be used instead, which provides more control of the output. Both safe_mode and the associated html_replacement_text keywords will be deprecated in version 2.6 and will raise a PendingDeprecationWarning in 2.5. The so-called \u201csafe mode\u201d was never actually \u201csafe\u201d which has resulted in many people having a false sense of security when using it. As an alternative, the developers of Python-Markdown recommend that any untrusted content be passed through an HTML sanitizer (like Bleach ) after being converted to HTML by markdown. If your code previously looked like this: html = markdown . markdown ( text , same_mode = True ) Then it is recommended that you change your code to read something like this: import bleach html = bleach . clean ( markdown . markdown ( text )) If you are not interested in sanitizing untrusted text, but simply desire to escape raw HTML, then that can be accomplished through an extension which removes HTML parsing: from markdown.extensions import Extension class EscapeHtml ( Extension ): def extendMarkdown ( self , md , md_globals ): del md . preprocessors [ 'html_block' ] del md . inlinePatterns [ 'html' ] html = markdown . markdown ( text , extensions = [ EscapeHtml ()]) As the HTML would not be parsed with the above Extension, then the serializer will escape the raw HTML, which is exactly what happens now when safe_mode=\"escape\" . Positional arguments on the markdown.Markdown() are pending deprecation as are all except the text argument on the markdown.markdown() wrapper function. Only keyword arguments should be used. For example, if your code previously looked like this: html = markdown . markdown ( text , [ 'extra' ]) Then it is recommended that you change it to read something like this: html = markdown . markdown ( text , extensions = [ 'extra' ]) Note This change is being made as a result of deprecating \"safe_mode\" as the safe_mode argument was one of the positional arguments. When that argument is removed, the two arguments following it will no longer be at the correct position. It is recommended that you always use keywords when they are supported for this reason. In previous versions of Python-Markdown, the built-in extensions received special status and did not require the full path to be provided. Additionally, third party extensions whose name started with \"mdx_\" received the same special treatment. This behavior will be deprecated in version 2.6 and will raise a PendingDeprecationWarning in 2.5. Ensure that you always use the full path to your extensions. For example, if you previously did the following: markdown . markdown ( text , extensions = [ 'extra' ]) You should change your code to the following: markdown . markdown ( text , extensions = [ 'markdown.extensions.extra' ]) The same applies to the command line: $ python -m markdown -x markdown.extensions.extra input.txt See the documentation for a full explanation of the current behavior. The previously documented method of appending the extension configuration as a string to the extension name will be deprecated in Python-Markdown version 2.6 and will raise a PendingDeprecationWarning in 2.5. The extension_configs keyword should be used instead. See the documentation for a full explanation of the current behavior.","title":"Backwards-incompatible Changes"},{"location":"change_log/release-2.5/#whats-new-in-python-markdown-25","text":"The Smarty Extension has had a number of additional configuration settings added, which allows one to define their own substitutions to better support languages other than English. Thanks to Martin Altmayer for implementing this feature. Named Extensions (strings passed to the extensions keyword of markdown.Markdown ) can now point to any module and/or Class on your PYTHONPATH. While dot notation was previously supported, a module could not be at the root of your PYTHONPATH. The name had to contain at least one dot (requiring it to be a sub-module). This restriction no longer exists. Additionally, a Class may be specified in the name. The class must be at the end of the name (which uses dot notation from PYTHONPATH) and be separated by a colon from the module. Therefore, if you were to import the class like this: from path.to.module import SomeExtensionClass Then the named extension would comprise this string: \"path.to.module:SomeExtensionClass\" This allows multiple extensions to be implemented within the same module and still accessible when the user is not able to import the extension directly (perhaps from a template filter or the command line). This also means that extension modules are no longer required to include the makeExtension function which returns an instance of the extension class. However, if the user does not specify the class name (she only provides \"path.to.module\" ) the extension will fail to load without the makeExtension function included in the module. Extension authors will want to document carefully what is required to load their extensions. The Extension Configuration code has been refactored to make it a little easier for extension authors to work with configuration settings. As a result, the extension_configs keyword now accepts a dictionary rather than requiring a list of tuples. A list of tuples is still supported so no one needs to change their existing code. This should also simplify the learning curve for new users. Extension authors are encouraged to review the new methods available on the markdown.extnesions.Extension class for handling configuration and adjust their code going forward. The included extensions provide a model for best practices. See the API documentation for a full explanation. The Command Line Interface now accepts a --extensions_config (or -c ) option which accepts a file name and passes the parsed content of a YAML or JSON file to the extension_configs keyword of the markdown.Markdown class. The contents of the YAML or JSON must map to a Python Dictionary which matches the format required by the extension_configs keyword. Note that PyYAML is required to parse YAML files. The Admonition Extension is no longer considered \u201cexperimental.\u201d There have been various refactors of the testing framework. While those changes will not directly effect end users, the code is being better tested which will benefit everyone. Various bug fixes have been made. See the commit log for a complete history of the changes.","title":"What's New in Python-Markdown 2.5"},{"location":"change_log/release-2.6/","text":"Python-Markdown 2.6 Release Notes \u00b6 We are pleased to release Python-Markdown 2.6 which adds a few new features and fixes various bugs. See the list of changes below for details. Python-Markdown version 2.6 supports Python versions 2.7, 3.2, 3.3, and 3.4 as well as PyPy. Backwards-incompatible Changes \u00b6 safe_mode Deprecated \u00b6 Both safe_mode and the associated html_replacement_text keywords are deprecated in version 2.6 and will raise a DeprecationWarning . The safe_mode and html_replacement_text keywords will be ignored in the next release. The so-called \u201csafe mode\u201d was never actually \u201csafe\u201d which has resulted in many people having a false sense of security when using it. As an alternative, the developers of Python-Markdown recommend that any untrusted content be passed through an HTML sanitizer (like Bleach ) after being converted to HTML by markdown. In fact, Bleach Whitelist provides a curated list of tags, attributes, and styles suitable for filtering user-provided HTML using bleach. If your code previously looked like this: html = markdown . markdown ( text , safe_mode = True ) Then it is recommended that you change your code to read something like this: import bleach from bleach_whitelist import markdown_tags , markdown_attrs html = bleach . clean ( markdown . markdown ( text ), markdown_tags , markdown_attrs ) If you are not interested in sanitizing untrusted text, but simply desire to escape raw HTML, then that can be accomplished through an extension which removes HTML parsing: from markdown.extensions import Extension class EscapeHtml ( Extension ): def extendMarkdown ( self , md , md_globals ): del md . preprocessors [ 'html_block' ] del md . inlinePatterns [ 'html' ] html = markdown . markdown ( text , extensions = [ EscapeHtml ()]) As the HTML would not be parsed with the above Extension, then the serializer will escape the raw HTML, which is exactly what happens now when safe_mode=\"escape\" . Positional Arguments Deprecated \u00b6 Positional arguments on the markdown.Markdown() class are deprecated as are all except the text argument on the markdown.markdown() wrapper function. Using positional arguments will raise a DeprecationWarning in 2.6 and an error in the next release. Only keyword arguments should be used. For example, if your code previously looked like this: html = markdown . markdown ( text , [ SomeExtension ()]) Then it is recommended that you change it to read something like this: html = markdown . markdown ( text , extensions = [ SomeExtension ()]) Note This change is being made as a result of deprecating \"safe_mode\" as the safe_mode argument was one of the positional arguments. When that argument is removed, the two arguments following it will no longer be at the correct position. It is recommended that you always use keywords when they are supported for this reason. \u201cShortened\u201d Extension Names Deprecated \u00b6 In previous versions of Python-Markdown, the built-in extensions received special status and did not require the full path to be provided. Additionally, third party extensions whose name started with \"mdx_\" received the same special treatment. This behavior is deprecated and will raise a DeprecationWarning in version 2.6 and an error in the next release. Ensure that you always use the full path to your extensions. For example, if you previously did the following: markdown . markdown ( text , extensions = [ 'extra' ]) You should change your code to the following: markdown . markdown ( text , extensions = [ 'markdown.extensions.extra' ]) The same applies to the command line: python - m markdown - x markdown . extensions . extra input . txt Similarly, if you have used a third party extension (for example mdx_math ), previously you might have called it like this: markdown . markdown ( text , extensions = [ 'math' ]) As the \"mdx\" prefix will no longer be appended, you will need to change your code as follows (assuming the file mdx_math.py is installed at the root of your PYTHONPATH): markdown . markdown ( text , extensions = [ 'mdx_math' ]) Extension authors will want to update their documentation to reflect the new behavior. See the documentation for a full explanation of the current behavior. Extension Configuration as Part of Extension Name Deprecated \u00b6 The previously documented method of appending the extension configuration options as a string to the extension name is deprecated and will raise a DeprecationWarning in version 2.6 and an error in 2.7. The extension_configs keyword should be used instead. See the documentation for a full explanation of the current behavior. HeaderId Extension Pending Deprecation \u00b6 The HeaderId Extension is pending deprecation and will raise a PendingDeprecationWarning in version 2.6. The extension will be deprecated in the next release and raise an error in the release after that. Use the Table of Contents Extension instead, which offers most of the features of the HeaderId Extension and more (support for meta data is missing). Extension authors who have been using the slugify and unique functions defined in the HeaderId Extension should note that those functions are now defined in the Table of Contents extension and should adjust their import statements accordingly ( from markdown.extensions.toc import slugify, unique ). The configs Keyword is Deprecated \u00b6 Positional arguments and the configs keyword on the markdown.extension.Extension class (and its subclasses) are deprecated. Each individual configuration option should be passed to the class as a keyword/value pair. For example. one might have previously initiated an extension subclass like this: ext = SomeExtension ( configs = { 'somekey' : 'somevalue' }) That code should be updated to pass in the options directly: ext = SomeExtension ( somekey = 'somevalue' ) Extension authors will want to note that this affects the makeExtension function as well. Previously it was common for the function to be defined as follows: def makeExtension ( configs = None ): return SomeExtension ( configs = configs ) Extension authors will want to update their code to the following instead: def makeExtension ( ** kwargs ): return SomeExtension ( ** kwargs ) Failing to do so will result in a DeprecationWarning and will raise an error in the next release. See the Extension API documentation for more information. In the event that an markdown.extension.Extension subclass overrides the __init__ method and implements its own configuration handling, then the above may not apply. However, it is recommended that the subclass still calls the parent __init__ method to handle configuration options like so: class SomeExtension ( markdown . extension . Extension ): def __init__ ( ** kwargs ): # Do pre-config stuff here # Set config defaults self . config = { 'option1' : [ 'value1' , 'description1' ], 'option2' : [ 'value2' , 'description2' ] } # Set user defined configs super ( MyExtension , self ) . __init__ ( ** kwargs ) # Do post-config stuff here Note the call to super to get the benefits of configuration handling from the parent class. See the documentation for more information. What\u2019s New in Python-Markdown 2.6 \u00b6 Official Support for PyPy \u00b6 Official support for PyPy has been added. While Python-Markdown has most likely worked on PyPy for some time, it is now officially supported and tested on PyPy. YAML Style Meta-Data \u00b6 The Meta-Data Extension now includes optional support for YAML style meta-data. By default, the YAML deliminators are recognized, however, the actual data is parsed as previously. This follows the syntax of MultiMarkdown , which inspired this extension. Alternatively, if the yaml option is set, then the data is parsed as YAML. As the yaml option was buggy, it was removed in 2.6.1. It is suggested that a preprocessor (like docdata ) or a third party extension be used if you want true YAML support. See Issue #390 for a full explanation. Table of Contents Extension Refactored \u00b6 The Table of Contents Extension has been refactored and some new features have been added. See the documentation for a full explanation of each feature listed below: The extension now assigns the Table of Contents to the toc attribute of the Markdown class regardless of whether a \u201cmarker\u201d was found in the document. Third party frameworks no longer need to insert a \u201cmarker,\u201d run the document through Markdown, then extract the Table of Contents from the document. The Table of Contents Extension is now a \u201cregistered extension.\u201d Therefore, when the reset method of the Markdown class is called, the toc attribute on the Markdown class is cleared (set to an empty string). When the marker configuration option is set to an empty string, the parser completely skips the process of searching the document for markers. This should save parsing time when the Table of Contents Extension is being used only to assign ids to headers. A separator configuration option has been added allowing users to override the separator character used by the slugify function. A baselevel configuration option has been added allowing users to set the base level of headers in their documents (h1-h6). This allows the header levels to be automatically adjusted to fit within the hierarchy of an HTML template. Pygments can now be disabled \u00b6 The CodeHilite Extension has gained a new configuration option: use_pygments . The option is True by default, however, it allows one to turn off Pygments code highlighting (set to False ) while preserving the language detection features of the extension. Note that Pygments language guessing is not used as that would \u2018use Pygments\u2019. If a language is defined for a code block, it will be assigned to the <code> tag as a class in the manner suggested by the HTML5 spec (alternate output will not be entertained) and could potentially be used by a JavaScript library in the browser to highlight the code block. Miscellaneous \u00b6 Test coverage has been improved including running flake8 . While those changes will not directly effect end users, the code is being better tested which will benefit everyone. Various bug fixes have been made. See the commit log for a complete history of the changes.","title":"Release Notes for v.2.6"},{"location":"change_log/release-2.6/#python-markdown-26-release-notes","text":"We are pleased to release Python-Markdown 2.6 which adds a few new features and fixes various bugs. See the list of changes below for details. Python-Markdown version 2.6 supports Python versions 2.7, 3.2, 3.3, and 3.4 as well as PyPy.","title":"Python-Markdown 2.6 Release Notes"},{"location":"change_log/release-2.6/#backwards-incompatible-changes","text":"","title":"Backwards-incompatible Changes"},{"location":"change_log/release-2.6/#safe_mode-deprecated","text":"Both safe_mode and the associated html_replacement_text keywords are deprecated in version 2.6 and will raise a DeprecationWarning . The safe_mode and html_replacement_text keywords will be ignored in the next release. The so-called \u201csafe mode\u201d was never actually \u201csafe\u201d which has resulted in many people having a false sense of security when using it. As an alternative, the developers of Python-Markdown recommend that any untrusted content be passed through an HTML sanitizer (like Bleach ) after being converted to HTML by markdown. In fact, Bleach Whitelist provides a curated list of tags, attributes, and styles suitable for filtering user-provided HTML using bleach. If your code previously looked like this: html = markdown . markdown ( text , safe_mode = True ) Then it is recommended that you change your code to read something like this: import bleach from bleach_whitelist import markdown_tags , markdown_attrs html = bleach . clean ( markdown . markdown ( text ), markdown_tags , markdown_attrs ) If you are not interested in sanitizing untrusted text, but simply desire to escape raw HTML, then that can be accomplished through an extension which removes HTML parsing: from markdown.extensions import Extension class EscapeHtml ( Extension ): def extendMarkdown ( self , md , md_globals ): del md . preprocessors [ 'html_block' ] del md . inlinePatterns [ 'html' ] html = markdown . markdown ( text , extensions = [ EscapeHtml ()]) As the HTML would not be parsed with the above Extension, then the serializer will escape the raw HTML, which is exactly what happens now when safe_mode=\"escape\" .","title":"safe_mode Deprecated"},{"location":"change_log/release-2.6/#positional-arguments-deprecated","text":"Positional arguments on the markdown.Markdown() class are deprecated as are all except the text argument on the markdown.markdown() wrapper function. Using positional arguments will raise a DeprecationWarning in 2.6 and an error in the next release. Only keyword arguments should be used. For example, if your code previously looked like this: html = markdown . markdown ( text , [ SomeExtension ()]) Then it is recommended that you change it to read something like this: html = markdown . markdown ( text , extensions = [ SomeExtension ()]) Note This change is being made as a result of deprecating \"safe_mode\" as the safe_mode argument was one of the positional arguments. When that argument is removed, the two arguments following it will no longer be at the correct position. It is recommended that you always use keywords when they are supported for this reason.","title":"Positional Arguments Deprecated"},{"location":"change_log/release-2.6/#shortened-extension-names-deprecated","text":"In previous versions of Python-Markdown, the built-in extensions received special status and did not require the full path to be provided. Additionally, third party extensions whose name started with \"mdx_\" received the same special treatment. This behavior is deprecated and will raise a DeprecationWarning in version 2.6 and an error in the next release. Ensure that you always use the full path to your extensions. For example, if you previously did the following: markdown . markdown ( text , extensions = [ 'extra' ]) You should change your code to the following: markdown . markdown ( text , extensions = [ 'markdown.extensions.extra' ]) The same applies to the command line: python - m markdown - x markdown . extensions . extra input . txt Similarly, if you have used a third party extension (for example mdx_math ), previously you might have called it like this: markdown . markdown ( text , extensions = [ 'math' ]) As the \"mdx\" prefix will no longer be appended, you will need to change your code as follows (assuming the file mdx_math.py is installed at the root of your PYTHONPATH): markdown . markdown ( text , extensions = [ 'mdx_math' ]) Extension authors will want to update their documentation to reflect the new behavior. See the documentation for a full explanation of the current behavior.","title":"\"Shortened\" Extension Names Deprecated"},{"location":"change_log/release-2.6/#extension-configuration-as-part-of-extension-name-deprecated","text":"The previously documented method of appending the extension configuration options as a string to the extension name is deprecated and will raise a DeprecationWarning in version 2.6 and an error in 2.7. The extension_configs keyword should be used instead. See the documentation for a full explanation of the current behavior.","title":"Extension Configuration as Part of Extension Name Deprecated"},{"location":"change_log/release-2.6/#headerid-extension-pending-deprecation","text":"The HeaderId Extension is pending deprecation and will raise a PendingDeprecationWarning in version 2.6. The extension will be deprecated in the next release and raise an error in the release after that. Use the Table of Contents Extension instead, which offers most of the features of the HeaderId Extension and more (support for meta data is missing). Extension authors who have been using the slugify and unique functions defined in the HeaderId Extension should note that those functions are now defined in the Table of Contents extension and should adjust their import statements accordingly ( from markdown.extensions.toc import slugify, unique ).","title":"HeaderId Extension Pending Deprecation"},{"location":"change_log/release-2.6/#the-configs-keyword-is-deprecated","text":"Positional arguments and the configs keyword on the markdown.extension.Extension class (and its subclasses) are deprecated. Each individual configuration option should be passed to the class as a keyword/value pair. For example. one might have previously initiated an extension subclass like this: ext = SomeExtension ( configs = { 'somekey' : 'somevalue' }) That code should be updated to pass in the options directly: ext = SomeExtension ( somekey = 'somevalue' ) Extension authors will want to note that this affects the makeExtension function as well. Previously it was common for the function to be defined as follows: def makeExtension ( configs = None ): return SomeExtension ( configs = configs ) Extension authors will want to update their code to the following instead: def makeExtension ( ** kwargs ): return SomeExtension ( ** kwargs ) Failing to do so will result in a DeprecationWarning and will raise an error in the next release. See the Extension API documentation for more information. In the event that an markdown.extension.Extension subclass overrides the __init__ method and implements its own configuration handling, then the above may not apply. However, it is recommended that the subclass still calls the parent __init__ method to handle configuration options like so: class SomeExtension ( markdown . extension . Extension ): def __init__ ( ** kwargs ): # Do pre-config stuff here # Set config defaults self . config = { 'option1' : [ 'value1' , 'description1' ], 'option2' : [ 'value2' , 'description2' ] } # Set user defined configs super ( MyExtension , self ) . __init__ ( ** kwargs ) # Do post-config stuff here Note the call to super to get the benefits of configuration handling from the parent class. See the documentation for more information.","title":"The configs Keyword is Deprecated"},{"location":"change_log/release-2.6/#whats-new-in-python-markdown-26","text":"","title":"What's New in Python-Markdown 2.6"},{"location":"change_log/release-2.6/#official-support-for-pypy","text":"Official support for PyPy has been added. While Python-Markdown has most likely worked on PyPy for some time, it is now officially supported and tested on PyPy.","title":"Official Support for PyPy"},{"location":"change_log/release-2.6/#yaml-style-meta-data","text":"The Meta-Data Extension now includes optional support for YAML style meta-data. By default, the YAML deliminators are recognized, however, the actual data is parsed as previously. This follows the syntax of MultiMarkdown , which inspired this extension. Alternatively, if the yaml option is set, then the data is parsed as YAML. As the yaml option was buggy, it was removed in 2.6.1. It is suggested that a preprocessor (like docdata ) or a third party extension be used if you want true YAML support. See Issue #390 for a full explanation.","title":"YAML Style Meta-Data"},{"location":"change_log/release-2.6/#table-of-contents-extension-refactored","text":"The Table of Contents Extension has been refactored and some new features have been added. See the documentation for a full explanation of each feature listed below: The extension now assigns the Table of Contents to the toc attribute of the Markdown class regardless of whether a \u201cmarker\u201d was found in the document. Third party frameworks no longer need to insert a \u201cmarker,\u201d run the document through Markdown, then extract the Table of Contents from the document. The Table of Contents Extension is now a \u201cregistered extension.\u201d Therefore, when the reset method of the Markdown class is called, the toc attribute on the Markdown class is cleared (set to an empty string). When the marker configuration option is set to an empty string, the parser completely skips the process of searching the document for markers. This should save parsing time when the Table of Contents Extension is being used only to assign ids to headers. A separator configuration option has been added allowing users to override the separator character used by the slugify function. A baselevel configuration option has been added allowing users to set the base level of headers in their documents (h1-h6). This allows the header levels to be automatically adjusted to fit within the hierarchy of an HTML template.","title":"Table of Contents Extension Refactored"},{"location":"change_log/release-2.6/#pygments-can-now-be-disabled","text":"The CodeHilite Extension has gained a new configuration option: use_pygments . The option is True by default, however, it allows one to turn off Pygments code highlighting (set to False ) while preserving the language detection features of the extension. Note that Pygments language guessing is not used as that would \u2018use Pygments\u2019. If a language is defined for a code block, it will be assigned to the <code> tag as a class in the manner suggested by the HTML5 spec (alternate output will not be entertained) and could potentially be used by a JavaScript library in the browser to highlight the code block.","title":"Pygments can now be disabled"},{"location":"change_log/release-2.6/#miscellaneous","text":"Test coverage has been improved including running flake8 . While those changes will not directly effect end users, the code is being better tested which will benefit everyone. Various bug fixes have been made. See the commit log for a complete history of the changes.","title":"Miscellaneous"},{"location":"change_log/release-3.0/","text":"Python-Markdown 3.0 Release Notes \u00b6 We are pleased to release Python-Markdown 3.0 which adds a few new features and fixes various bugs and deprecates various old features. See the list of changes below for details. Python-Markdown version 3.0 supports Python versions 2.7, 3.4, 3.5, 3.6, 3.7, PyPy and PyPy3. Backwards-incompatible changes \u00b6 enable_attributes keyword deprecated \u00b6 The enable_attributes keyword is deprecated in version 3.0 and will be ignored. Previously the keyword was True by default and enabled an undocumented way to define attributes on document elements. The feature has been removed from version 3.0. As most users did not use the undocumented feature, it should not affect most users. For the few who did use the feature, it can be enabled by using the Legacy Attributes extension. smart_emphasis keyword and smart_strong extension deprecated \u00b6 The smart_emphasis keyword is deprecated in version 3.0 and will be ignored. Previously the keyword was True by default and caused the parser to ignore middle-word emphasis. Additionally, the optional smart_strong extension provided the same behavior for strong emphasis. Both of those features are now part of the default behavior, and the Legacy Emphasis extension is available to disable that behavior. output_formats simplified to html and xhtml . \u00b6 The output_formats keyword now only accepts two options: html and xhtml Note that if (x)html1 , (x)html4 or (x)html5 are passed in, the number is stripped and ignored. safe_mode and html_replacement_text keywords deprecated \u00b6 Both safe_mode and the associated html_replacement_text keywords are deprecated in version 3.0 and will be ignored. The so-called \u201csafe mode\u201d was never actually \u201csafe\u201d which has resulted in many people having a false sense of security when using it. As an alternative, the developers of Python-Markdown recommend that any untrusted content be passed through an HTML sanitizer (like Bleach ) after being converted to HTML by markdown. In fact, Bleach Whitelist provides a curated list of tags, attributes, and styles suitable for filtering user-provided HTML using bleach. If your code previously looked like this: html = markdown . markdown ( text , safe_mode = True ) Then it is recommended that you change your code to read something like this: import bleach from bleach_whitelist import markdown_tags , markdown_attrs html = bleach . clean ( markdown . markdown ( text ), markdown_tags , markdown_attrs ) If you are not interested in sanitizing untrusted text, but simply desire to escape raw HTML, then that can be accomplished through an extension which removes HTML parsing: from markdown.extensions import Extension class EscapeHtml ( Extension ): def extendMarkdown ( self , md ): md . preprocessors . deregister ( 'html_block' ) md . inlinePatterns . deregister ( 'html' ) html = markdown . markdown ( text , extensions = [ EscapeHtml ()]) As the HTML would not be parsed with the above Extension, then the serializer will escape the raw HTML, which is exactly what happened in previous versions with safe_mode=\"escape\" . Positional arguments deprecated \u00b6 Positional arguments on the markdown.Markdown() class are deprecated as are all except the text argument on the markdown.markdown() wrapper function. Using positional arguments will raise an error. Only keyword arguments should be used. For example, if your code previously looked like this: html = markdown . markdown ( text , [ SomeExtension ()]) Then it is recommended that you change it to read something like this: html = markdown . markdown ( text , extensions = [ SomeExtension ()]) Note This change is being made as a result of deprecating \"safe_mode\" as the safe_mode argument was one of the positional arguments. When that argument is removed, the two arguments following it will no longer be at the correct position. It is recommended that you always use keywords when they are supported for this reason. Extension name behavior has changed \u00b6 In previous versions of Python-Markdown, the built-in extensions received special status and did not require the full path to be provided. Additionally, third party extensions whose name started with \"mdx_\" received the same special treatment. This is no longer the case. Support has been added for extensions to define an entry point . An entry point is a string name which can be used to point to an Extension class. The built-in extensions now have entry points which match the old short names. And any third-party extensions which define entry points can now get the same behavior. See the documentation for each specific extension to find the assigned name. If an extension does not define an entry point, then the full path to the extension must be used. See the documentation for a full explanation of the current behavior. Extension configuration as part of extension name deprecated \u00b6 The previously documented method of appending the extension configuration options as a string to the extension name is deprecated and will raise an error. The extension_configs keyword should be used instead. See the documentation for a full explanation of the current behavior. HeaderId extension deprecated \u00b6 The HeaderId Extension is deprecated and will raise an error if specified. Use the Table of Contents Extension instead, which offers most of the features of the HeaderId Extension and more (support for meta data is missing). Extension authors who have been using the slugify and unique functions defined in the HeaderId Extension should note that those functions are now defined in the Table of Contents extension and should adjust their import statements accordingly ( from markdown.extensions.toc import slugify, unique ). Homegrown OrderedDict has been replaced with a purpose-built Registry \u00b6 All processors and patterns now get \u201cregistered\u201d to a Registry . A backwards compatible shim is included so that existing simple extensions should continue to work. A DeprecationWarning will be raised for any code which calls the old API. Markdown class instance references. \u00b6 Previously, instances of the Markdown class were represented as any one of md , md_instance , or markdown . This inconsistency made it difficult when developing extensions, or just maintaining the existing code. Now, all instances are consistently represented as md . The old attributes on class instances still exist, but raise a DeprecationWarning when accessed. Also on classes where the instance was optional, the attribute always exists now and is simply None if no instance was provided (previously the attribute would not exist). markdown.util.isBlockLevel deprecated \u00b6 The markdown.util.isBlockLevel function is deprecated and will raise a DeprecationWarning . Instead, extensions should use the isBlockLevel method of the Markdown class instance. Additionally, a list of block level elements is defined in the block_level_elements attribute of the Markdown class which extensions can access to alter the list of elements which are treated as block level elements. md_globals keyword deprecated from extension API \u00b6 Previously, the extendMarkdown method of a markdown.extensions.Extension subclasses accepted an md_globals keyword, which contained the value returned by Python\u2019s globals() built-in function. As all of the configuration is now held within the Markdown class instance, access to the globals is no longer necessary and any extensions which expect the keyword will raise a DeprecationWarning . A future release will raise an error. markdown.version and markdown.version_info deprecated \u00b6 Historically, version numbers were acquired via the attributes markdown.version and markdown.version_info . Moving forward, a more standardized approach is being followed and versions are acquired via the markdown.__version__ and markdown.__version_info__ attributes. The legacy attributes are still available to allow distinguishing versions between the legacy Markdown 2.0 series and the Markdown 3.0 series, but in the future the legacy attributes will be removed. Added new, more flexible InlineProcessor class \u00b6 A new InlineProcessor class handles inline processing much better and allows for more flexibility. The new InlineProcessor classes no longer utilize unnecessary pretext and post-text captures. New class can accept the buffer that is being worked on and manually process the text without regular expressions and return new replacement bounds. This helps us to handle links in a better way and handle nested brackets and logic that is too much for regular expression. New features \u00b6 The following new features have been included in the release: A new testing framework is included as a part of the Markdown library, which can also be used by third party extensions. A new toc_depth parameter has been added to the Table of Contents Extension . A new toc_tokens attribute has been added to the Markdown class by the Table of Contents Extension , which contains the raw tokens used to build the Table of Contents. Users can use this to build their own custom Table of Contents rather than needing to parse the HTML available on the toc attribute of the Markdown class. When the Table of Contents Extension is used in conjunction with the Attribute Lists Extension and a data-toc-label attribute is defined on a header, the content of the data-toc-label attribute is now used as the content of the Table of Contents item for that header. Additional CSS class names can be appended to Admonitions .","title":"Release Notes for v.3.0"},{"location":"change_log/release-3.0/#python-markdown-30-release-notes","text":"We are pleased to release Python-Markdown 3.0 which adds a few new features and fixes various bugs and deprecates various old features. See the list of changes below for details. Python-Markdown version 3.0 supports Python versions 2.7, 3.4, 3.5, 3.6, 3.7, PyPy and PyPy3.","title":"Python-Markdown 3.0 Release Notes"},{"location":"change_log/release-3.0/#backwards-incompatible-changes","text":"","title":"Backwards-incompatible changes"},{"location":"change_log/release-3.0/#enable_attributes-keyword-deprecated","text":"The enable_attributes keyword is deprecated in version 3.0 and will be ignored. Previously the keyword was True by default and enabled an undocumented way to define attributes on document elements. The feature has been removed from version 3.0. As most users did not use the undocumented feature, it should not affect most users. For the few who did use the feature, it can be enabled by using the Legacy Attributes extension.","title":"enable_attributes keyword deprecated"},{"location":"change_log/release-3.0/#smart_emphasis-keyword-and-smart_strong-extension-deprecated","text":"The smart_emphasis keyword is deprecated in version 3.0 and will be ignored. Previously the keyword was True by default and caused the parser to ignore middle-word emphasis. Additionally, the optional smart_strong extension provided the same behavior for strong emphasis. Both of those features are now part of the default behavior, and the Legacy Emphasis extension is available to disable that behavior.","title":"smart_emphasis keyword and smart_strong extension deprecated"},{"location":"change_log/release-3.0/#output_formats-simplified-to-html-and-xhtml","text":"The output_formats keyword now only accepts two options: html and xhtml Note that if (x)html1 , (x)html4 or (x)html5 are passed in, the number is stripped and ignored.","title":"output_formats simplified to html and xhtml."},{"location":"change_log/release-3.0/#safe_mode-and-html_replacement_text-keywords-deprecated","text":"Both safe_mode and the associated html_replacement_text keywords are deprecated in version 3.0 and will be ignored. The so-called \u201csafe mode\u201d was never actually \u201csafe\u201d which has resulted in many people having a false sense of security when using it. As an alternative, the developers of Python-Markdown recommend that any untrusted content be passed through an HTML sanitizer (like Bleach ) after being converted to HTML by markdown. In fact, Bleach Whitelist provides a curated list of tags, attributes, and styles suitable for filtering user-provided HTML using bleach. If your code previously looked like this: html = markdown . markdown ( text , safe_mode = True ) Then it is recommended that you change your code to read something like this: import bleach from bleach_whitelist import markdown_tags , markdown_attrs html = bleach . clean ( markdown . markdown ( text ), markdown_tags , markdown_attrs ) If you are not interested in sanitizing untrusted text, but simply desire to escape raw HTML, then that can be accomplished through an extension which removes HTML parsing: from markdown.extensions import Extension class EscapeHtml ( Extension ): def extendMarkdown ( self , md ): md . preprocessors . deregister ( 'html_block' ) md . inlinePatterns . deregister ( 'html' ) html = markdown . markdown ( text , extensions = [ EscapeHtml ()]) As the HTML would not be parsed with the above Extension, then the serializer will escape the raw HTML, which is exactly what happened in previous versions with safe_mode=\"escape\" .","title":"safe_mode and html_replacement_text keywords deprecated"},{"location":"change_log/release-3.0/#positional-arguments-deprecated","text":"Positional arguments on the markdown.Markdown() class are deprecated as are all except the text argument on the markdown.markdown() wrapper function. Using positional arguments will raise an error. Only keyword arguments should be used. For example, if your code previously looked like this: html = markdown . markdown ( text , [ SomeExtension ()]) Then it is recommended that you change it to read something like this: html = markdown . markdown ( text , extensions = [ SomeExtension ()]) Note This change is being made as a result of deprecating \"safe_mode\" as the safe_mode argument was one of the positional arguments. When that argument is removed, the two arguments following it will no longer be at the correct position. It is recommended that you always use keywords when they are supported for this reason.","title":"Positional arguments deprecated"},{"location":"change_log/release-3.0/#extension-name-behavior-has-changed","text":"In previous versions of Python-Markdown, the built-in extensions received special status and did not require the full path to be provided. Additionally, third party extensions whose name started with \"mdx_\" received the same special treatment. This is no longer the case. Support has been added for extensions to define an entry point . An entry point is a string name which can be used to point to an Extension class. The built-in extensions now have entry points which match the old short names. And any third-party extensions which define entry points can now get the same behavior. See the documentation for each specific extension to find the assigned name. If an extension does not define an entry point, then the full path to the extension must be used. See the documentation for a full explanation of the current behavior.","title":"Extension name behavior has changed"},{"location":"change_log/release-3.0/#extension-configuration-as-part-of-extension-name-deprecated","text":"The previously documented method of appending the extension configuration options as a string to the extension name is deprecated and will raise an error. The extension_configs keyword should be used instead. See the documentation for a full explanation of the current behavior.","title":"Extension configuration as part of extension name deprecated"},{"location":"change_log/release-3.0/#headerid-extension-deprecated","text":"The HeaderId Extension is deprecated and will raise an error if specified. Use the Table of Contents Extension instead, which offers most of the features of the HeaderId Extension and more (support for meta data is missing). Extension authors who have been using the slugify and unique functions defined in the HeaderId Extension should note that those functions are now defined in the Table of Contents extension and should adjust their import statements accordingly ( from markdown.extensions.toc import slugify, unique ).","title":"HeaderId extension deprecated"},{"location":"change_log/release-3.0/#homegrown-ordereddict-has-been-replaced-with-a-purpose-built-registry","text":"All processors and patterns now get \u201cregistered\u201d to a Registry . A backwards compatible shim is included so that existing simple extensions should continue to work. A DeprecationWarning will be raised for any code which calls the old API.","title":"Homegrown OrderedDict has been replaced with a purpose-built Registry"},{"location":"change_log/release-3.0/#markdown-class-instance-references","text":"Previously, instances of the Markdown class were represented as any one of md , md_instance , or markdown . This inconsistency made it difficult when developing extensions, or just maintaining the existing code. Now, all instances are consistently represented as md . The old attributes on class instances still exist, but raise a DeprecationWarning when accessed. Also on classes where the instance was optional, the attribute always exists now and is simply None if no instance was provided (previously the attribute would not exist).","title":"Markdown class instance references."},{"location":"change_log/release-3.0/#markdownutilisblocklevel-deprecated","text":"The markdown.util.isBlockLevel function is deprecated and will raise a DeprecationWarning . Instead, extensions should use the isBlockLevel method of the Markdown class instance. Additionally, a list of block level elements is defined in the block_level_elements attribute of the Markdown class which extensions can access to alter the list of elements which are treated as block level elements.","title":"markdown.util.isBlockLevel deprecated"},{"location":"change_log/release-3.0/#md_globals-keyword-deprecated-from-extension-api","text":"Previously, the extendMarkdown method of a markdown.extensions.Extension subclasses accepted an md_globals keyword, which contained the value returned by Python\u2019s globals() built-in function. As all of the configuration is now held within the Markdown class instance, access to the globals is no longer necessary and any extensions which expect the keyword will raise a DeprecationWarning . A future release will raise an error.","title":"md_globals keyword deprecated from extension API"},{"location":"change_log/release-3.0/#markdownversion-and-markdownversion_info-deprecated","text":"Historically, version numbers were acquired via the attributes markdown.version and markdown.version_info . Moving forward, a more standardized approach is being followed and versions are acquired via the markdown.__version__ and markdown.__version_info__ attributes. The legacy attributes are still available to allow distinguishing versions between the legacy Markdown 2.0 series and the Markdown 3.0 series, but in the future the legacy attributes will be removed.","title":"markdown.version and markdown.version_info deprecated"},{"location":"change_log/release-3.0/#added-new-more-flexible-inlineprocessor-class","text":"A new InlineProcessor class handles inline processing much better and allows for more flexibility. The new InlineProcessor classes no longer utilize unnecessary pretext and post-text captures. New class can accept the buffer that is being worked on and manually process the text without regular expressions and return new replacement bounds. This helps us to handle links in a better way and handle nested brackets and logic that is too much for regular expression.","title":"Added new, more flexible InlineProcessor class"},{"location":"change_log/release-3.0/#new-features","text":"The following new features have been included in the release: A new testing framework is included as a part of the Markdown library, which can also be used by third party extensions. A new toc_depth parameter has been added to the Table of Contents Extension . A new toc_tokens attribute has been added to the Markdown class by the Table of Contents Extension , which contains the raw tokens used to build the Table of Contents. Users can use this to build their own custom Table of Contents rather than needing to parse the HTML available on the toc attribute of the Markdown class. When the Table of Contents Extension is used in conjunction with the Attribute Lists Extension and a data-toc-label attribute is defined on a header, the content of the data-toc-label attribute is now used as the content of the Table of Contents item for that header. Additional CSS class names can be appended to Admonitions .","title":"New features"},{"location":"change_log/release-3.1/","text":"Python-Markdown 3.1 Release Notes \u00b6 Python-Markdown version 3.1 supports Python versions 2.7, 3.5, 3.6, 3.7, PyPy and PyPy3. Backwards-incompatible changes \u00b6 markdown.version and markdown.version_info deprecated \u00b6 Historically, version numbers were acquired via the attributes markdown.version and markdown.version_info . As of 3.0, a more standardized approach is being followed and versions are acquired via the markdown.__version__ and markdown.__version_info__ attributes. As of 3.1 the legacy attributes will raise a DeprecationWarning if they are accessed. In a future release the legacy attributes will be removed. New features \u00b6 The following new features have been included in the release: A Contributing Guide has been added (#732). A new configuration option to set the footnote separator has been added. Also, the rel and rev attributes have been removed from footnotes as they are not valid in HTML5. The refs and backrefs classes already exist and serve the same purpose (#723). A new option for toc_depth to set not only the bottom section level, but also the top section level. A string consisting of two digits separated by a hyphen in between ( \"2-5\" ), defines the top ( t ) and the bottom ( b ) ( <ht>..<hb> ). A single integer still defines the bottom section level ( <h1>..<hb> ) only. (#787). Bug fixes \u00b6 The following bug fixes are included in the 3.1 release: Update CLI to support PyYAML 5.1. Overlapping raw HTML matches no longer leave placeholders behind (#458). Emphasis patterns now recognize newline characters as whitespace (#783). Version format had been updated to be PEP 440 compliant (#736). Block level elements are defined per instance, not as class attributes (#731). Double escaping of block code has been eliminated (#725). Problems with newlines in references has been fixed (#742). Escaped # are now handled in header syntax (#762).","title":"Release Notes for v.3.1"},{"location":"change_log/release-3.1/#python-markdown-31-release-notes","text":"Python-Markdown version 3.1 supports Python versions 2.7, 3.5, 3.6, 3.7, PyPy and PyPy3.","title":"Python-Markdown 3.1 Release Notes"},{"location":"change_log/release-3.1/#backwards-incompatible-changes","text":"","title":"Backwards-incompatible changes"},{"location":"change_log/release-3.1/#markdownversion-and-markdownversion_info-deprecated","text":"Historically, version numbers were acquired via the attributes markdown.version and markdown.version_info . As of 3.0, a more standardized approach is being followed and versions are acquired via the markdown.__version__ and markdown.__version_info__ attributes. As of 3.1 the legacy attributes will raise a DeprecationWarning if they are accessed. In a future release the legacy attributes will be removed.","title":"markdown.version and markdown.version_info deprecated"},{"location":"change_log/release-3.1/#new-features","text":"The following new features have been included in the release: A Contributing Guide has been added (#732). A new configuration option to set the footnote separator has been added. Also, the rel and rev attributes have been removed from footnotes as they are not valid in HTML5. The refs and backrefs classes already exist and serve the same purpose (#723). A new option for toc_depth to set not only the bottom section level, but also the top section level. A string consisting of two digits separated by a hyphen in between ( \"2-5\" ), defines the top ( t ) and the bottom ( b ) ( <ht>..<hb> ). A single integer still defines the bottom section level ( <h1>..<hb> ) only. (#787).","title":"New features"},{"location":"change_log/release-3.1/#bug-fixes","text":"The following bug fixes are included in the 3.1 release: Update CLI to support PyYAML 5.1. Overlapping raw HTML matches no longer leave placeholders behind (#458). Emphasis patterns now recognize newline characters as whitespace (#783). Version format had been updated to be PEP 440 compliant (#736). Block level elements are defined per instance, not as class attributes (#731). Double escaping of block code has been eliminated (#725). Problems with newlines in references has been fixed (#742). Escaped # are now handled in header syntax (#762).","title":"Bug fixes"},{"location":"change_log/release-3.2/","text":"Python-Markdown 3.2 Release Notes \u00b6 Python-Markdown version 3.2 supports Python versions 3.5, 3.6, 3.7, 3.8, and PyPy3. Backwards-incompatible changes \u00b6 Drop support for Python 2.7 \u00b6 Python 2.7 reaches end-of-life on 2020-01-01 and Python-Markdown 3.2 has dropped support for it. Please upgrade to Python 3, or use Python-Markdown 3.1. em and strong inline processor changes \u00b6 In order to fix issue #792, em / strong inline processors were refactored. This translated into removing many of the existing inline processors that handled this logic: em_strong strong emphasis strong2 emphasis These processors were replaced with two new ones: em_strong em_strong2 The legacy_em extension was also modified with new, refactored logic and simply overrides the em_strong2 inline processor. CodeHilite now always wraps with <code> tags \u00b6 Before, the HTML generated by CodeHilite looked like: - <pre><code>foo = 'bar'</code></pre> if you were not using Pygments. - <pre>foo = 'bar'</pre> if you were using Pygments. To make the cases more consistent (and adhere to many Markdown specifications and HTML code block markup suggestions), CodeHilite will now always additionally wrap code with <code> tags. See #862 for more details. This change does not alter the Python-Markdown API, but users relying on the old markup will find their output now changed. Internally, this change relies on the Pygments 2.4, so you must be using at least that version to see this effect. Users with earlier Pygments versions will continue to see the old behavior. markdown.util.etree deprecated \u00b6 Previously, Python-Markdown was using either the xml.etree.cElementTree module or the xml.etree.ElementTree module, based on their availability. In modern Python versions, the former is a deprecated alias for the latter. Thus, the compatibility layer is deprecated and extensions are advised to use xml.etree.ElementTree directly. Importing markdown.util.etree will raise a DeprecationWarning beginning in version 3.2 and may be removed in a future release. Therefore, extension developers are encouraged to replace from markdown.util import etree with import xml.etree.ElementTree as etree in their code. New features \u00b6 The following new features have been included in the release: Some new configuration options have been added to the toc extension: The anchorlink_class and permalink_class options allow class(es) to be assigned to the anchorlink and permalink respectively. This allows using icon fonts from CSS for the links. Therefore, an empty string passed to permalink now generates an empty permalink . Previously no permalink would have been generated. (#776) The permalink_title option allows the title attribute of a permalink to be set to something other than the default English string Permanent link . (#877) Document thread safety (#812). Markdown parsing in HTML has been exposed via a separate extension called md_in_html . Add support for Python 3.8. Bug fixes \u00b6 The following bug fixes are included in the 3.2 release: HTML tag placeholders are no longer included in .toc_tokens (#899). Unescape backslash-escaped characters in TOC ids (#864). Refactor bold and italic logic in order to solve complex nesting issues (#792). Always wrap CodeHilite code in tags (#862).","title":"Release Notes for v.3.2"},{"location":"change_log/release-3.2/#python-markdown-32-release-notes","text":"Python-Markdown version 3.2 supports Python versions 3.5, 3.6, 3.7, 3.8, and PyPy3.","title":"Python-Markdown 3.2 Release Notes"},{"location":"change_log/release-3.2/#backwards-incompatible-changes","text":"","title":"Backwards-incompatible changes"},{"location":"change_log/release-3.2/#drop-support-for-python-27","text":"Python 2.7 reaches end-of-life on 2020-01-01 and Python-Markdown 3.2 has dropped support for it. Please upgrade to Python 3, or use Python-Markdown 3.1.","title":"Drop support for Python 2.7"},{"location":"change_log/release-3.2/#em-and-strong-inline-processor-changes","text":"In order to fix issue #792, em / strong inline processors were refactored. This translated into removing many of the existing inline processors that handled this logic: em_strong strong emphasis strong2 emphasis These processors were replaced with two new ones: em_strong em_strong2 The legacy_em extension was also modified with new, refactored logic and simply overrides the em_strong2 inline processor.","title":"em and strong inline processor changes"},{"location":"change_log/release-3.2/#codehilite-now-always-wraps-with-ltcodegt-tags","text":"Before, the HTML generated by CodeHilite looked like: - <pre><code>foo = 'bar'</code></pre> if you were not using Pygments. - <pre>foo = 'bar'</pre> if you were using Pygments. To make the cases more consistent (and adhere to many Markdown specifications and HTML code block markup suggestions), CodeHilite will now always additionally wrap code with <code> tags. See #862 for more details. This change does not alter the Python-Markdown API, but users relying on the old markup will find their output now changed. Internally, this change relies on the Pygments 2.4, so you must be using at least that version to see this effect. Users with earlier Pygments versions will continue to see the old behavior.","title":"CodeHilite now always wraps with &amp;lt;code&amp;gt; tags"},{"location":"change_log/release-3.2/#markdownutiletree-deprecated","text":"Previously, Python-Markdown was using either the xml.etree.cElementTree module or the xml.etree.ElementTree module, based on their availability. In modern Python versions, the former is a deprecated alias for the latter. Thus, the compatibility layer is deprecated and extensions are advised to use xml.etree.ElementTree directly. Importing markdown.util.etree will raise a DeprecationWarning beginning in version 3.2 and may be removed in a future release. Therefore, extension developers are encouraged to replace from markdown.util import etree with import xml.etree.ElementTree as etree in their code.","title":"markdown.util.etree deprecated"},{"location":"change_log/release-3.2/#new-features","text":"The following new features have been included in the release: Some new configuration options have been added to the toc extension: The anchorlink_class and permalink_class options allow class(es) to be assigned to the anchorlink and permalink respectively. This allows using icon fonts from CSS for the links. Therefore, an empty string passed to permalink now generates an empty permalink . Previously no permalink would have been generated. (#776) The permalink_title option allows the title attribute of a permalink to be set to something other than the default English string Permanent link . (#877) Document thread safety (#812). Markdown parsing in HTML has been exposed via a separate extension called md_in_html . Add support for Python 3.8.","title":"New features"},{"location":"change_log/release-3.2/#bug-fixes","text":"The following bug fixes are included in the 3.2 release: HTML tag placeholders are no longer included in .toc_tokens (#899). Unescape backslash-escaped characters in TOC ids (#864). Refactor bold and italic logic in order to solve complex nesting issues (#792). Always wrap CodeHilite code in tags (#862).","title":"Bug fixes"},{"location":"extensions/","text":"Extensions \u00b6 Python Markdown offers a flexible extension mechanism, which makes it possible to change and/or extend the behavior of the parser without having to edit the actual source files. To use an extension, pass it to markdown with the extensions keyword. markdown . markdown ( some_text , extensions = [ MyExtClass (), 'myext' , 'path.to.my.ext:MyExtClass' ]) See the Library Reference for more details. From the command line, specify an extension with the -x option. python -m markdown -x myext -x path.to.module:MyExtClass input.txt > output.html See the Command Line docs or use the --help option for more details. See Also If you would like to write your own extensions, see the Extension API for details. Officially Supported Extensions \u00b6 The extensions listed below are included with (at least) the most recent release and are officially supported by Python-Markdown. Any documentation is maintained here and all bug reports should be made to the project. If you have a typical install of Python-Markdown, these extensions are already available to you using the \u201cEntry Point\u201d name listed in the second column below. Extension Entry Point Dot Notation Extra extra markdown.extensions.extra Abbreviations abbr markdown.extensions.abbr Attribute Lists attr_list markdown.extensions.attr_list Definition Lists def_list markdown.extensions.def_list Fenced Code Blocks fenced_code markdown.extensions.fenced_code Footnotes footnotes markdown.extensions.footnotes Markdown in HTML md_in_html markdown.extensions.md_in_html Tables tables markdown.extensions.tables Admonition admonition markdown.extensions.admonition CodeHilite codehilite markdown.extensions.codehilite Legacy Attributes legacy_attrs markdown.extensions.legacy_attrs Legacy Emphasis legacy_em markdown.extensions.legacy_em Meta-Data meta markdown.extensions.meta New Line to Break nl2br markdown.extensions.nl2br Sane Lists sane_lists markdown.extensions.sane_lists SmartyPants smarty markdown.extensions.smarty Table of Contents toc markdown.extensions.toc WikiLinks wikilinks markdown.extensions.wikilinks Third Party Extensions \u00b6 Various individuals and/or organizations have developed extensions which they have made available to the public. A list of third party extensions is maintained on the wiki for your convenience. The Python-Markdown team offers no official support for these extensions. Please see the developer of each extension for support.","title":"Extensions"},{"location":"extensions/#extensions","text":"Python Markdown offers a flexible extension mechanism, which makes it possible to change and/or extend the behavior of the parser without having to edit the actual source files. To use an extension, pass it to markdown with the extensions keyword. markdown . markdown ( some_text , extensions = [ MyExtClass (), 'myext' , 'path.to.my.ext:MyExtClass' ]) See the Library Reference for more details. From the command line, specify an extension with the -x option. python -m markdown -x myext -x path.to.module:MyExtClass input.txt > output.html See the Command Line docs or use the --help option for more details. See Also If you would like to write your own extensions, see the Extension API for details.","title":"Extensions"},{"location":"extensions/#officially-supported-extensions","text":"The extensions listed below are included with (at least) the most recent release and are officially supported by Python-Markdown. Any documentation is maintained here and all bug reports should be made to the project. If you have a typical install of Python-Markdown, these extensions are already available to you using the \u201cEntry Point\u201d name listed in the second column below. Extension Entry Point Dot Notation Extra extra markdown.extensions.extra Abbreviations abbr markdown.extensions.abbr Attribute Lists attr_list markdown.extensions.attr_list Definition Lists def_list markdown.extensions.def_list Fenced Code Blocks fenced_code markdown.extensions.fenced_code Footnotes footnotes markdown.extensions.footnotes Markdown in HTML md_in_html markdown.extensions.md_in_html Tables tables markdown.extensions.tables Admonition admonition markdown.extensions.admonition CodeHilite codehilite markdown.extensions.codehilite Legacy Attributes legacy_attrs markdown.extensions.legacy_attrs Legacy Emphasis legacy_em markdown.extensions.legacy_em Meta-Data meta markdown.extensions.meta New Line to Break nl2br markdown.extensions.nl2br Sane Lists sane_lists markdown.extensions.sane_lists SmartyPants smarty markdown.extensions.smarty Table of Contents toc markdown.extensions.toc WikiLinks wikilinks markdown.extensions.wikilinks","title":"Officially Supported Extensions"},{"location":"extensions/#third-party-extensions","text":"Various individuals and/or organizations have developed extensions which they have made available to the public. A list of third party extensions is maintained on the wiki for your convenience. The Python-Markdown team offers no official support for these extensions. Please see the developer of each extension for support.","title":"Third Party Extensions"},{"location":"extensions/abbreviations/","text":"Abbreviations \u00b6 Summary \u00b6 The Abbreviations extension adds the ability to define abbreviations. Specifically, any defined abbreviation is wrapped in an <abbr> tag. The Abbreviations extension is included in the standard Markdown library. Syntax \u00b6 Abbreviations are defined using the syntax established in PHP Markdown Extra . Thus, the following text (taken from the above referenced PHP documentation): The HTML specification is maintained by the W3C. *[HTML]: Hyper Text Markup Language * [W3C]: World Wide Web Consortium will be rendered as: < p > The < abbr title = \"Hyper Text Markup Language\" > HTML </ abbr > specification is maintained by the < abbr title = \"World Wide Web Consortium\" > W3C </ abbr > . </ p > Usage \u00b6 See Extensions for general extension usage. Use abbr as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown . markdown ( some_text , extensions = [ 'abbr' ])","title":"Abbreviations"},{"location":"extensions/abbreviations/#abbreviations","text":"","title":"Abbreviations"},{"location":"extensions/abbreviations/#summary","text":"The Abbreviations extension adds the ability to define abbreviations. Specifically, any defined abbreviation is wrapped in an <abbr> tag. The Abbreviations extension is included in the standard Markdown library.","title":"Summary"},{"location":"extensions/abbreviations/#syntax","text":"Abbreviations are defined using the syntax established in PHP Markdown Extra . Thus, the following text (taken from the above referenced PHP documentation): The HTML specification is maintained by the W3C. *[HTML]: Hyper Text Markup Language * [W3C]: World Wide Web Consortium will be rendered as: < p > The < abbr title = \"Hyper Text Markup Language\" > HTML </ abbr > specification is maintained by the < abbr title = \"World Wide Web Consortium\" > W3C </ abbr > . </ p >","title":"Syntax"},{"location":"extensions/abbreviations/#usage","text":"See Extensions for general extension usage. Use abbr as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown . markdown ( some_text , extensions = [ 'abbr' ])","title":"Usage"},{"location":"extensions/admonition/","text":"Admonition \u00b6 Summary \u00b6 The Admonition extension adds rST-style admonitions to Markdown documents. This extension is included in the standard Markdown library. Syntax \u00b6 Admonitions are created using the following syntax: !!! type \"optional explicit title within double quotes\" Any number of other indented markdown elements. This is the second paragraph. type will be used as the CSS class name and as default title. It must be a single word. So, for instance: !!! note You should note that the title will be automatically capitalized. will render: < div class = \"admonition note\" > < p class = \"admonition-title\" > Note </ p > < p > You should note that the title will be automatically capitalized. </ p > </ div > Optionally, you can use custom titles. For instance: !!! danger \"Don't try this at home\" ... will render: < div class = \"admonition danger\" > < p class = \"admonition-title\" > Don't try this at home </ p > < p > ... </ p > </ div > If you don\u2019t want a title, use a blank string \"\" : !!! important \"\" This is an admonition box without a title. results in: < div class = \"admonition important\" > < p > This is an admonition box without a title. </ p > </ div > You can also provide additional CSS class names separated by spaces. The first class should be the \u201ctype.\u201d For example: !!! danger highlight blink \"Don't try this at home\" ... will render: < div class = \"admonition danger highlight blink\" > < p class = \"admonition-title\" > Don't try this at home </ p > < p > ... </ p > </ div > rST suggests the following \u201ctypes\u201d: attention , caution , danger , error , hint , important , note , tip , and warning ; however, you\u2019re free to use whatever you want. Styling \u00b6 There is no CSS included as part of this extension. Check out the default Sphinx theme for inspiration. Usage \u00b6 See Extensions for general extension usage. Use admonition as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown . markdown ( some_text , extensions = [ 'admonition' ])","title":"Admonition"},{"location":"extensions/admonition/#admonition","text":"","title":"Admonition"},{"location":"extensions/admonition/#summary","text":"The Admonition extension adds rST-style admonitions to Markdown documents. This extension is included in the standard Markdown library.","title":"Summary"},{"location":"extensions/admonition/#syntax","text":"Admonitions are created using the following syntax: !!! type \"optional explicit title within double quotes\" Any number of other indented markdown elements. This is the second paragraph. type will be used as the CSS class name and as default title. It must be a single word. So, for instance: !!! note You should note that the title will be automatically capitalized. will render: < div class = \"admonition note\" > < p class = \"admonition-title\" > Note </ p > < p > You should note that the title will be automatically capitalized. </ p > </ div > Optionally, you can use custom titles. For instance: !!! danger \"Don't try this at home\" ... will render: < div class = \"admonition danger\" > < p class = \"admonition-title\" > Don't try this at home </ p > < p > ... </ p > </ div > If you don\u2019t want a title, use a blank string \"\" : !!! important \"\" This is an admonition box without a title. results in: < div class = \"admonition important\" > < p > This is an admonition box without a title. </ p > </ div > You can also provide additional CSS class names separated by spaces. The first class should be the \u201ctype.\u201d For example: !!! danger highlight blink \"Don't try this at home\" ... will render: < div class = \"admonition danger highlight blink\" > < p class = \"admonition-title\" > Don't try this at home </ p > < p > ... </ p > </ div > rST suggests the following \u201ctypes\u201d: attention , caution , danger , error , hint , important , note , tip , and warning ; however, you\u2019re free to use whatever you want.","title":"Syntax"},{"location":"extensions/admonition/#styling","text":"There is no CSS included as part of this extension. Check out the default Sphinx theme for inspiration.","title":"Styling"},{"location":"extensions/admonition/#usage","text":"See Extensions for general extension usage. Use admonition as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown . markdown ( some_text , extensions = [ 'admonition' ])","title":"Usage"},{"location":"extensions/api/","text":"Writing Extensions for Python-Markdown \u00b6 Python-Markdown includes an API for extension writers to plug their own custom functionality and/or syntax into the parser. There are Preprocessors which allow you to alter the source before it is passed to the parser, inline patterns which allow you to add, remove or override the syntax of any inline elements, and Postprocessors which allow munging of the output of the parser before it is returned. If you really want to dive in, there are also Blockprocessors which are part of the core BlockParser. As the parser builds an ElementTree object which is later rendered as Unicode text, there are also some helpers provided to ease manipulation of the tree. Each part of the API is discussed in its respective section below. Additionally, reading the source of some Available Extensions may be helpful. For example, the Footnotes extension uses most of the features documented here. Preprocessors \u00b6 Preprocessors munge the source text before it is passed into the Markdown core. This is an excellent place to clean up bad syntax, extract things the parser may otherwise choke on and perhaps even store it for later retrieval. Preprocessors should inherit from markdown.preprocessors.Preprocessor and implement a run method with one argument lines . The run method of each Preprocessor will be passed the entire source text as a list of Unicode strings. Each string will contain one line of text. The run method should return either that list, or an altered list of Unicode strings. A pseudo example: from markdown.preprocessors import Preprocessor class MyPreprocessor ( Preprocessor ): def run ( self , lines ): new_lines = [] for line in lines : m = MYREGEX . match ( line ) if m : # do stuff else : new_lines . append ( line ) return new_lines Inline Patterns \u00b6 Legacy \u00b6 Inline Patterns implement the inline HTML element syntax for Markdown such as *emphasis* or [links](http://example.com) . Pattern objects should be instances of classes that inherit from markdown.inlinepatterns.Pattern or one of its children. Each pattern object uses a single regular expression and must have the following methods: getCompiledRegExp() : Returns a compiled regular expression. handleMatch(m) : Accepts a match object and returns an ElementTree element of a plain Unicode string. Also, Inline Patterns can define the property ANCESTOR_EXCLUDES with either a list or tuple of undesirable ancestors. The pattern should not match if it would cause the content to be a descendant of one of the defined tag names. Note that any regular expression returned by getCompiledRegExp must capture the whole block. Therefore, they should all start with r'^(.*?)' and end with r'(.*?)!' . When using the default getCompiledRegExp() method provided in the Pattern you can pass in a regular expression without that and getCompiledRegExp will wrap your expression for you and set the re.DOTALL and re.UNICODE flags. This means that the first group of your match will be m.group(2) as m.group(1) will match everything before the pattern. For an example, consider this simplified emphasis pattern: from markdown.inlinepatterns import Pattern import xml.etree.ElementTree as etree class EmphasisPattern ( Pattern ): def handleMatch ( self , m ): el = etree . Element ( 'em' ) el . text = m . group ( 2 ) return el As discussed in Integrating Your Code Into Markdown , an instance of this class will need to be provided to Markdown. That instance would be created like so: # an oversimplified regex MYPATTERN = r '\\*([^*]+)\\*' # pass in pattern and create instance emphasis = EmphasisPattern ( MYPATTERN ) Actually it would not be necessary to create that pattern (and not just because a more sophisticated emphasis pattern already exists in Markdown). The fact is, that example pattern is not very DRY. A pattern for **strong** text would be almost identical, with the exception that it would create a \u2018strong\u2019 element. Therefore, Markdown provides a number of generic pattern classes that can provide some common functionality. For example, both emphasis and strong are implemented with separate instances of the SimpleTagPattern listed below. Feel free to use or extend any of the Pattern classes found at markdown.inlinepatterns . Future \u00b6 While users can still create plugins with the existing markdown.inlinepatterns.Pattern , a new, more flexible inline processor has been added which users are encouraged to migrate to. The new inline processor is found at markdown.inlinepatterns.InlineProcessor . The new processor is very similar to legacy with two major distinctions. Patterns no longer need to match the entire block, so patterns no longer start with r'^(.*?)' and end with r'(.*?)!' . This was a huge performance sink and this requirement has been removed. The returned match object will only contain what is explicitly matched in the pattern, and extension pattern groups now start with m.group(1) . The handleMatch method now takes an additional input called data , which is the entire block under analysis, not just what is matched with the specified pattern. The method also returns the element and the index boundaries relative to data that the return element is replacing (usually m.start(0) and m.end(0) ). If the boundaries are returned as None , it is assumed that the match did not take place, and nothing will be altered in data . If all you need is the same functionality as the legacy processor, you can do as shown below. Most of the time, simple regular expression processing is all you\u2019ll need. from markdown.inlinepatterns import InlineProcessor import xml.etree.ElementTree as etree # an oversimplified regex MYPATTERN = r '\\*([^*]+)\\*' class EmphasisPattern ( InlineProcessor ): def handleMatch ( self , m , data ): el = etree . Element ( 'em' ) el . text = m . group ( 1 ) return el , m . start ( 0 ), m . end ( 0 ) # pass in pattern and create instance emphasis = EmphasisPattern ( MYPATTERN ) But, the new processor allows you handle much more complex patterns that are too much for Python\u2019s Re to handle. For instance, to handle nested brackets in link patterns, the built-in link inline processor uses the following pattern to find where a link might start: LINK_RE = NOIMG + r '\\[' link = LinkInlineProcessor ( LINK_RE , md_instance ) It then uses programmed logic to actually walk the string ( data ), starting at where the match started ( m.start(0) ). If for whatever reason, the text does not appear to be a link, it returns None for the start and end boundary in order to communicate to the parser that no match was found. # Just a snippet of the link's handleMatch # method to illustrate new logic def handleMatch ( self , m , data ): text , index , handled = self . getText ( data , m . end ( 0 )) if not handled : return None , None , None href , title , index , handled = self . getLink ( data , index ) if not handled : return None , None , None el = etree . Element ( \"a\" ) el . text = text el . set ( \"href\" , href ) if title is not None : el . set ( \"title\" , title ) return el , m . start ( 0 ), index Generic Pattern Classes \u00b6 Some example processors that are available. SimpleTextInlineProcessor(pattern) : Returns simple text of group(2) of a pattern and the start and end position of the match. SimpleTagInlineProcessor(pattern, tag) : Returns an element of type \u201c tag \u201d with a text attribute of group(3) of a pattern . tag should be a string of a HTML element (i.e.: \u2018em\u2019). It also returns the start and end position of the match. SubstituteTagInlineProcessor(pattern, tag) : Returns an element of type \u201c tag \u201d with no children or text (i.e.: br ) and the start and end position of the match. A very small number of the basic legacy processors are still available to prevent breakage of 3rd party extensions during the transition period to the new processors. Three of the available processors are listed below. SimpleTextPattern(pattern) : Returns simple text of group(2) of a pattern . SimpleTagPattern(pattern, tag) : Returns an element of type \u201c tag \u201d with a text attribute of group(3) of a pattern . tag should be a string of a HTML element (i.e.: \u2018em\u2019). SubstituteTagPattern(pattern, tag) : Returns an element of type \u201c tag \u201d with no children or text (i.e.: br ). There may be other Pattern classes in the Markdown source that you could extend or use as well. Read through the source and see if there is anything you can use. You might even get a few ideas for different approaches to your specific situation. Treeprocessors \u00b6 Treeprocessors manipulate an ElementTree object after it has passed through the core BlockParser. This is where additional manipulation of the tree takes place. Additionally, the InlineProcessor is a Treeprocessor which steps through the tree and runs the Inline Patterns on the text of each Element in the tree. A Treeprocessor should inherit from markdown.treeprocessors.Treeprocessor , over-ride the run method which takes one argument root (an ElementTree object) and either modifies that root element and returns None or returns a new ElementTree object. A pseudo example: from markdown.treeprocessors import Treeprocessor class MyTreeprocessor ( Treeprocessor ): def run ( self , root ): root . text = 'modified content' Note that Python class methods return None by default when no return statement is defined. Additionally all Python variables refer to objects by reference. Therefore, the above run method modifies the root element in place and returns None . The changes made to the root element and its children are retained. Some may be inclined to return the modified root element. While that would work, it would cause a copy of the entire ElementTree to be generated each time the Treeprocessor is run. Therefore, it is generally expected that the run method would only return None or a new ElementTree object. For specifics on manipulating the ElementTree, see Working with the ElementTree below. Postprocessors \u00b6 Postprocessors manipulate the document after the ElementTree has been serialized into a string. Postprocessors should be used to work with the text just before output. A Postprocessor should inherit from markdown.postprocessors.Postprocessor and over-ride the run method which takes one argument text and returns a Unicode string. Postprocessors are run after the ElementTree has been serialized back into Unicode text. For example, this may be an appropriate place to add a table of contents to a document: from markdown.postprocessors import Postprocessor class TocPostprocessor ( Postprocessor ): def run ( self , text ): return MYMARKERRE . sub ( MyToc , text ) BlockParser \u00b6 Sometimes, Preprocessors, Treeprocessors, Postprocessors, and Inline Patterns are not going to do what you need. Perhaps you want a new type of block type that needs to be integrated into the core parsing. In such a situation, you can add/change/remove functionality of the core BlockParser . The BlockParser is composed of a number of Blockprocessors. The BlockParser steps through each block of text (split by blank lines) and passes each block to the appropriate Blockprocessor. That Blockprocessor parses the block and adds it to the ElementTree. The Definition Lists extension would be a good example of an extension that adds/modifies Blockprocessors. A Blockprocessor should inherit from markdown.blockprocessors.BlockProcessor and implement both the test and run methods. The test method is used by BlockParser to identify the type of block. Therefore the test method must return a Boolean value. If the test returns True , then the BlockParser will call that Blockprocessor\u2019s run method. If it returns False , the BlockParser will move on to the next Blockprocessor. The test method takes two arguments: parent : The parent ElementTree Element of the block. This can be useful as the block may need to be treated differently if it is inside a list, for example. block : A string of the current block of text. The test may be a simple string method (such as block.startswith(some_text) ) or a complex regular expression. The run method takes two arguments: parent : A pointer to the parent ElementTree Element of the block. The run method will most likely attach additional nodes to this parent. Note that nothing is returned by the method. The ElementTree object is altered in place. blocks : A list of all remaining blocks of the document. Your run method must remove (pop) the first block from the list (which it altered in place - not returned) and parse that block. You may find that a block of text legitimately contains multiple block types. Therefore, after processing the first type, your processor can insert the remaining text into the beginning of the blocks list for future parsing. Please be aware that a single block can span multiple text blocks. For example, The official Markdown syntax rules state that a blank line does not end a Code Block. If the next block of text is also indented, then it is part of the previous block. Therefore, the BlockParser was specifically designed to address these types of situations. If you notice the CodeBlockProcessor , in the core, you will note that it checks the last child of the parent . If the last child is a code block ( <pre><code>...</code></pre> ), then it appends that block to the previous code block rather than creating a new code block. Each Blockprocessor has the following utility methods available: lastChild(parent) : Returns the last child of the given ElementTree Element or None if it had no children. detab(text) : Removes one level of indent (four spaces by default) from the front of each line of the given text string. looseDetab(text, level) : Removes \u201clevel\u201d levels of indent (defaults to 1) from the front of each line of the given text string. However, this methods allows secondary lines to not be indented as does some parts of the Markdown syntax. Each Blockprocessor also has a pointer to the containing BlockParser instance at self.parser , which can be used to check or alter the state of the parser. The BlockParser tracks it\u2019s state in a stack at parser.state . The state stack is an instance of the State class. State is a subclass of list and has the additional methods: set(state) : Set a new state to string state . The new state is appended to the end of the stack. reset() : Step back one step in the stack. The last state at the end is removed from the stack. isstate(state) : Test that the top (current) level of the stack is of the given string state . Note that to ensure that the state stack does not become corrupted, each time a state is set for a block, that state must be reset when the parser finishes parsing that block. An instance of the BlockParser is found at Markdown.parser . BlockParser has the following methods: parseDocument(lines) : Given a list of lines, an ElementTree object is returned. This should be passed an entire document and is the only method the Markdown class calls directly. parseChunk(parent, text) : Parses a chunk of markdown text composed of multiple blocks and attaches those blocks to the parent Element. The parent is altered in place and nothing is returned. Extensions would most likely use this method for block parsing. parseBlocks(parent, blocks) : Parses a list of blocks of text and attaches those blocks to the parent Element. The parent is altered in place and nothing is returned. This method will generally only be used internally to recursively parse nested blocks of text. While it is not recommended, an extension could subclass or completely replace the BlockParser . The new class would have to provide the same public API. However, be aware that other extensions may expect the core parser provided and will not work with such a drastically different parser. Working with the ElementTree \u00b6 As mentioned, the Markdown parser converts a source document to an ElementTree object before serializing that back to Unicode text. Markdown has provided some helpers to ease that manipulation within the context of the Markdown module. First, import the ElementTree module: import xml.etree.ElementTree as etree Sometimes you may want text inserted into an element to be parsed by Inline Patterns . In such a situation, simply insert the text as you normally would and the text will be automatically run through the Inline Patterns. However, if you do not want some text to be parsed by Inline Patterns, then insert the text as an AtomicString . from markdown.util import AtomicString some_element . text = AtomicString ( some_text ) Here\u2019s a basic example which creates an HTML table (note that the contents of the second cell ( td2 ) will be run through Inline Patterns latter): table = etree . Element ( \"table\" ) table . set ( \"cellpadding\" , \"2\" ) # Set cellpadding to 2 tr = etree . SubElement ( table , \"tr\" ) # Add child tr to table td1 = etree . SubElement ( tr , \"td\" ) # Add child td1 to tr td1 . text = markdown . util . AtomicString ( \"Cell content\" ) # Add plain text content td2 = etree . SubElement ( tr , \"td\" ) # Add second td to tr td2 . text = \"*text* with **inline** formatting.\" # Add markup text table . tail = \"Text after table\" # Add text after table You can also manipulate an existing tree. Consider the following example which adds a class attribute to <a> elements: def set_link_class ( self , element ): for child in element : if child . tag == \"a\" : child . set ( \"class\" , \"myclass\" ) #set the class attribute set_link_class ( child ) # run recursively on children For more information about working with ElementTree see the ElementTree Documentation ( Python Docs ). Integrating Your Code Into Markdown \u00b6 Once you have the various pieces of your extension built, you need to tell Markdown about them and ensure that they are run in the proper sequence. Markdown accepts an Extension instance for each extension. Therefore, you will need to define a class that extends markdown.extensions.Extension and over-rides the extendMarkdown method. Within this class you will manage configuration options for your extension and attach the various processors and patterns to the Markdown instance. It is important to note that the order of the various processors and patterns matters. For example, if we replace http://... links with <a> elements, and then try to deal with inline HTML, we will end up with a mess. Therefore, the various types of processors and patterns are stored within an instance of the Markdown class in a Registry . Your Extension class will need to manipulate those registries appropriately. You may register instances of your processors and patterns with an appropriate priority, deregister built-in instances, or replace a built-in instance with your own. extendMarkdown \u00b6 The extendMarkdown method of a markdown.extensions.Extension class accepts one argument: md : A pointer to the instance of the Markdown class. You should use this to access the Registries of processors and patterns. They are found under the following attributes: md.preprocessors md.inlinePatterns md.parser.blockprocessors md.treeprocessors md.postprocessors Some other things you may want to access in the markdown instance are: md.htmlStash md.output_formats md.set_output_format() md.output_format md.serializer md.registerExtension() md.tab_length md.block_level_elements md.isBlockLevel() Warning With access to the above items, theoretically you have the option to change anything through various monkey_patching techniques. However, you should be aware that the various undocumented parts of markdown may change without notice and your monkey_patches may break with a new release. Therefore, what you really should be doing is inserting processors and patterns into the markdown pipeline. Consider yourself warned! A simple example: from markdown.extensions import Extension class MyExtension ( Extension ): def extendMarkdown ( self , md ): # Register instance of 'mypattern' with a priority of 175 md . inlinePatterns . register ( MyPattern ( md ), 'mypattern' , 175 ) Registry \u00b6 The markdown.util.Registry class is a priority sorted registry which Markdown uses internally to determine the processing order of its various processors and patterns. A Registry instance provides two public methods to alter the data of the registry: register and deregister . Use register to add items and deregister to remove items. See each method for specifics. When registering an item, a \u201cname\u201d and a \u201cpriority\u201d must be provided. All items are automatically sorted by the value of the \u201cpriority\u201d parameter such that the item with the highest value will be processed first. The \u201cname\u201d is used to remove ( deregister ) and get items. A Registry instance is like a list (which maintains order) when reading data. You may iterate over the items, get an item and get a count (length) of all items. You may also check that the registry contains an item. When getting an item you may use either the index of the item or the string-based \u201cname\u201d. For example: registry = Registry () registry . register ( SomeItem (), 'itemname' , 20 ) # Get the item by index item = registry [ 0 ] # Get the item by name item = registry [ 'itemname' ] When checking that the registry contains an item, you may use either the string-based \u201cname\u201d, or a reference to the actual item. For example: someitem = SomeItem () registry . register ( someitem , 'itemname' , 20 ) # Contains the name assert 'itemname' in registry # Contains the item instance assert someitem in registry markdown.util.Registry has the following methods: Registry.register(self, item, name, priority) \u00b6 Add an item to the registry with the given name and priority. Parameters: item : The item being registered. name : A string used to reference the item. priority : An integer or float used to sort against all items. If an item is registered with a \u201cname\u201d which already exists, the existing item is replaced with the new item. Tread carefully as the old item is lost with no way to recover it. The new item will be sorted according to its priority and will not retain the position of the old item. Registry.deregister(self, name, strict=True) \u00b6 Remove an item from the registry. Set strict=False to fail silently. Registry.get_index_for_name(self, name) \u00b6 Return the index of the given name . registerExtension \u00b6 Some extensions may need to have their state reset between multiple runs of the Markdown class. For example, consider the following use of the Footnotes extension: md = markdown . Markdown ( extensions = [ 'footnotes' ]) html1 = md . convert ( text_with_footnote ) md . reset () html2 = md . convert ( text_without_footnote ) Without calling reset , the footnote definitions from the first document will be inserted into the second document as they are still stored within the class instance. Therefore the Extension class needs to define a reset method that will reset the state of the extension (i.e.: self.footnotes = {} ). However, as many extensions do not have a need for reset , reset is only called on extensions that are registered. To register an extension, call md.registerExtension from within your extendMarkdown method: def extendMarkdown ( self , md ): md . registerExtension ( self ) # insert processors and patterns here Then, each time reset is called on the Markdown instance, the reset method of each registered extension will be called as well. You should also note that reset will be called on each registered extension after it is initialized the first time. Keep that in mind when over-riding the extension\u2019s reset method. Configuration Settings \u00b6 If an extension uses any parameters that the user may want to change, those parameters should be stored in self.config of your markdown.extensions.Extension class in the following format: class MyExtension ( markdown . extensions . Extension ): def __init__ ( self , ** kwargs ): self . config = { 'option1' : [ 'value1' , 'description1' ], 'option2' : [ 'value2' , 'description2' ] } super ( MyExtension , self ) . __init__ ( ** kwargs ) When implemented this way the configuration parameters can be over-ridden at run time (thus the call to super ). For example: markdown . Markdown ( extensions = [ MyExtension ( option1 = 'other value' )]) Note that if a keyword is passed in that is not already defined in self.config , then a KeyError is raised. The markdown.extensions.Extension class and its subclasses have the following methods available to assist in working with configuration settings: getConfig(key [, default]) : Returns the stored value for the given key or default if the key does not exist. If not set, default returns an empty string. getConfigs() : Returns a dict of all key/value pairs. getConfigInfo() : Returns all configuration descriptions as a list of tuples. setConfig(key, value) : Sets a configuration setting for key with the given value . If key is unknown, a KeyError is raised. If the previous value of key was a Boolean value, then value is converted to a Boolean value. If the previous value of key is None , then value is converted to a Boolean value except when it is None . No conversion takes place when the previous value of key is a string. setConfigs(items) : Sets multiple configuration settings given a dict of key/value pairs. Naming an Extension \u00b6 As noted in the library reference an instance of an extension can be passed directly to Markdown. In fact, this is the preferred way to use third-party extensions. For example: import markdown from path.to.module import MyExtension md = markdown . Markdown ( extensions = [ MyExtension ( option = 'value' )]) However, Markdown also accepts \u201cnamed\u201d third party extensions for those occasions when it is impractical to import an extension directly (from the command line or from within templates). A \u201cname\u201d can either be a registered entry point or a string using Python\u2019s dot notation . Entry Point \u00b6 Entry points are defined in a Python package\u2019s setup.py script. The script must use setuptools to support entry points. Python-Markdown extensions must be assigned to the markdown.extensions group. An entry point definition might look like this: from setuptools import setup setup ( # ... entry_points = { 'markdown.extensions' : [ 'myextension = path.to.module:MyExtension' ] } ) After a user installs your extension using the above script, they could then call the extension using the myextension string name like this: markdown . markdown ( text , extensions = [ 'myextension' ]) Note that if two or more entry points within the same group are assigned the same name, Python-Markdown will only ever use the first one found and ignore all others. Therefore, be sure to give your extension a unique name. For more information on writing setup.py scripts, see the Python documentation on Packaging and Distributing Projects . Dot Notation \u00b6 If an extension does not have a registered entry point, Python\u2019s dot notation may be used instead. The extension must be installed as a Python module on your PYTHONPATH. Generally, a class should be specified in the name. The class must be at the end of the name and be separated by a colon from the module. Therefore, if you were to import the class like this: from path.to.module import MyExtension Then the extension can be loaded as follows: markdown . markdown ( text , extensions = [ 'path.to.module:MyExtension' ]) You do not need to do anything special to support this feature. As long as your extension class is able to be imported, a user can include it with the above syntax. The above two methods are especially useful if you need to implement a large number of extensions with more than one residing in a module. However, if you do not want to require that your users include the class name in their string, you must define only one extension per module and that module must contain a module-level function called makeExtension that accepts **kwargs and returns an extension instance. For example: class MyExtension ( markdown . extensions . Extension ) # Define extension here... def makeExtension ( ** kwargs ): return MyExtension ( ** kwargs ) When Markdown is passed the \u201cname\u201d of your extension as a dot notation string that does not include a class (for example path.to.module ), it will import the module and call the makeExtension function to initiate your extension.","title":"Extension API"},{"location":"extensions/api/#writing-extensions-for-python-markdown","text":"Python-Markdown includes an API for extension writers to plug their own custom functionality and/or syntax into the parser. There are Preprocessors which allow you to alter the source before it is passed to the parser, inline patterns which allow you to add, remove or override the syntax of any inline elements, and Postprocessors which allow munging of the output of the parser before it is returned. If you really want to dive in, there are also Blockprocessors which are part of the core BlockParser. As the parser builds an ElementTree object which is later rendered as Unicode text, there are also some helpers provided to ease manipulation of the tree. Each part of the API is discussed in its respective section below. Additionally, reading the source of some Available Extensions may be helpful. For example, the Footnotes extension uses most of the features documented here.","title":"Writing Extensions for Python-Markdown"},{"location":"extensions/api/#preprocessors","text":"Preprocessors munge the source text before it is passed into the Markdown core. This is an excellent place to clean up bad syntax, extract things the parser may otherwise choke on and perhaps even store it for later retrieval. Preprocessors should inherit from markdown.preprocessors.Preprocessor and implement a run method with one argument lines . The run method of each Preprocessor will be passed the entire source text as a list of Unicode strings. Each string will contain one line of text. The run method should return either that list, or an altered list of Unicode strings. A pseudo example: from markdown.preprocessors import Preprocessor class MyPreprocessor ( Preprocessor ): def run ( self , lines ): new_lines = [] for line in lines : m = MYREGEX . match ( line ) if m : # do stuff else : new_lines . append ( line ) return new_lines","title":"Preprocessors"},{"location":"extensions/api/#inlinepatterns","text":"","title":"Inline Patterns"},{"location":"extensions/api/#legacy","text":"Inline Patterns implement the inline HTML element syntax for Markdown such as *emphasis* or [links](http://example.com) . Pattern objects should be instances of classes that inherit from markdown.inlinepatterns.Pattern or one of its children. Each pattern object uses a single regular expression and must have the following methods: getCompiledRegExp() : Returns a compiled regular expression. handleMatch(m) : Accepts a match object and returns an ElementTree element of a plain Unicode string. Also, Inline Patterns can define the property ANCESTOR_EXCLUDES with either a list or tuple of undesirable ancestors. The pattern should not match if it would cause the content to be a descendant of one of the defined tag names. Note that any regular expression returned by getCompiledRegExp must capture the whole block. Therefore, they should all start with r'^(.*?)' and end with r'(.*?)!' . When using the default getCompiledRegExp() method provided in the Pattern you can pass in a regular expression without that and getCompiledRegExp will wrap your expression for you and set the re.DOTALL and re.UNICODE flags. This means that the first group of your match will be m.group(2) as m.group(1) will match everything before the pattern. For an example, consider this simplified emphasis pattern: from markdown.inlinepatterns import Pattern import xml.etree.ElementTree as etree class EmphasisPattern ( Pattern ): def handleMatch ( self , m ): el = etree . Element ( 'em' ) el . text = m . group ( 2 ) return el As discussed in Integrating Your Code Into Markdown , an instance of this class will need to be provided to Markdown. That instance would be created like so: # an oversimplified regex MYPATTERN = r '\\*([^*]+)\\*' # pass in pattern and create instance emphasis = EmphasisPattern ( MYPATTERN ) Actually it would not be necessary to create that pattern (and not just because a more sophisticated emphasis pattern already exists in Markdown). The fact is, that example pattern is not very DRY. A pattern for **strong** text would be almost identical, with the exception that it would create a \u2018strong\u2019 element. Therefore, Markdown provides a number of generic pattern classes that can provide some common functionality. For example, both emphasis and strong are implemented with separate instances of the SimpleTagPattern listed below. Feel free to use or extend any of the Pattern classes found at markdown.inlinepatterns .","title":"Legacy"},{"location":"extensions/api/#future","text":"While users can still create plugins with the existing markdown.inlinepatterns.Pattern , a new, more flexible inline processor has been added which users are encouraged to migrate to. The new inline processor is found at markdown.inlinepatterns.InlineProcessor . The new processor is very similar to legacy with two major distinctions. Patterns no longer need to match the entire block, so patterns no longer start with r'^(.*?)' and end with r'(.*?)!' . This was a huge performance sink and this requirement has been removed. The returned match object will only contain what is explicitly matched in the pattern, and extension pattern groups now start with m.group(1) . The handleMatch method now takes an additional input called data , which is the entire block under analysis, not just what is matched with the specified pattern. The method also returns the element and the index boundaries relative to data that the return element is replacing (usually m.start(0) and m.end(0) ). If the boundaries are returned as None , it is assumed that the match did not take place, and nothing will be altered in data . If all you need is the same functionality as the legacy processor, you can do as shown below. Most of the time, simple regular expression processing is all you\u2019ll need. from markdown.inlinepatterns import InlineProcessor import xml.etree.ElementTree as etree # an oversimplified regex MYPATTERN = r '\\*([^*]+)\\*' class EmphasisPattern ( InlineProcessor ): def handleMatch ( self , m , data ): el = etree . Element ( 'em' ) el . text = m . group ( 1 ) return el , m . start ( 0 ), m . end ( 0 ) # pass in pattern and create instance emphasis = EmphasisPattern ( MYPATTERN ) But, the new processor allows you handle much more complex patterns that are too much for Python\u2019s Re to handle. For instance, to handle nested brackets in link patterns, the built-in link inline processor uses the following pattern to find where a link might start: LINK_RE = NOIMG + r '\\[' link = LinkInlineProcessor ( LINK_RE , md_instance ) It then uses programmed logic to actually walk the string ( data ), starting at where the match started ( m.start(0) ). If for whatever reason, the text does not appear to be a link, it returns None for the start and end boundary in order to communicate to the parser that no match was found. # Just a snippet of the link's handleMatch # method to illustrate new logic def handleMatch ( self , m , data ): text , index , handled = self . getText ( data , m . end ( 0 )) if not handled : return None , None , None href , title , index , handled = self . getLink ( data , index ) if not handled : return None , None , None el = etree . Element ( \"a\" ) el . text = text el . set ( \"href\" , href ) if title is not None : el . set ( \"title\" , title ) return el , m . start ( 0 ), index","title":"Future"},{"location":"extensions/api/#generic-pattern-classes","text":"Some example processors that are available. SimpleTextInlineProcessor(pattern) : Returns simple text of group(2) of a pattern and the start and end position of the match. SimpleTagInlineProcessor(pattern, tag) : Returns an element of type \u201c tag \u201d with a text attribute of group(3) of a pattern . tag should be a string of a HTML element (i.e.: \u2018em\u2019). It also returns the start and end position of the match. SubstituteTagInlineProcessor(pattern, tag) : Returns an element of type \u201c tag \u201d with no children or text (i.e.: br ) and the start and end position of the match. A very small number of the basic legacy processors are still available to prevent breakage of 3rd party extensions during the transition period to the new processors. Three of the available processors are listed below. SimpleTextPattern(pattern) : Returns simple text of group(2) of a pattern . SimpleTagPattern(pattern, tag) : Returns an element of type \u201c tag \u201d with a text attribute of group(3) of a pattern . tag should be a string of a HTML element (i.e.: \u2018em\u2019). SubstituteTagPattern(pattern, tag) : Returns an element of type \u201c tag \u201d with no children or text (i.e.: br ). There may be other Pattern classes in the Markdown source that you could extend or use as well. Read through the source and see if there is anything you can use. You might even get a few ideas for different approaches to your specific situation.","title":"Generic Pattern Classes"},{"location":"extensions/api/#treeprocessors","text":"Treeprocessors manipulate an ElementTree object after it has passed through the core BlockParser. This is where additional manipulation of the tree takes place. Additionally, the InlineProcessor is a Treeprocessor which steps through the tree and runs the Inline Patterns on the text of each Element in the tree. A Treeprocessor should inherit from markdown.treeprocessors.Treeprocessor , over-ride the run method which takes one argument root (an ElementTree object) and either modifies that root element and returns None or returns a new ElementTree object. A pseudo example: from markdown.treeprocessors import Treeprocessor class MyTreeprocessor ( Treeprocessor ): def run ( self , root ): root . text = 'modified content' Note that Python class methods return None by default when no return statement is defined. Additionally all Python variables refer to objects by reference. Therefore, the above run method modifies the root element in place and returns None . The changes made to the root element and its children are retained. Some may be inclined to return the modified root element. While that would work, it would cause a copy of the entire ElementTree to be generated each time the Treeprocessor is run. Therefore, it is generally expected that the run method would only return None or a new ElementTree object. For specifics on manipulating the ElementTree, see Working with the ElementTree below.","title":"Treeprocessors"},{"location":"extensions/api/#postprocessors","text":"Postprocessors manipulate the document after the ElementTree has been serialized into a string. Postprocessors should be used to work with the text just before output. A Postprocessor should inherit from markdown.postprocessors.Postprocessor and over-ride the run method which takes one argument text and returns a Unicode string. Postprocessors are run after the ElementTree has been serialized back into Unicode text. For example, this may be an appropriate place to add a table of contents to a document: from markdown.postprocessors import Postprocessor class TocPostprocessor ( Postprocessor ): def run ( self , text ): return MYMARKERRE . sub ( MyToc , text )","title":"Postprocessors"},{"location":"extensions/api/#blockparser","text":"Sometimes, Preprocessors, Treeprocessors, Postprocessors, and Inline Patterns are not going to do what you need. Perhaps you want a new type of block type that needs to be integrated into the core parsing. In such a situation, you can add/change/remove functionality of the core BlockParser . The BlockParser is composed of a number of Blockprocessors. The BlockParser steps through each block of text (split by blank lines) and passes each block to the appropriate Blockprocessor. That Blockprocessor parses the block and adds it to the ElementTree. The Definition Lists extension would be a good example of an extension that adds/modifies Blockprocessors. A Blockprocessor should inherit from markdown.blockprocessors.BlockProcessor and implement both the test and run methods. The test method is used by BlockParser to identify the type of block. Therefore the test method must return a Boolean value. If the test returns True , then the BlockParser will call that Blockprocessor\u2019s run method. If it returns False , the BlockParser will move on to the next Blockprocessor. The test method takes two arguments: parent : The parent ElementTree Element of the block. This can be useful as the block may need to be treated differently if it is inside a list, for example. block : A string of the current block of text. The test may be a simple string method (such as block.startswith(some_text) ) or a complex regular expression. The run method takes two arguments: parent : A pointer to the parent ElementTree Element of the block. The run method will most likely attach additional nodes to this parent. Note that nothing is returned by the method. The ElementTree object is altered in place. blocks : A list of all remaining blocks of the document. Your run method must remove (pop) the first block from the list (which it altered in place - not returned) and parse that block. You may find that a block of text legitimately contains multiple block types. Therefore, after processing the first type, your processor can insert the remaining text into the beginning of the blocks list for future parsing. Please be aware that a single block can span multiple text blocks. For example, The official Markdown syntax rules state that a blank line does not end a Code Block. If the next block of text is also indented, then it is part of the previous block. Therefore, the BlockParser was specifically designed to address these types of situations. If you notice the CodeBlockProcessor , in the core, you will note that it checks the last child of the parent . If the last child is a code block ( <pre><code>...</code></pre> ), then it appends that block to the previous code block rather than creating a new code block. Each Blockprocessor has the following utility methods available: lastChild(parent) : Returns the last child of the given ElementTree Element or None if it had no children. detab(text) : Removes one level of indent (four spaces by default) from the front of each line of the given text string. looseDetab(text, level) : Removes \u201clevel\u201d levels of indent (defaults to 1) from the front of each line of the given text string. However, this methods allows secondary lines to not be indented as does some parts of the Markdown syntax. Each Blockprocessor also has a pointer to the containing BlockParser instance at self.parser , which can be used to check or alter the state of the parser. The BlockParser tracks it\u2019s state in a stack at parser.state . The state stack is an instance of the State class. State is a subclass of list and has the additional methods: set(state) : Set a new state to string state . The new state is appended to the end of the stack. reset() : Step back one step in the stack. The last state at the end is removed from the stack. isstate(state) : Test that the top (current) level of the stack is of the given string state . Note that to ensure that the state stack does not become corrupted, each time a state is set for a block, that state must be reset when the parser finishes parsing that block. An instance of the BlockParser is found at Markdown.parser . BlockParser has the following methods: parseDocument(lines) : Given a list of lines, an ElementTree object is returned. This should be passed an entire document and is the only method the Markdown class calls directly. parseChunk(parent, text) : Parses a chunk of markdown text composed of multiple blocks and attaches those blocks to the parent Element. The parent is altered in place and nothing is returned. Extensions would most likely use this method for block parsing. parseBlocks(parent, blocks) : Parses a list of blocks of text and attaches those blocks to the parent Element. The parent is altered in place and nothing is returned. This method will generally only be used internally to recursively parse nested blocks of text. While it is not recommended, an extension could subclass or completely replace the BlockParser . The new class would have to provide the same public API. However, be aware that other extensions may expect the core parser provided and will not work with such a drastically different parser.","title":"BlockParser"},{"location":"extensions/api/#working_with_et","text":"As mentioned, the Markdown parser converts a source document to an ElementTree object before serializing that back to Unicode text. Markdown has provided some helpers to ease that manipulation within the context of the Markdown module. First, import the ElementTree module: import xml.etree.ElementTree as etree Sometimes you may want text inserted into an element to be parsed by Inline Patterns . In such a situation, simply insert the text as you normally would and the text will be automatically run through the Inline Patterns. However, if you do not want some text to be parsed by Inline Patterns, then insert the text as an AtomicString . from markdown.util import AtomicString some_element . text = AtomicString ( some_text ) Here\u2019s a basic example which creates an HTML table (note that the contents of the second cell ( td2 ) will be run through Inline Patterns latter): table = etree . Element ( \"table\" ) table . set ( \"cellpadding\" , \"2\" ) # Set cellpadding to 2 tr = etree . SubElement ( table , \"tr\" ) # Add child tr to table td1 = etree . SubElement ( tr , \"td\" ) # Add child td1 to tr td1 . text = markdown . util . AtomicString ( \"Cell content\" ) # Add plain text content td2 = etree . SubElement ( tr , \"td\" ) # Add second td to tr td2 . text = \"*text* with **inline** formatting.\" # Add markup text table . tail = \"Text after table\" # Add text after table You can also manipulate an existing tree. Consider the following example which adds a class attribute to <a> elements: def set_link_class ( self , element ): for child in element : if child . tag == \"a\" : child . set ( \"class\" , \"myclass\" ) #set the class attribute set_link_class ( child ) # run recursively on children For more information about working with ElementTree see the ElementTree Documentation ( Python Docs ).","title":"Working with the ElementTree"},{"location":"extensions/api/#integrating_into_markdown","text":"Once you have the various pieces of your extension built, you need to tell Markdown about them and ensure that they are run in the proper sequence. Markdown accepts an Extension instance for each extension. Therefore, you will need to define a class that extends markdown.extensions.Extension and over-rides the extendMarkdown method. Within this class you will manage configuration options for your extension and attach the various processors and patterns to the Markdown instance. It is important to note that the order of the various processors and patterns matters. For example, if we replace http://... links with <a> elements, and then try to deal with inline HTML, we will end up with a mess. Therefore, the various types of processors and patterns are stored within an instance of the Markdown class in a Registry . Your Extension class will need to manipulate those registries appropriately. You may register instances of your processors and patterns with an appropriate priority, deregister built-in instances, or replace a built-in instance with your own.","title":"Integrating Your Code Into Markdown"},{"location":"extensions/api/#extendmarkdown","text":"The extendMarkdown method of a markdown.extensions.Extension class accepts one argument: md : A pointer to the instance of the Markdown class. You should use this to access the Registries of processors and patterns. They are found under the following attributes: md.preprocessors md.inlinePatterns md.parser.blockprocessors md.treeprocessors md.postprocessors Some other things you may want to access in the markdown instance are: md.htmlStash md.output_formats md.set_output_format() md.output_format md.serializer md.registerExtension() md.tab_length md.block_level_elements md.isBlockLevel() Warning With access to the above items, theoretically you have the option to change anything through various monkey_patching techniques. However, you should be aware that the various undocumented parts of markdown may change without notice and your monkey_patches may break with a new release. Therefore, what you really should be doing is inserting processors and patterns into the markdown pipeline. Consider yourself warned! A simple example: from markdown.extensions import Extension class MyExtension ( Extension ): def extendMarkdown ( self , md ): # Register instance of 'mypattern' with a priority of 175 md . inlinePatterns . register ( MyPattern ( md ), 'mypattern' , 175 )","title":"extendMarkdown"},{"location":"extensions/api/#registry","text":"The markdown.util.Registry class is a priority sorted registry which Markdown uses internally to determine the processing order of its various processors and patterns. A Registry instance provides two public methods to alter the data of the registry: register and deregister . Use register to add items and deregister to remove items. See each method for specifics. When registering an item, a \u201cname\u201d and a \u201cpriority\u201d must be provided. All items are automatically sorted by the value of the \u201cpriority\u201d parameter such that the item with the highest value will be processed first. The \u201cname\u201d is used to remove ( deregister ) and get items. A Registry instance is like a list (which maintains order) when reading data. You may iterate over the items, get an item and get a count (length) of all items. You may also check that the registry contains an item. When getting an item you may use either the index of the item or the string-based \u201cname\u201d. For example: registry = Registry () registry . register ( SomeItem (), 'itemname' , 20 ) # Get the item by index item = registry [ 0 ] # Get the item by name item = registry [ 'itemname' ] When checking that the registry contains an item, you may use either the string-based \u201cname\u201d, or a reference to the actual item. For example: someitem = SomeItem () registry . register ( someitem , 'itemname' , 20 ) # Contains the name assert 'itemname' in registry # Contains the item instance assert someitem in registry markdown.util.Registry has the following methods:","title":"Registry"},{"location":"extensions/api/#registry.register","text":"Add an item to the registry with the given name and priority. Parameters: item : The item being registered. name : A string used to reference the item. priority : An integer or float used to sort against all items. If an item is registered with a \u201cname\u201d which already exists, the existing item is replaced with the new item. Tread carefully as the old item is lost with no way to recover it. The new item will be sorted according to its priority and will not retain the position of the old item.","title":"Registry.register(self, item, name, priority)"},{"location":"extensions/api/#registry.deregister","text":"Remove an item from the registry. Set strict=False to fail silently.","title":"Registry.deregister(self, name, strict=True)"},{"location":"extensions/api/#registry.get_index_for_name","text":"Return the index of the given name .","title":"Registry.get_index_for_name(self, name)"},{"location":"extensions/api/#registerextension","text":"Some extensions may need to have their state reset between multiple runs of the Markdown class. For example, consider the following use of the Footnotes extension: md = markdown . Markdown ( extensions = [ 'footnotes' ]) html1 = md . convert ( text_with_footnote ) md . reset () html2 = md . convert ( text_without_footnote ) Without calling reset , the footnote definitions from the first document will be inserted into the second document as they are still stored within the class instance. Therefore the Extension class needs to define a reset method that will reset the state of the extension (i.e.: self.footnotes = {} ). However, as many extensions do not have a need for reset , reset is only called on extensions that are registered. To register an extension, call md.registerExtension from within your extendMarkdown method: def extendMarkdown ( self , md ): md . registerExtension ( self ) # insert processors and patterns here Then, each time reset is called on the Markdown instance, the reset method of each registered extension will be called as well. You should also note that reset will be called on each registered extension after it is initialized the first time. Keep that in mind when over-riding the extension\u2019s reset method.","title":"registerExtension"},{"location":"extensions/api/#configsettings","text":"If an extension uses any parameters that the user may want to change, those parameters should be stored in self.config of your markdown.extensions.Extension class in the following format: class MyExtension ( markdown . extensions . Extension ): def __init__ ( self , ** kwargs ): self . config = { 'option1' : [ 'value1' , 'description1' ], 'option2' : [ 'value2' , 'description2' ] } super ( MyExtension , self ) . __init__ ( ** kwargs ) When implemented this way the configuration parameters can be over-ridden at run time (thus the call to super ). For example: markdown . Markdown ( extensions = [ MyExtension ( option1 = 'other value' )]) Note that if a keyword is passed in that is not already defined in self.config , then a KeyError is raised. The markdown.extensions.Extension class and its subclasses have the following methods available to assist in working with configuration settings: getConfig(key [, default]) : Returns the stored value for the given key or default if the key does not exist. If not set, default returns an empty string. getConfigs() : Returns a dict of all key/value pairs. getConfigInfo() : Returns all configuration descriptions as a list of tuples. setConfig(key, value) : Sets a configuration setting for key with the given value . If key is unknown, a KeyError is raised. If the previous value of key was a Boolean value, then value is converted to a Boolean value. If the previous value of key is None , then value is converted to a Boolean value except when it is None . No conversion takes place when the previous value of key is a string. setConfigs(items) : Sets multiple configuration settings given a dict of key/value pairs.","title":"Configuration Settings"},{"location":"extensions/api/#naming_an_extension","text":"As noted in the library reference an instance of an extension can be passed directly to Markdown. In fact, this is the preferred way to use third-party extensions. For example: import markdown from path.to.module import MyExtension md = markdown . Markdown ( extensions = [ MyExtension ( option = 'value' )]) However, Markdown also accepts \u201cnamed\u201d third party extensions for those occasions when it is impractical to import an extension directly (from the command line or from within templates). A \u201cname\u201d can either be a registered entry point or a string using Python\u2019s dot notation .","title":"Naming an Extension"},{"location":"extensions/api/#entry_point","text":"Entry points are defined in a Python package\u2019s setup.py script. The script must use setuptools to support entry points. Python-Markdown extensions must be assigned to the markdown.extensions group. An entry point definition might look like this: from setuptools import setup setup ( # ... entry_points = { 'markdown.extensions' : [ 'myextension = path.to.module:MyExtension' ] } ) After a user installs your extension using the above script, they could then call the extension using the myextension string name like this: markdown . markdown ( text , extensions = [ 'myextension' ]) Note that if two or more entry points within the same group are assigned the same name, Python-Markdown will only ever use the first one found and ignore all others. Therefore, be sure to give your extension a unique name. For more information on writing setup.py scripts, see the Python documentation on Packaging and Distributing Projects .","title":"Entry Point"},{"location":"extensions/api/#dot_notation","text":"If an extension does not have a registered entry point, Python\u2019s dot notation may be used instead. The extension must be installed as a Python module on your PYTHONPATH. Generally, a class should be specified in the name. The class must be at the end of the name and be separated by a colon from the module. Therefore, if you were to import the class like this: from path.to.module import MyExtension Then the extension can be loaded as follows: markdown . markdown ( text , extensions = [ 'path.to.module:MyExtension' ]) You do not need to do anything special to support this feature. As long as your extension class is able to be imported, a user can include it with the above syntax. The above two methods are especially useful if you need to implement a large number of extensions with more than one residing in a module. However, if you do not want to require that your users include the class name in their string, you must define only one extension per module and that module must contain a module-level function called makeExtension that accepts **kwargs and returns an extension instance. For example: class MyExtension ( markdown . extensions . Extension ) # Define extension here... def makeExtension ( ** kwargs ): return MyExtension ( ** kwargs ) When Markdown is passed the \u201cname\u201d of your extension as a dot notation string that does not include a class (for example path.to.module ), it will import the module and call the makeExtension function to initiate your extension.","title":"Dot Notation"},{"location":"extensions/attr_list/","text":"Attribute Lists \u00b6 Summary \u00b6 The Attribute Lists extension adds a syntax to define attributes on the various HTML elements in markdown\u2019s output. This extension is included in the standard Markdown library. Syntax \u00b6 The basic syntax was inspired by Maruku \u2018s Attribute Lists feature. The List \u00b6 An example attribute list might look like this: {: #someid .someclass somekey='some value' } A word which starts with a hash ( # ) will set the id of an element. A word which starts with a dot ( . ) will be added to the list of classes assigned to an element. A key/value pair ( somekey='some value' ) will assign that pair to the element. Be aware that while the dot syntax will add to a class, using key/value pairs will always override the previously defined attribute. Consider the following: {: #id1 .class1 id=id2 class=\"class2 class3\" .class4 } The above example would result in the following attributes being defined: id=\"id2\" class=\"class2 class3 class4\" Block Level \u00b6 To define attributes for a block level element, the attribute list should be defined on the last line of the block by itself. This is a paragraph. {: #an_id .a_class } The above results in the following output: < p id = \"an_id\" class = \"a_class\" > This is a paragraph. </ p > The one exception is headers, as they are only ever allowed on one line. A setext style header {: #setext} ================================= ### A hash style header ### {: #hash } The above results in the following output: < h1 id = \"setext\" > A setext style header </ h1 > < h3 id = \"hash\" > A hash style header </ h3 > Inline \u00b6 To define attributes on inline elements, the attribute list should be defined immediately after the inline element with no white space. [link](http://example.com){: class=\"foo bar\" title=\"Some title!\" } The above results in the following output: < p >< a href = \"http://example.com\" class = \"foo bar\" title = \"Some title!\" > link </ a ></ p > Usage \u00b6 See Extensions for general extension usage. Use attr_list as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown . markdown ( some_text , extensions = [ 'attr_list' ])","title":"Attribute Lists"},{"location":"extensions/attr_list/#attribute-lists","text":"","title":"Attribute Lists"},{"location":"extensions/attr_list/#summary","text":"The Attribute Lists extension adds a syntax to define attributes on the various HTML elements in markdown\u2019s output. This extension is included in the standard Markdown library.","title":"Summary"},{"location":"extensions/attr_list/#syntax","text":"The basic syntax was inspired by Maruku \u2018s Attribute Lists feature.","title":"Syntax"},{"location":"extensions/attr_list/#the-list","text":"An example attribute list might look like this: {: #someid .someclass somekey='some value' } A word which starts with a hash ( # ) will set the id of an element. A word which starts with a dot ( . ) will be added to the list of classes assigned to an element. A key/value pair ( somekey='some value' ) will assign that pair to the element. Be aware that while the dot syntax will add to a class, using key/value pairs will always override the previously defined attribute. Consider the following: {: #id1 .class1 id=id2 class=\"class2 class3\" .class4 } The above example would result in the following attributes being defined: id=\"id2\" class=\"class2 class3 class4\"","title":"The List"},{"location":"extensions/attr_list/#block-level","text":"To define attributes for a block level element, the attribute list should be defined on the last line of the block by itself. This is a paragraph. {: #an_id .a_class } The above results in the following output: < p id = \"an_id\" class = \"a_class\" > This is a paragraph. </ p > The one exception is headers, as they are only ever allowed on one line. A setext style header {: #setext} ================================= ### A hash style header ### {: #hash } The above results in the following output: < h1 id = \"setext\" > A setext style header </ h1 > < h3 id = \"hash\" > A hash style header </ h3 >","title":"Block Level"},{"location":"extensions/attr_list/#inline","text":"To define attributes on inline elements, the attribute list should be defined immediately after the inline element with no white space. [link](http://example.com){: class=\"foo bar\" title=\"Some title!\" } The above results in the following output: < p >< a href = \"http://example.com\" class = \"foo bar\" title = \"Some title!\" > link </ a ></ p >","title":"Inline"},{"location":"extensions/attr_list/#usage","text":"See Extensions for general extension usage. Use attr_list as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown . markdown ( some_text , extensions = [ 'attr_list' ])","title":"Usage"},{"location":"extensions/code_hilite/","text":"CodeHilite \u00b6 Summary \u00b6 The CodeHilite extension adds code/syntax highlighting to standard Python-Markdown code blocks using Pygments . This extension is included in the standard Markdown library. Setup \u00b6 Step 1: Download and Install Pygments \u00b6 You will also need to download and install the Pygments package on your PYTHONPATH . The CodeHilite extension will produce HTML output without Pygments, but it won\u2019t highlight anything (same behavior as setting use_pygments to False ). Step 2: Add CSS Classes \u00b6 You will need to define the appropriate CSS classes with appropriate rules. The CSS rules either need to be defined in or linked from the header of your HTML templates. Pygments can generate CSS rules for you. Just run the following command from the command line: pygmentize -S default -f html -a .codehilite > styles.css If you are using a different css_class (default: .codehilite ), then set the value of the -a option to that class name. The CSS rules will be written to the styles.css file which you can copy to your site and link from your HTML templates. If you would like to use a different theme, swap out default for the desired theme. For a list of themes installed on your system (additional themes can be installed via Pygments plugins), run the following command: pygmentize -L style See Pygments\u2019 excellent documentation for more details. If no language is defined, Pygments will attempt to guess the language. When that fails, the code block will not be highlighted. See Also GitHub user richeland has provided a number of different CSS style sheets which work with Pygments along with a preview of each theme. The css_class used is the same as the default value for that option ( .codehilite ). However, the Python-Markdown project makes no guarantee that richeland\u2019s CSS styles will work with the version of Pygments you are using. To ensure complete compatibility, you should generate the CSS rules from your own installation of Pygments. Syntax \u00b6 The CodeHilite extension follows the same syntax as regular Markdown code blocks, with one exception. The highlighter needs to know what language to use for the code block. There are three ways to tell the highlighter what language the code block contains and each one has a different result. Note The format of the language identifier only effects the display of line numbers if linenums is set to None (the default). If set to True or False (see Usage below) the format of the identifier has no effect on the display of line numbers \u2013 it only serves as a means to define the language of the code block. Shebang (with path) \u00b6 If the first line of the code block contains a shebang, the language is derived from that and line numbers are used. #!/usr/bin/python # Code goes here ... Will result in: 1 2 #!/usr/bin/python # Code goes here ... Shebang (no path) \u00b6 If the first line contains a shebang, but the shebang line does not contain a path (a single / or even a space), then that line is removed from the code block before processing. Line numbers are used. #!python # Code goes here ... Will result in: 1 # Code goes here ... Colons \u00b6 If the first line begins with three or more colons, the text following the colons identifies the language. The first line is removed from the code block before processing and line numbers are not used. :::python # Code goes here ... Will result in: # Code goes here ... Certain lines can be selected for emphasis with the colon syntax. When using Pygments\u2019 default CSS styles, emphasized lines have a yellow background. This is useful to direct the reader\u2019s attention to specific lines. :::python hl_lines=\"1 3\" # This line is emphasized # This line isn't # This line is emphasized Will result in: # This line is emphasized # This line isn't # This line is emphasized Note hl_lines is named for Pygments\u2019 option meaning \u201chighlighted lines\u201d. When No Language is Defined \u00b6 CodeHilite is completely backwards compatible so that if a code block is encountered that does not define a language, the block is simply wrapped in <pre> tags and output. # Code goes here ... Will result in: # Code goes here ... Lets see the source for that: < div class = \"codehilite\" >< pre >< code > # Code goes here ... </ code ></ pre ></ div > Note When no language is defined, the Pygments highlighting engine will try to guess the language (unless guess_lang is set to False ). Upon failure, the same behavior will happen as described above. Usage \u00b6 See Extensions for general extension usage. Use codehilite as the name of the extension. See the Library Reference for information about configuring extensions. The following options are provided to configure the output: linenums : Use line numbers. Possible values are True for yes, False for no and None for auto. Defaults to None . Using True will force every code block to have line numbers, even when using colons ( ::: ) for language identification. Using False will turn off all line numbers, even when using shebangs ( #! ) for language identification. guess_lang : Automatic language detection. Defaults to True . Using False will prevent Pygments from guessing the language, and thus highlighting blocks only when you explicitly set the language. css_class : Set CSS class name for the wrapper <div> tag. Defaults to codehilite . pygments_style : Pygments HTML Formatter Style ( ColorScheme ). Defaults to default . Note This is useful only when noclasses is set to True , otherwise the CSS styles must be provided by the end user. noclasses : Use inline styles instead of CSS classes. Defaults to False . use_pygments : Specifies the use of Pygments in generating the output. If True (the default) and Pygments is available, CodeHilite will use Pygments to analyze and format the output. Additionally, if using Pygments >= 2.4, the output will be wrapped in <code> tags, whereas earlier versions will not. Otherwise, Pygments will not be used. If a language is defined for a code block, it will be assigned to the <code> tag as a class in the manner suggested by the HTML5 spec (alternate output will not be entertained) and may be used by a JavaScript library in the browser to highlight the code block. A trivial example: markdown . markdown ( some_text , extensions = [ 'codehilite' ])","title":"CodeHilite"},{"location":"extensions/code_hilite/#codehilite","text":"","title":"CodeHilite"},{"location":"extensions/code_hilite/#summary","text":"The CodeHilite extension adds code/syntax highlighting to standard Python-Markdown code blocks using Pygments . This extension is included in the standard Markdown library.","title":"Summary"},{"location":"extensions/code_hilite/#setup","text":"","title":"Setup"},{"location":"extensions/code_hilite/#step-1-download-and-install-pygments","text":"You will also need to download and install the Pygments package on your PYTHONPATH . The CodeHilite extension will produce HTML output without Pygments, but it won\u2019t highlight anything (same behavior as setting use_pygments to False ).","title":"Step 1: Download and Install Pygments"},{"location":"extensions/code_hilite/#step-2-add-css-classes","text":"You will need to define the appropriate CSS classes with appropriate rules. The CSS rules either need to be defined in or linked from the header of your HTML templates. Pygments can generate CSS rules for you. Just run the following command from the command line: pygmentize -S default -f html -a .codehilite > styles.css If you are using a different css_class (default: .codehilite ), then set the value of the -a option to that class name. The CSS rules will be written to the styles.css file which you can copy to your site and link from your HTML templates. If you would like to use a different theme, swap out default for the desired theme. For a list of themes installed on your system (additional themes can be installed via Pygments plugins), run the following command: pygmentize -L style See Pygments\u2019 excellent documentation for more details. If no language is defined, Pygments will attempt to guess the language. When that fails, the code block will not be highlighted. See Also GitHub user richeland has provided a number of different CSS style sheets which work with Pygments along with a preview of each theme. The css_class used is the same as the default value for that option ( .codehilite ). However, the Python-Markdown project makes no guarantee that richeland\u2019s CSS styles will work with the version of Pygments you are using. To ensure complete compatibility, you should generate the CSS rules from your own installation of Pygments.","title":"Step 2: Add CSS Classes"},{"location":"extensions/code_hilite/#syntax","text":"The CodeHilite extension follows the same syntax as regular Markdown code blocks, with one exception. The highlighter needs to know what language to use for the code block. There are three ways to tell the highlighter what language the code block contains and each one has a different result. Note The format of the language identifier only effects the display of line numbers if linenums is set to None (the default). If set to True or False (see Usage below) the format of the identifier has no effect on the display of line numbers \u2013 it only serves as a means to define the language of the code block.","title":"Syntax"},{"location":"extensions/code_hilite/#shebang-with-path","text":"If the first line of the code block contains a shebang, the language is derived from that and line numbers are used. #!/usr/bin/python # Code goes here ... Will result in: 1 2 #!/usr/bin/python # Code goes here ...","title":"Shebang (with path)"},{"location":"extensions/code_hilite/#shebang-no-path","text":"If the first line contains a shebang, but the shebang line does not contain a path (a single / or even a space), then that line is removed from the code block before processing. Line numbers are used. #!python # Code goes here ... Will result in: 1 # Code goes here ...","title":"Shebang (no path)"},{"location":"extensions/code_hilite/#colons","text":"If the first line begins with three or more colons, the text following the colons identifies the language. The first line is removed from the code block before processing and line numbers are not used. :::python # Code goes here ... Will result in: # Code goes here ... Certain lines can be selected for emphasis with the colon syntax. When using Pygments\u2019 default CSS styles, emphasized lines have a yellow background. This is useful to direct the reader\u2019s attention to specific lines. :::python hl_lines=\"1 3\" # This line is emphasized # This line isn't # This line is emphasized Will result in: # This line is emphasized # This line isn't # This line is emphasized Note hl_lines is named for Pygments\u2019 option meaning \u201chighlighted lines\u201d.","title":"Colons"},{"location":"extensions/code_hilite/#when-no-language-is-defined","text":"CodeHilite is completely backwards compatible so that if a code block is encountered that does not define a language, the block is simply wrapped in <pre> tags and output. # Code goes here ... Will result in: # Code goes here ... Lets see the source for that: < div class = \"codehilite\" >< pre >< code > # Code goes here ... </ code ></ pre ></ div > Note When no language is defined, the Pygments highlighting engine will try to guess the language (unless guess_lang is set to False ). Upon failure, the same behavior will happen as described above.","title":"When No Language is Defined"},{"location":"extensions/code_hilite/#usage","text":"See Extensions for general extension usage. Use codehilite as the name of the extension. See the Library Reference for information about configuring extensions. The following options are provided to configure the output: linenums : Use line numbers. Possible values are True for yes, False for no and None for auto. Defaults to None . Using True will force every code block to have line numbers, even when using colons ( ::: ) for language identification. Using False will turn off all line numbers, even when using shebangs ( #! ) for language identification. guess_lang : Automatic language detection. Defaults to True . Using False will prevent Pygments from guessing the language, and thus highlighting blocks only when you explicitly set the language. css_class : Set CSS class name for the wrapper <div> tag. Defaults to codehilite . pygments_style : Pygments HTML Formatter Style ( ColorScheme ). Defaults to default . Note This is useful only when noclasses is set to True , otherwise the CSS styles must be provided by the end user. noclasses : Use inline styles instead of CSS classes. Defaults to False . use_pygments : Specifies the use of Pygments in generating the output. If True (the default) and Pygments is available, CodeHilite will use Pygments to analyze and format the output. Additionally, if using Pygments >= 2.4, the output will be wrapped in <code> tags, whereas earlier versions will not. Otherwise, Pygments will not be used. If a language is defined for a code block, it will be assigned to the <code> tag as a class in the manner suggested by the HTML5 spec (alternate output will not be entertained) and may be used by a JavaScript library in the browser to highlight the code block. A trivial example: markdown . markdown ( some_text , extensions = [ 'codehilite' ])","title":"Usage"},{"location":"extensions/definition_lists/","text":"Definition Lists \u00b6 Summary \u00b6 The Definition Lists extension adds the ability to create definition lists in Markdown documents. This extension is included in the standard Markdown library. Syntax \u00b6 Definition lists are defined using the syntax established in PHP Markdown Extra . Thus, the following text (taken from the above referenced PHP documentation): Apple : Pomaceous fruit of plants of the genus Malus in the family Rosaceae. Orange : The fruit of an evergreen tree of the genus Citrus. will be rendered as: < dl > < dt > Apple </ dt > < dd > Pomaceous fruit of plants of the genus Malus in the family Rosaceae. </ dd > < dt > Orange </ dt > < dd > The fruit of an evergreen tree of the genus Citrus. </ dd > </ dl > Usage \u00b6 See Extensions for general extension usage. Use def_list as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown . markdown ( some_text , extensions = [ 'def_list' ])","title":"Definition Lists"},{"location":"extensions/definition_lists/#definition-lists","text":"","title":"Definition Lists"},{"location":"extensions/definition_lists/#summary","text":"The Definition Lists extension adds the ability to create definition lists in Markdown documents. This extension is included in the standard Markdown library.","title":"Summary"},{"location":"extensions/definition_lists/#syntax","text":"Definition lists are defined using the syntax established in PHP Markdown Extra . Thus, the following text (taken from the above referenced PHP documentation): Apple : Pomaceous fruit of plants of the genus Malus in the family Rosaceae. Orange : The fruit of an evergreen tree of the genus Citrus. will be rendered as: < dl > < dt > Apple </ dt > < dd > Pomaceous fruit of plants of the genus Malus in the family Rosaceae. </ dd > < dt > Orange </ dt > < dd > The fruit of an evergreen tree of the genus Citrus. </ dd > </ dl >","title":"Syntax"},{"location":"extensions/definition_lists/#usage","text":"See Extensions for general extension usage. Use def_list as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown . markdown ( some_text , extensions = [ 'def_list' ])","title":"Usage"},{"location":"extensions/extra/","text":"Python-Markdown Extra \u00b6 Summary \u00b6 A compilation of various Python-Markdown extensions that (mostly) imitates PHP Markdown Extra . The supported extensions include: Abbreviations Attribute Lists Definition Lists Fenced Code Blocks Footnotes Tables Markdown in HTML See each individual extension for syntax documentation. Extra and all its supported extensions are included in the standard Markdown library. Usage \u00b6 From the Python interpreter: >>> import markdown >>> html = markdown . markdown ( text , extensions = [ 'extra' ]) There may be additional extensions that are distributed with Python-Markdown that are not included here in Extra. The features of those extensions are not part of PHP Markdown Extra, and therefore, not part of Python-Markdown Extra. If you really would like Extra to include additional extensions, we suggest creating your own clone of Extra under a different name (see the Extension API ).","title":"Extra"},{"location":"extensions/extra/#python-markdown-extra","text":"","title":"Python-Markdown Extra"},{"location":"extensions/extra/#summary","text":"A compilation of various Python-Markdown extensions that (mostly) imitates PHP Markdown Extra . The supported extensions include: Abbreviations Attribute Lists Definition Lists Fenced Code Blocks Footnotes Tables Markdown in HTML See each individual extension for syntax documentation. Extra and all its supported extensions are included in the standard Markdown library.","title":"Summary"},{"location":"extensions/extra/#usage","text":"From the Python interpreter: >>> import markdown >>> html = markdown . markdown ( text , extensions = [ 'extra' ]) There may be additional extensions that are distributed with Python-Markdown that are not included here in Extra. The features of those extensions are not part of PHP Markdown Extra, and therefore, not part of Python-Markdown Extra. If you really would like Extra to include additional extensions, we suggest creating your own clone of Extra under a different name (see the Extension API ).","title":"Usage"},{"location":"extensions/fenced_code_blocks/","text":"Fenced Code Blocks \u00b6 Summary \u00b6 The Fenced Code Blocks extension adds a secondary way to define code blocks, which overcomes a few limitations of the indented code blocks. This extension is included in the standard Markdown library. Syntax \u00b6 Fenced Code Blocks are defined using the syntax established in PHP Markdown Extra . Thus, the following text (taken from the above referenced PHP documentation): This is a paragraph introducing: ~~~~~~~~~~~~~~~~~~~~~ a one-line code block ~~~~~~~~~~~~~~~~~~~~~ Fenced code blocks can have a blank line as the first and/or last line of a code block and they can also come immediately after a list item without becoming part of the list. Warning Fenced Code Blocks are only supported at the document root level. Therefore, they cannot be nested inside lists or blockquotes. Language \u00b6 In addition to PHP Extra\u2019s syntax, you can define the language of the code block for use by syntax highlighters etc. The language will be assigned as a class attribute of the <code> element in the output. Therefore, you should define the language as you would a CSS class - .language . For consistency with other markdown syntax, the language can optionally be wrapped in curly brackets: ~~~~{.python} # python code ~~~~ ~~~~.html <p>HTML Document</p> ~~~~ The above will output: < pre >< code class = \"python\" > # python code </ code ></ pre > < pre >< code class = \"html\" > &lt; p &gt; HTML Document &lt; /p &gt; </ code ></ pre > GitHub \u2018s backtick (```) syntax is also supported in this extension: ```python # more python code ``` Emphasized Lines \u00b6 If you would like to have your fenced code blocks highlighted with the CodeHilite extension, simply enable that extension (remember that Pygments is its dependency) and the language of your fenced code blocks will be passed in and highlighted appropriately. Similar to the colon syntax of the CodeHilite extension, fenced code blocks can also have emphasized certain lines of code. The lines can be specified with PHP Extra\u2019s syntax: ~~~~{.python hl_lines=\"1 3\"} # This line is emphasized # This line isn't # This line is emphasized ~~~~ \u2026 or with GitHub\u2019s: ```python hl_lines=\"1 3\" # This line is emphasized # This line isn't # This line is emphasized ``` Usage \u00b6 See Extensions for general extension usage. Use fenced_code as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown . markdown ( some_text , extensions = [ 'fenced_code' ])","title":"Fenced Code Blocks"},{"location":"extensions/fenced_code_blocks/#fenced-code-blocks","text":"","title":"Fenced Code Blocks"},{"location":"extensions/fenced_code_blocks/#summary","text":"The Fenced Code Blocks extension adds a secondary way to define code blocks, which overcomes a few limitations of the indented code blocks. This extension is included in the standard Markdown library.","title":"Summary"},{"location":"extensions/fenced_code_blocks/#syntax","text":"Fenced Code Blocks are defined using the syntax established in PHP Markdown Extra . Thus, the following text (taken from the above referenced PHP documentation): This is a paragraph introducing: ~~~~~~~~~~~~~~~~~~~~~ a one-line code block ~~~~~~~~~~~~~~~~~~~~~ Fenced code blocks can have a blank line as the first and/or last line of a code block and they can also come immediately after a list item without becoming part of the list. Warning Fenced Code Blocks are only supported at the document root level. Therefore, they cannot be nested inside lists or blockquotes.","title":"Syntax"},{"location":"extensions/fenced_code_blocks/#language","text":"In addition to PHP Extra\u2019s syntax, you can define the language of the code block for use by syntax highlighters etc. The language will be assigned as a class attribute of the <code> element in the output. Therefore, you should define the language as you would a CSS class - .language . For consistency with other markdown syntax, the language can optionally be wrapped in curly brackets: ~~~~{.python} # python code ~~~~ ~~~~.html <p>HTML Document</p> ~~~~ The above will output: < pre >< code class = \"python\" > # python code </ code ></ pre > < pre >< code class = \"html\" > &lt; p &gt; HTML Document &lt; /p &gt; </ code ></ pre > GitHub \u2018s backtick (```) syntax is also supported in this extension: ```python # more python code ```","title":"Language"},{"location":"extensions/fenced_code_blocks/#emphasized-lines","text":"If you would like to have your fenced code blocks highlighted with the CodeHilite extension, simply enable that extension (remember that Pygments is its dependency) and the language of your fenced code blocks will be passed in and highlighted appropriately. Similar to the colon syntax of the CodeHilite extension, fenced code blocks can also have emphasized certain lines of code. The lines can be specified with PHP Extra\u2019s syntax: ~~~~{.python hl_lines=\"1 3\"} # This line is emphasized # This line isn't # This line is emphasized ~~~~ \u2026 or with GitHub\u2019s: ```python hl_lines=\"1 3\" # This line is emphasized # This line isn't # This line is emphasized ```","title":"Emphasized Lines"},{"location":"extensions/fenced_code_blocks/#usage","text":"See Extensions for general extension usage. Use fenced_code as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown . markdown ( some_text , extensions = [ 'fenced_code' ])","title":"Usage"},{"location":"extensions/footnotes/","text":"Footnotes \u00b6 Summary \u00b6 The Footnotes extension adds syntax for defining footnotes in Markdown documents. This extension is included in the standard Markdown library. Syntax \u00b6 Python-Markdown\u2019s Footnote syntax follows the generally accepted syntax of the Markdown community at large and almost exactly matches PHP Markdown Extra \u2018s implementation of footnotes. The only differences involve a few subtleties in the output. Example: Footnotes[^1] have a label[^@#$%] and the footnote's content. [ ^1 ]: This is a footnote content. [ ^@#$% ]: A footnote on the label: \"@#$%\". A footnote label must start with a caret ^ and may contain any inline text (including spaces) between a set of square brackets [] . Only the first caret has any special meaning. A footnote content must start with the label followed by a colon and at least one space. The label used to define the content must exactly match the label used in the body (including capitalization and white space). The content would then follow the label either on the same line or on the next line. The content may contain multiple lines, paragraphs, code blocks, blockquotes and most any other markdown syntax. The additional lines must be indented one level (four spaces or one tab). When working with multiple blocks, it may be helpful to start the content on a separate line from the label which defines the content. This way the entire block is indented consistently and any errors are more easily discernible by the author. [ ^1 ]: The first paragraph of the definition. Paragraph two of the definition. > A blockquote with > multiple lines. a code block A final paragraph. Usage \u00b6 See Extensions for general extension usage. Use footnotes as the name of the extension. See the Library Reference for information about configuring extensions. The following options are provided to configure the output: PLACE_MARKER : A text string used to mark the position where the footnotes are rendered. Defaults to ///Footnotes Go Here/// . If the place marker text is not found in the document, the footnote definitions are placed at the end of the resulting HTML document. UNIQUE_IDS : Whether to avoid collisions across multiple calls to reset() . Defaults to False . BACKLINK_TEXT : The text string that links from the footnote definition back to the position in the document. Defaults to &#8617; . BACKLINK_TITLE : The text string for the title HTML attribute of the footnote definition link. %d will be replaced by the footnote number. Defaults to Jump back to footnote %d in the text SEPARATOR : The text string used to set the footnote separator. Defaults to : . A trivial example: markdown . markdown ( some_text , extensions = [ 'footnotes' ])","title":"Footnotes"},{"location":"extensions/footnotes/#footnotes","text":"","title":"Footnotes"},{"location":"extensions/footnotes/#summary","text":"The Footnotes extension adds syntax for defining footnotes in Markdown documents. This extension is included in the standard Markdown library.","title":"Summary"},{"location":"extensions/footnotes/#syntax","text":"Python-Markdown\u2019s Footnote syntax follows the generally accepted syntax of the Markdown community at large and almost exactly matches PHP Markdown Extra \u2018s implementation of footnotes. The only differences involve a few subtleties in the output. Example: Footnotes[^1] have a label[^@#$%] and the footnote's content. [ ^1 ]: This is a footnote content. [ ^@#$% ]: A footnote on the label: \"@#$%\". A footnote label must start with a caret ^ and may contain any inline text (including spaces) between a set of square brackets [] . Only the first caret has any special meaning. A footnote content must start with the label followed by a colon and at least one space. The label used to define the content must exactly match the label used in the body (including capitalization and white space). The content would then follow the label either on the same line or on the next line. The content may contain multiple lines, paragraphs, code blocks, blockquotes and most any other markdown syntax. The additional lines must be indented one level (four spaces or one tab). When working with multiple blocks, it may be helpful to start the content on a separate line from the label which defines the content. This way the entire block is indented consistently and any errors are more easily discernible by the author. [ ^1 ]: The first paragraph of the definition. Paragraph two of the definition. > A blockquote with > multiple lines. a code block A final paragraph.","title":"Syntax"},{"location":"extensions/footnotes/#usage","text":"See Extensions for general extension usage. Use footnotes as the name of the extension. See the Library Reference for information about configuring extensions. The following options are provided to configure the output: PLACE_MARKER : A text string used to mark the position where the footnotes are rendered. Defaults to ///Footnotes Go Here/// . If the place marker text is not found in the document, the footnote definitions are placed at the end of the resulting HTML document. UNIQUE_IDS : Whether to avoid collisions across multiple calls to reset() . Defaults to False . BACKLINK_TEXT : The text string that links from the footnote definition back to the position in the document. Defaults to &#8617; . BACKLINK_TITLE : The text string for the title HTML attribute of the footnote definition link. %d will be replaced by the footnote number. Defaults to Jump back to footnote %d in the text SEPARATOR : The text string used to set the footnote separator. Defaults to : . A trivial example: markdown . markdown ( some_text , extensions = [ 'footnotes' ])","title":"Usage"},{"location":"extensions/legacy_attrs/","text":"Legacy Attributes \u00b6 Summary \u00b6 The Legacy Attributes extension restores Python-Markdown\u2019s original attribute setting syntax. Older versions of Python Markdown (prior to 3.0) included built-in and undocumented support for defining attributes on elements. Most users have never made use of the syntax and it has been deprecated in favor of Attribute Lists . This extension restores the legacy behavior for users who have existing documents which use the syntax. Syntax \u00b6 Attributes are defined by including the following within the element you wish to assign the attributes to: {@key=value} For example, to define a class to a paragraph: A paragraph with the attribute defined {@class=foo}anywhere within. Which results in the following output: < p class = \"foo\" > A paragraph with the attribute defined anywhere within. </ p > The same applies for inline elements: Some *emphasized{@id=bar}* text. < p > Some < em id = \"bar\" > emphasized </ em > text. </ p > You can also define attributes in images: ![ Alt text{@id=baz} ]( path/to/image.jpg ) < p >< img alt = \"Alt text\" id = \"baz\" src = \"path/to/image.jpg\" /></ p > Usage \u00b6 See Extensions for general extension usage. Use legacy_attrs as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown . markdown ( some_text , extensions = [ 'legacy_attrs' ])","title":"Legacy Attributes"},{"location":"extensions/legacy_attrs/#legacy-attributes","text":"","title":"Legacy Attributes"},{"location":"extensions/legacy_attrs/#summary","text":"The Legacy Attributes extension restores Python-Markdown\u2019s original attribute setting syntax. Older versions of Python Markdown (prior to 3.0) included built-in and undocumented support for defining attributes on elements. Most users have never made use of the syntax and it has been deprecated in favor of Attribute Lists . This extension restores the legacy behavior for users who have existing documents which use the syntax.","title":"Summary"},{"location":"extensions/legacy_attrs/#syntax","text":"Attributes are defined by including the following within the element you wish to assign the attributes to: {@key=value} For example, to define a class to a paragraph: A paragraph with the attribute defined {@class=foo}anywhere within. Which results in the following output: < p class = \"foo\" > A paragraph with the attribute defined anywhere within. </ p > The same applies for inline elements: Some *emphasized{@id=bar}* text. < p > Some < em id = \"bar\" > emphasized </ em > text. </ p > You can also define attributes in images: ![ Alt text{@id=baz} ]( path/to/image.jpg ) < p >< img alt = \"Alt text\" id = \"baz\" src = \"path/to/image.jpg\" /></ p >","title":"Syntax"},{"location":"extensions/legacy_attrs/#usage","text":"See Extensions for general extension usage. Use legacy_attrs as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown . markdown ( some_text , extensions = [ 'legacy_attrs' ])","title":"Usage"},{"location":"extensions/legacy_em/","text":"Legacy EM \u00b6 Summary \u00b6 The Legacy EM extension restores Markdown\u2019s original behavior for emphasis and strong syntax when using underscores. By default Python-Markdown treats _connected_words_ intelligently by recognizing that mid-word underscores should not be used for emphasis. In other words, by default, that input would result in this output: <em>connected_words</em> . However, that behavior is not consistent with the original rules or the behavior of the reference implementation. Therefore, this extension can be used to better match the reference implementation. With the extension enabled, the above input would result in this output: <em>connected</em>words_ . Usage \u00b6 See Extensions for general extension usage. Use legacy_em as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown . markdown ( some_text , extensions = [ 'legacy_em' ])","title":"Legacy Emphasis"},{"location":"extensions/legacy_em/#legacy-em","text":"","title":"Legacy EM"},{"location":"extensions/legacy_em/#summary","text":"The Legacy EM extension restores Markdown\u2019s original behavior for emphasis and strong syntax when using underscores. By default Python-Markdown treats _connected_words_ intelligently by recognizing that mid-word underscores should not be used for emphasis. In other words, by default, that input would result in this output: <em>connected_words</em> . However, that behavior is not consistent with the original rules or the behavior of the reference implementation. Therefore, this extension can be used to better match the reference implementation. With the extension enabled, the above input would result in this output: <em>connected</em>words_ .","title":"Summary"},{"location":"extensions/legacy_em/#usage","text":"See Extensions for general extension usage. Use legacy_em as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown . markdown ( some_text , extensions = [ 'legacy_em' ])","title":"Usage"},{"location":"extensions/md_in_html/","text":"Markdown in HTML \u00b6 Summary \u00b6 An extensions that parses Markdown inside of HTML tags. Usage \u00b6 From the Python interpreter: >>> import markdown >>> html = markdown . markdown ( text , extensions = [ 'md_in_html' ]) Unlike the other Extra features, this feature is built into the markdown core and is turned on when markdown.extensions.extra or markdown.extensions.md_in_html is enabled. The content of any raw HTML block element can be Markdown-formatted simply by adding a markdown attribute to the opening tag. The markdown attribute will be stripped from the output, but all other attributes will be preserved. If the markdown value is set to 1 (recommended) or any value other than span or block , the default behavior will be executed: p , h[1-6] , li , dd , dt , td , th , legend , and address elements skip block parsing while others do not. If the default is overridden by a value of span , block parsing will be skipped regardless of tag. If the default is overridden by a value of block , block parsing will occur regardless of tag. Simple Example: \u00b6 This is *true* markdown text. <div markdown=\"1\"> This is *true* markdown text. </div> Result: \u00b6 < p > This is < em > true </ em > markdown text. </ p > < div > < p > This is < em > true </ em > markdown text. </ p > </ div > Nested Markdown Inside HTML Blocks \u00b6 Nested elements are more sensitive and must be used cautiously. To avoid unexpected results: Only nest elements within block mode elements. Follow the closing tag of inner elements with a blank line. Only have one level of nesting. Complex Example: \u00b6 <div markdown=\"1\" name=\"Example\"> The text of the `Example` element. <div markdown=\"1\" name=\"DefaultBlockMode\"> This text gets wrapped in `p` tags. </div> The tail of the `DefaultBlockMode` subelement. <p markdown=\"1\" name=\"DefaultSpanMode\"> This text *is not* wrapped in additional `p` tags. </p> The tail of the `DefaultSpanMode` subelement. <div markdown=\"span\" name=\"SpanModeOverride\"> This `div` block is not wrapped in paragraph tags. Note: Subelements are not required to have tail text. </div> <p markdown=\"block\" name=\"BlockModeOverride\"> This `p` block *is* foolishly wrapped in further paragraph tags. </p> The tail of the `BlockModeOverride` subelement. <div name=\"RawHtml\"> Raw HTML blocks may also be nested. </div> </div> This text is after the markdown in HTML. Complex Result: \u00b6 < div name = \"Example\" > < p > The text of the < code > Example </ code > element. </ p > < div name = \"DefaultBlockMode\" > < p > This text gets wrapped in < code > p </ code > tags. </ p > </ div > < p > The tail of the < code > DefaultBlockMode </ code > subelement. </ p > < p name = \"DefaultSpanMode\" > This text < em > is not </ em > wrapped in additional < code > p </ code > tags. </ p > < p > The tail of the < code > DefaultSpanMode </ code > subelement. </ p > < div name = \"SpanModeOverride\" > This < code > div </ code > block is not wrapped in paragraph tags. Note: Subelements are not required to have tail text. </ div > < p name = \"BlockModeOverride\" > < p > This < code > p </ code > block < em > is </ em > foolishly wrapped in further paragraph tags. </ p > </ p > < p > The tail of the < code > BlockModeOverride </ code > subelement. </ p > < div name = \"RawHtml\" > Raw HTML blocks may also be nested. </ div > </ div > < p > This text is after the markdown in HTML. </ p >","title":"Markdown in HTML"},{"location":"extensions/md_in_html/#markdown-in-html","text":"","title":"Markdown in HTML"},{"location":"extensions/md_in_html/#summary","text":"An extensions that parses Markdown inside of HTML tags.","title":"Summary"},{"location":"extensions/md_in_html/#usage","text":"From the Python interpreter: >>> import markdown >>> html = markdown . markdown ( text , extensions = [ 'md_in_html' ]) Unlike the other Extra features, this feature is built into the markdown core and is turned on when markdown.extensions.extra or markdown.extensions.md_in_html is enabled. The content of any raw HTML block element can be Markdown-formatted simply by adding a markdown attribute to the opening tag. The markdown attribute will be stripped from the output, but all other attributes will be preserved. If the markdown value is set to 1 (recommended) or any value other than span or block , the default behavior will be executed: p , h[1-6] , li , dd , dt , td , th , legend , and address elements skip block parsing while others do not. If the default is overridden by a value of span , block parsing will be skipped regardless of tag. If the default is overridden by a value of block , block parsing will occur regardless of tag.","title":"Usage"},{"location":"extensions/md_in_html/#simple-example","text":"This is *true* markdown text. <div markdown=\"1\"> This is *true* markdown text. </div>","title":"Simple Example:"},{"location":"extensions/md_in_html/#result","text":"< p > This is < em > true </ em > markdown text. </ p > < div > < p > This is < em > true </ em > markdown text. </ p > </ div >","title":"Result:"},{"location":"extensions/md_in_html/#nested-markdown-inside-html-blocks","text":"Nested elements are more sensitive and must be used cautiously. To avoid unexpected results: Only nest elements within block mode elements. Follow the closing tag of inner elements with a blank line. Only have one level of nesting.","title":"Nested Markdown Inside HTML Blocks"},{"location":"extensions/md_in_html/#complex-example","text":"<div markdown=\"1\" name=\"Example\"> The text of the `Example` element. <div markdown=\"1\" name=\"DefaultBlockMode\"> This text gets wrapped in `p` tags. </div> The tail of the `DefaultBlockMode` subelement. <p markdown=\"1\" name=\"DefaultSpanMode\"> This text *is not* wrapped in additional `p` tags. </p> The tail of the `DefaultSpanMode` subelement. <div markdown=\"span\" name=\"SpanModeOverride\"> This `div` block is not wrapped in paragraph tags. Note: Subelements are not required to have tail text. </div> <p markdown=\"block\" name=\"BlockModeOverride\"> This `p` block *is* foolishly wrapped in further paragraph tags. </p> The tail of the `BlockModeOverride` subelement. <div name=\"RawHtml\"> Raw HTML blocks may also be nested. </div> </div> This text is after the markdown in HTML.","title":"Complex Example:"},{"location":"extensions/md_in_html/#complex-result","text":"< div name = \"Example\" > < p > The text of the < code > Example </ code > element. </ p > < div name = \"DefaultBlockMode\" > < p > This text gets wrapped in < code > p </ code > tags. </ p > </ div > < p > The tail of the < code > DefaultBlockMode </ code > subelement. </ p > < p name = \"DefaultSpanMode\" > This text < em > is not </ em > wrapped in additional < code > p </ code > tags. </ p > < p > The tail of the < code > DefaultSpanMode </ code > subelement. </ p > < div name = \"SpanModeOverride\" > This < code > div </ code > block is not wrapped in paragraph tags. Note: Subelements are not required to have tail text. </ div > < p name = \"BlockModeOverride\" > < p > This < code > p </ code > block < em > is </ em > foolishly wrapped in further paragraph tags. </ p > </ p > < p > The tail of the < code > BlockModeOverride </ code > subelement. </ p > < div name = \"RawHtml\" > Raw HTML blocks may also be nested. </ div > </ div > < p > This text is after the markdown in HTML. </ p >","title":"Complex Result:"},{"location":"extensions/meta_data/","text":"Meta-Data \u00b6 Summary \u00b6 The Meta-Data extension adds a syntax for defining meta-data about a document. It is inspired by and follows the syntax of MultiMarkdown . Currently, this extension does not use the meta-data in any way, but simply provides it as a Meta attribute of a Markdown instance for use by other extensions or directly by your python code. This extension is included in the standard Markdown library. Syntax \u00b6 Meta-data consists of a series of keywords and values defined at the beginning of a markdown document like this: Title: My Document Summary: A brief description of my document. Authors: Waylan Limberg John Doe Date: October 2, 2007 blank-value: base_url: http://example.com This is the first paragraph of the document. The keywords are case-insensitive and may consist of letters, numbers, underscores and dashes and must end with a colon. The values consist of anything following the colon on the line and may even be blank. If a line is indented by 4 or more spaces, that line is assumed to be an additional line of the value for the previous keyword. A keyword may have as many lines as desired. The first blank line ends all meta-data for the document. Therefore, the first line of a document must not be blank. Alternatively, You may use YAML style deliminators to mark the start and/or end of your meta-data. When doing so, the first line of your document must be --- . The meta-data ends at the first blank line or the first line containing an end deliminator (either --- or ... ), whichever comes first. Even though YAML deliminators are supported, meta-data is not parsed as YAML. All meta-data is stripped from the document prior to any further processing by Markdown. Usage \u00b6 See Extensions for general extension usage. Use meta as the name of the extension. A trivial example: markdown . markdown ( some_text , extensions = [ 'meta' ]) Accessing the Meta-Data \u00b6 The meta-data is made available as a python Dict in the Meta attribute of an instance of the Markdown class. For example, using the above document: >>> md = markdown . Markdown ( extensions = [ 'meta' ]) >>> html = md . convert ( text ) >>> # Meta-data has been stripped from output >>> print html <p>This is the first paragraph of the document.</p> >>> # View meta-data >>> print md . Meta { 'title' : ['My Document'], 'summary' : ['A brief description of my document.'], 'authors' : ['Waylan Limberg', 'John Doe'], 'date' : ['October 2, 2007'], 'blank-value' : [''], 'base_url' : ['http://example.com'] } Note that the keys are all lowercase and the values consist of a list of strings where each item is one line for that key. This way, one could preserve line breaks if desired. Or the items could be joined where appropriate. No assumptions are made regarding the data. It is simply passed as found to the Meta attribute. Perhaps the meta-data could be passed into a template system, or used by various Markdown extensions. The possibilities are left to the imagination of the developer. Compatible Extensions \u00b6 The following extensions are currently known to work with the Meta-Data extension. The keywords they are known to support are also listed. WikiLinks wiki_base_url wiki_end_url wiki_html_class","title":"Meta-Data"},{"location":"extensions/meta_data/#meta-data","text":"","title":"Meta-Data"},{"location":"extensions/meta_data/#summary","text":"The Meta-Data extension adds a syntax for defining meta-data about a document. It is inspired by and follows the syntax of MultiMarkdown . Currently, this extension does not use the meta-data in any way, but simply provides it as a Meta attribute of a Markdown instance for use by other extensions or directly by your python code. This extension is included in the standard Markdown library.","title":"Summary"},{"location":"extensions/meta_data/#syntax","text":"Meta-data consists of a series of keywords and values defined at the beginning of a markdown document like this: Title: My Document Summary: A brief description of my document. Authors: Waylan Limberg John Doe Date: October 2, 2007 blank-value: base_url: http://example.com This is the first paragraph of the document. The keywords are case-insensitive and may consist of letters, numbers, underscores and dashes and must end with a colon. The values consist of anything following the colon on the line and may even be blank. If a line is indented by 4 or more spaces, that line is assumed to be an additional line of the value for the previous keyword. A keyword may have as many lines as desired. The first blank line ends all meta-data for the document. Therefore, the first line of a document must not be blank. Alternatively, You may use YAML style deliminators to mark the start and/or end of your meta-data. When doing so, the first line of your document must be --- . The meta-data ends at the first blank line or the first line containing an end deliminator (either --- or ... ), whichever comes first. Even though YAML deliminators are supported, meta-data is not parsed as YAML. All meta-data is stripped from the document prior to any further processing by Markdown.","title":"Syntax"},{"location":"extensions/meta_data/#usage","text":"See Extensions for general extension usage. Use meta as the name of the extension. A trivial example: markdown . markdown ( some_text , extensions = [ 'meta' ])","title":"Usage"},{"location":"extensions/meta_data/#accessing-the-meta-data","text":"The meta-data is made available as a python Dict in the Meta attribute of an instance of the Markdown class. For example, using the above document: >>> md = markdown . Markdown ( extensions = [ 'meta' ]) >>> html = md . convert ( text ) >>> # Meta-data has been stripped from output >>> print html <p>This is the first paragraph of the document.</p> >>> # View meta-data >>> print md . Meta { 'title' : ['My Document'], 'summary' : ['A brief description of my document.'], 'authors' : ['Waylan Limberg', 'John Doe'], 'date' : ['October 2, 2007'], 'blank-value' : [''], 'base_url' : ['http://example.com'] } Note that the keys are all lowercase and the values consist of a list of strings where each item is one line for that key. This way, one could preserve line breaks if desired. Or the items could be joined where appropriate. No assumptions are made regarding the data. It is simply passed as found to the Meta attribute. Perhaps the meta-data could be passed into a template system, or used by various Markdown extensions. The possibilities are left to the imagination of the developer.","title":"Accessing the Meta-Data"},{"location":"extensions/meta_data/#compatible-extensions","text":"The following extensions are currently known to work with the Meta-Data extension. The keywords they are known to support are also listed. WikiLinks wiki_base_url wiki_end_url wiki_html_class","title":"Compatible Extensions"},{"location":"extensions/nl2br/","text":"New-Line-to-Break Extension \u00b6 Summary \u00b6 The New-Line-to-Break ( nl2br ) Extension will cause newlines to be treated as hard breaks; like StackOverflow and GitHub flavored Markdown do. Example \u00b6 >>> import markdown >>> text = \"\"\" ... Line 1 ... Line 2 ... \"\"\" >>> html = markdown . markdown ( text , extensions = [ 'nl2br' ]) >>> print html <p>Line 1<br /> Line 2</p> Usage \u00b6 See Extensions for general extension usage. Use nl2br as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown . markdown ( some_text , extensions = [ 'nl2br' ])","title":"New Line to Break"},{"location":"extensions/nl2br/#new-line-to-break-extension","text":"","title":"New-Line-to-Break Extension"},{"location":"extensions/nl2br/#summary","text":"The New-Line-to-Break ( nl2br ) Extension will cause newlines to be treated as hard breaks; like StackOverflow and GitHub flavored Markdown do.","title":"Summary"},{"location":"extensions/nl2br/#example","text":">>> import markdown >>> text = \"\"\" ... Line 1 ... Line 2 ... \"\"\" >>> html = markdown . markdown ( text , extensions = [ 'nl2br' ]) >>> print html <p>Line 1<br /> Line 2</p>","title":"Example"},{"location":"extensions/nl2br/#usage","text":"See Extensions for general extension usage. Use nl2br as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown . markdown ( some_text , extensions = [ 'nl2br' ])","title":"Usage"},{"location":"extensions/sane_lists/","text":"Sane Lists \u00b6 Summary \u00b6 The Sane Lists extension alters the behavior of the Markdown List syntax to be less surprising. This extension is included in the standard Markdown library. Syntax \u00b6 Sane Lists do not allow the mixing of list types. In other words, an ordered list will not continue when an unordered list item is encountered and vice versa. For example: 1. Ordered item 1 2. Ordered item 2 * Unordered item 1 * Unordered item 2 will result in the following output: < ol > < li > Ordered item 1 </ li > < li > Ordered item 2 </ li > </ ol > < ul > < li > Unordered item 1 </ li > < li > Unordered item 2 </ li > </ ul > Whereas the default Markdown behavior would be to generate an unordered list. Note that, unlike the default Markdown behavior, if a blank line is not included between list items, the different list type is ignored completely. This corresponds to the behavior of paragraphs. For example: A Paragraph. * Not a list item. 1. Ordered list item. * Not a separate list item. With this extension the above will result in the following output: < p > A Paragraph. * Not a list item. </ p > < ol > < li > Ordered list item. * Not a separate list item. </ li > </ ol > Sane lists also recognize the number used in ordered lists. Given the following list: 4. Apples 5. Oranges 6. Pears By default markdown will ignore the fact that the first line started with item number \u201c4\u201d and the HTML list will start with a number \u201c1\u201d. This extension will result in the following HTML output: < ol start = \"4\" > < li > Apples </ li > < li > Oranges </ li > < li > Pears </ li > </ ol > In all other ways, Sane Lists should behave as normal Markdown lists. Usage \u00b6 See Extensions for general extension usage. Use sane_lists as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown . markdown ( some_text , extensions = [ 'sane_lists' ])","title":"Sane Lists"},{"location":"extensions/sane_lists/#sane-lists","text":"","title":"Sane Lists"},{"location":"extensions/sane_lists/#summary","text":"The Sane Lists extension alters the behavior of the Markdown List syntax to be less surprising. This extension is included in the standard Markdown library.","title":"Summary"},{"location":"extensions/sane_lists/#syntax","text":"Sane Lists do not allow the mixing of list types. In other words, an ordered list will not continue when an unordered list item is encountered and vice versa. For example: 1. Ordered item 1 2. Ordered item 2 * Unordered item 1 * Unordered item 2 will result in the following output: < ol > < li > Ordered item 1 </ li > < li > Ordered item 2 </ li > </ ol > < ul > < li > Unordered item 1 </ li > < li > Unordered item 2 </ li > </ ul > Whereas the default Markdown behavior would be to generate an unordered list. Note that, unlike the default Markdown behavior, if a blank line is not included between list items, the different list type is ignored completely. This corresponds to the behavior of paragraphs. For example: A Paragraph. * Not a list item. 1. Ordered list item. * Not a separate list item. With this extension the above will result in the following output: < p > A Paragraph. * Not a list item. </ p > < ol > < li > Ordered list item. * Not a separate list item. </ li > </ ol > Sane lists also recognize the number used in ordered lists. Given the following list: 4. Apples 5. Oranges 6. Pears By default markdown will ignore the fact that the first line started with item number \u201c4\u201d and the HTML list will start with a number \u201c1\u201d. This extension will result in the following HTML output: < ol start = \"4\" > < li > Apples </ li > < li > Oranges </ li > < li > Pears </ li > </ ol > In all other ways, Sane Lists should behave as normal Markdown lists.","title":"Syntax"},{"location":"extensions/sane_lists/#usage","text":"See Extensions for general extension usage. Use sane_lists as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown . markdown ( some_text , extensions = [ 'sane_lists' ])","title":"Usage"},{"location":"extensions/smarty/","text":"SmartyPants \u00b6 Summary \u00b6 The SmartyPants extension converts ASCII dashes, quotes and ellipses to their HTML entity equivalents. ASCII symbol Replacements HTML Entities Substitution Keys ' \u2018 \u2019 &lsquo; &rsquo; 'left-single-quote' , 'right-single-quote' \" \u201c \u201d &ldquo; &rdquo; 'left-double-quote' , 'right-double-quote' << >> \u00ab \u00bb &laquo; &raquo; 'left-angle-quote' , 'right-angle-quote' ... \u2026 &hellip; 'ellipsis' -- \u2013 &ndash; 'ndash' --- \u2014 &mdash; 'mdash' Using the configuration option \u2018substitutions\u2019 you can overwrite the default substitutions. Just pass a dict mapping (a subset of) the keys to the substitution strings. For example, one might use the following configuration to get correct quotes for the German language: extension_configs = { 'smarty' : { 'substitutions' : { 'left-single-quote' : '&sbquo;' , # sb is not a typo! 'right-single-quote' : '&lsquo;' , 'left-double-quote' : '&bdquo;' , 'right-double-quote' : '&ldquo;' } } } Note This extension re-implements the Python SmartyPants library by integrating it into the markdown parser. While this does not provide any additional features, it does offer a few advantages. Notably, it will not try to work on highlighted code blocks (using the CodeHilite Extension) like the third party library has been known to do. Usage \u00b6 See Extensions for general extension usage. Use smarty as the name of the extension. See the Library Reference for information about configuring extensions. The following options are provided to configure the output: Option Default value Description smart_dashes True whether to convert dashes smart_quotes True whether to convert straight quotes smart_angled_quotes False whether to convert angled quotes smart_ellipses True whether to convert ellipses substitutions {} overwrite default substitutions A trivial example: markdown . markdown ( some_text , extensions = [ 'smarty' ]) Further reading \u00b6 SmartyPants extension is based on the original SmartyPants implementation by John Gruber. Please read its documentation for details.","title":"SmartyPants"},{"location":"extensions/smarty/#smartypants","text":"","title":"SmartyPants"},{"location":"extensions/smarty/#summary","text":"The SmartyPants extension converts ASCII dashes, quotes and ellipses to their HTML entity equivalents. ASCII symbol Replacements HTML Entities Substitution Keys ' \u2018 \u2019 &lsquo; &rsquo; 'left-single-quote' , 'right-single-quote' \" \u201c \u201d &ldquo; &rdquo; 'left-double-quote' , 'right-double-quote' << >> \u00ab \u00bb &laquo; &raquo; 'left-angle-quote' , 'right-angle-quote' ... \u2026 &hellip; 'ellipsis' -- \u2013 &ndash; 'ndash' --- \u2014 &mdash; 'mdash' Using the configuration option \u2018substitutions\u2019 you can overwrite the default substitutions. Just pass a dict mapping (a subset of) the keys to the substitution strings. For example, one might use the following configuration to get correct quotes for the German language: extension_configs = { 'smarty' : { 'substitutions' : { 'left-single-quote' : '&sbquo;' , # sb is not a typo! 'right-single-quote' : '&lsquo;' , 'left-double-quote' : '&bdquo;' , 'right-double-quote' : '&ldquo;' } } } Note This extension re-implements the Python SmartyPants library by integrating it into the markdown parser. While this does not provide any additional features, it does offer a few advantages. Notably, it will not try to work on highlighted code blocks (using the CodeHilite Extension) like the third party library has been known to do.","title":"Summary"},{"location":"extensions/smarty/#usage","text":"See Extensions for general extension usage. Use smarty as the name of the extension. See the Library Reference for information about configuring extensions. The following options are provided to configure the output: Option Default value Description smart_dashes True whether to convert dashes smart_quotes True whether to convert straight quotes smart_angled_quotes False whether to convert angled quotes smart_ellipses True whether to convert ellipses substitutions {} overwrite default substitutions A trivial example: markdown . markdown ( some_text , extensions = [ 'smarty' ])","title":"Usage"},{"location":"extensions/smarty/#further-reading","text":"SmartyPants extension is based on the original SmartyPants implementation by John Gruber. Please read its documentation for details.","title":"Further reading"},{"location":"extensions/tables/","text":"Tables \u00b6 Summary \u00b6 The Tables extension adds the ability to create tables in Markdown documents. This extension is included in the standard Markdown library. Syntax \u00b6 Tables are defined using the syntax established in PHP Markdown Extra . Thus, the following text (taken from the above referenced PHP documentation): First Header | Second Header ------------- | ------------- Content Cell | Content Cell Content Cell | Content Cell will be rendered as: < table > < thead > < tr > < th > First Header </ th > < th > Second Header </ th > </ tr > </ thead > < tbody > < tr > < td > Content Cell </ td > < td > Content Cell </ td > </ tr > < tr > < td > Content Cell </ td > < td > Content Cell </ td > </ tr > </ tbody > </ table > Usage \u00b6 See Extensions for general extension usage. Use tables as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown . markdown ( some_text , extensions = [ 'tables' ])","title":"Tables"},{"location":"extensions/tables/#tables","text":"","title":"Tables"},{"location":"extensions/tables/#summary","text":"The Tables extension adds the ability to create tables in Markdown documents. This extension is included in the standard Markdown library.","title":"Summary"},{"location":"extensions/tables/#syntax","text":"Tables are defined using the syntax established in PHP Markdown Extra . Thus, the following text (taken from the above referenced PHP documentation): First Header | Second Header ------------- | ------------- Content Cell | Content Cell Content Cell | Content Cell will be rendered as: < table > < thead > < tr > < th > First Header </ th > < th > Second Header </ th > </ tr > </ thead > < tbody > < tr > < td > Content Cell </ td > < td > Content Cell </ td > </ tr > < tr > < td > Content Cell </ td > < td > Content Cell </ td > </ tr > </ tbody > </ table >","title":"Syntax"},{"location":"extensions/tables/#usage","text":"See Extensions for general extension usage. Use tables as the name of the extension. This extension does not accept any special configuration options. A trivial example: markdown . markdown ( some_text , extensions = [ 'tables' ])","title":"Usage"},{"location":"extensions/toc/","text":"Table of Contents \u00b6 Summary \u00b6 The Table of Contents extension generates a Table of Contents from a Markdown document and adds it into the resulting HTML document. This extension is included in the standard Markdown library. Syntax \u00b6 By default, all headers will automatically have unique id attributes generated based upon the text of the header. Note this example, in which all three headers would have the same id : # Header # Header # Header Results in: < h1 id = \"header\" > Header </ h1 > < h1 id = \"header_1\" > Header </ h1 > < h1 id = \"header_2\" > Header </ h1 > Place a marker in the document where you would like the Table of Contents to appear. Then, a nested list of all the headers in the document will replace the marker. The marker defaults to [TOC] so the following document: [TOC] # Header 1 ## Header 2 would generate the following output: < div class = \"toc\" > < ul > < li >< a href = \"#header-1\" > Header 1 </ a ></ li > < ul > < li >< a href = \"#header-2\" > Header 2 </ a ></ li > </ ul > </ ul > </ div > < h1 id = \"header-1\" > Header 1 </ h1 > < h2 id = \"header-2\" > Header 2 </ h2 > Regardless of whether a marker is found in the document (or disabled), the Table of Contents is available as an attribute ( toc ) on the Markdown class. This allows one to insert the Table of Contents elsewhere in their page template. For example: >>> md = markdown . Markdown ( extensions = [ 'toc' ]) >>> html = md . convert ( text ) >>> page = render_some_template ( context = { 'body' : html , 'toc' : md . toc }) The toc_tokens attribute is also available on the Markdown class and contains a nested list of dict objects. For example, the above document would result in the following object at md.toc_tokens : [ { 'level' : 1 , 'id' : 'header-1' , 'name' : 'Header 1' , 'children' : [ { 'level' : 2 , 'id' : 'header-2' , 'name' : 'Header 2' , 'children' :[]} ] } ] Note that the level refers to the hn level. In other words, <h1> is level 1 and <h2> is level 2 , etc. Be aware that improperly nested levels in the input may result in odd nesting of the output. Custom Labels \u00b6 In most cases, the text label in the Table of Contents should match the text of the header. However, occasionally that is not desirable. In that case, if this extension is used in conjunction with the Attribute Lists Extension and a data-toc-label attribute is defined on the header, then the contents of that attribute will be used as the text label for the item in the Table of Contents. For example, the following Markdown: [TOC] # Functions ## `markdown.markdown(text [, **kwargs])` { #markdown data-toc-label='markdown.markdown' } would generate the following output: < div class = \"toc\" > < ul > < li >< a href = \"#functions\" > Functions </ a ></ li > < ul > < li >< a href = \"#markdown\" > markdown.markdown </ a ></ li > </ ul > </ ul > </ div > < h1 id = \"functions\" > Functions </ h1 > < h2 id = \"markdown\" >< code > markdown.markdown(text [, **kwargs]) </ code ></ h2 > Notice that the text in the Table of Contents is much cleaner and easier to read in the context of a Table of Contents. The data-toc-label is not included in the HTML header element. Also note that the ID was manually defined in the attribute list to provide a cleaner URL when linking to the header. If the ID is not manually defined, it is always derived from the text of the header, never from the data-toc-label attribute. Usage \u00b6 See Extensions for general extension usage. Use toc as the name of the extension. See the Library Reference for information about configuring extensions. The following options are provided to configure the output: marker : Text to find and replace with the Table of Contents. Defaults to [TOC] . Set to an empty string to disable searching for a marker, which may save some time, especially on long documents. title : Title to insert in the Table of Contents\u2019 <div> . Defaults to None . anchorlink : Set to True to cause all headers to link to themselves. Default is False . anchorlink_class : CSS class(es) used for the link. Defaults to toclink . permalink : Set to True or a string to generate permanent links at the end of each header. Useful with Sphinx style sheets. When set to True the paragraph symbol (\u00b6 or \u201c &para; \u201d) is used as the link text. When set to a string, the provided string is used as the link text. permalink_class : CSS class(es) used for the link. Defaults to headerlink . permalink_title : Title attribute of the permanent link. Defaults to Permanent link . baselevel : Base level for headers. Defaults to 1 . The baselevel setting allows the header levels to be automatically adjusted to fit within the hierarchy of your HTML templates. For example, suppose the Markdown text for a page should not contain any headers higher than level 3 ( <h3> ). The following will accomplish that: >>> text = ''' ... #Some Header ... ## Next Level''' >>> from markdown.extensions.toc import TocExtension >>> html = markdown . markdown ( text , extensions = [ TocExtension ( baselevel = 3 )]) >>> print html <h3 id=\"some_header\">Some Header</h3> <h4 id=\"next_level\">Next Level</h4>' slugify : Callable to generate anchors. Default: markdown.extensions.headerid.slugify In order to use a different algorithm to define the id attributes, define and pass in a callable which takes the following two arguments: value : The string to slugify. separator : The Word Separator. The callable must return a string appropriate for use in HTML id attributes. separator : Word separator. Character which replaces white space in id. Defaults to \u201c - \u201d. toc_depth Define the range of section levels to include in the Table of Contents. A single integer ( b ) defines the bottom section level ( <h1>..<hb> ) only. A string consisting of two digits separated by a hyphen in between ( \"2-5\" ), define the top ( t ) and the bottom ( b ) ( <ht>..<hb> ). Defaults to 6 (bottom). When used with conjunction with baselevel , this parameter will not take the fitted hierarchy from baselevel into account. That is, if both toc_depth and baselevel are 3 , then only the highest level will be present in the table. If you set baselevel to 3 and toc_depth to \"2-6\" , the first headline will be <h3> and so still included in the Table of Contents. To exclude this first level, you have to set toc_depth to \"4-6\" . A trivial example: markdown . markdown ( some_text , extensions = [ 'toc' ])","title":"Table of Contents"},{"location":"extensions/toc/#table-of-contents","text":"","title":"Table of Contents"},{"location":"extensions/toc/#summary","text":"The Table of Contents extension generates a Table of Contents from a Markdown document and adds it into the resulting HTML document. This extension is included in the standard Markdown library.","title":"Summary"},{"location":"extensions/toc/#syntax","text":"By default, all headers will automatically have unique id attributes generated based upon the text of the header. Note this example, in which all three headers would have the same id : # Header # Header # Header Results in: < h1 id = \"header\" > Header </ h1 > < h1 id = \"header_1\" > Header </ h1 > < h1 id = \"header_2\" > Header </ h1 > Place a marker in the document where you would like the Table of Contents to appear. Then, a nested list of all the headers in the document will replace the marker. The marker defaults to [TOC] so the following document: [TOC] # Header 1 ## Header 2 would generate the following output: < div class = \"toc\" > < ul > < li >< a href = \"#header-1\" > Header 1 </ a ></ li > < ul > < li >< a href = \"#header-2\" > Header 2 </ a ></ li > </ ul > </ ul > </ div > < h1 id = \"header-1\" > Header 1 </ h1 > < h2 id = \"header-2\" > Header 2 </ h2 > Regardless of whether a marker is found in the document (or disabled), the Table of Contents is available as an attribute ( toc ) on the Markdown class. This allows one to insert the Table of Contents elsewhere in their page template. For example: >>> md = markdown . Markdown ( extensions = [ 'toc' ]) >>> html = md . convert ( text ) >>> page = render_some_template ( context = { 'body' : html , 'toc' : md . toc }) The toc_tokens attribute is also available on the Markdown class and contains a nested list of dict objects. For example, the above document would result in the following object at md.toc_tokens : [ { 'level' : 1 , 'id' : 'header-1' , 'name' : 'Header 1' , 'children' : [ { 'level' : 2 , 'id' : 'header-2' , 'name' : 'Header 2' , 'children' :[]} ] } ] Note that the level refers to the hn level. In other words, <h1> is level 1 and <h2> is level 2 , etc. Be aware that improperly nested levels in the input may result in odd nesting of the output.","title":"Syntax"},{"location":"extensions/toc/#custom-labels","text":"In most cases, the text label in the Table of Contents should match the text of the header. However, occasionally that is not desirable. In that case, if this extension is used in conjunction with the Attribute Lists Extension and a data-toc-label attribute is defined on the header, then the contents of that attribute will be used as the text label for the item in the Table of Contents. For example, the following Markdown: [TOC] # Functions ## `markdown.markdown(text [, **kwargs])` { #markdown data-toc-label='markdown.markdown' } would generate the following output: < div class = \"toc\" > < ul > < li >< a href = \"#functions\" > Functions </ a ></ li > < ul > < li >< a href = \"#markdown\" > markdown.markdown </ a ></ li > </ ul > </ ul > </ div > < h1 id = \"functions\" > Functions </ h1 > < h2 id = \"markdown\" >< code > markdown.markdown(text [, **kwargs]) </ code ></ h2 > Notice that the text in the Table of Contents is much cleaner and easier to read in the context of a Table of Contents. The data-toc-label is not included in the HTML header element. Also note that the ID was manually defined in the attribute list to provide a cleaner URL when linking to the header. If the ID is not manually defined, it is always derived from the text of the header, never from the data-toc-label attribute.","title":"Custom Labels"},{"location":"extensions/toc/#usage","text":"See Extensions for general extension usage. Use toc as the name of the extension. See the Library Reference for information about configuring extensions. The following options are provided to configure the output: marker : Text to find and replace with the Table of Contents. Defaults to [TOC] . Set to an empty string to disable searching for a marker, which may save some time, especially on long documents. title : Title to insert in the Table of Contents\u2019 <div> . Defaults to None . anchorlink : Set to True to cause all headers to link to themselves. Default is False . anchorlink_class : CSS class(es) used for the link. Defaults to toclink . permalink : Set to True or a string to generate permanent links at the end of each header. Useful with Sphinx style sheets. When set to True the paragraph symbol (\u00b6 or \u201c &para; \u201d) is used as the link text. When set to a string, the provided string is used as the link text. permalink_class : CSS class(es) used for the link. Defaults to headerlink . permalink_title : Title attribute of the permanent link. Defaults to Permanent link . baselevel : Base level for headers. Defaults to 1 . The baselevel setting allows the header levels to be automatically adjusted to fit within the hierarchy of your HTML templates. For example, suppose the Markdown text for a page should not contain any headers higher than level 3 ( <h3> ). The following will accomplish that: >>> text = ''' ... #Some Header ... ## Next Level''' >>> from markdown.extensions.toc import TocExtension >>> html = markdown . markdown ( text , extensions = [ TocExtension ( baselevel = 3 )]) >>> print html <h3 id=\"some_header\">Some Header</h3> <h4 id=\"next_level\">Next Level</h4>' slugify : Callable to generate anchors. Default: markdown.extensions.headerid.slugify In order to use a different algorithm to define the id attributes, define and pass in a callable which takes the following two arguments: value : The string to slugify. separator : The Word Separator. The callable must return a string appropriate for use in HTML id attributes. separator : Word separator. Character which replaces white space in id. Defaults to \u201c - \u201d. toc_depth Define the range of section levels to include in the Table of Contents. A single integer ( b ) defines the bottom section level ( <h1>..<hb> ) only. A string consisting of two digits separated by a hyphen in between ( \"2-5\" ), define the top ( t ) and the bottom ( b ) ( <ht>..<hb> ). Defaults to 6 (bottom). When used with conjunction with baselevel , this parameter will not take the fitted hierarchy from baselevel into account. That is, if both toc_depth and baselevel are 3 , then only the highest level will be present in the table. If you set baselevel to 3 and toc_depth to \"2-6\" , the first headline will be <h3> and so still included in the Table of Contents. To exclude this first level, you have to set toc_depth to \"4-6\" . A trivial example: markdown . markdown ( some_text , extensions = [ 'toc' ])","title":"Usage"},{"location":"extensions/wikilinks/","text":"WikiLinks \u00b6 Summary \u00b6 The WikiLinks extension adds support for WikiLinks . Specifically, any [[bracketed]] word is converted to a link. This extension is included in the standard Markdown library. Syntax \u00b6 A [[bracketed]] word is any combination of upper or lower case letters, number, dashes, underscores and spaces surrounded by double brackets. Therefore [[Bracketed]] would produce the following HTML: < a href = \"/Bracketed/\" class = \"wikilink\" > Bracketed </ a > Note that WikiLinks are automatically assigned class=\"wikilink\" making it easy to style WikiLinks differently from other links on a page if one so desires. See below for ways to alter the class. Also note that when a space is used, the space is converted to an underscore in the link but left as-is in the label. Perhaps an example would illustrate this best: [[Wiki Link]] becomes < a href = \"/Wiki_Link/\" class = \"wikilink\" > Wiki Link </ a > Usage \u00b6 See Extensions for general extension usage. Use wikilinks as the name of the extension. See the Library Reference for information about configuring extensions. The default behavior is to point each link to the document root of the current domain and close with a trailing slash. Additionally, each link is assigned to the HTML class wikilink . The following options are provided to change the default behavior: base_url : String to append to beginning of URL. Default: '/' end_url : String to append to end of URL. Default: '/' html_class : CSS class. Leave blank for none. Default: 'wikilink' build_url : Callable which formats the URL from its parts. A trivial example: markdown . markdown ( some_text , extensions = [ 'wikilinks' ]) Examples \u00b6 For an example, let us suppose links should always point to the sub-directory /wiki/ and end with .html >>> from markdown.extensions.wikilinks import WikiLinkExtension >>> html = markdown . markdown ( text , ... extensions = [ WikiLinkExtension ( base_url = '/wiki/' , end_url = '.html' )] ... ) The above would result in the following link for [[WikiLink]] . < a href = \"/wiki/WikiLink.html\" class = \"wikilink\" > WikiLink </ a > If you want to do more that just alter the base and/or end of the URL, you could also pass in a callable which must accept three arguments ( label , base , and end ). The callable must return the URL in it\u2019s entirety. >>> def my_url_builder ( label , base , end ): ... # do stuff ... return url ... >>> html = markdown . markdown ( text , ... extensions = [ WikiLinkExtension ( build_url = my_url_builder )], ... ) The option is also provided to change or remove the class attribute. >>> html = markdown . markdown ( text , ... extensions = [ WikiLinkExtension ( html_class = 'myclass' )] ... ) Would cause all WikiLinks to be assigned to the class myclass . < a href = \"/WikiLink/\" class = \"myclass\" > WikiLink </ a > Using with Meta-Data extension \u00b6 The WikiLink extension also supports the Meta-Data extension. Please see the documentation for that extension for specifics. The supported meta-data keywords are: wiki_base_url wiki_end_url wiki_html_class When used, the meta-data will override the settings provided through the extension_configs interface. This document: wiki_base_url: http://example.com/ wiki_end_url: .html wiki_html_class: A [[WikiLink]] in the first paragraph. would result in the following output (notice the blank wiki_html_class ): < p > A < a href = \"http://example.com/WikiLink.html\" > WikiLink </ a > in the first paragraph. </ p >","title":"WikiLinks"},{"location":"extensions/wikilinks/#wikilinks","text":"","title":"WikiLinks"},{"location":"extensions/wikilinks/#summary","text":"The WikiLinks extension adds support for WikiLinks . Specifically, any [[bracketed]] word is converted to a link. This extension is included in the standard Markdown library.","title":"Summary"},{"location":"extensions/wikilinks/#syntax","text":"A [[bracketed]] word is any combination of upper or lower case letters, number, dashes, underscores and spaces surrounded by double brackets. Therefore [[Bracketed]] would produce the following HTML: < a href = \"/Bracketed/\" class = \"wikilink\" > Bracketed </ a > Note that WikiLinks are automatically assigned class=\"wikilink\" making it easy to style WikiLinks differently from other links on a page if one so desires. See below for ways to alter the class. Also note that when a space is used, the space is converted to an underscore in the link but left as-is in the label. Perhaps an example would illustrate this best: [[Wiki Link]] becomes < a href = \"/Wiki_Link/\" class = \"wikilink\" > Wiki Link </ a >","title":"Syntax"},{"location":"extensions/wikilinks/#usage","text":"See Extensions for general extension usage. Use wikilinks as the name of the extension. See the Library Reference for information about configuring extensions. The default behavior is to point each link to the document root of the current domain and close with a trailing slash. Additionally, each link is assigned to the HTML class wikilink . The following options are provided to change the default behavior: base_url : String to append to beginning of URL. Default: '/' end_url : String to append to end of URL. Default: '/' html_class : CSS class. Leave blank for none. Default: 'wikilink' build_url : Callable which formats the URL from its parts. A trivial example: markdown . markdown ( some_text , extensions = [ 'wikilinks' ])","title":"Usage"},{"location":"extensions/wikilinks/#examples","text":"For an example, let us suppose links should always point to the sub-directory /wiki/ and end with .html >>> from markdown.extensions.wikilinks import WikiLinkExtension >>> html = markdown . markdown ( text , ... extensions = [ WikiLinkExtension ( base_url = '/wiki/' , end_url = '.html' )] ... ) The above would result in the following link for [[WikiLink]] . < a href = \"/wiki/WikiLink.html\" class = \"wikilink\" > WikiLink </ a > If you want to do more that just alter the base and/or end of the URL, you could also pass in a callable which must accept three arguments ( label , base , and end ). The callable must return the URL in it\u2019s entirety. >>> def my_url_builder ( label , base , end ): ... # do stuff ... return url ... >>> html = markdown . markdown ( text , ... extensions = [ WikiLinkExtension ( build_url = my_url_builder )], ... ) The option is also provided to change or remove the class attribute. >>> html = markdown . markdown ( text , ... extensions = [ WikiLinkExtension ( html_class = 'myclass' )] ... ) Would cause all WikiLinks to be assigned to the class myclass . < a href = \"/WikiLink/\" class = \"myclass\" > WikiLink </ a >","title":"Examples"},{"location":"extensions/wikilinks/#using-with-meta-data-extension","text":"The WikiLink extension also supports the Meta-Data extension. Please see the documentation for that extension for specifics. The supported meta-data keywords are: wiki_base_url wiki_end_url wiki_html_class When used, the meta-data will override the settings provided through the extension_configs interface. This document: wiki_base_url: http://example.com/ wiki_end_url: .html wiki_html_class: A [[WikiLink]] in the first paragraph. would result in the following output (notice the blank wiki_html_class ): < p > A < a href = \"http://example.com/WikiLink.html\" > WikiLink </ a > in the first paragraph. </ p >","title":"Using with Meta-Data extension"}]}