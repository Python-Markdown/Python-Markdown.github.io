{
    "docs": [
        {
            "location": "/", 
            "text": "Python-Markdown\n\n\nThis is a Python implementation of John Gruber\ns\n\nMarkdown\n.\nIt is almost completely compliant with the reference implementation,\nthough there are a few very minor \ndifferences\n. See John\ns\n\nSyntax Documentation\n\nfor the syntax rules.\n\n\nSee the \ninstallation instructions\n to get started.\n\n\nGoals\n\n\nThe Python-Markdown project is developed with the following goals in mind:\n\n\n\n\n\n\nMaintain a Python 2 \nand\n Python 3 library (with an optional CLI wrapper)\n  suited to use in web server environments (never raise an exception, never\n  write to stdout, etc.) as an implementation of the markdown parser that\n  follows the \nsyntax rules\n\n  and the behavior of the original (markdown.pl) implementation as reasonably as\n  possible (see \ndifferences\n for a few exceptions).\n\n\n\n\n\n\nProvide an \nExtension API\n which makes it possible\n  to change and/or extend the behavior of the parser.\n\n\n\n\n\n\nFeatures\n\n\nIn addition to the basic markdown syntax, Python-Markdown supports the following\nfeatures:\n\n\n\n\n\n\nInternational Input\n\n\nPython-Markdown will accept \ninput\n in any language\nsupported by Unicode including bi-directional text. In fact the test suite\nincludes documents written in Russian and Arabic.\n\n\n\n\n\n\nExtensions\n\n\nVarious \nextensions\n are provided (including\n\nextra\n) to change and/or extend the base syntax.\nAdditionally, a public \nExtension API\n is available\nto write your own extensions.\n\n\n\n\n\n\nOutput Formats\n\n\nPython-Markdown can output documents with either HTML or XHTML styel tags.\nSee the \nLibrary Reference\n for details.\n\n\n\n\n\n\nCommand Line Interface\n\n\nIn addition to being a Python Library, a\n\ncommand line script\n is available for your convenience.\n\n\n\n\n\n\nDifferences\n\n\nWhile Python-Markdown strives to fully implement markdown as described in the\n\nsyntax rules\n, the rules\ncan be interpreted in different ways and different implementations\noccasionally vary in their behavior (see the\n\nBabelmark FAQ\n\nfor some examples). Known and intentional differences found in Python-Markdown\nare summarized below:\n\n\n\n\n\n\nMiddle-Word Emphasis\n\n\nPython-Markdown defaults to ignoring middle-word emphasis. In other words,\n\nsome_long_filename.txt\n will not become \nsome\nem\nlong\n/em\nfilename.txt\n.\nThis can be switched off if desired. See the\n\nLibrary Reference\n for details.\n\n\n\n\n\n\nIndentation/Tab Length\n\n\nThe \nsyntax rules\n\nclearly state that when a list item consists of multiple paragraphs, \neach\nsubsequent paragraph in a list item \nmust\n be indented by either 4 spaces\nor one tab\n (emphasis added). However, many implementations do not enforce\nthis rule and allow less than 4 spaces of indentation. The implementers of\nPython-Markdown consider it a bug to not enforce this rule.\n\n\nThis applies to any block level elements nested in a list, including\nparagraphs, sub-lists, blockquotes, code blocks, etc. They \nmust\n always\nbe indented by at least four spaces (or one tab) for each level of nesting.\n\n\nIn the event that one would prefer different behavior,\n\ntab_length\n can be set to whatever length is\ndesired. Be warned however, as this will affect indentation for all aspects\nof the syntax (including root level code blocks).\n\n\n\n\n\n\nConsecutive Lists\n\n\nWhile the syntax rules are not clear on this, many implementations (including\nthe original) do not end one list and start a second list when the list marker\n(asterisks, pluses, hyphens, and numbers) changes. For consistency,\nPython-Markdown maintains the same behavior with no plans to change in the\nforeseeable future. That said, the \nSane List Extension\n\nis available to provide a less surprising behavior.\n\n\n\n\n\n\nSupport\n\n\nYou may ask for help and discuss various other issues on the \nmailing list\n\nand report bugs on the \nbug tracker\n.", 
            "title": "Python-Markdown"
        }, 
        {
            "location": "/#python-markdown", 
            "text": "This is a Python implementation of John Gruber s Markdown .\nIt is almost completely compliant with the reference implementation,\nthough there are a few very minor  differences . See John s Syntax Documentation \nfor the syntax rules.  See the  installation instructions  to get started.", 
            "title": "Python-Markdown"
        }, 
        {
            "location": "/#goals", 
            "text": "The Python-Markdown project is developed with the following goals in mind:    Maintain a Python 2  and  Python 3 library (with an optional CLI wrapper)\n  suited to use in web server environments (never raise an exception, never\n  write to stdout, etc.) as an implementation of the markdown parser that\n  follows the  syntax rules \n  and the behavior of the original (markdown.pl) implementation as reasonably as\n  possible (see  differences  for a few exceptions).    Provide an  Extension API  which makes it possible\n  to change and/or extend the behavior of the parser.", 
            "title": "Goals"
        }, 
        {
            "location": "/#features", 
            "text": "In addition to the basic markdown syntax, Python-Markdown supports the following\nfeatures:    International Input  Python-Markdown will accept  input  in any language\nsupported by Unicode including bi-directional text. In fact the test suite\nincludes documents written in Russian and Arabic.    Extensions  Various  extensions  are provided (including extra ) to change and/or extend the base syntax.\nAdditionally, a public  Extension API  is available\nto write your own extensions.    Output Formats  Python-Markdown can output documents with either HTML or XHTML styel tags.\nSee the  Library Reference  for details.    Command Line Interface  In addition to being a Python Library, a command line script  is available for your convenience.", 
            "title": "Features"
        }, 
        {
            "location": "/#differences", 
            "text": "While Python-Markdown strives to fully implement markdown as described in the syntax rules , the rules\ncan be interpreted in different ways and different implementations\noccasionally vary in their behavior (see the Babelmark FAQ \nfor some examples). Known and intentional differences found in Python-Markdown\nare summarized below:    Middle-Word Emphasis  Python-Markdown defaults to ignoring middle-word emphasis. In other words, some_long_filename.txt  will not become  some em long /em filename.txt .\nThis can be switched off if desired. See the Library Reference  for details.    Indentation/Tab Length  The  syntax rules \nclearly state that when a list item consists of multiple paragraphs,  each\nsubsequent paragraph in a list item  must  be indented by either 4 spaces\nor one tab  (emphasis added). However, many implementations do not enforce\nthis rule and allow less than 4 spaces of indentation. The implementers of\nPython-Markdown consider it a bug to not enforce this rule.  This applies to any block level elements nested in a list, including\nparagraphs, sub-lists, blockquotes, code blocks, etc. They  must  always\nbe indented by at least four spaces (or one tab) for each level of nesting.  In the event that one would prefer different behavior, tab_length  can be set to whatever length is\ndesired. Be warned however, as this will affect indentation for all aspects\nof the syntax (including root level code blocks).    Consecutive Lists  While the syntax rules are not clear on this, many implementations (including\nthe original) do not end one list and start a second list when the list marker\n(asterisks, pluses, hyphens, and numbers) changes. For consistency,\nPython-Markdown maintains the same behavior with no plans to change in the\nforeseeable future. That said, the  Sane List Extension \nis available to provide a less surprising behavior.", 
            "title": "Differences"
        }, 
        {
            "location": "/#support", 
            "text": "You may ask for help and discuss various other issues on the  mailing list \nand report bugs on the  bug tracker .", 
            "title": "Support"
        }, 
        {
            "location": "/install/", 
            "text": "Installing Python-Markdown\n\n\nThe Easy Way\n\n\nThe easiest way to install Python-Markdown is simply to type one of the\nfollowing commands from the command line as an Admin/Root user:\n\n\npip install markdown\n\n\n\n\n\nor\n\n\neasy_install markdown\n\n\n\n\n\nThat\ns it! You\nre ready to \nuse\n Python-Markdown. Enjoy!\n\n\nInstalling on Windows\n\n\nDownload the Windows installer (\n.exe\n) from\n\nPyPI\n\n\nDouble-click the file and follow the instructions.\n\n\nIf you prefer to manually install Python-Markdown in Windows, download the\nZip file, unzip it, and on the command line in the directory you unzipped to,\nrun the following command:\n\n\nC://path/to/python.exe setup.py install\n\n\n\n\n\nIf you plan to use the provided command line script, you need to make sure your\nscript directory is on your system path. On a typical Python install of Windows\nthe Scripts directory is \nC:\\PythonXX\\Scripts\\\n (were \nXX\n is the Python version\nnumber, i.e., \n27\n). Adjust the path according to your system and add to your\nsystem path.\n\n\nInstalling on *nix Systems\n\n\nFrom the command line do the following (where 2.x is the version number):\n\n\nwget http://pypi.python.org/packages/source/M/Markdown/Markdown-2.x.tar.gz\ntar xvzf Markdown-2.x.tar.gz\n\ncd\n markdown-2.x/\nsudo python setup.py install\n\n\n\n\n\nSee \nPyPI\n for all available versions.\n\n\nUsing the Git Repository\n\n\nIf you\nre the type that likes to live on the edge, you may want to keep up with\nthe latest additions and bug fixes in the repository between releases.\nPython-Markdown is maintained in a Git repository on GitHub.com. To\nget a copy of Python-Markdown from the repository do the following from the\ncommand line:\n\n\ngit clone git://github.com/Python-Markdown/markdown.git python-markdown\n\ncd\n python-markdown\npython setup.py install", 
            "title": "Installation"
        }, 
        {
            "location": "/install/#installing-python-markdown", 
            "text": "", 
            "title": "Installing Python-Markdown"
        }, 
        {
            "location": "/install/#the-easy-way", 
            "text": "The easiest way to install Python-Markdown is simply to type one of the\nfollowing commands from the command line as an Admin/Root user:  pip install markdown  or  easy_install markdown  That s it! You re ready to  use  Python-Markdown. Enjoy!", 
            "title": "The Easy Way"
        }, 
        {
            "location": "/install/#windows", 
            "text": "Download the Windows installer ( .exe ) from PyPI  Double-click the file and follow the instructions.  If you prefer to manually install Python-Markdown in Windows, download the\nZip file, unzip it, and on the command line in the directory you unzipped to,\nrun the following command:  C://path/to/python.exe setup.py install  If you plan to use the provided command line script, you need to make sure your\nscript directory is on your system path. On a typical Python install of Windows\nthe Scripts directory is  C:\\PythonXX\\Scripts\\  (were  XX  is the Python version\nnumber, i.e.,  27 ). Adjust the path according to your system and add to your\nsystem path.", 
            "title": "Installing on Windows"
        }, 
        {
            "location": "/install/#linux", 
            "text": "From the command line do the following (where 2.x is the version number):  wget http://pypi.python.org/packages/source/M/Markdown/Markdown-2.x.tar.gz\ntar xvzf Markdown-2.x.tar.gz cd  markdown-2.x/\nsudo python setup.py install  See  PyPI  for all available versions.", 
            "title": "Installing on *nix Systems"
        }, 
        {
            "location": "/install/#git", 
            "text": "If you re the type that likes to live on the edge, you may want to keep up with\nthe latest additions and bug fixes in the repository between releases.\nPython-Markdown is maintained in a Git repository on GitHub.com. To\nget a copy of Python-Markdown from the repository do the following from the\ncommand line:  git clone git://github.com/Python-Markdown/markdown.git python-markdown cd  python-markdown\npython setup.py install", 
            "title": "Using the Git Repository"
        }, 
        {
            "location": "/reference/", 
            "text": "Using Markdown as a Python Library\n\n\nFirst and foremost, Python-Markdown is intended to be a python library module\nused by various projects to convert Markdown syntax into HTML.\n\n\nThe Basics\n\n\nTo use markdown as a module:\n\n\nimport\n \nmarkdown\n\n\nhtml\n \n=\n \nmarkdown\n.\nmarkdown\n(\nyour_text_string\n)\n\n\n\n\n\n\nThe Details\n\n\nPython-Markdown provides two public functions (\nmarkdown.markdown\n\nand \nmarkdown.markdownFromFile\n) both of which wrap the\npublic class \nmarkdown.Markdown\n. If you\nre processing one\ndocument at a time, these functions will serve your needs. However, if you need\nto process multiple documents, it may be advantageous to create a single\ninstance of the \nmarkdown.Markdown\n class and pass multiple documents through\nit. If you do use a single instance though, make sure to call the \nreset\n\nmethod appropriately (\nsee below\n).\n\n\nmarkdown.markdown(text [, **kwargs])\n\n\nThe following options are available on the \nmarkdown.markdown\n function:\n\n\n\n\ntext\n\n\n\n\nThe source Unicode string. (required)\n\n\n\n\nImportant\n\n\nPython-Markdown expects \nUnicode\n as input (although\nsome simple ASCII strings \nmay\n work) and returns output as Unicode.\nDo not pass encoded strings to it! If your input is encoded, (e.g. as\nUTF-8), it is your responsibility to decode it.  For example:\n\n\ninput_file\n \n=\n \ncodecs\n.\nopen\n(\nsome_file.txt\n,\n \nmode\n=\nr\n,\n \nencoding\n=\nutf-8\n)\n\n\ntext\n \n=\n \ninput_file\n.\nread\n()\n\n\nhtml\n \n=\n \nmarkdown\n.\nmarkdown\n(\ntext\n)\n\n\n\n\n\n\nIf you want to write the output to disk, you \nmust\n encode it yourself:\n\n\noutput_file\n \n=\n \ncodecs\n.\nopen\n(\nsome_file.html\n,\n \nw\n,\n\n                          \nencoding\n=\nutf-8\n,\n\n                          \nerrors\n=\nxmlcharrefreplace\n\n\n)\n\n\noutput_file\n.\nwrite\n(\nhtml\n)\n\n\n\n\n\n\n\n\n\n\nextensions\n\n\n\n\nA list of extensions.\n\n\nPython-Markdown provides an \nAPI\n for third parties to\nwrite extensions to the parser adding their own additions or changes to the\nsyntax. A few commonly used extensions are shipped with the markdown\nlibrary. See the \nextension documentation\n for a\nlist of available extensions.\n\n\nThe list of extensions may contain instances of extensions and/or strings\nof extension names.\n\n\nextensions\n=\n[\nMyExtension\n(),\n \npath.to.my.ext\n]\n\n\n\n\n\n\n\n\nNote\n\n\nThe preferred method is to pass in an instance of an extension. Strings\nshould only be used when it is impossible to import the Extension Class\ndirectly (from the command line or in a template).\n\n\n\n\nWhen passing in extension instances, each class instance must be a subclass\nof \nmarkdown.extensions.Extension\n and any configuration options should be\ndefined when initiating the class instance rather than using the\n\nextension_configs\n keyword. For example:\n\n\nfrom\n \nmarkdown.extensions\n \nimport\n \nExtension\n\n\nclass\n \nMyExtension\n(\nExtension\n):\n\n    \n# define your extension here...\n\n\n\nmarkdown\n.\nmarkdown\n(\ntext\n,\n \nextensions\n=\n[\nMyExtension\n(\noption\n=\nvalue\n)])\n\n\n\n\n\n\nIf an extension name is provided as a string, the extension must be\nimportable as a python module on your PYTHONPATH. Python\ns dot notation is\nsupported. Therefore, to import the \nextra\n extension, one could do\n\nextensions=['markdown.extensions.extra']\n\n\nAdditionally, a Class may be specified in the name. The class must be at the\nend of the name and be separated by a colon from the module.\n\n\nTherefore, if you were to import the class like this:\n\n\nfrom\n \npath.to.module\n \nimport\n \nSomeExtensionClass\n\n\n\n\n\n\nThen the named extension would comprise this string:\n\n\npath.to.module:SomeExtensionClass\n\n\n\n\n\n\n\n\nNote\n\n\nYou should only need to specify the class name if more than one extension\nis defined  within the same module. The extensions that come with\nPython-Markdown do \nnot\n need to have the class name specified. However,\ndoing so will not effect the behavior of the parser.\n\n\n\n\nWhen loading an extension by name (as a string), you may pass in\nconfiguration settings to the extension using the\n\nextension_configs\n keyword.\n\n\n\n\nSee Also\n\n\nSee the documentation of the \nExtension API\n for\nassistance in creating extensions.\n\n\n\n\n\n\nextension_configs\n\n\n\n\nA dictionary of configuration settings for extensions.\n\n\nAny configuration settings will only be passed to extensions loaded by name\n(as a string). When loading extensions as class instances, pass the\nconfiguration settings directly to the class when initializing it.\n\n\n\n\nNote\n\n\nThe preferred method is to pass in an instance of an extension, which\ndoes not require use of the \nextension_configs\n keyword at all.\nSee the \nextensions\n keyword for details.\n\n\n\n\nThe dictionary of configuration settings must be in the following format:\n\n\nextension_configs\n \n=\n \n{\n\n    \nextension_name_1\n:\n \n{\n\n        \noption_1\n:\n \nvalue_1\n,\n\n        \noption_2\n:\n \nvalue_2\n\n    \n},\n\n    \nextension_name_2\n:\n \n{\n\n        \noption_1\n:\n \nvalue_1\n\n    \n}\n\n\n}\n\n\n\n\n\n\nSee the documentation specific to the extension you are using for help in\nspecifying configuration settings for that extension.\n\n\n\n\noutput_format\n:\n\n\n\n\nFormat of output.\n\n\nSupported formats are:\n\n\n\n\n\"xhtml1\"\n: Outputs XHTML 1.x. \nDefault\n.\n\n\n\"xhtml5\"\n: Outputs XHTML style tags of HTML 5\n\n\n\"xhtml\"\n: Outputs latest supported version of XHTML (currently XHTML 1.1).\n\n\n\"html4\"\n: Outputs HTML 4\n\n\n\"html5\"\n: Outputs HTML style tags of HTML 5\n\n\n\"html\"\n: Outputs latest supported version of HTML (currently HTML 4).\n\n\n\n\nThe values can be in either lowercase or uppercase.\n\n\n\n\nWarning\n\n\nIt is suggested that the more specific formats (\n\"xhtml1\"\n, \n\"html5\"\n, \n\n\n\"html4\"\n) be used as the more general formats (\n\"xhtml\"\n or \n\"html\"\n) may\nchange in the future if it makes sense at that time.\n\n\n\n\n\n\nsafe_mode\n:\n\n\n\n\nDisallow raw HTML.\n\n\n\n\nWarning\n\n\nsafe_mode\n is deprecated and should not be used.\n\n\nHTML sanitizers (like \nBleach\n) provide a better solution for\ndealing with markdown text submitted by untrusted users.\n\n\nimport\n \nmarkdown\n\n\nimport\n \nbleach\n\n\nhtml\n \n=\n \nbleach\n.\nclean\n(\nmarkdown\n.\nmarkdown\n(\nuntrusted_text\n))\n\n\n\n\n\n\nSee the \nrelease notes\n for more info.\n\n\n\n\nThe following values are accepted:\n\n\n\n\nFalse\n (Default):\n\n\n\n\nRaw HTML is passed through unaltered.\n\n\n\n\nreplace\n:\n\n\n\n\nReplace all HTML blocks with the text assigned to\n  \nhtml_replacement_text\n. To maintain backward compatibility, setting\n  \nsafe_mode=True\n will have the same effect as \nsafe_mode='replace'\n.\n\n\nTo replace raw HTML with something other than the default, do:\n\n\nmd\n \n=\n \nmarkdown\n.\nMarkdown\n(\n\n    \nsafe_mode\n=\nreplace\n,\n\n    \nhtml_replacement_text\n=\n--RAW HTML NOT ALLOWED--\n\n\n)\n\n\n\n\n\n\n\n\nremove\n:\n\n\n\n\nAll raw HTML will be completely stripped from the text with\n  no warning to the author.\n\n\n\n\nescape\n:\n\n\n\n\nAll raw HTML will be escaped and included in the document.\n\n\nFor example, the following source:\n\n\nFoo \nb\nbar\n/b\n.\n\n\n\n\n\nWill result in the following HTML:\n\n\np\nFoo \nlt;\nb\ngt;\nbar\nlt;\n/b\ngt;\n.\n/\np\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nsafe_mode\n also alters the default value for the\n\nenable_attributes\n option.\n\n\n\n\n\n\nhtml_replacement_text\n:\n\n\n\n\nText used when safe_mode is set to \nreplace\n. Defaults to \n[HTML_REMOVED]\n.\n\n\n\n\nWarning\n\n\nhtml_replacement_text\n is deprecated and should not be used.\nSee the \nrelease notes\n for more info.\n\n\n\n\n\n\ntab_length\n:\n\n\n\n\nLength of tabs in the source. Default: 4\n\n\n\n\nenable_attributes\n:\n\n\n\n\nEnable the conversion of attributes. Defaults to \nTrue\n, unless\n  \nsafe_mode\n is enabled, in which case the default is \nFalse\n.\n\n\n\n\nNote\n\n\nsafe_mode\n only overrides the default. If \nenable_attributes\n\nis explicitly set, the explicit value is used regardless of \nsafe_mode\n.\nHowever, this could potentially allow an untrusted user to inject\nJavaScript into your documents.\n\n\n\n\n\n\nsmart_emphasis\n:\n\n\n\n\nTreat \n_connected_words_\n intelligently Default: True\n\n\n\n\nlazy_ol\n:\n\n\n\n\nIgnore number of first item of ordered lists. Default: True\n\n\nGiven the following list:\n\n\n4.\n Apples\n\n5.\n Oranges\n\n6.\n Pears\n\n\n\n\n\nBy default markdown will ignore the fact the the first line started\nwith item number \n4\n and the HTML list will start with a number \n1\n.\nIf \nlazy_ol\n is set to \nFalse\n, then markdown will output the following\nHTML:\n\n\nol\n \nstart\n=\n4\n\n  \nli\nApples\n/\nli\n\n  \nli\nOranges\n/\nli\n\n  \nli\nPears\n/\nli\n\n\n/\nol\n\n\n\n\n\n\n\n\n\n\nmarkdown.markdownFromFile (**kwargs)\n\n\nWith a few exceptions, \nmarkdown.markdownFromFile\n accepts the same options as\n\nmarkdown.markdown\n. It does \nnot\n accept a \ntext\n (or Unicode) string.\nInstead, it accepts the following required options:\n\n\n\n\ninput\n (required)\n\n\n\n\nThe source text file.\n\n\ninput\n may be set to one of three options:\n\n\n\n\na string which contains a path to a readable file on the file system,\n\n\na readable file-like object,\n\n\nor \nNone\n (default) which will read from \nstdin\n.\n\n\n\n\n\n\noutput\n\n\n\n\nThe target which output is written to.\n\n\noutput\n may be set to one of three options:\n\n\n\n\na string which contains a path to a writable file on the file system,\n\n\na writable file-like object,\n\n\nor \nNone\n (default) which will write to \nstdout\n.\n\n\n\n\n\n\nencoding\n\n\n\n\nThe encoding of the source text file.\n\n\nDefaults to \n\"utf-8\"\n. The same encoding will always be used for input and output.\nThe \nxmlcharrefreplace\n error handler is used when encoding the output.\n\n\n\n\nNote\n\n\nThis is the only place that decoding and encoding of Unicode\ntakes place in Python-Markdown. If this rather naive solution does not\nmeet your specific needs, it is suggested that you write your own code\nto handle your encoding/decoding needs.\n\n\n\n\n\n\n\n\nmarkdown.Markdown([**kwargs])\n\n\nThe same options are available when initializing the \nmarkdown.Markdown\n class\nas on the \nmarkdown.markdown\n function, except that the class does\n\nnot\n accept a source text string on initialization. Rather, the source text\nstring must be passed to one of two instance methods:\n\n\nMarkdown.convert(source)\n\n\nThe \nsource\n text must meet the same requirements as the \ntext\n\nargument of the \nmarkdown.markdown\n function.\n\n\nYou should also use this method if you want to process multiple strings\nwithout creating a new instance of the class for each string.\n\n\nmd\n \n=\n \nmarkdown\n.\nMarkdown\n()\n\n\nhtml1\n \n=\n \nmd\n.\nconvert\n(\ntext1\n)\n\n\nhtml2\n \n=\n \nmd\n.\nconvert\n(\ntext2\n)\n\n\n\n\n\n\nDepending on which options and/or extensions are being used, the parser may\nneed its state reset between each call to \nconvert\n, otherwise performance\ncan degrade drastically:\n\n\nhtml1\n \n=\n \nmd\n.\nconvert\n(\ntext1\n)\n\n\nmd\n.\nreset\n()\n\n\nhtml2\n \n=\n \nmd\n.\nconvert\n(\ntext2\n)\n\n\n\n\n\n\nTo make this easier, you can also chain calls to \nreset\n together:\n\n\nhtml3\n \n=\n \nmd\n.\nreset\n()\n.\nconvert\n(\ntext3\n)\n\n\n\n\n\n\nMarkdown.convertFile(**kwargs)\n\n\nThe arguments of this method are identical to the arguments of the same\nname on the \nmarkdown.markdownFromFile\n function (\ninput\n,\n\noutput\n, and \nencoding\n). As with the\n\nconvert\n method, this method should be used to\nprocess multiple files without creating a new instance of the class for\neach document. State may need to be \nreset\n between each call to\n\nconvertFile\n as is the case with \nconvert\n.", 
            "title": "Library Reference"
        }, 
        {
            "location": "/reference/#using-markdown-as-a-python-library", 
            "text": "First and foremost, Python-Markdown is intended to be a python library module\nused by various projects to convert Markdown syntax into HTML.", 
            "title": "Using Markdown as a Python Library"
        }, 
        {
            "location": "/reference/#the-basics", 
            "text": "To use markdown as a module:  import   markdown  html   =   markdown . markdown ( your_text_string )", 
            "title": "The Basics"
        }, 
        {
            "location": "/reference/#the-details", 
            "text": "Python-Markdown provides two public functions ( markdown.markdown \nand  markdown.markdownFromFile ) both of which wrap the\npublic class  markdown.Markdown . If you re processing one\ndocument at a time, these functions will serve your needs. However, if you need\nto process multiple documents, it may be advantageous to create a single\ninstance of the  markdown.Markdown  class and pass multiple documents through\nit. If you do use a single instance though, make sure to call the  reset \nmethod appropriately ( see below ).", 
            "title": "The Details"
        }, 
        {
            "location": "/reference/#markdown", 
            "text": "The following options are available on the  markdown.markdown  function:   text   The source Unicode string. (required)   Important  Python-Markdown expects  Unicode  as input (although\nsome simple ASCII strings  may  work) and returns output as Unicode.\nDo not pass encoded strings to it! If your input is encoded, (e.g. as\nUTF-8), it is your responsibility to decode it.  For example:  input_file   =   codecs . open ( some_file.txt ,   mode = r ,   encoding = utf-8 )  text   =   input_file . read ()  html   =   markdown . markdown ( text )   If you want to write the output to disk, you  must  encode it yourself:  output_file   =   codecs . open ( some_file.html ,   w , \n                           encoding = utf-8 , \n                           errors = xmlcharrefreplace  )  output_file . write ( html )     extensions   A list of extensions.  Python-Markdown provides an  API  for third parties to\nwrite extensions to the parser adding their own additions or changes to the\nsyntax. A few commonly used extensions are shipped with the markdown\nlibrary. See the  extension documentation  for a\nlist of available extensions.  The list of extensions may contain instances of extensions and/or strings\nof extension names.  extensions = [ MyExtension (),   path.to.my.ext ]    Note  The preferred method is to pass in an instance of an extension. Strings\nshould only be used when it is impossible to import the Extension Class\ndirectly (from the command line or in a template).   When passing in extension instances, each class instance must be a subclass\nof  markdown.extensions.Extension  and any configuration options should be\ndefined when initiating the class instance rather than using the extension_configs  keyword. For example:  from   markdown.extensions   import   Extension  class   MyExtension ( Extension ): \n     # define your extension here...  markdown . markdown ( text ,   extensions = [ MyExtension ( option = value )])   If an extension name is provided as a string, the extension must be\nimportable as a python module on your PYTHONPATH. Python s dot notation is\nsupported. Therefore, to import the  extra  extension, one could do extensions=['markdown.extensions.extra']  Additionally, a Class may be specified in the name. The class must be at the\nend of the name and be separated by a colon from the module.  Therefore, if you were to import the class like this:  from   path.to.module   import   SomeExtensionClass   Then the named extension would comprise this string:  path.to.module:SomeExtensionClass    Note  You should only need to specify the class name if more than one extension\nis defined  within the same module. The extensions that come with\nPython-Markdown do  not  need to have the class name specified. However,\ndoing so will not effect the behavior of the parser.   When loading an extension by name (as a string), you may pass in\nconfiguration settings to the extension using the extension_configs  keyword.   See Also  See the documentation of the  Extension API  for\nassistance in creating extensions.    extension_configs   A dictionary of configuration settings for extensions.  Any configuration settings will only be passed to extensions loaded by name\n(as a string). When loading extensions as class instances, pass the\nconfiguration settings directly to the class when initializing it.   Note  The preferred method is to pass in an instance of an extension, which\ndoes not require use of the  extension_configs  keyword at all.\nSee the  extensions  keyword for details.   The dictionary of configuration settings must be in the following format:  extension_configs   =   { \n     extension_name_1 :   { \n         option_1 :   value_1 , \n         option_2 :   value_2 \n     }, \n     extension_name_2 :   { \n         option_1 :   value_1 \n     }  }   See the documentation specific to the extension you are using for help in\nspecifying configuration settings for that extension.   output_format :   Format of output.  Supported formats are:   \"xhtml1\" : Outputs XHTML 1.x.  Default .  \"xhtml5\" : Outputs XHTML style tags of HTML 5  \"xhtml\" : Outputs latest supported version of XHTML (currently XHTML 1.1).  \"html4\" : Outputs HTML 4  \"html5\" : Outputs HTML style tags of HTML 5  \"html\" : Outputs latest supported version of HTML (currently HTML 4).   The values can be in either lowercase or uppercase.   Warning  It is suggested that the more specific formats ( \"xhtml1\" ,  \"html5\" ,   \"html4\" ) be used as the more general formats ( \"xhtml\"  or  \"html\" ) may\nchange in the future if it makes sense at that time.    safe_mode :   Disallow raw HTML.   Warning  safe_mode  is deprecated and should not be used.  HTML sanitizers (like  Bleach ) provide a better solution for\ndealing with markdown text submitted by untrusted users.  import   markdown  import   bleach  html   =   bleach . clean ( markdown . markdown ( untrusted_text ))   See the  release notes  for more info.   The following values are accepted:   False  (Default):   Raw HTML is passed through unaltered.   replace :   Replace all HTML blocks with the text assigned to\n   html_replacement_text . To maintain backward compatibility, setting\n   safe_mode=True  will have the same effect as  safe_mode='replace' .  To replace raw HTML with something other than the default, do:  md   =   markdown . Markdown ( \n     safe_mode = replace , \n     html_replacement_text = --RAW HTML NOT ALLOWED--  )    remove :   All raw HTML will be completely stripped from the text with\n  no warning to the author.   escape :   All raw HTML will be escaped and included in the document.  For example, the following source:  Foo  b bar /b .  Will result in the following HTML:  p Foo  lt; b gt; bar lt; /b gt; . / p      Note  safe_mode  also alters the default value for the enable_attributes  option.    html_replacement_text :   Text used when safe_mode is set to  replace . Defaults to  [HTML_REMOVED] .   Warning  html_replacement_text  is deprecated and should not be used.\nSee the  release notes  for more info.    tab_length :   Length of tabs in the source. Default: 4   enable_attributes :   Enable the conversion of attributes. Defaults to  True , unless\n   safe_mode  is enabled, in which case the default is  False .   Note  safe_mode  only overrides the default. If  enable_attributes \nis explicitly set, the explicit value is used regardless of  safe_mode .\nHowever, this could potentially allow an untrusted user to inject\nJavaScript into your documents.    smart_emphasis :   Treat  _connected_words_  intelligently Default: True   lazy_ol :   Ignore number of first item of ordered lists. Default: True  Given the following list:  4.  Apples 5.  Oranges 6.  Pears  By default markdown will ignore the fact the the first line started\nwith item number  4  and the HTML list will start with a number  1 .\nIf  lazy_ol  is set to  False , then markdown will output the following\nHTML:  ol   start = 4 \n   li Apples / li \n   li Oranges / li \n   li Pears / li  / ol", 
            "title": "markdown.markdown(text [, **kwargs])"
        }, 
        {
            "location": "/reference/#markdownFromFile", 
            "text": "With a few exceptions,  markdown.markdownFromFile  accepts the same options as markdown.markdown . It does  not  accept a  text  (or Unicode) string.\nInstead, it accepts the following required options:   input  (required)   The source text file.  input  may be set to one of three options:   a string which contains a path to a readable file on the file system,  a readable file-like object,  or  None  (default) which will read from  stdin .    output   The target which output is written to.  output  may be set to one of three options:   a string which contains a path to a writable file on the file system,  a writable file-like object,  or  None  (default) which will write to  stdout .    encoding   The encoding of the source text file.  Defaults to  \"utf-8\" . The same encoding will always be used for input and output.\nThe  xmlcharrefreplace  error handler is used when encoding the output.   Note  This is the only place that decoding and encoding of Unicode\ntakes place in Python-Markdown. If this rather naive solution does not\nmeet your specific needs, it is suggested that you write your own code\nto handle your encoding/decoding needs.", 
            "title": "markdown.markdownFromFile (**kwargs)"
        }, 
        {
            "location": "/reference/#Markdown", 
            "text": "The same options are available when initializing the  markdown.Markdown  class\nas on the  markdown.markdown  function, except that the class does not  accept a source text string on initialization. Rather, the source text\nstring must be passed to one of two instance methods:", 
            "title": "markdown.Markdown([**kwargs])"
        }, 
        {
            "location": "/reference/#convert", 
            "text": "The  source  text must meet the same requirements as the  text \nargument of the  markdown.markdown  function.  You should also use this method if you want to process multiple strings\nwithout creating a new instance of the class for each string.  md   =   markdown . Markdown ()  html1   =   md . convert ( text1 )  html2   =   md . convert ( text2 )   Depending on which options and/or extensions are being used, the parser may\nneed its state reset between each call to  convert , otherwise performance\ncan degrade drastically:  html1   =   md . convert ( text1 )  md . reset ()  html2   =   md . convert ( text2 )   To make this easier, you can also chain calls to  reset  together:  html3   =   md . reset () . convert ( text3 )", 
            "title": "Markdown.convert(source)"
        }, 
        {
            "location": "/reference/#convertFile", 
            "text": "The arguments of this method are identical to the arguments of the same\nname on the  markdown.markdownFromFile  function ( input , output , and  encoding ). As with the convert  method, this method should be used to\nprocess multiple files without creating a new instance of the class for\neach document. State may need to be  reset  between each call to convertFile  as is the case with  convert .", 
            "title": "Markdown.convertFile(**kwargs)"
        }, 
        {
            "location": "/cli/", 
            "text": "Using Python-Markdown on the Command Line\n\n\nWhile Python-Markdown is primarily a python library, a command line script is\nincluded as well. While there are many other command line implementations\nof Markdown, you may not have them installed, or you may prefer to use\nPython-Markdown\ns various extensions.\n\n\nGenerally, you will want to have the Markdown library fully installed on your\nsystem to run the command line script. See the\n\nInstallation instructions\n for details.\n\n\nPython-Markdown\ns command line script takes advantage of Python\ns \n-m\n flag.\nTherefore, assuming the python executable is on your system path, use the\nfollowing format:\n\n\npython -m markdown \n[\noptions\n]\n \n[\nargs\n]\n\n\n\n\n\n\nThat will run the module as a script with the options and arguments provided.\n\n\nAt its most basic usage, one would simply pass in a file name as the only argument:\n\n\npython -m markdown input_file.txt\n\n\n\n\n\nPiping input and output (on \nSTDIN\n and \nSTDOUT\n) is fully supported as well.\nFor example:\n\n\necho\n \nSome **Markdown** text.\n \n|\n python -m markdown \n output.html\n\n\n\n\n\nUse the \n--help\n option for a list all available options and arguments:\n\n\npython -m markdown --help\n\n\n\n\n\nIf you don\nt want to call the python executable directly (using the \n-m\n flag),\nfollow the instructions below to use a wrapper script:\n\n\nSetup\n\n\nUpon installation, the \nmarkdown_py\n script will have been copied to\nyour Python \nScripts\n directory. Different systems require different methods to\nensure that any files in the Python \nScripts\n directory are on your system\npath.\n\n\n\n\n\n\nWindows\n:\n\n\nAssuming a default install of Python on Windows, your \nScripts\n directory\nis most likely something like \nC:\\\\Python26\\Scripts\n. Verify the location\nof your \nScripts\n directory and add it to you system path.\n\n\nCalling \nmarkdown_py\n from the command line will call the wrapper batch\nfile \nmarkdown_py.bat\n in the \n\"Scripts\"\n directory created during install.\n\n\n\n\n\n\n*nix\n (Linux, OSX, BSD, Unix, etc.):\n\n\nAs each *nix distribution is different and we can\nt possibly document all\nof them here, we\nll provide a few helpful pointers:\n\n\n\n\n\n\nSome systems will automatically install the script on your path. Try it\n  and see if it works. Just run \nmarkdown_py\n from the command line.\n\n\n\n\n\n\nOther systems may maintain a separate \nScripts\n (\nbin\n) directory which\n  you need to add to your path. Find it (check with your distribution) and\n  either add it to your path or make a symbolic link to it from your path.\n\n\n\n\n\n\nIf you are sure \nmarkdown_py\n is on your path, but it still is not being\n  found, check the permissions of the file and make sure it is executable.\n\n\n\n\n\n\nAs an alternative, you could just \ncd\n into the directory which contains\nthe source distribution, and run it from there. However, remember that your\nmarkdown text files will not likely be in that directory, so it is much\nmore convenient to have \nmarkdown_py\n on your path.\n\n\n\n\n\n\n\n\nNote\n\n\nPython-Markdown uses \n\"markdown_py\"\n as a script name because the Perl\nimplementation has already taken the more obvious name \nmarkdown\n.\nAdditionally, the default Python configuration on some systems would cause a\nscript named \n\"markdown.py\"\n to fail by importing itself rather than the\nmarkdown library. Therefore, the script has been named \n\"markdown_py\"\n as a\ncompromise. If you prefer a different name for the script on your system, it\nis suggested that you create a symbolic link to \nmarkdown_py\n with your\npreferred name.\n\n\n\n\nUsage\n\n\nTo use \nmarkdown_py\n from the command line, run it as\n\n\nmarkdown_py input_file.txt\n\n\n\n\n\nor\n\n\nmarkdown_py input_file.txt \n output_file.html\n\n\n\n\n\nFor a complete list of options, run\n\n\nmarkdown_py --help\n\n\n\n\n\nUsing Extensions\n\n\nTo load a Python-Markdown extension from the command line use the \n-x\n\n(or \n--extension\n) option. The extension module must be on your \nPYTHONPATH\n\n(see the \nExtension API\n for details). The extension can\nthen be invoked by the name of that module using Python\ns dot syntax:\n\n\npython -m markdown -x path.to.module input.txt\n\n\n\n\n\nTo load multiple extensions, specify an \n-x\n option for each extension:\n\n\npython -m markdown -x markdown.extensions.footnotes -x markdown.extensions.codehilite input.txt\n\n\n\n\n\nIf the extension supports configuration options (see the documentation for the\nextension you are using to determine what settings it supports, if any), you\ncan pass them in as well:\n\n\npython -m markdown -x markdown.extensions.footnotes -c config.yml input.txt\n\n\n\n\n\nThe \n-c\n (or \n--extension_configs\n) option accepts a file name. The file must be\nin either the \nYAML\n or \nJSON\n format and contain YAML or JSON data that would\nmap to a Python Dictionary in the format required by the\n\nextension_configs\n keyword of the \nmarkdown.Markdown\n class. Therefore,\nthe file \nconfig.yaml\n referenced in the above example might look like this:\n\n\nmarkdown.extensions.footnotes\n:\n\n    \nPLACE_MARKER\n:\n \n~~~~~~~~\n\n    \nUNIQUE_IDS\n:\n \nTrue\n\n\n\n\n\n\nNote that while the \n--extension_configs\n option does specify the\n\nmarkdown.extensions.footnotes\n extension, you still need to load the extension\nwith the \n-x\n option, or the configuration for that extension will be ignored.\n\n\nThe \n--extension_configs\n option will only support YAML configuration files if\n\nPyYAML\n is installed on your system. JSON should work with no additional\ndependencies. The format of your configuration file is automatically detected.\n\n\n\n\nWarning\n\n\nThe previously documented method of appending the extension configuration\noptions as a string to the extension name will be deprecated in\nPython-Markdown version 2.6. The \n--extension_configs\n option should be used\ninstead. See the \n2.5 release notes\n for more information.", 
            "title": "Command Line"
        }, 
        {
            "location": "/cli/#using-python-markdown-on-the-command-line", 
            "text": "While Python-Markdown is primarily a python library, a command line script is\nincluded as well. While there are many other command line implementations\nof Markdown, you may not have them installed, or you may prefer to use\nPython-Markdown s various extensions.  Generally, you will want to have the Markdown library fully installed on your\nsystem to run the command line script. See the Installation instructions  for details.  Python-Markdown s command line script takes advantage of Python s  -m  flag.\nTherefore, assuming the python executable is on your system path, use the\nfollowing format:  python -m markdown  [ options ]   [ args ]   That will run the module as a script with the options and arguments provided.  At its most basic usage, one would simply pass in a file name as the only argument:  python -m markdown input_file.txt  Piping input and output (on  STDIN  and  STDOUT ) is fully supported as well.\nFor example:  echo   Some **Markdown** text.   |  python -m markdown   output.html  Use the  --help  option for a list all available options and arguments:  python -m markdown --help  If you don t want to call the python executable directly (using the  -m  flag),\nfollow the instructions below to use a wrapper script:", 
            "title": "Using Python-Markdown on the Command Line"
        }, 
        {
            "location": "/cli/#setup", 
            "text": "Upon installation, the  markdown_py  script will have been copied to\nyour Python  Scripts  directory. Different systems require different methods to\nensure that any files in the Python  Scripts  directory are on your system\npath.    Windows :  Assuming a default install of Python on Windows, your  Scripts  directory\nis most likely something like  C:\\\\Python26\\Scripts . Verify the location\nof your  Scripts  directory and add it to you system path.  Calling  markdown_py  from the command line will call the wrapper batch\nfile  markdown_py.bat  in the  \"Scripts\"  directory created during install.    *nix  (Linux, OSX, BSD, Unix, etc.):  As each *nix distribution is different and we can t possibly document all\nof them here, we ll provide a few helpful pointers:    Some systems will automatically install the script on your path. Try it\n  and see if it works. Just run  markdown_py  from the command line.    Other systems may maintain a separate  Scripts  ( bin ) directory which\n  you need to add to your path. Find it (check with your distribution) and\n  either add it to your path or make a symbolic link to it from your path.    If you are sure  markdown_py  is on your path, but it still is not being\n  found, check the permissions of the file and make sure it is executable.    As an alternative, you could just  cd  into the directory which contains\nthe source distribution, and run it from there. However, remember that your\nmarkdown text files will not likely be in that directory, so it is much\nmore convenient to have  markdown_py  on your path.     Note  Python-Markdown uses  \"markdown_py\"  as a script name because the Perl\nimplementation has already taken the more obvious name  markdown .\nAdditionally, the default Python configuration on some systems would cause a\nscript named  \"markdown.py\"  to fail by importing itself rather than the\nmarkdown library. Therefore, the script has been named  \"markdown_py\"  as a\ncompromise. If you prefer a different name for the script on your system, it\nis suggested that you create a symbolic link to  markdown_py  with your\npreferred name.", 
            "title": "Setup"
        }, 
        {
            "location": "/cli/#usage", 
            "text": "To use  markdown_py  from the command line, run it as  markdown_py input_file.txt  or  markdown_py input_file.txt   output_file.html  For a complete list of options, run  markdown_py --help", 
            "title": "Usage"
        }, 
        {
            "location": "/cli/#using-extensions", 
            "text": "To load a Python-Markdown extension from the command line use the  -x \n(or  --extension ) option. The extension module must be on your  PYTHONPATH \n(see the  Extension API  for details). The extension can\nthen be invoked by the name of that module using Python s dot syntax:  python -m markdown -x path.to.module input.txt  To load multiple extensions, specify an  -x  option for each extension:  python -m markdown -x markdown.extensions.footnotes -x markdown.extensions.codehilite input.txt  If the extension supports configuration options (see the documentation for the\nextension you are using to determine what settings it supports, if any), you\ncan pass them in as well:  python -m markdown -x markdown.extensions.footnotes -c config.yml input.txt  The  -c  (or  --extension_configs ) option accepts a file name. The file must be\nin either the  YAML  or  JSON  format and contain YAML or JSON data that would\nmap to a Python Dictionary in the format required by the extension_configs  keyword of the  markdown.Markdown  class. Therefore,\nthe file  config.yaml  referenced in the above example might look like this:  markdown.extensions.footnotes : \n     PLACE_MARKER :   ~~~~~~~~ \n     UNIQUE_IDS :   True   Note that while the  --extension_configs  option does specify the markdown.extensions.footnotes  extension, you still need to load the extension\nwith the  -x  option, or the configuration for that extension will be ignored.  The  --extension_configs  option will only support YAML configuration files if PyYAML  is installed on your system. JSON should work with no additional\ndependencies. The format of your configuration file is automatically detected.   Warning  The previously documented method of appending the extension configuration\noptions as a string to the extension name will be deprecated in\nPython-Markdown version 2.6. The  --extension_configs  option should be used\ninstead. See the  2.5 release notes  for more information.", 
            "title": "Using Extensions"
        }, 
        {
            "location": "/extensions/", 
            "text": "Available Extensions\n\n\nPython Markdown offers a flexible extension mechanism, which makes it possible\nto change and/or extend the behavior of the parser without having to edit the\nactual source files.\n\n\nTo use an extension, pass it to markdown with the \nextensions\n keyword.\n\n\nmarkdown\n.\nmarkdown\n(\nsome_text\n,\n \nextensions\n=\n[\nMyExtension\n(),\n \npath.to.my.ext\n,\n \nmarkdown.extensions.footnotes\n])\n\n\n\n\n\n\nSee the \nLibrary Reference\n for more details.\n\n\nFrom the command line, specify an extension with the \n-x\n option.\n\n\npython -m markdown -x markdown.extensions.footnotes -x markdown.extensions.tables input.txt \n output.html\n\n\n\n\n\nSee the \nCommand Line docs\n or use the \n--help\n option for more details.\n\n\n\n\nSee Also\n\n\nIf you would like to write your own extensions, see the\n\nExtension API\n for details.\n\n\n\n\nOfficially Supported Extensions\n\n\nThe extensions listed below are included with (at least) the most recent release\nand are officially supported by Python-Markdown. Any documentation is\nmaintained here and all bug reports should be made to the project. If you\nhave a typical install of Python-Markdown, these extensions are already\navailable to you using the \nname\n listed in the second column below.\n\n\n\n\n\n\n\n\nExtension\n\n\nName\n\n\n\n\n\n\n\n\n\n\nExtra\n\n\nmarkdown.extensions.extra\n\n\n\n\n\n\n \n \nAbbreviations\n\n\nmarkdown.extensions.abbr\n\n\n\n\n\n\n \n \nAttribute Lists\n\n\nmarkdown.extensions.attr_list\n\n\n\n\n\n\n \n \nDefinition Lists\n\n\nmarkdown.extensions.def_list\n\n\n\n\n\n\n \n \nFenced Code Blocks\n\n\nmarkdown.extensions.fenced_code\n\n\n\n\n\n\n \n \nFootnotes\n\n\nmarkdown.extensions.footnotes\n\n\n\n\n\n\n \n \nTables\n\n\nmarkdown.extensions.tables\n\n\n\n\n\n\n \n \nSmart Strong\n\n\nmarkdown.extensions.smart_strong\n\n\n\n\n\n\nAdmonition\n\n\nmarkdown.extensions.admonition\n\n\n\n\n\n\nCodeHilite\n\n\nmarkdown.extensions.codehilite\n\n\n\n\n\n\nHeaderId\n\n\nmarkdown.extensions.headerid\n\n\n\n\n\n\nMeta-Data\n\n\nmarkdown.extensions.meta\n\n\n\n\n\n\nNew Line to Break\n\n\nmarkdown.extensions.nl2br\n\n\n\n\n\n\nSane Lists\n\n\nmarkdown.extensions.sane_lists\n\n\n\n\n\n\nSmartyPants\n\n\nmarkdown.extensions.smarty\n\n\n\n\n\n\nTable of Contents\n\n\nmarkdown.extensions.toc\n\n\n\n\n\n\nWikiLinks\n\n\nmarkdown.extensions.wikilinks\n\n\n\n\n\n\n\n\nThird Party Extensions\n\n\nVarious individuals and/or organizations have developed extensions which they\nhave made available to the public. A \nlist of third party extensions\n\nis maintained on the wiki for your convenience. The Python-Markdown team\noffers no official support for these extensions. Please see the developer of\neach extension for support.", 
            "title": "Extensions"
        }, 
        {
            "location": "/extensions/#available-extensions", 
            "text": "Python Markdown offers a flexible extension mechanism, which makes it possible\nto change and/or extend the behavior of the parser without having to edit the\nactual source files.  To use an extension, pass it to markdown with the  extensions  keyword.  markdown . markdown ( some_text ,   extensions = [ MyExtension (),   path.to.my.ext ,   markdown.extensions.footnotes ])   See the  Library Reference  for more details.  From the command line, specify an extension with the  -x  option.  python -m markdown -x markdown.extensions.footnotes -x markdown.extensions.tables input.txt   output.html  See the  Command Line docs  or use the  --help  option for more details.   See Also  If you would like to write your own extensions, see the Extension API  for details.", 
            "title": "Available Extensions"
        }, 
        {
            "location": "/extensions/#officially-supported-extensions", 
            "text": "The extensions listed below are included with (at least) the most recent release\nand are officially supported by Python-Markdown. Any documentation is\nmaintained here and all bug reports should be made to the project. If you\nhave a typical install of Python-Markdown, these extensions are already\navailable to you using the  name  listed in the second column below.     Extension  Name      Extra  markdown.extensions.extra        Abbreviations  markdown.extensions.abbr        Attribute Lists  markdown.extensions.attr_list        Definition Lists  markdown.extensions.def_list        Fenced Code Blocks  markdown.extensions.fenced_code        Footnotes  markdown.extensions.footnotes        Tables  markdown.extensions.tables        Smart Strong  markdown.extensions.smart_strong    Admonition  markdown.extensions.admonition    CodeHilite  markdown.extensions.codehilite    HeaderId  markdown.extensions.headerid    Meta-Data  markdown.extensions.meta    New Line to Break  markdown.extensions.nl2br    Sane Lists  markdown.extensions.sane_lists    SmartyPants  markdown.extensions.smarty    Table of Contents  markdown.extensions.toc    WikiLinks  markdown.extensions.wikilinks", 
            "title": "Officially Supported Extensions"
        }, 
        {
            "location": "/extensions/#third-party-extensions", 
            "text": "Various individuals and/or organizations have developed extensions which they\nhave made available to the public. A  list of third party extensions \nis maintained on the wiki for your convenience. The Python-Markdown team\noffers no official support for these extensions. Please see the developer of\neach extension for support.", 
            "title": "Third Party Extensions"
        }, 
        {
            "location": "/extensions/abbreviations/", 
            "text": "Abbreviations\n\n\nSummary\n\n\nThe Abbreviations extension adds the ability to define abbreviations.\nSpecifically, any defined abbreviation is wrapped in  an \nabbr\n tag.\n\n\nThe Abbreviations extension is included in the standard Markdown library.\n\n\nSyntax\n\n\nAbbreviations are defined using the syntax established in\n\nPHP Markdown Extra\n.\n\n\nThus, the following text (taken from the above referenced PHP documentation):\n\n\nThe HTML specification\nis maintained by the W3C.\n\n\n*[HTML]: Hyper Text Markup Language\n\n\n*\n[W3C]:  World Wide Web Consortium\n\n\n\n\n\nwill be rendered as:\n\n\np\nThe \nabbr\n \ntitle\n=\nHyper Text Markup Language\nHTML\n/\nabbr\n specification\nis maintained by the \nabbr\n \ntitle\n=\nWorld Wide Web Consortium\nW3C\n/\nabbr\n.\n/\np\n\n\n\n\n\n\nUsage\n\n\nSee \nExtensions\n for general extension usage, specify \nmarkdown.extensions.abbr\n\nas the name of the extension.\n\n\nThis extension does not accept any special configuration options.", 
            "title": "Abbreviations"
        }, 
        {
            "location": "/extensions/abbreviations/#abbreviations", 
            "text": "", 
            "title": "Abbreviations"
        }, 
        {
            "location": "/extensions/abbreviations/#summary", 
            "text": "The Abbreviations extension adds the ability to define abbreviations.\nSpecifically, any defined abbreviation is wrapped in  an  abbr  tag.  The Abbreviations extension is included in the standard Markdown library.", 
            "title": "Summary"
        }, 
        {
            "location": "/extensions/abbreviations/#syntax", 
            "text": "Abbreviations are defined using the syntax established in PHP Markdown Extra .  Thus, the following text (taken from the above referenced PHP documentation):  The HTML specification\nis maintained by the W3C. *[HTML]: Hyper Text Markup Language  * [W3C]:  World Wide Web Consortium  will be rendered as:  p The  abbr   title = Hyper Text Markup Language HTML / abbr  specification\nis maintained by the  abbr   title = World Wide Web Consortium W3C / abbr . / p", 
            "title": "Syntax"
        }, 
        {
            "location": "/extensions/abbreviations/#usage", 
            "text": "See  Extensions  for general extension usage, specify  markdown.extensions.abbr \nas the name of the extension.  This extension does not accept any special configuration options.", 
            "title": "Usage"
        }, 
        {
            "location": "/extensions/admonition/", 
            "text": "Admonition\n\n\nSummary\n\n\nThe Admonition extension adds \nrST-style\n admonitions to Markdown documents.\n\n\nThis extension is included in the standard Markdown library.\n\n\nSyntax\n\n\nAdmonitions are created using the following syntax:\n\n\n!!! type \noptional explicit title within double quotes\n\n    Any number of other indented markdown elements.\n\n    This is the second paragraph.\n\n\n\n\n\ntype\n will be used as the CSS class name and as default title. It must be a\nsingle word. So, for instance:\n\n\n!!! note\n    You should note that the title will be automatically capitalized.\n\n\n\n\n\nwill render:\n\n\ndiv\n \nclass\n=\nadmonition note\n\n\np\n \nclass\n=\nadmonition-title\nNote\n/\np\n\n\np\nYou should note that the title will be automatically capitalized.\n/\np\n\n\n/\ndiv\n\n\n\n\n\n\nOptionally, you can use custom titles. For instance:\n\n\n!!! danger \nDon\nt try this at home\n\n    ...\n\n\n\n\n\nwill render:\n\n\ndiv\n \nclass\n=\nadmonition danger\n\n\np\n \nclass\n=\nadmonition-title\nDon\nt try this at home\n/\np\n\n\np\n...\n/\np\n\n\n/\ndiv\n\n\n\n\n\n\nIf you don\nt want a title, use a blank string \n\"\"\n:\n\n\n!!! important \n\n    This is a admonition box without a title.\n\n\n\n\n\nresults in:\n\n\ndiv\n \nclass\n=\nadmonition important\n\n\np\nThis is a admonition box without a title.\n/\np\n\n\n/\ndiv\n\n\n\n\n\n\nrST suggests the following \ntypes\n, but you\nre free to use whatever you want:\n    attention, caution, danger, error, hint, important, note, tip, warning.\n\n\nStyling\n\n\nThere is no CSS included as part of this extension. Look up the default\n\nSphinx\n theme if you need inspiration.", 
            "title": "Admonition"
        }, 
        {
            "location": "/extensions/admonition/#admonition", 
            "text": "", 
            "title": "Admonition"
        }, 
        {
            "location": "/extensions/admonition/#summary", 
            "text": "The Admonition extension adds  rST-style  admonitions to Markdown documents.  This extension is included in the standard Markdown library.", 
            "title": "Summary"
        }, 
        {
            "location": "/extensions/admonition/#syntax", 
            "text": "Admonitions are created using the following syntax:  !!! type  optional explicit title within double quotes \n    Any number of other indented markdown elements.\n\n    This is the second paragraph.  type  will be used as the CSS class name and as default title. It must be a\nsingle word. So, for instance:  !!! note\n    You should note that the title will be automatically capitalized.  will render:  div   class = admonition note  p   class = admonition-title Note / p  p You should note that the title will be automatically capitalized. / p  / div   Optionally, you can use custom titles. For instance:  !!! danger  Don t try this at home \n    ...  will render:  div   class = admonition danger  p   class = admonition-title Don t try this at home / p  p ... / p  / div   If you don t want a title, use a blank string  \"\" :  !!! important  \n    This is a admonition box without a title.  results in:  div   class = admonition important  p This is a admonition box without a title. / p  / div   rST suggests the following  types , but you re free to use whatever you want:\n    attention, caution, danger, error, hint, important, note, tip, warning.", 
            "title": "Syntax"
        }, 
        {
            "location": "/extensions/admonition/#styling", 
            "text": "There is no CSS included as part of this extension. Look up the default Sphinx  theme if you need inspiration.", 
            "title": "Styling"
        }, 
        {
            "location": "/extensions/attr_list/", 
            "text": "Attribute Lists\n\n\nSummary\n\n\nThe Attribute Lists extension adds a syntax to define attributes on the various\nHTML elements in markdown\ns output.\n\n\nThis extension is included in the standard Markdown library.\n\n\nSyntax\n\n\nThe basic syntax was inspired by \nMaruku\ns Attribute Lists feature.\n\n\nThe List\n\n\nAn example attribute list might look like this:\n\n\n{: #someid .someclass somekey=\nsome value\n }\n\n\n\n\n\nA word which starts with a hash (\n#\n) will set the id of an element.\n\n\nA word which starts with a dot (\n.\n) will be added to the list of classes\nassigned to an element.\n\n\nA key/value pair (\nsomekey='some value'\n) will assign that pair to the element.\n\n\nBe aware that while the dot syntax will add to a class, using key/value pairs\nwill always override the previously defined attribute. Consider the following:\n\n\n{: #id1 .class1 id=id2 class=\nclass2 class3\n .class4 }\n\n\n\n\n\nThe above example would result in the following attributes being defined:\n\n\nid=\nid2\n class=\nclass2 class3 class4\n\n\n\n\n\n\nBlock Level\n\n\nTo define attributes for a block level element, the attribute list should\nbe defined on the last line of the block by itself.\n\n\nThis is a paragraph.\n{: #an_id .a_class }\n\n\n\n\n\nThe above results in the following output:\n\n\np\n \nid\n=\nan_id\n \nclass\n=\na_class\nThis is a paragraph.\n/\np\n\n\n\n\n\n\nThe one exception is headers, as they are only ever allowed on one line.\n\n\nA setext style header {: #setext}\n=================================\n\n### A hash style header ### {: #hash }\n\n\n\n\n\nThe above results in the following output:\n\n\nh1\n \nid\n=\nsetext\nA setext style header\n/\nh1\n\n\nh3\n \nid\n=\nhash\nA hash style header\n/\nh3\n\n\n\n\n\n\nInline\n\n\nTo define attributes on inline elements, the attribute list should be defined\nimmediately after the inline element with no white space.\n\n\n[link](http://example.com){: class=\nfoo bar\n title=\nSome title!\n }\n\n\n\n\n\nThe above results in the following output:\n\n\np\na\n \nhref\n=\nhttp://example.com\n \nclass\n=\nfoo bar\n \ntitle\n=\nSome title!\nlink\n/\na\n/\np\n\n\n\n\n\n\nUsage\n\n\nSee \nExtensions\n for general extension usage, specify\n\nmarkdown.extensions.attr_list\n as the name of the extension.\n\n\nThis extension does not accept any special configuration options.", 
            "title": "Attribute Lists"
        }, 
        {
            "location": "/extensions/attr_list/#attribute-lists", 
            "text": "", 
            "title": "Attribute Lists"
        }, 
        {
            "location": "/extensions/attr_list/#summary", 
            "text": "The Attribute Lists extension adds a syntax to define attributes on the various\nHTML elements in markdown s output.  This extension is included in the standard Markdown library.", 
            "title": "Summary"
        }, 
        {
            "location": "/extensions/attr_list/#syntax", 
            "text": "The basic syntax was inspired by  Maruku s Attribute Lists feature.", 
            "title": "Syntax"
        }, 
        {
            "location": "/extensions/attr_list/#the-list", 
            "text": "An example attribute list might look like this:  {: #someid .someclass somekey= some value  }  A word which starts with a hash ( # ) will set the id of an element.  A word which starts with a dot ( . ) will be added to the list of classes\nassigned to an element.  A key/value pair ( somekey='some value' ) will assign that pair to the element.  Be aware that while the dot syntax will add to a class, using key/value pairs\nwill always override the previously defined attribute. Consider the following:  {: #id1 .class1 id=id2 class= class2 class3  .class4 }  The above example would result in the following attributes being defined:  id= id2  class= class2 class3 class4", 
            "title": "The List"
        }, 
        {
            "location": "/extensions/attr_list/#block-level", 
            "text": "To define attributes for a block level element, the attribute list should\nbe defined on the last line of the block by itself.  This is a paragraph.\n{: #an_id .a_class }  The above results in the following output:  p   id = an_id   class = a_class This is a paragraph. / p   The one exception is headers, as they are only ever allowed on one line.  A setext style header {: #setext}\n=================================\n\n### A hash style header ### {: #hash }  The above results in the following output:  h1   id = setext A setext style header / h1  h3   id = hash A hash style header / h3", 
            "title": "Block Level"
        }, 
        {
            "location": "/extensions/attr_list/#inline", 
            "text": "To define attributes on inline elements, the attribute list should be defined\nimmediately after the inline element with no white space.  [link](http://example.com){: class= foo bar  title= Some title!  }  The above results in the following output:  p a   href = http://example.com   class = foo bar   title = Some title! link / a / p", 
            "title": "Inline"
        }, 
        {
            "location": "/extensions/attr_list/#usage", 
            "text": "See  Extensions  for general extension usage, specify markdown.extensions.attr_list  as the name of the extension.  This extension does not accept any special configuration options.", 
            "title": "Usage"
        }, 
        {
            "location": "/extensions/code_hilite/", 
            "text": "CodeHilite\n\n\nSummary\n\n\nThe CodeHilite extension adds code/syntax highlighting to standard\nPython-Markdown code blocks using \nPygments\n.\n\n\nThis extension is included in the standard Markdown library.\n\n\nSetup\n\n\nStep 1: Download and Install Pygments\n\n\nYou will also need to \ndownload\n and install the Pygments package on your\n\nPYTHONPATH\n. The CodeHilite extension will produce HTML output without\nPygments, but it won\nt highlight anything (same behavior as setting\n\nuse_pygments\n to \nFalse\n).\n\n\nStep 2: Add CSS Classes\n\n\nYou will need to define the appropriate CSS classes with appropriate rules.\nThe CSS rules either need to be defined in or linked from the header of your\nHTML templates. Pygments can generate CSS rules for you. Just run the following\ncommand from the command line:\n\n\npygmentize -S default -f html -a .codehilite \n styles.css\n\n\n\n\n\nIf you are using a different \ncss_class\n (default: \n.codehilite\n), then\nset the value of the \n-a\n option to that class name. The CSS rules will be\nwritten to the \nstyles.css\n file which you can copy to your site and link from\nyour HTML templates.\n\n\nIf you would like to use a different theme, swap out \ndefault\n for the desired\ntheme. For a list of themes installed on your system (additional themes can be\ninstalled via Pygments plugins), run the following command:\n\n\npygmentize -L style\n\n\n\n\n\nSee Pygments\n excellent \ndocumentation\n for more details. If no language is\ndefined, Pygments will attempt to guess the language. When that fails, the code\nblock will not be highlighted.\n\n\n\n\nSee Also\n\n\nGitHub user \nricheland\n has provided a number of different \nCSS style\nsheets\n which work with Pygments along with a \npreview\n of each theme.\nThe \ncss_class\n used is the same as the default value for that option\n(\n.codehilite\n). However, the Python-Markdown project makes no guarantee that\nricheland\ns CSS styles will work with the version of Pygments you are using.\nTo ensure complete compatibility, you should generate the CSS rules from\nyour own installation of Pygments.\n\n\n\n\nSyntax\n\n\nThe CodeHilite extension follows the same \nsyntax\n as regular Markdown code\nblocks, with one exception. The highlighter needs to know what language to use for\nthe code block. There are three ways to tell the highlighter what language the\ncode block contains and each one has a different result.\n\n\n\n\nNote\n\n\nThe format of the language identifier only effects the display of line numbers\nif \nlinenums\n is set to \nNone\n (the default). If set to \nTrue\n or \nFalse\n\n(see \nUsage\n below) the format of the identifier has no effect on the\ndisplay of line numbers \n it only serves as a means to define the language\nof the code block.\n\n\n\n\nShebang (with path)\n\n\nIf the first line of the code block contains a shebang, the language is derived\nfrom that and line numbers are used.\n\n\n    #!/usr/bin/python\n    # Code goes here ...\n\n\n\n\n\nWill result in:\n\n\n1\n2\n#!/usr/bin/python\n\n\n# Code goes here ...\n\n\n\n\n\n\n\nShebang (no path)\n\n\nIf the first line contains a shebang, but the shebang line does not contain a\npath (a single \n/\n or even a space), then that line is removed from the code\nblock before processing. Line numbers are used.\n\n\n    #!python\n    # Code goes here ...\n\n\n\n\n\nWill result in:\n\n\n1\n# Code goes here ...\n\n\n\n\n\n\n\nColons\n\n\nIf the first line begins with three or more colons, the text following the\ncolons identifies the language. The first line is removed from the code block\nbefore processing and line numbers are not used.\n\n\n    :::python\n    # Code goes here ...\n\n\n\n\n\nWill result in:\n\n\n# Code goes here ...\n\n\n\n\n\n\nCertain lines can be selected for emphasis with the colon syntax. When\nusing Pygments\n default CSS styles, emphasized lines have a yellow background.\nThis is useful to direct the reader\ns attention to specific lines.\n\n\n# This line is emphasized\n\n\n# This line isn\nt\n\n\n# This line is emphasized\n\n\n\n\n\n\n\n\nNote\n\n\nhl_lines\n is named for Pygments\n option meaning \nhighlighted lines\n.\n\n\n\n\nWhen No Language is Defined\n\n\nCodeHilite is completely backwards compatible so that if a code block is\nencountered that does not define a language, the block is simply wrapped in\n\npre\n tags and output.\n\n\n    # Code goes here ...\n\n\n\n\n\nWill result in:\n\n\n# Code goes here ...\n\n\n\n\n\nLets see the source for that:\n\n\ndiv\n \nclass\n=\ncodehilite\npre\ncode\n# Code goes here ...\n\n/\ncode\n/\npre\n/\ndiv\n\n\n\n\n\n\n\n\nNote\n\n\nWhen no language is defined, the Pygments highlighting engine will try to guess\nthe language (unless \nguess_lang\n is set to \nFalse\n). Upon failure, the same\nbehavior will happen as described above.\n\n\n\n\nUsage\n\n\nSee \nExtensions\n for general extension usage, specify\n\nmarkdown.extensions.codehilite\n as the name of the extension.\n\n\nSee the \nLibrary Reference\n for information about\nconfiguring extensions.\n\n\nThe following options are provided to configure the output:\n\n\n\n\n\n\nlinenums\n:\n    Use line numbers. Possible values are \nTrue\n for yes, \nFalse\n for no and\n    \nNone\n for auto. Defaults to \nNone\n.\n\n\nUsing \nTrue\n will force every code block to have line numbers, even when\nusing colons (\n:::\n) for language identification.\n\n\nUsing \nFalse\n will turn off all line numbers, even when using shebangs\n(\n#!\n) for language identification.\n\n\n\n\n\n\nguess_lang\n:\n    Automatic language detection. Defaults to \nTrue\n.\n\n\nUsing \nFalse\n will prevent Pygments from guessing the language, and thus\nhighlighting blocks only when you explicitly set the language.\n\n\n\n\n\n\ncss_class\n:\n    Set CSS class name for the wrapper \ndiv\n tag. Defaults to\n    \ncodehilite\n.\n\n\n\n\n\n\npygments_style\n:\n    Pygments HTML Formatter Style (\nColorScheme\n). Defaults to \ndefault\n.\n\n\n\n\nNote\n\n\nThis is useful only when \nnoclasses\n is set to \nTrue\n, otherwise the\nCSS styles must be provided by the end user.\n\n\n\n\n\n\n\n\nnoclasses\n:\n    Use inline styles instead of CSS classes. Defaults to \nFalse\n.\n\n\n\n\n\n\nuse_pygments\n:\n    Defaults to \nTrue\n. Set to \nFalse\n to disable the use of Pygments.\n    If a language is defined for a code block, it will be assigned to the\n    \ncode\n tag as a class in the manner suggested by the \nHTML5 spec\n\n    (alternate output will not be entertained) and might be used by a JavaScript\n    library in the browser to highlight the code block.", 
            "title": "CodeHilite"
        }, 
        {
            "location": "/extensions/code_hilite/#codehilite", 
            "text": "", 
            "title": "CodeHilite"
        }, 
        {
            "location": "/extensions/code_hilite/#summary", 
            "text": "The CodeHilite extension adds code/syntax highlighting to standard\nPython-Markdown code blocks using  Pygments .  This extension is included in the standard Markdown library.", 
            "title": "Summary"
        }, 
        {
            "location": "/extensions/code_hilite/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/extensions/code_hilite/#step-1-download-and-install-pygments", 
            "text": "You will also need to  download  and install the Pygments package on your PYTHONPATH . The CodeHilite extension will produce HTML output without\nPygments, but it won t highlight anything (same behavior as setting use_pygments  to  False ).", 
            "title": "Step 1: Download and Install Pygments"
        }, 
        {
            "location": "/extensions/code_hilite/#step-2-add-css-classes", 
            "text": "You will need to define the appropriate CSS classes with appropriate rules.\nThe CSS rules either need to be defined in or linked from the header of your\nHTML templates. Pygments can generate CSS rules for you. Just run the following\ncommand from the command line:  pygmentize -S default -f html -a .codehilite   styles.css  If you are using a different  css_class  (default:  .codehilite ), then\nset the value of the  -a  option to that class name. The CSS rules will be\nwritten to the  styles.css  file which you can copy to your site and link from\nyour HTML templates.  If you would like to use a different theme, swap out  default  for the desired\ntheme. For a list of themes installed on your system (additional themes can be\ninstalled via Pygments plugins), run the following command:  pygmentize -L style  See Pygments  excellent  documentation  for more details. If no language is\ndefined, Pygments will attempt to guess the language. When that fails, the code\nblock will not be highlighted.   See Also  GitHub user  richeland  has provided a number of different  CSS style\nsheets  which work with Pygments along with a  preview  of each theme.\nThe  css_class  used is the same as the default value for that option\n( .codehilite ). However, the Python-Markdown project makes no guarantee that\nricheland s CSS styles will work with the version of Pygments you are using.\nTo ensure complete compatibility, you should generate the CSS rules from\nyour own installation of Pygments.", 
            "title": "Step 2: Add CSS Classes"
        }, 
        {
            "location": "/extensions/code_hilite/#syntax", 
            "text": "The CodeHilite extension follows the same  syntax  as regular Markdown code\nblocks, with one exception. The highlighter needs to know what language to use for\nthe code block. There are three ways to tell the highlighter what language the\ncode block contains and each one has a different result.   Note  The format of the language identifier only effects the display of line numbers\nif  linenums  is set to  None  (the default). If set to  True  or  False \n(see  Usage  below) the format of the identifier has no effect on the\ndisplay of line numbers   it only serves as a means to define the language\nof the code block.", 
            "title": "Syntax"
        }, 
        {
            "location": "/extensions/code_hilite/#shebang-with-path", 
            "text": "If the first line of the code block contains a shebang, the language is derived\nfrom that and line numbers are used.      #!/usr/bin/python\n    # Code goes here ...  Will result in:  1\n2 #!/usr/bin/python  # Code goes here ...", 
            "title": "Shebang (with path)"
        }, 
        {
            "location": "/extensions/code_hilite/#shebang-no-path", 
            "text": "If the first line contains a shebang, but the shebang line does not contain a\npath (a single  /  or even a space), then that line is removed from the code\nblock before processing. Line numbers are used.      #!python\n    # Code goes here ...  Will result in:  1 # Code goes here ...", 
            "title": "Shebang (no path)"
        }, 
        {
            "location": "/extensions/code_hilite/#colons", 
            "text": "If the first line begins with three or more colons, the text following the\ncolons identifies the language. The first line is removed from the code block\nbefore processing and line numbers are not used.      :::python\n    # Code goes here ...  Will result in:  # Code goes here ...   Certain lines can be selected for emphasis with the colon syntax. When\nusing Pygments  default CSS styles, emphasized lines have a yellow background.\nThis is useful to direct the reader s attention to specific lines.  # This line is emphasized  # This line isn t  # This line is emphasized    Note  hl_lines  is named for Pygments  option meaning  highlighted lines .", 
            "title": "Colons"
        }, 
        {
            "location": "/extensions/code_hilite/#when-no-language-is-defined", 
            "text": "CodeHilite is completely backwards compatible so that if a code block is\nencountered that does not define a language, the block is simply wrapped in pre  tags and output.      # Code goes here ...  Will result in:  # Code goes here ...  Lets see the source for that:  div   class = codehilite pre code # Code goes here ... / code / pre / div    Note  When no language is defined, the Pygments highlighting engine will try to guess\nthe language (unless  guess_lang  is set to  False ). Upon failure, the same\nbehavior will happen as described above.", 
            "title": "When No Language is Defined"
        }, 
        {
            "location": "/extensions/code_hilite/#usage", 
            "text": "See  Extensions  for general extension usage, specify markdown.extensions.codehilite  as the name of the extension.  See the  Library Reference  for information about\nconfiguring extensions.  The following options are provided to configure the output:    linenums :\n    Use line numbers. Possible values are  True  for yes,  False  for no and\n     None  for auto. Defaults to  None .  Using  True  will force every code block to have line numbers, even when\nusing colons ( ::: ) for language identification.  Using  False  will turn off all line numbers, even when using shebangs\n( #! ) for language identification.    guess_lang :\n    Automatic language detection. Defaults to  True .  Using  False  will prevent Pygments from guessing the language, and thus\nhighlighting blocks only when you explicitly set the language.    css_class :\n    Set CSS class name for the wrapper  div  tag. Defaults to\n     codehilite .    pygments_style :\n    Pygments HTML Formatter Style ( ColorScheme ). Defaults to  default .   Note  This is useful only when  noclasses  is set to  True , otherwise the\nCSS styles must be provided by the end user.     noclasses :\n    Use inline styles instead of CSS classes. Defaults to  False .    use_pygments :\n    Defaults to  True . Set to  False  to disable the use of Pygments.\n    If a language is defined for a code block, it will be assigned to the\n     code  tag as a class in the manner suggested by the  HTML5 spec \n    (alternate output will not be entertained) and might be used by a JavaScript\n    library in the browser to highlight the code block.", 
            "title": "Usage"
        }, 
        {
            "location": "/extensions/definition_lists/", 
            "text": "Definition Lists\n\n\nSummary\n\n\nThe Definition Lists extension adds the ability to create definition lists in\nMarkdown documents.\n\n\nThis extension is included in the standard Markdown library.\n\n\nSyntax\n\n\nDefinition lists are defined using the syntax established in\n\nPHP Markdown Extra\n.\n\n\nThus, the following text (taken from the above referenced PHP documentation):\n\n\nApple\n:   Pomaceous fruit of plants of the genus Malus in\n    the family Rosaceae.\n\nOrange\n:   The fruit of an evergreen tree of the genus Citrus.\n\n\n\n\n\nwill be rendered as:\n\n\ndl\n\n\ndt\nApple\n/\ndt\n\n\ndd\nPomaceous fruit of plants of the genus Malus in\nthe family Rosaceae.\n/\ndd\n\n\n\ndt\nOrange\n/\ndt\n\n\ndd\nThe fruit of an evergreen tree of the genus Citrus.\n/\ndd\n\n\n/\ndl\n\n\n\n\n\n\nUsage\n\n\nSee \nExtensions\n for general extension usage, specify\n\nmarkdown.extensions.def_list\n as the name of the extension.\n\n\nThis extension does not accept any special configuration options.", 
            "title": "Definition Lists"
        }, 
        {
            "location": "/extensions/definition_lists/#definition-lists", 
            "text": "", 
            "title": "Definition Lists"
        }, 
        {
            "location": "/extensions/definition_lists/#summary", 
            "text": "The Definition Lists extension adds the ability to create definition lists in\nMarkdown documents.  This extension is included in the standard Markdown library.", 
            "title": "Summary"
        }, 
        {
            "location": "/extensions/definition_lists/#syntax", 
            "text": "Definition lists are defined using the syntax established in PHP Markdown Extra .  Thus, the following text (taken from the above referenced PHP documentation):  Apple\n:   Pomaceous fruit of plants of the genus Malus in\n    the family Rosaceae.\n\nOrange\n:   The fruit of an evergreen tree of the genus Citrus.  will be rendered as:  dl  dt Apple / dt  dd Pomaceous fruit of plants of the genus Malus in\nthe family Rosaceae. / dd  dt Orange / dt  dd The fruit of an evergreen tree of the genus Citrus. / dd  / dl", 
            "title": "Syntax"
        }, 
        {
            "location": "/extensions/definition_lists/#usage", 
            "text": "See  Extensions  for general extension usage, specify markdown.extensions.def_list  as the name of the extension.  This extension does not accept any special configuration options.", 
            "title": "Usage"
        }, 
        {
            "location": "/extensions/extra/", 
            "text": "Python-Markdown Extra\n\n\nSummary\n\n\nA compilation of various Python-Markdown extensions that (mostly) imitates\n\nPHP Markdown Extra\n.\n\n\nThe supported extensions include:\n\n\n\n\nAbbreviations\n\n\nAttribute Lists\n\n\nDefinition Lists\n\n\nFenced Code Blocks\n\n\nFootnotes\n\n\nTables\n\n\nSmart Strong\n\n\n\n\nSee each individual extension for syntax documentation. Extra and all its\nsupported extensions are included in the standard Markdown library.\n\n\nUsage\n\n\nFrom the Python interpreter:\n\n\n \nimport\n \nmarkdown\n\n\n \nhtml\n \n=\n \nmarkdown\n.\nmarkdown\n(\ntext\n,\n \n[\nmarkdown.extensions.extra\n])\n\n\n\n\n\n\nThere may be \nadditional extensions\n that are distributed with\nPython-Markdown that are not included here in Extra. The features\nof those extensions are not part of PHP Markdown Extra, and\ntherefore, not part of Python-Markdown Extra. If you really would\nlike Extra to include additional extensions, we suggest creating\nyour own clone of Extra under a different name\n(see the \nExtension API\n).\n\n\nMarkdown Inside HTML Blocks\n\n\nUnlike the other Extra features, this feature is built into the markdown core and\nis turned on when \nmarkdown.extensions.extra\n is enabled.\n\n\nThe content of any raw HTML block element can be Markdown-formatted simply by\nadding a \nmarkdown\n attribute to the opening tag. The markdown attribute will be\nstripped from the output, but all other attributes will be preserved.\n\n\nIf the markdown value is set to \n1\n (recommended) or any value other than \nspan\n\nor \nblock\n, the default behavior will be executed: \np\n,\nh[1-6]\n,\nli\n,\ndd\n,\ndt\n,\n\ntd\n,\nth\n,\nlegend\n, and \naddress\n elements skip block parsing while others do not.\nIf the default is overridden by a value of \nspan\n, \nblock parsing will be skipped\n\nregardless of tag. If the default is overridden by a value of \nblock\n,\n\nblock parsing will occur\n regardless of tag.\n\n\nSimple Example:\n\n\nThis is \n*true*\n markdown text.\n\n\ndiv markdown=\n1\n\nThis is \n*true*\n markdown text.\n\n/div\n\n\n\n\n\n\nResult:\n\n\np\nThis is \nem\ntrue\n/\nem\n markdown text.\n/\np\n\n\ndiv\n\n\np\nThis is \nem\ntrue\n/\nem\n markdown text.\n/\np\n\n\n/\ndiv\n\n\n\n\n\n\nNested Markdown Inside HTML Blocks\n\n\nNested elements are more sensitive and must be used cautiously. To avoid\nunexpected results:\n\n\n\n\nOnly nest elements within block mode elements.\n\n\nFollow the closing tag of inner elements with a blank line.\n\n\nOnly have one level of nesting.\n\n\n\n\nComplex Example:\n\n\ndiv markdown=\n1\n name=\nExample\n\n\nThe text of the \n`Example`\n element.\n\n\ndiv markdown=\n1\n name=\nDefaultBlockMode\n\nThis text gets wrapped in \n`p`\n tags.\n\n/div\n\n\nThe tail of the \n`DefaultBlockMode`\n subelement.\n\n\np markdown=\n1\n name=\nDefaultSpanMode\n\nThis text \n*is not*\n wrapped in additional \n`p`\n tags.\n\n/p\n\n\nThe tail of the \n`DefaultSpanMode`\n subelement.\n\n\ndiv markdown=\nspan\n name=\nSpanModeOverride\n\nThis \n`div`\n block is not wrapped in paragraph tags.\nNote: Subelements are not required to have tail text.\n\n/div\n\n\n\np markdown=\nblock\n name=\nBlockModeOverride\n\nThis \n`p`\n block \n*is*\n foolishly wrapped in further paragraph tags.\n\n/p\n\n\nThe tail of the \n`BlockModeOverride`\n subelement.\n\n\ndiv name=\nRawHtml\n\nRaw HTML blocks may also be nested.\n\n/div\n\n\n\n/div\n\n\nThis text is after the markdown in HTML.\n\n\n\n\n\nComplex Result:\n\n\ndiv\n \nname\n=\nExample\n\n\np\nThe text of the \ncode\nExample\n/\ncode\n element.\n/\np\n\n\ndiv\n \nname\n=\nDefaultBlockMode\n\n\np\nThis text gets wrapped in \ncode\np\n/\ncode\n tags.\n/\np\n\n\n/\ndiv\n\n\np\nThe tail of the \ncode\nDefaultBlockMode\n/\ncode\n subelement.\n/\np\n\n\np\n \nname\n=\nDefaultSpanMode\n\nThis text \nem\nis not\n/\nem\n wrapped in additional \ncode\np\n/\ncode\n tags.\n/\np\n\n\np\nThe tail of the \ncode\nDefaultSpanMode\n/\ncode\n subelement.\n/\np\n\n\ndiv\n \nname\n=\nSpanModeOverride\n\nThis \ncode\ndiv\n/\ncode\n block is not wrapped in paragraph tags.\nNote: Subelements are not required to have tail text.\n/\ndiv\n\n\np\n \nname\n=\nBlockModeOverride\n\n\np\nThis \ncode\np\n/\ncode\n block \nem\nis\n/\nem\n foolishly wrapped in further paragraph tags.\n/\np\n\n\n/\np\n\n\np\nThe tail of the \ncode\nBlockModeOverride\n/\ncode\n subelement.\n/\np\n\n\ndiv\n \nname\n=\nRawHtml\n\nRaw HTML blocks may also be nested.\n\n/\ndiv\n\n\n\n/\ndiv\n\n\np\nThis text is after the markdown in HTML.\n/\np", 
            "title": "Extra"
        }, 
        {
            "location": "/extensions/extra/#python-markdown-extra", 
            "text": "", 
            "title": "Python-Markdown Extra"
        }, 
        {
            "location": "/extensions/extra/#summary", 
            "text": "A compilation of various Python-Markdown extensions that (mostly) imitates PHP Markdown Extra .  The supported extensions include:   Abbreviations  Attribute Lists  Definition Lists  Fenced Code Blocks  Footnotes  Tables  Smart Strong   See each individual extension for syntax documentation. Extra and all its\nsupported extensions are included in the standard Markdown library.", 
            "title": "Summary"
        }, 
        {
            "location": "/extensions/extra/#usage", 
            "text": "From the Python interpreter:    import   markdown    html   =   markdown . markdown ( text ,   [ markdown.extensions.extra ])   There may be  additional extensions  that are distributed with\nPython-Markdown that are not included here in Extra. The features\nof those extensions are not part of PHP Markdown Extra, and\ntherefore, not part of Python-Markdown Extra. If you really would\nlike Extra to include additional extensions, we suggest creating\nyour own clone of Extra under a different name\n(see the  Extension API ).", 
            "title": "Usage"
        }, 
        {
            "location": "/extensions/extra/#markdown-inside-html-blocks", 
            "text": "Unlike the other Extra features, this feature is built into the markdown core and\nis turned on when  markdown.extensions.extra  is enabled.  The content of any raw HTML block element can be Markdown-formatted simply by\nadding a  markdown  attribute to the opening tag. The markdown attribute will be\nstripped from the output, but all other attributes will be preserved.  If the markdown value is set to  1  (recommended) or any value other than  span \nor  block , the default behavior will be executed:  p , h[1-6] , li , dd , dt , td , th , legend , and  address  elements skip block parsing while others do not.\nIf the default is overridden by a value of  span ,  block parsing will be skipped \nregardless of tag. If the default is overridden by a value of  block , block parsing will occur  regardless of tag.", 
            "title": "Markdown Inside HTML Blocks"
        }, 
        {
            "location": "/extensions/extra/#simple-example", 
            "text": "This is  *true*  markdown text. div markdown= 1 \nThis is  *true*  markdown text. /div", 
            "title": "Simple Example:"
        }, 
        {
            "location": "/extensions/extra/#result", 
            "text": "p This is  em true / em  markdown text. / p  div  p This is  em true / em  markdown text. / p  / div", 
            "title": "Result:"
        }, 
        {
            "location": "/extensions/extra/#nested-markdown-inside-html-blocks", 
            "text": "Nested elements are more sensitive and must be used cautiously. To avoid\nunexpected results:   Only nest elements within block mode elements.  Follow the closing tag of inner elements with a blank line.  Only have one level of nesting.", 
            "title": "Nested Markdown Inside HTML Blocks"
        }, 
        {
            "location": "/extensions/extra/#complex-example", 
            "text": "div markdown= 1  name= Example \n\nThe text of the  `Example`  element. div markdown= 1  name= DefaultBlockMode \nThis text gets wrapped in  `p`  tags. /div \n\nThe tail of the  `DefaultBlockMode`  subelement. p markdown= 1  name= DefaultSpanMode \nThis text  *is not*  wrapped in additional  `p`  tags. /p \n\nThe tail of the  `DefaultSpanMode`  subelement. div markdown= span  name= SpanModeOverride \nThis  `div`  block is not wrapped in paragraph tags.\nNote: Subelements are not required to have tail text. /div  p markdown= block  name= BlockModeOverride \nThis  `p`  block  *is*  foolishly wrapped in further paragraph tags. /p \n\nThe tail of the  `BlockModeOverride`  subelement. div name= RawHtml \nRaw HTML blocks may also be nested. /div  /div \n\nThis text is after the markdown in HTML.", 
            "title": "Complex Example:"
        }, 
        {
            "location": "/extensions/extra/#complex-result", 
            "text": "div   name = Example  p The text of the  code Example / code  element. / p  div   name = DefaultBlockMode  p This text gets wrapped in  code p / code  tags. / p  / div  p The tail of the  code DefaultBlockMode / code  subelement. / p  p   name = DefaultSpanMode \nThis text  em is not / em  wrapped in additional  code p / code  tags. / p  p The tail of the  code DefaultSpanMode / code  subelement. / p  div   name = SpanModeOverride \nThis  code div / code  block is not wrapped in paragraph tags.\nNote: Subelements are not required to have tail text. / div  p   name = BlockModeOverride  p This  code p / code  block  em is / em  foolishly wrapped in further paragraph tags. / p  / p  p The tail of the  code BlockModeOverride / code  subelement. / p  div   name = RawHtml \nRaw HTML blocks may also be nested. / div  / div  p This text is after the markdown in HTML. / p", 
            "title": "Complex Result:"
        }, 
        {
            "location": "/extensions/fenced_code_blocks/", 
            "text": "Fenced Code Blocks\n\n\nSummary\n\n\nThe Fenced Code Blocks extension adds a secondary way to define code blocks,\nwhich overcomes a few limitations of the indented code blocks.\n\n\nThis extension is included in the standard Markdown library.\n\n\nSyntax\n\n\nFenced Code Blocks are defined using the syntax established in\n\nPHP Markdown Extra\n.\n\n\nThus, the following text (taken from the above referenced PHP documentation):\n\n\nThis is a paragraph introducing:\n\n~~~~~~~~~~~~~~~~~~~~\na one-line code block\n    ~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\nFenced code blocks can have a blank line as the first  and/or last line of a\ncode block and they can also come immediately after a list item without becoming\npart of the list.\n\n\n\n\nWarning\n\n\nFenced Code Blocks are only supported at the document root level.\nTherefore, they cannot be nested inside lists or blockquotes.\n\n\n\n\nLanguage\n\n\nIn addition to PHP Extra\ns syntax, you can define the language of the code\nblock for use by syntax highlighters etc. The language will be assigned as a\nclass attribute of the \ncode\n element in the output. Therefore, you should\ndefine the language as you would a CSS class - \n.language\n. For consistency\nwith other markdown syntax, the language can \noptionally\n be wrapped in curly\nbrackets:\n\n\n~~~~{.python}\n\n#\n python code\n~~~~\n\n~~~~.html\n\np\nHTML Document\n/p\n\n~~~~\n\n\n\n\n\nThe above will output:\n\n\npre\ncode\n \nclass\n=\npython\n# python code\n\n/\ncode\n/\npre\n\n\n\npre\ncode\n \nclass\n=\nhtml\nlt;\np\ngt;\nHTML Document\nlt;\n/p\ngt;\n\n\n/\ncode\n/\npre\n\n\n\n\n\n\nGitHub\ns backtick (```) syntax is also supported:\n\n\n```python\n\n\n# more python code\n\n\n```\n\n\n\n\n\n\nEmphasized Lines\n\n\nIf you would like to have your fenced code blocks highlighted with the\n\nCodeHilite\n extension, simply enable that extension (remember that\n\nPygments\n is its dependency) and the language of your fenced code blocks\nwill be passed in and highlighted appropriately.\n\n\nSimilar to the \ncolon\n syntax of the CodeHilite extension, fenced code blocks\ncan also have emphasized certain lines of code.\n\n\nThe lines can be specified with PHP Extra\ns syntax:\n\n\n~~~~{.python hl_lines=\n1 3\n}\n\n#\n This line is emphasized\n\n#\n This line isn\nt\n\n#\n This line is emphasized\n~~~~\n\n\n\n\n\n or with GitHub\ns:\n\n\n```python hl_lines=\n1 3\n\n\n#\n This line is emphasized\n\n#\n This line isn\nt\n\n#\n This line is emphasized\n```\n\n\n\n\n\nUsage\n\n\nSee \nExtensions\n for general extension usage, specify\n\nmarkdown.extensions.fenced_code\n as the name of the extension.\n\n\nThis extension does not accept any special configuration options.", 
            "title": "Fenced Code Blocks"
        }, 
        {
            "location": "/extensions/fenced_code_blocks/#fenced-code-blocks", 
            "text": "", 
            "title": "Fenced Code Blocks"
        }, 
        {
            "location": "/extensions/fenced_code_blocks/#summary", 
            "text": "The Fenced Code Blocks extension adds a secondary way to define code blocks,\nwhich overcomes a few limitations of the indented code blocks.  This extension is included in the standard Markdown library.", 
            "title": "Summary"
        }, 
        {
            "location": "/extensions/fenced_code_blocks/#syntax", 
            "text": "Fenced Code Blocks are defined using the syntax established in PHP Markdown Extra .  Thus, the following text (taken from the above referenced PHP documentation):  This is a paragraph introducing:\n\n~~~~~~~~~~~~~~~~~~~~\na one-line code block\n    ~~~~~~~~~~~~~~~~~~~~  Fenced code blocks can have a blank line as the first  and/or last line of a\ncode block and they can also come immediately after a list item without becoming\npart of the list.   Warning  Fenced Code Blocks are only supported at the document root level.\nTherefore, they cannot be nested inside lists or blockquotes.", 
            "title": "Syntax"
        }, 
        {
            "location": "/extensions/fenced_code_blocks/#language", 
            "text": "In addition to PHP Extra s syntax, you can define the language of the code\nblock for use by syntax highlighters etc. The language will be assigned as a\nclass attribute of the  code  element in the output. Therefore, you should\ndefine the language as you would a CSS class -  .language . For consistency\nwith other markdown syntax, the language can  optionally  be wrapped in curly\nbrackets:  ~~~~{.python} #  python code\n~~~~\n\n~~~~.html p HTML Document /p \n~~~~  The above will output:  pre code   class = python # python code / code / pre  pre code   class = html lt; p gt; HTML Document lt; /p gt;  / code / pre   GitHub s backtick (```) syntax is also supported:  ```python  # more python code  ```", 
            "title": "Language"
        }, 
        {
            "location": "/extensions/fenced_code_blocks/#emphasized-lines", 
            "text": "If you would like to have your fenced code blocks highlighted with the CodeHilite  extension, simply enable that extension (remember that Pygments  is its dependency) and the language of your fenced code blocks\nwill be passed in and highlighted appropriately.  Similar to the  colon  syntax of the CodeHilite extension, fenced code blocks\ncan also have emphasized certain lines of code.  The lines can be specified with PHP Extra s syntax:  ~~~~{.python hl_lines= 1 3 } #  This line is emphasized #  This line isn t #  This line is emphasized\n~~~~   or with GitHub s:  ```python hl_lines= 1 3  #  This line is emphasized #  This line isn t #  This line is emphasized\n```", 
            "title": "Emphasized Lines"
        }, 
        {
            "location": "/extensions/fenced_code_blocks/#usage", 
            "text": "See  Extensions  for general extension usage, specify markdown.extensions.fenced_code  as the name of the extension.  This extension does not accept any special configuration options.", 
            "title": "Usage"
        }, 
        {
            "location": "/extensions/footnotes/", 
            "text": "Footnotes\n\n\nSummary\n\n\nThe Footnotes extension adds syntax for defining footnotes in Markdown\ndocuments.\n\n\nThis extension is included in the standard Markdown library.\n\n\nSyntax\n\n\nPython-Markdown\ns Footnote syntax follows the generally accepted syntax of the\nMarkdown community at large and almost exactly matches \nPHP Markdown Extra\ns\nimplementation of footnotes. The only differences involve a few subtleties in\nthe output.\n\n\nExample:\n\n\nFootnotes[^1] have a label[^@#$%] and the footnote\ns content.\n\n[^1]: This is a footnote content.\n[^@#$%]: A footnote on the label: \n@#$%\n.\n\n\n\n\n\nA footnote label must start with a caret \n^\n and may contain any inline text\n(including spaces) between a set of square brackets \n[]\n. Only the first\ncaret has any special meaning.\n\n\nA footnote content must start with the label followed by a colon and at least\none space. The label used to define the content must exactly match the label used\nin the body (including capitalization and white space). The content would then\nfollow the label either on the same line or on the next line. The content may\ncontain multiple lines, paragraphs, code blocks, blockquotes and most any other\nmarkdown syntax. The additional lines must be indented one level (four spaces or\none tab).\n\n\nWhen working with multiple blocks, it may be helpful to start the content on a\nseparate line from the label which defines the content. This way the entire block\nis indented consistently and any errors are more easily discernible by the author.\n\n\n[^1]:\n    The first paragraph of the definition.\n\n    Paragraph two of the definition.\n\n\n    \n \nA blockquote with\n\n\n    \n \nmultiple lines.\n\n\n        a code block\n\n    A final paragraph.\n\n\n\n\n\nUsage\n\n\nSee \nExtensions\n for general extension usage, specify\n\nmarkdown.extensions.footnotes\n as the name of the extension.\n\n\nSee the \nLibrary Reference\n for information about\nconfiguring extensions.\n\n\nThe following options are provided to configure the output:\n\n\n\n\n\n\nPLACE_MARKER\n:\n    A text string used to mark the position where the footnotes are rendered.\n    Defaults to \n///Footnotes Go Here///\n.\n\n\nIf the place marker text is not found in the document, the footnote\ndefinitions are placed at the end of the resulting HTML document.\n\n\n\n\n\n\nUNIQUE_IDS\n:\n    Whether to avoid collisions across multiple calls to \nreset()\n. Defaults to\n    \nFalse\n.\n\n\n\n\n\n\nBACKLINK_TEXT\n:\n    The text string that links from the footnote definition back to the position\n    in the document. Defaults to \n#8617;\n.", 
            "title": "Footnotes"
        }, 
        {
            "location": "/extensions/footnotes/#footnotes", 
            "text": "", 
            "title": "Footnotes"
        }, 
        {
            "location": "/extensions/footnotes/#summary", 
            "text": "The Footnotes extension adds syntax for defining footnotes in Markdown\ndocuments.  This extension is included in the standard Markdown library.", 
            "title": "Summary"
        }, 
        {
            "location": "/extensions/footnotes/#syntax", 
            "text": "Python-Markdown s Footnote syntax follows the generally accepted syntax of the\nMarkdown community at large and almost exactly matches  PHP Markdown Extra s\nimplementation of footnotes. The only differences involve a few subtleties in\nthe output.  Example:  Footnotes[^1] have a label[^@#$%] and the footnote s content.\n\n[^1]: This is a footnote content.\n[^@#$%]: A footnote on the label:  @#$% .  A footnote label must start with a caret  ^  and may contain any inline text\n(including spaces) between a set of square brackets  [] . Only the first\ncaret has any special meaning.  A footnote content must start with the label followed by a colon and at least\none space. The label used to define the content must exactly match the label used\nin the body (including capitalization and white space). The content would then\nfollow the label either on the same line or on the next line. The content may\ncontain multiple lines, paragraphs, code blocks, blockquotes and most any other\nmarkdown syntax. The additional lines must be indented one level (four spaces or\none tab).  When working with multiple blocks, it may be helpful to start the content on a\nseparate line from the label which defines the content. This way the entire block\nis indented consistently and any errors are more easily discernible by the author.  [^1]:\n    The first paragraph of the definition.\n\n    Paragraph two of the definition.        A blockquote with         multiple lines. \n\n        a code block\n\n    A final paragraph.", 
            "title": "Syntax"
        }, 
        {
            "location": "/extensions/footnotes/#usage", 
            "text": "See  Extensions  for general extension usage, specify markdown.extensions.footnotes  as the name of the extension.  See the  Library Reference  for information about\nconfiguring extensions.  The following options are provided to configure the output:    PLACE_MARKER :\n    A text string used to mark the position where the footnotes are rendered.\n    Defaults to  ///Footnotes Go Here/// .  If the place marker text is not found in the document, the footnote\ndefinitions are placed at the end of the resulting HTML document.    UNIQUE_IDS :\n    Whether to avoid collisions across multiple calls to  reset() . Defaults to\n     False .    BACKLINK_TEXT :\n    The text string that links from the footnote definition back to the position\n    in the document. Defaults to  #8617; .", 
            "title": "Usage"
        }, 
        {
            "location": "/extensions/header_id/", 
            "text": "HeaderId\n\n\nSummary\n\n\nThe HeaderId extension automatically generates \nid\n attributes for the header\nelements (\nh1\n-\nh6\n) in the resulting HTML document.\n\n\nThis extension is included in the standard Markdown library.\n\n\n\n\nWarning\n\n\nThis extension is \nPending Deprecation\n. The \nTable of Contents\n\nExtension should be used instead, which offers most the features of this\nextension and more.\n\n\n\n\nSyntax\n\n\nBy default, all headers will automatically have unique \nid\n attributes\ngenerated based upon the text of the header (see below to turn this off).\nNote this example, in which all three headers would have the same \nid\n:\n\n\n#\nHeader\n\n#\nHeader\n\n#\nHeader\n\n\n\n\n\nResults in:\n\n\nh1\n \nid\n=\nheader\nHeader\n/\nh1\n\n\nh1\n \nid\n=\nheader_1\nHeader\n/\nh1\n\n\nh1\n \nid\n=\nheader_2\nHeader\n/\nh1\n\n\n\n\n\n\nUsage\n\n\nSee \nExtensions\n for general extension usage, specify\n\nmarkdown.extensions.headerid\n as the name of the extension.\n\n\nSee the \nLibrary Reference\n for information about\nconfiguring extensions.\n\n\nThe following options are provided to configure the output:\n\n\n\n\n\n\nlevel\n: Base level for headers.\n\n\nDefault: \n1\n\n\nThe \nlevel\n setting allows you to automatically adjust the header levels to\nfit within the hierarchy of your HTML templates. For example, suppose the\nmarkdown text for a page should not contain any headers higher than level 3\n(\nh3\n). The following will accomplish that:\n\n\n \n \ntext\n \n=\n \n\n\n... \n#Some Header\n\n\n... \n## Next Level\n\n\n \nfrom\n \nmarkdown.extensions.headerid\n \nimport\n \nHeaderIdExtension\n\n\n \nhtml\n \n=\n \nmarkdown\n.\nmarkdown\n(\ntext\n,\n \nextensions\n=\n[\nHeaderIdExtension\n(\nlevel\n=\n3\n)])\n\n\n \nprint\n \nhtml\n\n\nh3 id=\nsome_header\nSome Header\n/h3\n\n\nh4 id=\nnext_level\nNext Level\n/h4\n\n\n\n\n\n\n\n\n\n\nforceid\n: Force all headers to have an id.\n\n\nDefault: \nTrue\n\n\nThe \nforceid\n setting turns on or off the automatically generated ids for\nheaders that do not have one explicitly defined (using the\n\nAttribute List\n extension).\n\n\n \ntext\n \n=\n \n\n\n... \n# Some Header\n\n\n... \n# Header with ID # { #foo }\n\n\n \nhtml\n \n=\n \nmarkdown\n.\nmarkdown\n(\ntext\n,\n\n\n                             extensions=[\nmarkdown.extensions.attr_list\n,\n\n\n                                         HeaderIdExtension(forceid=False)])\n\n\n \nprint\n \nhtml\n\n\nh1\nSome Header\n/h1\n\n\nh1 id=\nfoo\nHeader with ID\n/h1\n\n\n\n\n\n\n\n\n\n\nseparator\n: Word separator. Character which replaces white space in id.\n\n\nDefault: \n-\n\n\n\n\n\n\nslugify\n: Callable to generate anchors.\n\n\nDefault: \nmarkdown.extensions.headerid.slugify\n\n\nIf you would like to use a different algorithm to define the ids, you can\npass in a callable which takes two arguments:\n\n\n\n\nvalue\n: The string to slugify.\n\n\nseparator\n: The Word Separator.\n\n\n\n\n\n\n\n\nUsing with Meta-Data\n\n\nThe HeaderId extension also supports the \nMeta-Data\n extension.\nPlease see the documentation for that extension for specifics. The supported\nmeta-data keywords are:\n\n\n\n\nheader_level\n\n\nheader_forceid\n\n\n\n\nWhen used, the meta-data will override the settings provided through the\n\nextension_configs\n interface.\n\n\nThis document:\n\n\nheader_level: 2\nheader_forceid: Off\n\n\n#\n A Header\n\n\n\n\n\nWill result in the following output:\n\n\nh2\nA Header\n/\nh2", 
            "title": "HeaderId"
        }, 
        {
            "location": "/extensions/header_id/#headerid", 
            "text": "", 
            "title": "HeaderId"
        }, 
        {
            "location": "/extensions/header_id/#summary", 
            "text": "The HeaderId extension automatically generates  id  attributes for the header\nelements ( h1 - h6 ) in the resulting HTML document.  This extension is included in the standard Markdown library.   Warning  This extension is  Pending Deprecation . The  Table of Contents \nExtension should be used instead, which offers most the features of this\nextension and more.", 
            "title": "Summary"
        }, 
        {
            "location": "/extensions/header_id/#syntax", 
            "text": "By default, all headers will automatically have unique  id  attributes\ngenerated based upon the text of the header (see below to turn this off).\nNote this example, in which all three headers would have the same  id :  # Header # Header # Header  Results in:  h1   id = header Header / h1  h1   id = header_1 Header / h1  h1   id = header_2 Header / h1", 
            "title": "Syntax"
        }, 
        {
            "location": "/extensions/header_id/#usage", 
            "text": "See  Extensions  for general extension usage, specify markdown.extensions.headerid  as the name of the extension.  See the  Library Reference  for information about\nconfiguring extensions.  The following options are provided to configure the output:    level : Base level for headers.  Default:  1  The  level  setting allows you to automatically adjust the header levels to\nfit within the hierarchy of your HTML templates. For example, suppose the\nmarkdown text for a page should not contain any headers higher than level 3\n( h3 ). The following will accomplish that:      text   =    ...  #Some Header  ...  ## Next Level    from   markdown.extensions.headerid   import   HeaderIdExtension    html   =   markdown . markdown ( text ,   extensions = [ HeaderIdExtension ( level = 3 )])    print   html  h3 id= some_header Some Header /h3  h4 id= next_level Next Level /h4     forceid : Force all headers to have an id.  Default:  True  The  forceid  setting turns on or off the automatically generated ids for\nheaders that do not have one explicitly defined (using the Attribute List  extension).    text   =    ...  # Some Header  ...  # Header with ID # { #foo }    html   =   markdown . markdown ( text ,                               extensions=[ markdown.extensions.attr_list ,                                           HeaderIdExtension(forceid=False)])    print   html  h1 Some Header /h1  h1 id= foo Header with ID /h1     separator : Word separator. Character which replaces white space in id.  Default:  -    slugify : Callable to generate anchors.  Default:  markdown.extensions.headerid.slugify  If you would like to use a different algorithm to define the ids, you can\npass in a callable which takes two arguments:   value : The string to slugify.  separator : The Word Separator.", 
            "title": "Usage"
        }, 
        {
            "location": "/extensions/header_id/#using-with-meta-data", 
            "text": "The HeaderId extension also supports the  Meta-Data  extension.\nPlease see the documentation for that extension for specifics. The supported\nmeta-data keywords are:   header_level  header_forceid   When used, the meta-data will override the settings provided through the extension_configs  interface.  This document:  header_level: 2\nheader_forceid: Off #  A Header  Will result in the following output:  h2 A Header / h2", 
            "title": "Using with Meta-Data"
        }, 
        {
            "location": "/extensions/meta_data/", 
            "text": "Meta-Data\n\n\nSummary\n\n\nThe Meta-Data extension adds a syntax for defining meta-data about a document.\nIt is inspired by and follows the syntax of \nMultiMarkdown\n. Currently,\nthis extension does not use the meta-data in any way, but simply provides it as\na \nMeta\n attribute of a Markdown instance for use by other extensions or\ndirectly by your python code.\n\n\nThis extension is included in the standard Markdown library.\n\n\nSyntax\n\n\nMeta-data consists of a series of keywords and values defined at the beginning\nof a markdown document like this:\n\n\nTitle:   My Document\nSummary: A brief description of my document.\nAuthors: Waylan Limberg\n         John Doe\nDate:    October 2, 2007\nblank-value:\nbase_url: http://example.com\n\nThis is the first paragraph of the document.\n\n\n\n\n\nThe keywords are case-insensitive and may consist of letters, numbers,\nunderscores and dashes and must end with a colon. The values consist of\nanything following the colon on the line and may even be blank.\n\n\nIf a line is indented by 4 or more spaces, that line is assumed to be an\nadditional line of the value for the previous keyword. A keyword may have as\nmany lines as desired.\n\n\nThe first blank line ends all meta-data for the document. Therefore, the first\nline of a document must not be blank.\n\n\nAlternatively, You may use YAML style deliminators to mark the start and/or end\nof your meta-data. When doing so, the first line of your document must be \n---\n.\nThe meta-data ends at the first blank line or the first line containing an end\ndeliminator (either \n---\n or \n...\n), whichever comes first. Even though YAML\ndeliminators are supported, meta-data is not parsed as YAML.\n\n\nAll meta-data is stripped from the document prior to any further processing\nby Markdown.\n\n\nUsage\n\n\nSee \nExtensions\n for general extension usage, specify\n\nmarkdown.extensions.meta\n as the name of the extension.\n\n\nAccessing the Meta-Data\n\n\nThe meta-data is made available as a python Dict in the \nMeta\n attribute of an\ninstance of the Markdown class. For example, using the above document:\n\n\n \nmd\n \n=\n \nmarkdown\n.\nMarkdown\n(\nextensions\n \n=\n \n[\nmarkdown.extensions.meta\n])\n\n\n \nhtml\n \n=\n \nmd\n.\nconvert\n(\ntext\n)\n\n\n \n# Meta-data has been stripped from output\n\n\n \nprint\n \nhtml\n\n\np\nThis is the first paragraph of the document.\n/p\n\n\n\n \n# View meta-data\n\n\n \nprint\n \nmd\n.\nMeta\n\n\n{\n\n\ntitle\n : [\nMy Document\n],\n\n\nsummary\n : [\nA brief description of my document.\n],\n\n\nauthors\n : [\nWaylan Limberg\n, \nJohn Doe\n],\n\n\ndate\n : [\nOctober 2, 2007\n],\n\n\nblank-value\n : [\n],\n\n\nbase_url\n : [\nhttp://example.com\n]\n\n\n}\n\n\n\n\n\n\nNote that the keys are all lowercase and the values consist of a list of\nstrings where each item is one line for that key. This way, one could preserve\nline breaks if desired. Or the items could be joined where appropriate. No\nassumptions are made regarding the data. It is simply passed as found to the\n\nMeta\n attribute.\n\n\nPerhaps the meta-data could be passed into a template system, or used by\nvarious Markdown extensions. The possibilities are left to the imagination of\nthe developer.\n\n\nCompatible Extensions\n\n\nThe following extensions are currently known to work with the Meta-Data\nextension. The keywords they are known to support are also listed.\n\n\n\n\nHeaderId\n\n\nheader_level\n\n\nheader_forceid\n\n\n\n\n\n\nWikiLinks\n\n\nwiki_base_url\n\n\nwiki_end_url\n\n\nwiki_html_class", 
            "title": "Meta-Data"
        }, 
        {
            "location": "/extensions/meta_data/#meta-data", 
            "text": "", 
            "title": "Meta-Data"
        }, 
        {
            "location": "/extensions/meta_data/#summary", 
            "text": "The Meta-Data extension adds a syntax for defining meta-data about a document.\nIt is inspired by and follows the syntax of  MultiMarkdown . Currently,\nthis extension does not use the meta-data in any way, but simply provides it as\na  Meta  attribute of a Markdown instance for use by other extensions or\ndirectly by your python code.  This extension is included in the standard Markdown library.", 
            "title": "Summary"
        }, 
        {
            "location": "/extensions/meta_data/#syntax", 
            "text": "Meta-data consists of a series of keywords and values defined at the beginning\nof a markdown document like this:  Title:   My Document\nSummary: A brief description of my document.\nAuthors: Waylan Limberg\n         John Doe\nDate:    October 2, 2007\nblank-value:\nbase_url: http://example.com\n\nThis is the first paragraph of the document.  The keywords are case-insensitive and may consist of letters, numbers,\nunderscores and dashes and must end with a colon. The values consist of\nanything following the colon on the line and may even be blank.  If a line is indented by 4 or more spaces, that line is assumed to be an\nadditional line of the value for the previous keyword. A keyword may have as\nmany lines as desired.  The first blank line ends all meta-data for the document. Therefore, the first\nline of a document must not be blank.  Alternatively, You may use YAML style deliminators to mark the start and/or end\nof your meta-data. When doing so, the first line of your document must be  --- .\nThe meta-data ends at the first blank line or the first line containing an end\ndeliminator (either  ---  or  ... ), whichever comes first. Even though YAML\ndeliminators are supported, meta-data is not parsed as YAML.  All meta-data is stripped from the document prior to any further processing\nby Markdown.", 
            "title": "Syntax"
        }, 
        {
            "location": "/extensions/meta_data/#usage", 
            "text": "See  Extensions  for general extension usage, specify markdown.extensions.meta  as the name of the extension.", 
            "title": "Usage"
        }, 
        {
            "location": "/extensions/meta_data/#accessing-the-meta-data", 
            "text": "The meta-data is made available as a python Dict in the  Meta  attribute of an\ninstance of the Markdown class. For example, using the above document:    md   =   markdown . Markdown ( extensions   =   [ markdown.extensions.meta ])    html   =   md . convert ( text )    # Meta-data has been stripped from output    print   html  p This is the first paragraph of the document. /p    # View meta-data    print   md . Meta  {  title  : [ My Document ],  summary  : [ A brief description of my document. ],  authors  : [ Waylan Limberg ,  John Doe ],  date  : [ October 2, 2007 ],  blank-value  : [ ],  base_url  : [ http://example.com ]  }   Note that the keys are all lowercase and the values consist of a list of\nstrings where each item is one line for that key. This way, one could preserve\nline breaks if desired. Or the items could be joined where appropriate. No\nassumptions are made regarding the data. It is simply passed as found to the Meta  attribute.  Perhaps the meta-data could be passed into a template system, or used by\nvarious Markdown extensions. The possibilities are left to the imagination of\nthe developer.", 
            "title": "Accessing the Meta-Data"
        }, 
        {
            "location": "/extensions/meta_data/#compatible-extensions", 
            "text": "The following extensions are currently known to work with the Meta-Data\nextension. The keywords they are known to support are also listed.   HeaderId  header_level  header_forceid    WikiLinks  wiki_base_url  wiki_end_url  wiki_html_class", 
            "title": "Compatible Extensions"
        }, 
        {
            "location": "/extensions/nl2br/", 
            "text": "New-Line-to-Break Extension\n\n\nSummary\n\n\nThe New-Line-to-Break (\nnl2b\n) Extension will cause newlines to be treated as\nhard breaks; like StackOverflow and \nGitHub\n flavored Markdown do.\n\n\nExample\n\n\n \nimport\n \nmarkdown\n\n\n \ntext\n \n=\n \n\n\n... \nLine 1\n\n\n... \nLine 2\n\n\n... \n\n\n \nhtml\n \n=\n \nmarkdown\n.\nmarkdown\n(\ntext\n,\n \nextensions\n=\n[\nmarkdown.extensions.nl2br\n])\n\n\n \nprint\n \nhtml\n\n\np\nLine 1\nbr /\n\n\nLine 2\n/p\n\n\n\n\n\n\nUsage\n\n\nSee \nExtensions\n for general extension usage, specify\n\nmarkdown.extensions.nl2br\n as the name of the extension.\n\n\nThis extension does not accept any special configuration options.", 
            "title": "New Line to Break"
        }, 
        {
            "location": "/extensions/nl2br/#new-line-to-break-extension", 
            "text": "", 
            "title": "New-Line-to-Break Extension"
        }, 
        {
            "location": "/extensions/nl2br/#summary", 
            "text": "The New-Line-to-Break ( nl2b ) Extension will cause newlines to be treated as\nhard breaks; like StackOverflow and  GitHub  flavored Markdown do.", 
            "title": "Summary"
        }, 
        {
            "location": "/extensions/nl2br/#example", 
            "text": "import   markdown    text   =    ...  Line 1  ...  Line 2  ...     html   =   markdown . markdown ( text ,   extensions = [ markdown.extensions.nl2br ])    print   html  p Line 1 br /  Line 2 /p", 
            "title": "Example"
        }, 
        {
            "location": "/extensions/nl2br/#usage", 
            "text": "See  Extensions  for general extension usage, specify markdown.extensions.nl2br  as the name of the extension.  This extension does not accept any special configuration options.", 
            "title": "Usage"
        }, 
        {
            "location": "/extensions/sane_lists/", 
            "text": "Sane Lists\n\n\nSummary\n\n\nThe Sane Lists extension alters the behavior of the Markdown List syntax\nto be less surprising.\n\n\nThis extension is included in the standard Markdown library.\n\n\nSyntax\n\n\nSane Lists do not allow the mixing of list types. In other words, an ordered\nlist will not continue when an unordered list item is encountered and\nvice versa. For example:\n\n\n1.\n Ordered item 1\n\n2.\n Ordered item 2\n\n\n*\n Unordered item 1\n\n*\n Unordered item 2\n\n\n\n\n\nwill result in the following output:\n\n\nol\n\n  \nli\nOrdered item 1\n/\nli\n\n  \nli\nOrdered item 2\n/\nli\n\n\n/\nol\n\n\n\nul\n\n  \nli\nUnordered item 1\n/\nli\n\n  \nli\nUnordered item 2\n/\nli\n\n\n/\nul\n\n\n\n\n\n\nWhereas the default Markdown behavior would be to generate an unordered list.\n\n\nNote that, unlike the default Markdown behavior, if a blank line is not\nincluded between list items, the different list type is ignored completely.\nThis corresponds to the behavior of paragraphs. For example:\n\n\nA Paragraph.\n\n* Not a list item.\n\n\n\n1. Ordered list item.\n\n\n*\n Not a separate list item.\n\n\n\n\n\nWith this extension the above will result in the following output:\n\n\np\nA Paragraph.\n* Not a list item.\n/\np\n\n\n\nol\n\n  \nli\nOrdered list item.\n  * Not a separate list item.\n/\nli\n\n\n/\nol\n\n\n\n\n\n\nIn all other ways, Sane Lists should behave as normal Markdown lists.\n\n\nUsage\n\n\nSee \nExtensions\n for general extension usage, specify\n\nmarkdown.extensions.sane_lists\n as the name of the extension.\n\n\nThis extension does not accept any special configuration options.", 
            "title": "Sane Lists"
        }, 
        {
            "location": "/extensions/sane_lists/#sane-lists", 
            "text": "", 
            "title": "Sane Lists"
        }, 
        {
            "location": "/extensions/sane_lists/#summary", 
            "text": "The Sane Lists extension alters the behavior of the Markdown List syntax\nto be less surprising.  This extension is included in the standard Markdown library.", 
            "title": "Summary"
        }, 
        {
            "location": "/extensions/sane_lists/#syntax", 
            "text": "Sane Lists do not allow the mixing of list types. In other words, an ordered\nlist will not continue when an unordered list item is encountered and\nvice versa. For example:  1.  Ordered item 1 2.  Ordered item 2 *  Unordered item 1 *  Unordered item 2  will result in the following output:  ol \n   li Ordered item 1 / li \n   li Ordered item 2 / li  / ol  ul \n   li Unordered item 1 / li \n   li Unordered item 2 / li  / ul   Whereas the default Markdown behavior would be to generate an unordered list.  Note that, unlike the default Markdown behavior, if a blank line is not\nincluded between list items, the different list type is ignored completely.\nThis corresponds to the behavior of paragraphs. For example:  A Paragraph. * Not a list item.  1. Ordered list item.  *  Not a separate list item.  With this extension the above will result in the following output:  p A Paragraph.\n* Not a list item. / p  ol \n   li Ordered list item.\n  * Not a separate list item. / li  / ol   In all other ways, Sane Lists should behave as normal Markdown lists.", 
            "title": "Syntax"
        }, 
        {
            "location": "/extensions/sane_lists/#usage", 
            "text": "See  Extensions  for general extension usage, specify markdown.extensions.sane_lists  as the name of the extension.  This extension does not accept any special configuration options.", 
            "title": "Usage"
        }, 
        {
            "location": "/extensions/smart_strong/", 
            "text": "Smart_Strong\n\n\nSummary\n\n\nThe Smart_Strong extension adds smarter handling of double underscores within\nwords. This does for double underscores what \nsmart_emphasis\n does for single\nunderscores.\n\n\nThe Smart_Strong extension is included in the standard Markdown library.\n\n\nExample\n\n\n \nimport\n \nmarkdown\n\n\n \nmarkdown\n.\nmarkdown\n(\nText with double__underscore__words.\n,\n \\\n\n                      extensions=[\nmarkdown.extensions.smart_strong\n])\n\n\nu\np\nText with double__underscore__words.\n/p\n\n\n \nmarkdown\n.\nmarkdown\n(\n__Strong__ still works.\n,\n \\\n\n                      extensions=[\nmarkdown.extensions.smart_strong\n])\n\n\nu\np\nstrong\nStrong\n/strong\n still works.\n/p\n\n\n \nmarkdown\n.\nmarkdown\n(\n__this__works__too__.\n,\n \\\n\n                      extensions=[\nmarkdown.extensions.smart_strong\n])\n\n\nu\np\nstrong\nthis__works__too\n/strong\n.\n/p\n\n\n\n\n\n\nUsage\n\n\nSee \nExtensions\n for general extension usage, specify\n\nmarkdown.extensions.smart_strong\n as the name of the extension.\n\n\nThis extension does not accept any special configuration options.", 
            "title": "Smart Strong"
        }, 
        {
            "location": "/extensions/smart_strong/#smart_strong", 
            "text": "", 
            "title": "Smart_Strong"
        }, 
        {
            "location": "/extensions/smart_strong/#summary", 
            "text": "The Smart_Strong extension adds smarter handling of double underscores within\nwords. This does for double underscores what  smart_emphasis  does for single\nunderscores.  The Smart_Strong extension is included in the standard Markdown library.", 
            "title": "Summary"
        }, 
        {
            "location": "/extensions/smart_strong/#example", 
            "text": "import   markdown    markdown . markdown ( Text with double__underscore__words. ,  \\                       extensions=[ markdown.extensions.smart_strong ])  u p Text with double__underscore__words. /p    markdown . markdown ( __Strong__ still works. ,  \\                       extensions=[ markdown.extensions.smart_strong ])  u p strong Strong /strong  still works. /p    markdown . markdown ( __this__works__too__. ,  \\                       extensions=[ markdown.extensions.smart_strong ])  u p strong this__works__too /strong . /p", 
            "title": "Example"
        }, 
        {
            "location": "/extensions/smart_strong/#usage", 
            "text": "See  Extensions  for general extension usage, specify markdown.extensions.smart_strong  as the name of the extension.  This extension does not accept any special configuration options.", 
            "title": "Usage"
        }, 
        {
            "location": "/extensions/smarty/", 
            "text": "SmartyPants\n\n\nSummary\n\n\nThe SmartyPants extension converts ASCII dashes, quotes and ellipses to\ntheir HTML entity equivalents.\n\n\n\n\n\n\n\n\nASCII symbol\n\n\nReplacements\n\n\nHTML Entities\n\n\nSubstitution Keys\n\n\n\n\n\n\n\n\n\n\n'\n\n\n \n\n\nlsquo;\n \nrsquo;\n\n\n'left-single-quote'\n, \n'right-single-quote'\n\n\n\n\n\n\n\"\n\n\n \n\n\nldquo;\n \nrdquo;\n\n\n'left-double-quote'\n, \n'right-double-quote'\n\n\n\n\n\n\n \n\n\n \n\n\nlaquo;\n \nraquo;\n\n\n'left-angle-quote'\n, \n'right-angle-quote'\n\n\n\n\n\n\n...\n\n\n\n\nhellip;\n\n\n'ellipsis'\n\n\n\n\n\n\n--\n\n\n\n\nndash;\n\n\n'ndash'\n\n\n\n\n\n\n---\n\n\n\n\nmdash;\n\n\n'mdash'\n\n\n\n\n\n\n\n\nUsing the configuration option \nsubstitutions\n you can overwrite the\ndefault substitutions. Just pass a dict mapping (a subset of) the\nkeys to the substitution strings.\n\n\nFor example, one might use the following configuration to get correct quotes for\nthe German language:\n\n\nextension_configs\n \n=\n \n{\n\n    \nmarkdown.extensions.smarty\n:\n \n{\n\n        \nsubstitutions\n:\n \n{\n\n            \nleft-single-quote\n:\n \nsbquo;\n,\n \n# sb is not a typo!\n\n            \nright-single-quote\n:\n \nlsquo;\n,\n\n            \nleft-double-quote\n:\n \nbdquo;\n,\n\n            \nright-double-quote\n:\n \nldquo;\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\nNote\n\n\nThis extension re-implements the Python \nSmartyPants\n\nlibrary by integrating it into the markdown parser.\nWhile this does not provide any additional features,\nit does offer a few advantages. Notably, it will not\ntry to work on highlighted code blocks (using the\n\nCodeHilite\n Extension) like the third party library\nhas been known to do.\n\n\n\n\nUsage\n\n\nSee \nExtensions\n for general extension usage, specify\n\nmarkdown.extensions.smarty\n as the name of the extension.\n\n\nSee the \nLibrary Reference\n for information about\nconfiguring extensions.\n\n\nThe following options are provided to configure the output:\n\n\n\n\n\n\n\n\nOption\n\n\nDefault value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsmart_dashes\n\n\nTrue\n\n\nwhether to convert dashes\n\n\n\n\n\n\nsmart_quotes\n\n\nTrue\n\n\nwhether to convert straight quotes\n\n\n\n\n\n\nsmart_angled_quotes\n\n\nFalse\n\n\nwhether to convert angled quotes\n\n\n\n\n\n\nsmart_ellipses\n\n\nTrue\n\n\nwhether to convert ellipses\n\n\n\n\n\n\nsubstitutions\n\n\n{}\n\n\noverwrite default substitutions\n\n\n\n\n\n\n\n\nFurther reading\n\n\nSmartyPants extension is based on the original SmartyPants implementation\nby John Gruber. Please read it\ns \ndocumentation\n for details.", 
            "title": "SmartyPants"
        }, 
        {
            "location": "/extensions/smarty/#smartypants", 
            "text": "", 
            "title": "SmartyPants"
        }, 
        {
            "location": "/extensions/smarty/#summary", 
            "text": "The SmartyPants extension converts ASCII dashes, quotes and ellipses to\ntheir HTML entity equivalents.     ASCII symbol  Replacements  HTML Entities  Substitution Keys      '     lsquo;   rsquo;  'left-single-quote' ,  'right-single-quote'    \"     ldquo;   rdquo;  'left-double-quote' ,  'right-double-quote'          laquo;   raquo;  'left-angle-quote' ,  'right-angle-quote'    ...   hellip;  'ellipsis'    --   ndash;  'ndash'    ---   mdash;  'mdash'     Using the configuration option  substitutions  you can overwrite the\ndefault substitutions. Just pass a dict mapping (a subset of) the\nkeys to the substitution strings.  For example, one might use the following configuration to get correct quotes for\nthe German language:  extension_configs   =   { \n     markdown.extensions.smarty :   { \n         substitutions :   { \n             left-single-quote :   sbquo; ,   # sb is not a typo! \n             right-single-quote :   lsquo; , \n             left-double-quote :   bdquo; , \n             right-double-quote :   ldquo; \n         } \n     }  }    Note  This extension re-implements the Python  SmartyPants \nlibrary by integrating it into the markdown parser.\nWhile this does not provide any additional features,\nit does offer a few advantages. Notably, it will not\ntry to work on highlighted code blocks (using the CodeHilite  Extension) like the third party library\nhas been known to do.", 
            "title": "Summary"
        }, 
        {
            "location": "/extensions/smarty/#usage", 
            "text": "See  Extensions  for general extension usage, specify markdown.extensions.smarty  as the name of the extension.  See the  Library Reference  for information about\nconfiguring extensions.  The following options are provided to configure the output:     Option  Default value  Description      smart_dashes  True  whether to convert dashes    smart_quotes  True  whether to convert straight quotes    smart_angled_quotes  False  whether to convert angled quotes    smart_ellipses  True  whether to convert ellipses    substitutions  {}  overwrite default substitutions", 
            "title": "Usage"
        }, 
        {
            "location": "/extensions/smarty/#further-reading", 
            "text": "SmartyPants extension is based on the original SmartyPants implementation\nby John Gruber. Please read it s  documentation  for details.", 
            "title": "Further reading"
        }, 
        {
            "location": "/extensions/toc/", 
            "text": "Table of Contents\n\n\nSummary\n\n\nThe Table of Contents extension generates a Table of Contents from a Markdown\ndocument and adds it into the resulting HTML document.\n\n\nThis extension is included in the standard Markdown library.\n\n\nSyntax\n\n\nBy default, all headers will automatically have unique \nid\n attributes\ngenerated based upon the text of the header. Note this example, in which all\nthree headers would have the same \nid\n:\n\n\n#\nHeader\n\n#\nHeader\n\n#\nHeader\n\n\n\n\n\nResults in:\n\n\nh1\n \nid\n=\nheader\nHeader\n/\nh1\n\n\nh1\n \nid\n=\nheader_1\nHeader\n/\nh1\n\n\nh1\n \nid\n=\nheader_2\nHeader\n/\nh1\n\n\n\n\n\n\nPlace a marker in the document where you would like the Table of Contents to\nappear. Then, a nested list of all the headers in the document will replace the\nmarker. The marker defaults to \n[TOC]\n so the following document:\n\n\n[TOC]\n\n\n#\n Header 1\n\n\n##\n Header 2\n\n\n\n\n\nwould generate the following output:\n\n\ndiv\n \nclass\n=\ntoc\n\n  \nul\n\n    \nli\na\n \nhref\n=\n#header-1\nHeader 1\n/\na\n/\nli\n\n      \nul\n\n        \nli\na\n \nhref\n=\n#header-2\nHeader 2\n/\na\n/\nli\n\n      \n/\nul\n\n  \n/\nul\n\n\n/\ndiv\n\n\nh1\n \nid\n=\nheader-1\nHeader 1\n/\nh1\n\n\nh1\n \nid\n=\nheader-2\nHeader 2\n/\nh1\n\n\n\n\n\n\nRegardless of whether a \nmarker\n is found in the document (or disabled), the\nTable of Contents is available as an attribute (\ntoc\n) on the Markdown class.\nThis allows one to insert the Table of Contents elsewhere in their page\ntemplate. For example:\n\n\n \nmd\n \n=\n \nmarkdown\n.\nMarkdown\n(\nextensions\n=\n[\nmarkdown.extensions.toc\n])\n\n\n \nhtml\n \n=\n \nmd\n.\nconvert\n(\ntext\n)\n\n\n \npage\n \n=\n \nrender_some_template\n(\ncontext\n=\n{\nbody\n:\n \nhtml\n,\n \ntoc\n:\n \nmd\n.\ntoc\n})\n\n\n\n\n\n\nUsage\n\n\nSee \nExtensions\n for general extension usage, specify \nmarkdown.extensions.toc\n\nas the name of the extension.\n\n\nSee the \nLibrary Reference\n for information about\nconfiguring extensions.\n\n\nThe following options are provided to configure the output:\n\n\n\n\n\n\nmarker\n:\n    Text to find and replace with the Table of Contents. Defaults to \n[TOC]\n.\n\n\nSet to an empty string to disable searching for a marker, which may save\nsome time, especially on long documents.\n\n\n\n\n\n\ntitle\n:\n    Title to insert in the Table of Contents\n \ndiv\n. Defaults to \nNone\n.\n\n\n\n\n\n\nanchorlink\n:\n    Set to \nTrue\n to cause all headers to link to themselves. Default is \nFalse\n.\n\n\n\n\n\n\npermalink\n:\n    Set to \nTrue\n or a string to generate permanent links at the end of each header.\n    Useful with Sphinx style sheets.\n\n\nWhen set to \nTrue\n the paragraph symbol (\n or \npara;\n) is used as\nthe link text. When set to a string, the provided string is used as the link\ntext.\n\n\n\n\n\n\nbaselevel\n:\n    Base level for headers. Defaults to \n1\n.\n\n\nThe \nbaselevel\n setting allows the header levels to be automatically\nadjusted to fit within the hierarchy of your HTML templates. For example,\nsuppose the Markdown text for a page should not contain any headers higher\nthan level 3 (\nh3\n). The following will accomplish that:\n\n\n \n \ntext\n \n=\n \n\n\n... \n#Some Header\n\n\n... \n## Next Level\n\n\n \nfrom\n \nmarkdown.extensions.toc\n \nimport\n \nTocExtension\n\n\n \nhtml\n \n=\n \nmarkdown\n.\nmarkdown\n(\ntext\n,\n \nextensions\n=\n[\nTocExtension\n(\nbaselevel\n=\n3\n)])\n\n\n \nprint\n \nhtml\n\n\nh3 id=\nsome_header\nSome Header\n/h3\n\n\nh4 id=\nnext_level\nNext Level\n/h4\n\n\n\n\n\n\n\n\n\n\nslugify\n:\n    Callable to generate anchors.\n\n\nDefault: \nmarkdown.extensions.headerid.slugify\n\n\nIn order to use a different algorithm to define the id attributes, define  and\npass in a callable which takes the following two arguments:\n\n\n\n\nvalue\n: The string to slugify.\n\n\nseparator\n: The Word Separator.\n\n\n\n\nThe callable must return a string appropriate for use in HTML \nid\n attributes.\n\n\n\n\n\n\nseparator\n:\n    Word separator. Character which replaces white space in id. Defaults to \n-\n.", 
            "title": "Table of Contents"
        }, 
        {
            "location": "/extensions/toc/#table-of-contents", 
            "text": "", 
            "title": "Table of Contents"
        }, 
        {
            "location": "/extensions/toc/#summary", 
            "text": "The Table of Contents extension generates a Table of Contents from a Markdown\ndocument and adds it into the resulting HTML document.  This extension is included in the standard Markdown library.", 
            "title": "Summary"
        }, 
        {
            "location": "/extensions/toc/#syntax", 
            "text": "By default, all headers will automatically have unique  id  attributes\ngenerated based upon the text of the header. Note this example, in which all\nthree headers would have the same  id :  # Header # Header # Header  Results in:  h1   id = header Header / h1  h1   id = header_1 Header / h1  h1   id = header_2 Header / h1   Place a marker in the document where you would like the Table of Contents to\nappear. Then, a nested list of all the headers in the document will replace the\nmarker. The marker defaults to  [TOC]  so the following document:  [TOC] #  Header 1 ##  Header 2  would generate the following output:  div   class = toc \n   ul \n     li a   href = #header-1 Header 1 / a / li \n       ul \n         li a   href = #header-2 Header 2 / a / li \n       / ul \n   / ul  / div  h1   id = header-1 Header 1 / h1  h1   id = header-2 Header 2 / h1   Regardless of whether a  marker  is found in the document (or disabled), the\nTable of Contents is available as an attribute ( toc ) on the Markdown class.\nThis allows one to insert the Table of Contents elsewhere in their page\ntemplate. For example:    md   =   markdown . Markdown ( extensions = [ markdown.extensions.toc ])    html   =   md . convert ( text )    page   =   render_some_template ( context = { body :   html ,   toc :   md . toc })", 
            "title": "Syntax"
        }, 
        {
            "location": "/extensions/toc/#usage", 
            "text": "See  Extensions  for general extension usage, specify  markdown.extensions.toc \nas the name of the extension.  See the  Library Reference  for information about\nconfiguring extensions.  The following options are provided to configure the output:    marker :\n    Text to find and replace with the Table of Contents. Defaults to  [TOC] .  Set to an empty string to disable searching for a marker, which may save\nsome time, especially on long documents.    title :\n    Title to insert in the Table of Contents   div . Defaults to  None .    anchorlink :\n    Set to  True  to cause all headers to link to themselves. Default is  False .    permalink :\n    Set to  True  or a string to generate permanent links at the end of each header.\n    Useful with Sphinx style sheets.  When set to  True  the paragraph symbol (  or  para; ) is used as\nthe link text. When set to a string, the provided string is used as the link\ntext.    baselevel :\n    Base level for headers. Defaults to  1 .  The  baselevel  setting allows the header levels to be automatically\nadjusted to fit within the hierarchy of your HTML templates. For example,\nsuppose the Markdown text for a page should not contain any headers higher\nthan level 3 ( h3 ). The following will accomplish that:      text   =    ...  #Some Header  ...  ## Next Level    from   markdown.extensions.toc   import   TocExtension    html   =   markdown . markdown ( text ,   extensions = [ TocExtension ( baselevel = 3 )])    print   html  h3 id= some_header Some Header /h3  h4 id= next_level Next Level /h4     slugify :\n    Callable to generate anchors.  Default:  markdown.extensions.headerid.slugify  In order to use a different algorithm to define the id attributes, define  and\npass in a callable which takes the following two arguments:   value : The string to slugify.  separator : The Word Separator.   The callable must return a string appropriate for use in HTML  id  attributes.    separator :\n    Word separator. Character which replaces white space in id. Defaults to  - .", 
            "title": "Usage"
        }, 
        {
            "location": "/extensions/tables/", 
            "text": "Tables\n\n\nSummary\n\n\nThe Tables extension adds the ability to create tables in Markdown documents.\n\n\nThis extension is included in the standard Markdown library.\n\n\nSyntax\n\n\nTables are defined using the syntax established in \nPHP Markdown Extra\n.\n\n\nThus, the following text (taken from the above referenced PHP documentation):\n\n\nFirst Header  | Second Header\n------------- | -------------\nContent Cell  | Content Cell\nContent Cell  | Content Cell\n\n\n\n\n\nwill be rendered as:\n\n\ntable\n\n  \nthead\n\n    \ntr\n\n      \nth\nFirst Header\n/\nth\n\n      \nth\nSecond Header\n/\nth\n\n    \n/\ntr\n\n  \n/\nthead\n\n  \ntbody\n\n    \ntr\n\n      \ntd\nContent Cell\n/\ntd\n\n      \ntd\nContent Cell\n/\ntd\n\n    \n/\ntr\n\n    \ntr\n\n      \ntd\nContent Cell\n/\ntd\n\n      \ntd\nContent Cell\n/\ntd\n\n    \n/\ntr\n\n  \n/\ntbody\n\n\n/\ntable\n\n\n\n\n\n\nUsage\n\n\nSee \nExtensions\n for general extension usage, specify\n\nmarkdown.extensions.tables\n as the name of the extension.\n\n\nThis extension does not accept any special configuration options.", 
            "title": "Tables"
        }, 
        {
            "location": "/extensions/tables/#tables", 
            "text": "", 
            "title": "Tables"
        }, 
        {
            "location": "/extensions/tables/#summary", 
            "text": "The Tables extension adds the ability to create tables in Markdown documents.  This extension is included in the standard Markdown library.", 
            "title": "Summary"
        }, 
        {
            "location": "/extensions/tables/#syntax", 
            "text": "Tables are defined using the syntax established in  PHP Markdown Extra .  Thus, the following text (taken from the above referenced PHP documentation):  First Header  | Second Header\n------------- | -------------\nContent Cell  | Content Cell\nContent Cell  | Content Cell  will be rendered as:  table \n   thead \n     tr \n       th First Header / th \n       th Second Header / th \n     / tr \n   / thead \n   tbody \n     tr \n       td Content Cell / td \n       td Content Cell / td \n     / tr \n     tr \n       td Content Cell / td \n       td Content Cell / td \n     / tr \n   / tbody  / table", 
            "title": "Syntax"
        }, 
        {
            "location": "/extensions/tables/#usage", 
            "text": "See  Extensions  for general extension usage, specify markdown.extensions.tables  as the name of the extension.  This extension does not accept any special configuration options.", 
            "title": "Usage"
        }, 
        {
            "location": "/extensions/wikilinks/", 
            "text": "WikiLinks\n\n\nSummary\n\n\nThe WikiLinks extension adds support for \nWikiLinks\n. Specifically, any\n\n[[bracketed]]\n word is converted to a link.\n\n\nThis extension is included in the standard Markdown library.\n\n\nSyntax\n\n\nA \n[[bracketed]]\n word is any combination of  upper or lower case letters,\nnumber, dashes, underscores and spaces surrounded by double brackets. Therefore\n\n\n[[Bracketed]]\n\n\n\n\n\nwould produce the following HTML:\n\n\na\n \nhref\n=\n/Bracketed/\n \nclass\n=\nwikilink\nBracketed\n/\na\n\n\n\n\n\n\nNote that WikiLinks are automatically assigned \nclass=\"wikilink\"\n making it\neasy to style WikiLinks differently from other links on a page if one so\ndesires. See below for ways to alter the class.\n\n\nAlso note that when a space is used, the space is converted to an underscore in\nthe link but left as-is in the label. Perhaps an example would illustrate this\nbest:\n\n\n[[Wiki Link]]\n\n\n\n\n\nbecomes\n\n\na\n \nhref\n=\n/Wiki_Link/\n \nclass\n=\nwikilink\nWiki Link\n/\na\n\n\n\n\n\n\nUsage\n\n\nSee \nExtensions\n for general extension usage, specify\n\nmarkdown.extensions.wikilinks\n as the name of the extension.\n\n\nSee the \nLibrary Reference\n for information about\nconfiguring extensions.\n\n\nThe default behavior is to point each link to the document root of the current\ndomain and close with a trailing slash. Additionally, each link is assigned to\nthe HTML class \nwikilink\n.\n\n\nThe following options are provided to change the default behavior:\n\n\n\n\n\n\nbase_url\n: String to append to beginning of URL.\n\n\nDefault: \n'/'\n\n\n\n\n\n\nend_url\n: String to append to end of URL.\n\n\nDefault: \n'/'\n\n\n\n\n\n\nhtml_class\n: CSS class. Leave blank for none.\n\n\nDefault: \n'wikilink'\n\n\n\n\n\n\nbuild_url\n: Callable which formats the URL from its parts.\n\n\n\n\n\n\nExamples\n\n\nFor an example, let us suppose links should always point to the sub-directory\n\n/wiki/\n and end with \n.html\n\n\n \nfrom\n \nmarkdown.extensions.wikilinks\n \nimport\n \nWikiLinkExtension\n\n\n \nhtml\n \n=\n \nmarkdown\n.\nmarkdown\n(\ntext\n,\n\n\n... \n    \nextensions\n=\n[\nWikiLinkExtension\n(\nbase_url\n=\n/wiki/\n,\n \nend_url\n=\n.html\n)]\n\n\n... \n)\n\n\n\n\n\n\nThe above would result in the following link for \n[[WikiLink]]\n.\n\n\na\n \nhref\n=\n/wiki/WikiLink.html\n \nclass\n=\nwikilink\nWikiLink\n/\na\n\n\n\n\n\n\nIf you want to do more that just alter the base and/or end of the URL, you\ncould also pass in a callable which must accept three arguments (\nlabel\n,\n\nbase\n, and \nend\n). The callable must return the URL in it\ns entirety.\n\n\n \ndef\n \nmy_url_builder\n(\nlabel\n,\n \nbase\n,\n \nend\n):\n\n\n... \n   \n# do stuff\n\n\n... \n   \nreturn\n \nurl\n\n\n...\n\n\n \nhtml\n \n=\n \nmarkdown\n.\nmarkdown\n(\ntext\n,\n\n\n... \n    \nextensions\n=\n[\nWikiLinkExtension\n(\nbuild_url\n=\nmy_url_builder\n)],\n\n\n... \n)\n\n\n\n\n\n\nThe option is also provided to change or remove the class attribute.\n\n\n \nhtml\n \n=\n \nmarkdown\n.\nmarkdown\n(\ntext\n,\n\n\n... \n    \nextensions\n=\n[\nWikiLinkExtension\n(\nhtml_class\n=\nmyclass\n)]\n\n\n... \n)\n\n\n\n\n\n\nWould cause all WikiLinks to be assigned to the class \nmyclass\n.\n\n\na\n \nhref\n=\n/WikiLink/\n \nclass\n=\nmyclass\nWikiLink\n/\na\n\n\n\n\n\n\nUsing with Meta-Data extension\n\n\nThe WikiLink extension also supports the \nMeta-Data\n extension.\nPlease see the documentation for that extension for specifics. The supported\nmeta-data keywords are:\n\n\n\n\nwiki_base_url\n\n\nwiki_end_url\n\n\nwiki_html_class\n\n\n\n\nWhen used, the meta-data will override the settings provided through the\n\nextension_configs\n interface.\n\n\nThis document:\n\n\nwiki_base_url: http://example.com/\nwiki_end_url:  .html\nwiki_html_class:\n\nA [[WikiLink]] in the first paragraph.\n\n\n\n\n\nwould result in the following output (notice the blank \nwiki_html_class\n):\n\n\np\nA \na\n \nhref\n=\nhttp://example.com/WikiLink.html\nWikiLink\n/\na\n in the first paragraph.\n/\np", 
            "title": "WikiLinks"
        }, 
        {
            "location": "/extensions/wikilinks/#wikilinks", 
            "text": "", 
            "title": "WikiLinks"
        }, 
        {
            "location": "/extensions/wikilinks/#summary", 
            "text": "The WikiLinks extension adds support for  WikiLinks . Specifically, any [[bracketed]]  word is converted to a link.  This extension is included in the standard Markdown library.", 
            "title": "Summary"
        }, 
        {
            "location": "/extensions/wikilinks/#syntax", 
            "text": "A  [[bracketed]]  word is any combination of  upper or lower case letters,\nnumber, dashes, underscores and spaces surrounded by double brackets. Therefore  [[Bracketed]]  would produce the following HTML:  a   href = /Bracketed/   class = wikilink Bracketed / a   Note that WikiLinks are automatically assigned  class=\"wikilink\"  making it\neasy to style WikiLinks differently from other links on a page if one so\ndesires. See below for ways to alter the class.  Also note that when a space is used, the space is converted to an underscore in\nthe link but left as-is in the label. Perhaps an example would illustrate this\nbest:  [[Wiki Link]]  becomes  a   href = /Wiki_Link/   class = wikilink Wiki Link / a", 
            "title": "Syntax"
        }, 
        {
            "location": "/extensions/wikilinks/#usage", 
            "text": "See  Extensions  for general extension usage, specify markdown.extensions.wikilinks  as the name of the extension.  See the  Library Reference  for information about\nconfiguring extensions.  The default behavior is to point each link to the document root of the current\ndomain and close with a trailing slash. Additionally, each link is assigned to\nthe HTML class  wikilink .  The following options are provided to change the default behavior:    base_url : String to append to beginning of URL.  Default:  '/'    end_url : String to append to end of URL.  Default:  '/'    html_class : CSS class. Leave blank for none.  Default:  'wikilink'    build_url : Callable which formats the URL from its parts.", 
            "title": "Usage"
        }, 
        {
            "location": "/extensions/wikilinks/#examples", 
            "text": "For an example, let us suppose links should always point to the sub-directory /wiki/  and end with  .html    from   markdown.extensions.wikilinks   import   WikiLinkExtension    html   =   markdown . markdown ( text ,  ...       extensions = [ WikiLinkExtension ( base_url = /wiki/ ,   end_url = .html )]  ...  )   The above would result in the following link for  [[WikiLink]] .  a   href = /wiki/WikiLink.html   class = wikilink WikiLink / a   If you want to do more that just alter the base and/or end of the URL, you\ncould also pass in a callable which must accept three arguments ( label , base , and  end ). The callable must return the URL in it s entirety.    def   my_url_builder ( label ,   base ,   end ):  ...      # do stuff  ...      return   url  ...    html   =   markdown . markdown ( text ,  ...       extensions = [ WikiLinkExtension ( build_url = my_url_builder )],  ...  )   The option is also provided to change or remove the class attribute.    html   =   markdown . markdown ( text ,  ...       extensions = [ WikiLinkExtension ( html_class = myclass )]  ...  )   Would cause all WikiLinks to be assigned to the class  myclass .  a   href = /WikiLink/   class = myclass WikiLink / a", 
            "title": "Examples"
        }, 
        {
            "location": "/extensions/wikilinks/#using-with-meta-data-extension", 
            "text": "The WikiLink extension also supports the  Meta-Data  extension.\nPlease see the documentation for that extension for specifics. The supported\nmeta-data keywords are:   wiki_base_url  wiki_end_url  wiki_html_class   When used, the meta-data will override the settings provided through the extension_configs  interface.  This document:  wiki_base_url: http://example.com/\nwiki_end_url:  .html\nwiki_html_class:\n\nA [[WikiLink]] in the first paragraph.  would result in the following output (notice the blank  wiki_html_class ):  p A  a   href = http://example.com/WikiLink.html WikiLink / a  in the first paragraph. / p", 
            "title": "Using with Meta-Data extension"
        }, 
        {
            "location": "/extensions/api/", 
            "text": "Writing Extensions for Python-Markdown\n\n\nPython-Markdown includes an API for extension writers to plug their own\ncustom functionality and/or syntax into the parser. There are Preprocessors\nwhich allow you to alter the source before it is passed to the parser,\ninline patterns which allow you to add, remove or override the syntax of\nany inline elements, and Postprocessors which allow munging of the\noutput of the parser before it is returned. If you really want to dive in,\nthere are also Blockprocessors which are part of the core BlockParser.\n\n\nAs the parser builds an \nElementTree\n object which is later rendered\nas Unicode text, there are also some helpers provided to ease manipulation of\nthe tree. Each part of the API is discussed in its respective section below.\nAdditionally, reading the source of some \nAvailable Extensions\n may be\nhelpful. For example, the \nFootnotes\n extension uses most of the features\ndocumented here.\n\n\nPreprocessors\n\n\nPreprocessors munge the source text before it is passed into the Markdown\ncore. This is an excellent place to clean up bad syntax, extract things the\nparser may otherwise choke on and perhaps even store it for later retrieval.\n\n\nPreprocessors should inherit from \nmarkdown.preprocessors.Preprocessor\n and\nimplement a \nrun\n method with one argument \nlines\n. The \nrun\n method of\neach Preprocessor will be passed the entire source text as a list of Unicode\nstrings. Each string will contain one line of text. The \nrun\n method should\nreturn either that list, or an altered list of Unicode strings.\n\n\nA pseudo example:\n\n\nfrom\n \nmarkdown.preprocessors\n \nimport\n \nPreprocessor\n\n\n\nclass\n \nMyPreprocessor\n(\nPreprocessor\n):\n\n    \ndef\n \nrun\n(\nself\n,\n \nlines\n):\n\n        \nnew_lines\n \n=\n \n[]\n\n        \nfor\n \nline\n \nin\n \nlines\n:\n\n            \nm\n \n=\n \nMYREGEX\n.\nmatch\n(\nline\n)\n\n            \nif\n \nm\n:\n\n                \n# do stuff\n\n            \nelse\n:\n\n                \nnew_lines\n.\nappend\n(\nline\n)\n\n        \nreturn\n \nnew_lines\n\n\n\n\n\n\nInline Patterns\n\n\nInline Patterns implement the inline HTML element syntax for Markdown such as\n\n*emphasis*\n or \n[links](http://example.com)\n. Pattern objects should be\ninstances of classes that inherit from \nmarkdown.inlinepatterns.Pattern\n or\none of its children. Each pattern object uses a single regular expression and\nmust have the following methods:\n\n\n\n\n\n\ngetCompiledRegExp()\n:\n\n\nReturns a compiled regular expression.\n\n\n\n\n\n\nhandleMatch(m)\n:\n\n\nAccepts a match object and returns an ElementTree element of a plain\nUnicode string.\n\n\n\n\n\n\nAlso, Inline Patterns can define the property \nANCESTOR_EXCLUDES\n with either\na list or tuple of undesirable ancestors. The pattern should not match if it\nwould cause the content to be a descendant of one of the defined tag names.\n\n\nNote that any regular expression returned by \ngetCompiledRegExp\n must capture\nthe whole block. Therefore, they should all start with \nr'^(.*?)'\n and end\nwith \nr'(.*?)!'\n. When using the default \ngetCompiledRegExp()\n method\nprovided in the \nPattern\n you can pass in a regular expression without that\nand \ngetCompiledRegExp\n will wrap your expression for you and set the\n\nre.DOTALL\n and \nre.UNICODE\n flags. This means that the first group of your\nmatch will be \nm.group(2)\n as \nm.group(1)\n will match everything before the\npattern.\n\n\nFor an example, consider this simplified emphasis pattern:\n\n\nfrom\n \nmarkdown.inlinepatterns\n \nimport\n \nPattern\n\n\nfrom\n \nmarkdown.util\n \nimport\n \netree\n\n\n\nclass\n \nEmphasisPattern\n(\nPattern\n):\n\n    \ndef\n \nhandleMatch\n(\nself\n,\n \nm\n):\n\n        \nel\n \n=\n \netree\n.\nElement\n(\nem\n)\n\n        \nel\n.\ntext\n \n=\n \nm\n.\ngroup\n(\n3\n)\n\n        \nreturn\n \nel\n\n\n\n\n\n\nAs discussed in \nIntegrating Your Code Into Markdown\n, an instance of this\nclass will need to be provided to Markdown. That instance would be created\nlike so:\n\n\n# an oversimplified regex\n\n\nMYPATTERN\n \n=\n \nr\n\\*([^*]+)\\*\n\n\n# pass in pattern and create instance\n\n\nemphasis\n \n=\n \nEmphasisPattern\n(\nMYPATTERN\n)\n\n\n\n\n\n\nActually it would not be necessary to create that pattern (and not just because\na more sophisticated emphasis pattern already exists in Markdown). The fact is,\nthat example pattern is not very DRY. A pattern for \n**strong**\n text would\nbe almost identical, with the exception that it would create a \nstrong\n element.\nTherefore, Markdown provides a number of generic pattern classes that can\nprovide some common functionality. For example, both emphasis and strong are\nimplemented with separate instances of the \nSimpleTagPattern\n listed below.\nFeel free to use or extend any of the Pattern classes found at\n\nmarkdown.inlinepatterns\n.\n\n\nGeneric Pattern Classes\n\n\n\n\n\n\nSimpleTextPattern(pattern)\n:\n\n\nReturns simple text of \ngroup(2)\n of a \npattern\n.\n\n\n\n\n\n\nSimpleTagPattern(pattern, tag)\n:\n\n\nReturns an element of type \ntag\n with a text attribute of \ngroup(3)\n\nof a \npattern\n. \ntag\n should be a string of a HTML element (i.e.: \nem\n).\n\n\n\n\n\n\nSubstituteTagPattern(pattern, tag)\n:\n\n\nReturns an element of type \ntag\n with no children or text (i.e.: \nbr\n).\n\n\n\n\n\n\nThere may be other Pattern classes in the Markdown source that you could extend\nor use as well. Read through the source and see if there is anything you can\nuse. You might even get a few ideas for different approaches to your specific\nsituation.\n\n\nTreeprocessors\n\n\nTreeprocessors manipulate an ElementTree object after it has passed through the\ncore BlockParser. This is where additional manipulation of the tree takes\nplace. Additionally, the InlineProcessor is a Treeprocessor which steps through\nthe tree and runs the Inline Patterns on the text of each Element in the tree.\n\n\nA Treeprocessor should inherit from \nmarkdown.treeprocessors.Treeprocessor\n,\nover-ride the \nrun\n method which takes one argument \nroot\n (an ElementTree\nobject) and either modifies that root element and returns \nNone\n or returns a\nnew ElementTree object.\n\n\nA pseudo example:\n\n\nfrom\n \nmarkdown.treeprocessors\n \nimport\n \nTreeprocessor\n\n\n\nclass\n \nMyTreeprocessor\n(\nTreeprocessor\n):\n\n    \ndef\n \nrun\n(\nself\n,\n \nroot\n):\n\n        \nroot\n.\ntext\n \n=\n \nmodified content\n\n\n\n\n\n\nNote that Python class methods return \nNone\n by default when no \nreturn\n\nstatement is defined.  Additionally all Python variables refer to objects by\nreference.  Therefore, the above \nrun\n method modifies the \nroot\n element\nin place and returns \nNone\n. The changes made to the \nroot\n element and its\nchildren are retained.\n\n\nSome may be inclined to return the modified \nroot\n element. While that would\nwork, it would cause a copy of the entire ElementTree to be generated each\ntime the Treeprocessor is run. Therefore, it is generally expected that\nthe \nrun\n method would only return \nNone\n or a new ElementTree object.\n\n\nFor specifics on manipulating the ElementTree, see\n\nWorking with the ElementTree\n below.\n\n\nPostprocessors\n\n\nPostprocessors manipulate the document after the ElementTree has been\nserialized into a string. Postprocessors should be used to work with the\ntext just before output.\n\n\nA Postprocessor should inherit from \nmarkdown.postprocessors.Postprocessor\n\nand over-ride the \nrun\n method which takes one argument \ntext\n and returns\na Unicode string.\n\n\nPostprocessors are run after the ElementTree has been serialized back into\nUnicode text.  For example, this may be an appropriate place to add a table of\ncontents to a document:\n\n\nfrom\n \nmarkdown.postprocessors\n \nimport\n \nPostprocessor\n\n\n\nclass\n \nTocPostprocessor\n(\nPostprocessor\n):\n\n    \ndef\n \nrun\n(\nself\n,\n \ntext\n):\n\n        \nreturn\n \nMYMARKERRE\n.\nsub\n(\nMyToc\n,\n \ntext\n)\n\n\n\n\n\n\nBlockParser\n\n\nSometimes, Preprocessors, Treeprocessors, Postprocessors, and Inline Patterns\nare not going to do what you need. Perhaps you want a new type of block type\nthat needs to be integrated into the core parsing. In such a situation, you can\nadd/change/remove functionality of the core \nBlockParser\n. The BlockParser is\ncomposed of a number of Blockprocessors. The BlockParser steps through each\nblock of text (split by blank lines) and passes each block to the appropriate\nBlockprocessor. That Blockprocessor parses the block and adds it to the\nElementTree. The\n\nDefinition Lists\n extension would be a good example of an extension that\nadds/modifies Blockprocessors.\n\n\nA Blockprocessor should inherit from \nmarkdown.blockprocessors.BlockProcessor\n\nand implement both the \ntest\n and \nrun\n methods.\n\n\nThe \ntest\n method is used by BlockParser to identify the type of block.\nTherefore the \ntest\n method must return a Boolean value. If the test returns\n\nTrue\n, then the BlockParser will call that Blockprocessor\ns \nrun\n method.\nIf it returns \nFalse\n, the BlockParser will move on to the next\nBlockprocessor.\n\n\nThe \ntest\n method takes two arguments:\n\n\n\n\n\n\nparent\n: The parent ElementTree Element of the block. This can be useful\n  as the block may need to be treated differently if it is inside a list, for\n  example.\n\n\n\n\n\n\nblock\n: A string of the current block of text. The test may be a\n  simple string method (such as \nblock.startswith(some_text)\n) or a complex\n  regular expression.\n\n\n\n\n\n\nThe \nrun\n method takes two arguments:\n\n\n\n\n\n\nparent\n: A pointer to the parent ElementTree Element of the block. The run\n  method will most likely attach additional nodes to this parent. Note that\n  nothing is returned by the method. The ElementTree object is altered in place.\n\n\n\n\n\n\nblocks\n: A list of all remaining blocks of the document. Your run\n  method must remove (pop) the first block from the list (which it altered in\n  place - not returned) and parse that block. You may find that a block of text\n  legitimately contains multiple block types. Therefore, after processing the\n  first type, your processor can insert the remaining text into the beginning\n  of the \nblocks\n list for future parsing.\n\n\n\n\n\n\nPlease be aware that a single block can span multiple text blocks. For example,\nThe official Markdown syntax rules state that a blank line does not end a\nCode Block. If the next block of text is also indented, then it is part of\nthe previous block. Therefore, the BlockParser was specifically designed to\naddress these types of situations. If you notice the \nCodeBlockProcessor\n,\nin the core, you will note that it checks the last child of the \nparent\n.\nIf the last child is a code block (\npre\ncode\n...\n/code\n/pre\n), then it\nappends that block to the previous code block rather than creating a new\ncode block.\n\n\nEach Blockprocessor has the following utility methods available:\n\n\n\n\n\n\nlastChild(parent)\n:\n\n\nReturns the last child of the given ElementTree Element or \nNone\n if it\nhad no children.\n\n\n\n\n\n\ndetab(text)\n:\n\n\nRemoves one level of indent (four spaces by default) from the front of each\nline of the given text string.\n\n\n\n\n\n\nlooseDetab(text, level)\n:\n\n\nRemoves \nlevel\n levels of indent (defaults to 1) from the front of each line\nof the given text string. However, this methods allows secondary lines to\nnot be indented as does some parts of the Markdown syntax.\n\n\n\n\n\n\nEach Blockprocessor also has a pointer to the containing BlockParser instance at\n\nself.parser\n, which can be used to check or alter the state of the parser.\nThe BlockParser tracks it\ns state in a stack at \nparser.state\n. The state\nstack is an instance of the \nState\n class.\n\n\nState\n is a subclass of \nlist\n and has the additional methods:\n\n\n\n\n\n\nset(state)\n:\n\n\nSet a new state to string \nstate\n. The new state is appended to the end\nof the stack.\n\n\n\n\n\n\nreset()\n:\n\n\nStep back one step in the stack. The last state at the end is removed from\nthe stack.\n\n\n\n\n\n\nisstate(state)\n:\n\n\nTest that the top (current) level of the stack is of the given string\n\nstate\n.\n\n\n\n\n\n\nNote that to ensure that the state stack does not become corrupted, each time a\nstate is set for a block, that state \nmust\n be reset when the parser finishes\nparsing that block.\n\n\nAn instance of the \nBlockParser\n is found at \nMarkdown.parser\n.\n\nBlockParser\n has the following methods:\n\n\n\n\n\n\nparseDocument(lines)\n:\n\n\nGiven a list of lines, an ElementTree object is returned. This should be\npassed an entire document and is the only method the \nMarkdown\n class\ncalls directly.\n\n\n\n\n\n\nparseChunk(parent, text)\n:\n\n\nParses a chunk of markdown text composed of multiple blocks and attaches\nthose blocks to the \nparent\n Element. The \nparent\n is altered in place\nand nothing is returned. Extensions would most likely use this method for\nblock parsing.\n\n\n\n\n\n\nparseBlocks(parent, blocks)\n:\n\n\nParses a list of blocks of text and attaches those blocks to the \nparent\n\nElement. The \nparent\n is altered in place and nothing is returned. This\nmethod will generally only be used internally to recursively parse nested\nblocks of text.\n\n\n\n\n\n\nWhile is is not recommended, an extension could subclass or completely replace\nthe \nBlockParser\n. The new class would have to provide the same public API.\nHowever, be aware that other extensions may expect the core parser provided\nand will not work with such a drastically different parser.\n\n\nWorking with the ElementTree\n\n\nAs mentioned, the Markdown parser converts a source document to an\n\nElementTree\n object before serializing that back to Unicode text.\nMarkdown has provided some helpers to ease that manipulation within the context\nof the Markdown module.\n\n\nFirst, to get access to the ElementTree module import ElementTree from\n\nmarkdown\n rather than importing it directly. This will ensure you are using\nthe same version of ElementTree as markdown. The module is found at\n\nmarkdown.util.etree\n within Markdown.\n\n\nfrom\n \nmarkdown.util\n \nimport\n \netree\n\n\n\n\n\n\nmarkdown.util.etree\n tries to import ElementTree from any known location,\nfirst as a standard library module (from \nxml.etree\n in Python 2.5), then as\na third party package (ElementTree). In each instance, \ncElementTree\n is\ntried first, then ElementTree if the faster C implementation is not\navailable on your system.\n\n\nSometimes you may want text inserted into an element to be parsed by\n\nInline Patterns\n. In such a situation, simply insert the text as you normally\nwould and the text will be automatically run through the Inline Patterns.\nHowever, if you do \nnot\n want some text to be parsed by Inline Patterns,\nthen insert the text as an \nAtomicString\n.\n\n\nfrom\n \nmarkdown.util\n \nimport\n \nAtomicString\n\n\nsome_element\n.\ntext\n \n=\n \nAtomicString\n(\nsome_text\n)\n\n\n\n\n\n\nHere\ns a basic example which creates an HTML table (note that the contents of\nthe second cell (\ntd2\n) will be run through Inline Patterns latter):\n\n\ntable\n \n=\n \netree\n.\nElement\n(\ntable\n)\n\n\ntable\n.\nset\n(\ncellpadding\n,\n \n2\n)\n                      \n# Set cellpadding to 2\n\n\ntr\n \n=\n \netree\n.\nSubElement\n(\ntable\n,\n \ntr\n)\n                 \n# Add child tr to table\n\n\ntd1\n \n=\n \netree\n.\nSubElement\n(\ntr\n,\n \ntd\n)\n                   \n# Add child td1 to tr\n\n\ntd1\n.\ntext\n \n=\n \nmarkdown\n.\nutil\n.\nAtomicString\n(\nCell content\n)\n \n# Add plain text content\n\n\ntd2\n \n=\n \netree\n.\nSubElement\n(\ntr\n,\n \ntd\n)\n                   \n# Add second td to tr\n\n\ntd2\n.\ntext\n \n=\n \n*text* with **inline** formatting.\n    \n# Add markup text\n\n\ntable\n.\ntail\n \n=\n \nText after table\n                    \n# Add text after table\n\n\n\n\n\n\nYou can also manipulate an existing tree. Consider the following example which\nadds a \nclass\n attribute to \na\n elements:\n\n\ndef\n \nset_link_class\n(\nself\n,\n \nelement\n):\n\n    \nfor\n \nchild\n \nin\n \nelement\n:\n\n        \nif\n \nchild\n.\ntag\n \n==\n \na\n:\n\n              \nchild\n.\nset\n(\nclass\n,\n \nmyclass\n)\n \n#set the class attribute\n\n          \nset_link_class\n(\nchild\n)\n \n# run recursively on children\n\n\n\n\n\n\nFor more information about working with ElementTree see the ElementTree\n\nDocumentation\n\n(\nPython Docs\n).\n\n\nIntegrating Your Code Into Markdown\n\n\nOnce you have the various pieces of your extension built, you need to tell\nMarkdown about them and ensure that they are run in the proper sequence.\nMarkdown accepts an \nExtension\n instance for each extension. Therefore, you\nwill need to define a class that extends \nmarkdown.extensions.Extension\n and\nover-rides the \nextendMarkdown\n method. Within this class you will manage\nconfiguration options for your extension and attach the various processors and\npatterns to the Markdown instance.\n\n\nIt is important to note that the order of the various processors and patterns\nmatters. For example, if we replace \nhttp://...\n links with \na\n elements,\nand \nthen\n try to deal with  inline HTML, we will end up with a mess.\nTherefore, the various types of processors and patterns are stored within an\ninstance of the Markdown class in \nOrderedDict\ns. Your \nExtension\n class\nwill need to manipulate those OrderedDicts appropriately. You may insert\ninstances of your processors and patterns into the appropriate location in an\nOrderedDict, remove a built-in instance, or replace a built-in instance with\nyour own.\n\n\nextendMarkdown\n\n\nThe \nextendMarkdown\n method of a \nmarkdown.extensions.Extension\n class\naccepts two arguments:\n\n\n\n\n\n\nmd\n:\n\n\nA pointer to the instance of the Markdown class. You should use this to\naccess the \nOrderedDict\ns of processors and patterns. They are found\nunder the following attributes:\n\n\n\n\nmd.preprocessors\n\n\nmd.inlinePatterns\n\n\nmd.parser.blockprocessors\n\n\nmd.treeprocessors\n\n\nmd.postprocessors\n\n\n\n\nSome other things you may want to access in the markdown instance are:\n\n\n\n\nmd.htmlStash\n\n\nmd.output_formats\n\n\nmd.set_output_format()\n\n\nmd.output_format\n\n\nmd.serializer\n\n\nmd.registerExtension()\n\n\nmd.html_replacement_text\n\n\nmd.tab_length\n\n\nmd.enable_attributes\n\n\nmd.smart_emphasis\n\n\n\n\n\n\n\n\nmd_globals\n:\n\n\nContains all the various global variables within the markdown module.\n\n\n\n\n\n\n\n\nWarning\n\n\nWith access to the above items, theoretically you have the option to\nchange anything through various \nmonkey_patching\n techniques. However,\nyou should be aware that the various undocumented parts of markdown may\nchange without notice and your monkey_patches may break with a new release.\nTherefore, what you really should be doing is inserting processors and\npatterns into the markdown pipeline. Consider yourself warned!\n\n\n\n\nA simple example:\n\n\nfrom\n \nmarkdown.extensions\n \nimport\n \nExtension\n\n\n\nclass\n \nMyExtension\n(\nExtension\n):\n\n    \ndef\n \nextendMarkdown\n(\nself\n,\n \nmd\n,\n \nmd_globals\n):\n\n        \n# Insert instance of \nmypattern\n before \nreferences\n pattern\n\n        \nmd\n.\ninlinePatterns\n.\nadd\n(\nmypattern\n,\n \nMyPattern\n(\nmd\n),\n \nreferences\n)\n\n\n\n\n\n\nOrderedDict\n\n\nAn OrderedDict is a dictionary like object that retains the order of it\ns\nitems. The items are ordered in the order in which they were appended to\nthe OrderedDict. However, an item can also be inserted into the OrderedDict\nin a specific location in relation to the existing items.\n\n\nThink of OrderedDict as a combination of a list and a dictionary as it has\nmethods common to both. For example, you can get and set items using the\n\nod[key] = value\n syntax and the methods \nkeys()\n, \nvalues()\n, and\n\nitems()\n work as expected with the keys, values and items returned in the\nproper order. At the same time, you can use \ninsert()\n, \nappend()\n, and\n\nindex()\n as you would with a list.\n\n\nGenerally speaking, within Markdown extensions you will be using the special\nhelper method \nadd()\n to add additional items to an existing OrderedDict.\n\n\nThe \nadd()\n method accepts three arguments:\n\n\n\n\n\n\nkey\n: A string. The key is used for later reference to the item.\n\n\n\n\n\n\nvalue\n: The object instance stored in this item.\n\n\n\n\n\n\nlocation\n: The items location in relation to other items.\n\n\nNote that the location can consist of a few different values:\n\n\n\n\n\n\nThe special strings \n\"_begin\"\n and \n\"_end\"\n insert that item at the\n  beginning or end of the OrderedDict respectively.\n\n\n\n\n\n\nA less-than sign (\n) followed by an existing key (i.e.:\n  \n\"\nsomekey\"\n) inserts that item before the existing key.\n\n\n\n\n\n\nA greater-than sign (\n) followed by an existing key (i.e.:\n  \n\"\nsomekey\"\n) inserts that item after the existing key.\n\n\n\n\n\n\n\n\n\n\nConsider the following example:\n\n\n \nfrom\n \nmarkdown.odict\n \nimport\n \nOrderedDict\n\n\n \nod\n \n=\n \nOrderedDict\n()\n\n\n \nod\n[\none\n]\n \n=\n  \n1\n           \n# The same as: od.add(\none\n, 1, \n_begin\n)\n\n\n \nod\n[\nthree\n]\n \n=\n \n3\n          \n# The same as: od.add(\nthree\n, 3, \none\n)\n\n\n \nod\n[\nfour\n]\n \n=\n \n4\n           \n# The same as: od.add(\nfour\n, 4, \n_end\n)\n\n\n \nod\n.\nitems\n()\n\n\n[(\none\n, 1), (\nthree\n, 3), (\nfour\n, 4)]\n\n\n\n\n\n\nNote that when building an OrderedDict in order, the extra features of the\n\nadd\n method offer no real value and are not necessary. However, when\nmanipulating an existing OrderedDict, \nadd\n can be very helpful. So let\ns\ninsert another item into the OrderedDict.\n\n\n \nod\n.\nadd\n(\ntwo\n,\n \n2\n,\n \none\n)\n         \n# Insert after \none\n\n\n \nod\n.\nvalues\n()\n\n\n[1, 2, 3, 4]\n\n\n\n\n\n\nNow let\ns insert another item.\n\n\n \nod\n.\nadd\n(\ntwo-point-five\n,\n \n2.5\n,\n \nthree\n)\n \n# Insert before \nthree\n\n\n \nod\n.\nkeys\n()\n\n\n[\none\n, \ntwo\n, \ntwo-point-five\n, \nthree\n, \nfour\n]\n\n\n\n\n\n\nNote that we also could have set the location of \ntwo-point-five\n to be \nafter two\n\n(i.e.: \n'\ntwo'\n). However, it\ns unlikely that you will have control over the\norder in which extensions will be loaded, and this could affect the final\nsorted order of an OrderedDict. For example, suppose an extension adding\n\ntwo-point-five\n in the above examples was loaded before a separate extension\nwhich adds \ntwo\n. You may need to take this into consideration when adding your\nextension components to the various markdown OrderedDicts.\n\n\nOnce an OrderedDict is created, the items are available via key:\n\n\nMyNode\n \n=\n \nod\n[\nsomekey\n]\n\n\n\n\n\n\nTherefore, to delete an existing item:\n\n\ndel\n \nod\n[\nsomekey\n]\n\n\n\n\n\n\nTo change the value of an existing item (leaving location unchanged):\n\n\nod\n[\nsomekey\n]\n \n=\n \nMyNewObject\n()\n\n\n\n\n\n\nTo change the location of an existing item:\n\n\nt\n.\nlink\n(\nsomekey\n,\n \notherkey\n)\n\n\n\n\n\n\nregisterExtension\n\n\nSome extensions may need to have their state reset between multiple runs of the\nMarkdown class. For example, consider the following use of the \nFootnotes\n\nextension:\n\n\nmd\n \n=\n \nmarkdown\n.\nMarkdown\n(\nextensions\n=\n[\nfootnotes\n])\n\n\nhtml1\n \n=\n \nmd\n.\nconvert\n(\ntext_with_footnote\n)\n\n\nmd\n.\nreset\n()\n\n\nhtml2\n \n=\n \nmd\n.\nconvert\n(\ntext_without_footnote\n)\n\n\n\n\n\n\nWithout calling \nreset\n, the footnote definitions from the first document will\nbe inserted into the second document as they are still stored within the class\ninstance. Therefore the \nExtension\n class needs to define a \nreset\n method\nthat will reset the state of the extension (i.e.: \nself.footnotes = {}\n).\nHowever, as many extensions do not have a need for \nreset\n, \nreset\n is only\ncalled on extensions that are registered.\n\n\nTo register an extension, call \nmd.registerExtension\n from within your\n\nextendMarkdown\n method:\n\n\ndef\n \nextendMarkdown\n(\nself\n,\n \nmd\n,\n \nmd_globals\n):\n\n    \nmd\n.\nregisterExtension\n(\nself\n)\n\n    \n# insert processors and patterns here\n\n\n\n\n\n\nThen, each time \nreset\n is called on the Markdown instance, the \nreset\n\nmethod of each registered extension will be called as well. You should also\nnote that \nreset\n will be called on each registered extension after it is\ninitialized the first time. Keep that in mind when over-riding the extension\ns\n\nreset\n method.\n\n\nConfiguration Settings\n\n\nIf an extension uses any parameters that the user may want to change,\nthose parameters should be stored in \nself.config\n of your\n\nmarkdown.extensions.Extension\n class in the following format:\n\n\nclass\n \nMyExtension\n(\nmarkdown\n.\nextensions\n.\nExtension\n):\n\n    \ndef\n \n__init__\n(\nself\n,\n \n**\nkwargs\n):\n\n        \nself\n.\nconfig\n \n=\n \n{\noption1\n \n:\n \n[\nvalue1\n,\n \ndescription1\n],\n\n                       \noption2\n \n:\n \n[\nvalue2\n,\n \ndescription2\n]\n \n}\n\n        \nsuper\n(\nMyExtension\n,\n \nself\n)\n.\n__init__\n(\n**\nkwargs\n)\n\n\n\n\n\n\nWhen implemented this way the configuration parameters can be over-ridden at\nrun time (thus the call to \nsuper\n). For example:\n\n\nmarkdown\n.\nMarkdown\n(\nextensions\n=\n[\nMyExtension\n(\noption1\n=\nother value\n])\n\n\n\n\n\n\nNote that if a keyword is passed in that is not already defined in\n\nself.config\n, then a \nKeyError\n is raised.\n\n\nThe \nmarkdown.extensions.Extension\n class and its subclasses have the\nfollowing methods available to assist in working with configuration settings:\n\n\n\n\n\n\ngetConfig(key [, default])\n:\n\n\nReturns the stored value for the given \nkey\n or \ndefault\n if the \nkey\n\ndoes not exist. If not set, \ndefault\n returns an empty string.\n\n\n\n\n\n\ngetConfigs()\n:\n\n\nReturns a dict of all key/value pairs.\n\n\n\n\n\n\ngetConfigInfo()\n:\n\n\nReturns all configuration descriptions as a list of tuples.\n\n\n\n\n\n\nsetConfig(key, value)\n:\n\n\nSets a configuration setting for \nkey\n with the given \nvalue\n. If \nkey\n is\nunknown, a \nKeyError\n is raised. If the previous value of \nkey\n was\na Boolean value, then \nvalue\n is converted to a Boolean value. If\nthe previous value of \nkey\n is \nNone\n, then \nvalue\n is converted to\na Boolean value except when it is \nNone\n. No conversion takes place\nwhen the previous value of \nkey\n is a string.\n\n\n\n\n\n\nsetConfigs(items)\n:\n\n\nSets multiple configuration settings given a dict of key/value pairs.\n\n\n\n\n\n\nmakeExtension\n\n\nAs noted in the \nlibrary reference\n an instance of an extension can be passed\ndirectly to Markdown. In fact, this is the preferred way to use third-party\nextensions.\n\n\nFor example:\n\n\nimport\n \nmarkdown\n\n\nimport\n \nmyextension\n\n\nmyext\n \n=\n \nmyextension\n.\nMyExtension\n(\noption\n=\nvalue\n)\n\n\nmd\n \n=\n \nmarkdown\n.\nMarkdown\n(\nextensions\n=\n[\nmyext\n])\n\n\n\n\n\n\nMarkdown also accepts \nnamed\n third party extensions for those occasions when it\nis impractical to import an extension directly (from the command line or from\nwithin templates).\n\n\nThe \nname\n of your extension must be a string consisting of the importable path to\nyour module using Python\ns dot notation. Therefore, if you are providing a library\nto your users and would like to include a custom markdown extension within your\nlibrary, that extension would be named \n\"mylib.mdext.myext\"\n where \nmylib/mdext/myext.py\n\ncontains the extension and the \nmylib\n directory is on the PYTHONPATH.\n\n\nThe string can also include the name of the class separated by a colon.\nTherefore, if you were to import the class like this:\n\n\nfrom\n \npath.to.module\n \nimport\n \nSomeExtensionClass\n\n\n\n\n\n\nThen the named extension would comprise this string:\n\n\npath.to.module:SomeExtensionClass\n\n\n\n\n\n\nYou do not need to do anything special to support this feature. As long as your\nextension class is able to be imported, a user can include it with the above syntax.\n\n\nThe above two methods are especially useful if you need to implement a large\nnumber of extensions with more than one residing in a module. However, if you do\nnot want to require that your users include the class name in their string, you\nmust define only one extension per module and that module must contain a\nmodule-level function called \nmakeExtension\n that accepts \n**kwargs\n and returns\nan extension instance.\n\n\nFor example:\n\n\nclass\n \nMyExtension\n(\nmarkdown\n.\nextensions\n.\nExtension\n)\n\n    \n# Define extension here...\n\n\n\ndef\n \nmakeExtension\n(\n**\nkwargs\n):\n\n    \nreturn\n \nMyExtension\n(\n**\nkwargs\n)\n\n\n\n\n\n\nWhen Markdown is passed the \nname\n of your extension as a dot notation string,\nit will import the module and call the \nmakeExtension\n function to initiate your\nextension.", 
            "title": "Extension API"
        }, 
        {
            "location": "/extensions/api/#writing-extensions-for-python-markdown", 
            "text": "Python-Markdown includes an API for extension writers to plug their own\ncustom functionality and/or syntax into the parser. There are Preprocessors\nwhich allow you to alter the source before it is passed to the parser,\ninline patterns which allow you to add, remove or override the syntax of\nany inline elements, and Postprocessors which allow munging of the\noutput of the parser before it is returned. If you really want to dive in,\nthere are also Blockprocessors which are part of the core BlockParser.  As the parser builds an  ElementTree  object which is later rendered\nas Unicode text, there are also some helpers provided to ease manipulation of\nthe tree. Each part of the API is discussed in its respective section below.\nAdditionally, reading the source of some  Available Extensions  may be\nhelpful. For example, the  Footnotes  extension uses most of the features\ndocumented here.", 
            "title": "Writing Extensions for Python-Markdown"
        }, 
        {
            "location": "/extensions/api/#preprocessors", 
            "text": "Preprocessors munge the source text before it is passed into the Markdown\ncore. This is an excellent place to clean up bad syntax, extract things the\nparser may otherwise choke on and perhaps even store it for later retrieval.  Preprocessors should inherit from  markdown.preprocessors.Preprocessor  and\nimplement a  run  method with one argument  lines . The  run  method of\neach Preprocessor will be passed the entire source text as a list of Unicode\nstrings. Each string will contain one line of text. The  run  method should\nreturn either that list, or an altered list of Unicode strings.  A pseudo example:  from   markdown.preprocessors   import   Preprocessor  class   MyPreprocessor ( Preprocessor ): \n     def   run ( self ,   lines ): \n         new_lines   =   [] \n         for   line   in   lines : \n             m   =   MYREGEX . match ( line ) \n             if   m : \n                 # do stuff \n             else : \n                 new_lines . append ( line ) \n         return   new_lines", 
            "title": "Preprocessors"
        }, 
        {
            "location": "/extensions/api/#inlinepatterns", 
            "text": "Inline Patterns implement the inline HTML element syntax for Markdown such as *emphasis*  or  [links](http://example.com) . Pattern objects should be\ninstances of classes that inherit from  markdown.inlinepatterns.Pattern  or\none of its children. Each pattern object uses a single regular expression and\nmust have the following methods:    getCompiledRegExp() :  Returns a compiled regular expression.    handleMatch(m) :  Accepts a match object and returns an ElementTree element of a plain\nUnicode string.    Also, Inline Patterns can define the property  ANCESTOR_EXCLUDES  with either\na list or tuple of undesirable ancestors. The pattern should not match if it\nwould cause the content to be a descendant of one of the defined tag names.  Note that any regular expression returned by  getCompiledRegExp  must capture\nthe whole block. Therefore, they should all start with  r'^(.*?)'  and end\nwith  r'(.*?)!' . When using the default  getCompiledRegExp()  method\nprovided in the  Pattern  you can pass in a regular expression without that\nand  getCompiledRegExp  will wrap your expression for you and set the re.DOTALL  and  re.UNICODE  flags. This means that the first group of your\nmatch will be  m.group(2)  as  m.group(1)  will match everything before the\npattern.  For an example, consider this simplified emphasis pattern:  from   markdown.inlinepatterns   import   Pattern  from   markdown.util   import   etree  class   EmphasisPattern ( Pattern ): \n     def   handleMatch ( self ,   m ): \n         el   =   etree . Element ( em ) \n         el . text   =   m . group ( 3 ) \n         return   el   As discussed in  Integrating Your Code Into Markdown , an instance of this\nclass will need to be provided to Markdown. That instance would be created\nlike so:  # an oversimplified regex  MYPATTERN   =   r \\*([^*]+)\\*  # pass in pattern and create instance  emphasis   =   EmphasisPattern ( MYPATTERN )   Actually it would not be necessary to create that pattern (and not just because\na more sophisticated emphasis pattern already exists in Markdown). The fact is,\nthat example pattern is not very DRY. A pattern for  **strong**  text would\nbe almost identical, with the exception that it would create a  strong  element.\nTherefore, Markdown provides a number of generic pattern classes that can\nprovide some common functionality. For example, both emphasis and strong are\nimplemented with separate instances of the  SimpleTagPattern  listed below.\nFeel free to use or extend any of the Pattern classes found at markdown.inlinepatterns .", 
            "title": "Inline Patterns"
        }, 
        {
            "location": "/extensions/api/#generic-pattern-classes", 
            "text": "SimpleTextPattern(pattern) :  Returns simple text of  group(2)  of a  pattern .    SimpleTagPattern(pattern, tag) :  Returns an element of type  tag  with a text attribute of  group(3) \nof a  pattern .  tag  should be a string of a HTML element (i.e.:  em ).    SubstituteTagPattern(pattern, tag) :  Returns an element of type  tag  with no children or text (i.e.:  br ).    There may be other Pattern classes in the Markdown source that you could extend\nor use as well. Read through the source and see if there is anything you can\nuse. You might even get a few ideas for different approaches to your specific\nsituation.", 
            "title": "Generic Pattern Classes"
        }, 
        {
            "location": "/extensions/api/#treeprocessors", 
            "text": "Treeprocessors manipulate an ElementTree object after it has passed through the\ncore BlockParser. This is where additional manipulation of the tree takes\nplace. Additionally, the InlineProcessor is a Treeprocessor which steps through\nthe tree and runs the Inline Patterns on the text of each Element in the tree.  A Treeprocessor should inherit from  markdown.treeprocessors.Treeprocessor ,\nover-ride the  run  method which takes one argument  root  (an ElementTree\nobject) and either modifies that root element and returns  None  or returns a\nnew ElementTree object.  A pseudo example:  from   markdown.treeprocessors   import   Treeprocessor  class   MyTreeprocessor ( Treeprocessor ): \n     def   run ( self ,   root ): \n         root . text   =   modified content   Note that Python class methods return  None  by default when no  return \nstatement is defined.  Additionally all Python variables refer to objects by\nreference.  Therefore, the above  run  method modifies the  root  element\nin place and returns  None . The changes made to the  root  element and its\nchildren are retained.  Some may be inclined to return the modified  root  element. While that would\nwork, it would cause a copy of the entire ElementTree to be generated each\ntime the Treeprocessor is run. Therefore, it is generally expected that\nthe  run  method would only return  None  or a new ElementTree object.  For specifics on manipulating the ElementTree, see Working with the ElementTree  below.", 
            "title": "Treeprocessors"
        }, 
        {
            "location": "/extensions/api/#postprocessors", 
            "text": "Postprocessors manipulate the document after the ElementTree has been\nserialized into a string. Postprocessors should be used to work with the\ntext just before output.  A Postprocessor should inherit from  markdown.postprocessors.Postprocessor \nand over-ride the  run  method which takes one argument  text  and returns\na Unicode string.  Postprocessors are run after the ElementTree has been serialized back into\nUnicode text.  For example, this may be an appropriate place to add a table of\ncontents to a document:  from   markdown.postprocessors   import   Postprocessor  class   TocPostprocessor ( Postprocessor ): \n     def   run ( self ,   text ): \n         return   MYMARKERRE . sub ( MyToc ,   text )", 
            "title": "Postprocessors"
        }, 
        {
            "location": "/extensions/api/#blockparser", 
            "text": "Sometimes, Preprocessors, Treeprocessors, Postprocessors, and Inline Patterns\nare not going to do what you need. Perhaps you want a new type of block type\nthat needs to be integrated into the core parsing. In such a situation, you can\nadd/change/remove functionality of the core  BlockParser . The BlockParser is\ncomposed of a number of Blockprocessors. The BlockParser steps through each\nblock of text (split by blank lines) and passes each block to the appropriate\nBlockprocessor. That Blockprocessor parses the block and adds it to the\nElementTree. The Definition Lists  extension would be a good example of an extension that\nadds/modifies Blockprocessors.  A Blockprocessor should inherit from  markdown.blockprocessors.BlockProcessor \nand implement both the  test  and  run  methods.  The  test  method is used by BlockParser to identify the type of block.\nTherefore the  test  method must return a Boolean value. If the test returns True , then the BlockParser will call that Blockprocessor s  run  method.\nIf it returns  False , the BlockParser will move on to the next\nBlockprocessor.  The  test  method takes two arguments:    parent : The parent ElementTree Element of the block. This can be useful\n  as the block may need to be treated differently if it is inside a list, for\n  example.    block : A string of the current block of text. The test may be a\n  simple string method (such as  block.startswith(some_text) ) or a complex\n  regular expression.    The  run  method takes two arguments:    parent : A pointer to the parent ElementTree Element of the block. The run\n  method will most likely attach additional nodes to this parent. Note that\n  nothing is returned by the method. The ElementTree object is altered in place.    blocks : A list of all remaining blocks of the document. Your run\n  method must remove (pop) the first block from the list (which it altered in\n  place - not returned) and parse that block. You may find that a block of text\n  legitimately contains multiple block types. Therefore, after processing the\n  first type, your processor can insert the remaining text into the beginning\n  of the  blocks  list for future parsing.    Please be aware that a single block can span multiple text blocks. For example,\nThe official Markdown syntax rules state that a blank line does not end a\nCode Block. If the next block of text is also indented, then it is part of\nthe previous block. Therefore, the BlockParser was specifically designed to\naddress these types of situations. If you notice the  CodeBlockProcessor ,\nin the core, you will note that it checks the last child of the  parent .\nIf the last child is a code block ( pre code ... /code /pre ), then it\nappends that block to the previous code block rather than creating a new\ncode block.  Each Blockprocessor has the following utility methods available:    lastChild(parent) :  Returns the last child of the given ElementTree Element or  None  if it\nhad no children.    detab(text) :  Removes one level of indent (four spaces by default) from the front of each\nline of the given text string.    looseDetab(text, level) :  Removes  level  levels of indent (defaults to 1) from the front of each line\nof the given text string. However, this methods allows secondary lines to\nnot be indented as does some parts of the Markdown syntax.    Each Blockprocessor also has a pointer to the containing BlockParser instance at self.parser , which can be used to check or alter the state of the parser.\nThe BlockParser tracks it s state in a stack at  parser.state . The state\nstack is an instance of the  State  class.  State  is a subclass of  list  and has the additional methods:    set(state) :  Set a new state to string  state . The new state is appended to the end\nof the stack.    reset() :  Step back one step in the stack. The last state at the end is removed from\nthe stack.    isstate(state) :  Test that the top (current) level of the stack is of the given string state .    Note that to ensure that the state stack does not become corrupted, each time a\nstate is set for a block, that state  must  be reset when the parser finishes\nparsing that block.  An instance of the  BlockParser  is found at  Markdown.parser . BlockParser  has the following methods:    parseDocument(lines) :  Given a list of lines, an ElementTree object is returned. This should be\npassed an entire document and is the only method the  Markdown  class\ncalls directly.    parseChunk(parent, text) :  Parses a chunk of markdown text composed of multiple blocks and attaches\nthose blocks to the  parent  Element. The  parent  is altered in place\nand nothing is returned. Extensions would most likely use this method for\nblock parsing.    parseBlocks(parent, blocks) :  Parses a list of blocks of text and attaches those blocks to the  parent \nElement. The  parent  is altered in place and nothing is returned. This\nmethod will generally only be used internally to recursively parse nested\nblocks of text.    While is is not recommended, an extension could subclass or completely replace\nthe  BlockParser . The new class would have to provide the same public API.\nHowever, be aware that other extensions may expect the core parser provided\nand will not work with such a drastically different parser.", 
            "title": "BlockParser"
        }, 
        {
            "location": "/extensions/api/#working_with_et", 
            "text": "As mentioned, the Markdown parser converts a source document to an ElementTree  object before serializing that back to Unicode text.\nMarkdown has provided some helpers to ease that manipulation within the context\nof the Markdown module.  First, to get access to the ElementTree module import ElementTree from markdown  rather than importing it directly. This will ensure you are using\nthe same version of ElementTree as markdown. The module is found at markdown.util.etree  within Markdown.  from   markdown.util   import   etree   markdown.util.etree  tries to import ElementTree from any known location,\nfirst as a standard library module (from  xml.etree  in Python 2.5), then as\na third party package (ElementTree). In each instance,  cElementTree  is\ntried first, then ElementTree if the faster C implementation is not\navailable on your system.  Sometimes you may want text inserted into an element to be parsed by Inline Patterns . In such a situation, simply insert the text as you normally\nwould and the text will be automatically run through the Inline Patterns.\nHowever, if you do  not  want some text to be parsed by Inline Patterns,\nthen insert the text as an  AtomicString .  from   markdown.util   import   AtomicString  some_element . text   =   AtomicString ( some_text )   Here s a basic example which creates an HTML table (note that the contents of\nthe second cell ( td2 ) will be run through Inline Patterns latter):  table   =   etree . Element ( table )  table . set ( cellpadding ,   2 )                        # Set cellpadding to 2  tr   =   etree . SubElement ( table ,   tr )                   # Add child tr to table  td1   =   etree . SubElement ( tr ,   td )                     # Add child td1 to tr  td1 . text   =   markdown . util . AtomicString ( Cell content )   # Add plain text content  td2   =   etree . SubElement ( tr ,   td )                     # Add second td to tr  td2 . text   =   *text* with **inline** formatting.      # Add markup text  table . tail   =   Text after table                      # Add text after table   You can also manipulate an existing tree. Consider the following example which\nadds a  class  attribute to  a  elements:  def   set_link_class ( self ,   element ): \n     for   child   in   element : \n         if   child . tag   ==   a : \n               child . set ( class ,   myclass )   #set the class attribute \n           set_link_class ( child )   # run recursively on children   For more information about working with ElementTree see the ElementTree Documentation \n( Python Docs ).", 
            "title": "Working with the ElementTree"
        }, 
        {
            "location": "/extensions/api/#integrating_into_markdown", 
            "text": "Once you have the various pieces of your extension built, you need to tell\nMarkdown about them and ensure that they are run in the proper sequence.\nMarkdown accepts an  Extension  instance for each extension. Therefore, you\nwill need to define a class that extends  markdown.extensions.Extension  and\nover-rides the  extendMarkdown  method. Within this class you will manage\nconfiguration options for your extension and attach the various processors and\npatterns to the Markdown instance.  It is important to note that the order of the various processors and patterns\nmatters. For example, if we replace  http://...  links with  a  elements,\nand  then  try to deal with  inline HTML, we will end up with a mess.\nTherefore, the various types of processors and patterns are stored within an\ninstance of the Markdown class in  OrderedDict s. Your  Extension  class\nwill need to manipulate those OrderedDicts appropriately. You may insert\ninstances of your processors and patterns into the appropriate location in an\nOrderedDict, remove a built-in instance, or replace a built-in instance with\nyour own.", 
            "title": "Integrating Your Code Into Markdown"
        }, 
        {
            "location": "/extensions/api/#extendmarkdown", 
            "text": "The  extendMarkdown  method of a  markdown.extensions.Extension  class\naccepts two arguments:    md :  A pointer to the instance of the Markdown class. You should use this to\naccess the  OrderedDict s of processors and patterns. They are found\nunder the following attributes:   md.preprocessors  md.inlinePatterns  md.parser.blockprocessors  md.treeprocessors  md.postprocessors   Some other things you may want to access in the markdown instance are:   md.htmlStash  md.output_formats  md.set_output_format()  md.output_format  md.serializer  md.registerExtension()  md.html_replacement_text  md.tab_length  md.enable_attributes  md.smart_emphasis     md_globals :  Contains all the various global variables within the markdown module.     Warning  With access to the above items, theoretically you have the option to\nchange anything through various  monkey_patching  techniques. However,\nyou should be aware that the various undocumented parts of markdown may\nchange without notice and your monkey_patches may break with a new release.\nTherefore, what you really should be doing is inserting processors and\npatterns into the markdown pipeline. Consider yourself warned!   A simple example:  from   markdown.extensions   import   Extension  class   MyExtension ( Extension ): \n     def   extendMarkdown ( self ,   md ,   md_globals ): \n         # Insert instance of  mypattern  before  references  pattern \n         md . inlinePatterns . add ( mypattern ,   MyPattern ( md ),   references )", 
            "title": "extendMarkdown"
        }, 
        {
            "location": "/extensions/api/#ordereddict", 
            "text": "An OrderedDict is a dictionary like object that retains the order of it s\nitems. The items are ordered in the order in which they were appended to\nthe OrderedDict. However, an item can also be inserted into the OrderedDict\nin a specific location in relation to the existing items.  Think of OrderedDict as a combination of a list and a dictionary as it has\nmethods common to both. For example, you can get and set items using the od[key] = value  syntax and the methods  keys() ,  values() , and items()  work as expected with the keys, values and items returned in the\nproper order. At the same time, you can use  insert() ,  append() , and index()  as you would with a list.  Generally speaking, within Markdown extensions you will be using the special\nhelper method  add()  to add additional items to an existing OrderedDict.  The  add()  method accepts three arguments:    key : A string. The key is used for later reference to the item.    value : The object instance stored in this item.    location : The items location in relation to other items.  Note that the location can consist of a few different values:    The special strings  \"_begin\"  and  \"_end\"  insert that item at the\n  beginning or end of the OrderedDict respectively.    A less-than sign ( ) followed by an existing key (i.e.:\n   \" somekey\" ) inserts that item before the existing key.    A greater-than sign ( ) followed by an existing key (i.e.:\n   \" somekey\" ) inserts that item after the existing key.      Consider the following example:    from   markdown.odict   import   OrderedDict    od   =   OrderedDict ()    od [ one ]   =    1             # The same as: od.add( one , 1,  _begin )    od [ three ]   =   3            # The same as: od.add( three , 3,  one )    od [ four ]   =   4             # The same as: od.add( four , 4,  _end )    od . items ()  [( one , 1), ( three , 3), ( four , 4)]   Note that when building an OrderedDict in order, the extra features of the add  method offer no real value and are not necessary. However, when\nmanipulating an existing OrderedDict,  add  can be very helpful. So let s\ninsert another item into the OrderedDict.    od . add ( two ,   2 ,   one )           # Insert after  one    od . values ()  [1, 2, 3, 4]   Now let s insert another item.    od . add ( two-point-five ,   2.5 ,   three )   # Insert before  three    od . keys ()  [ one ,  two ,  two-point-five ,  three ,  four ]   Note that we also could have set the location of  two-point-five  to be  after two \n(i.e.:  ' two' ). However, it s unlikely that you will have control over the\norder in which extensions will be loaded, and this could affect the final\nsorted order of an OrderedDict. For example, suppose an extension adding two-point-five  in the above examples was loaded before a separate extension\nwhich adds  two . You may need to take this into consideration when adding your\nextension components to the various markdown OrderedDicts.  Once an OrderedDict is created, the items are available via key:  MyNode   =   od [ somekey ]   Therefore, to delete an existing item:  del   od [ somekey ]   To change the value of an existing item (leaving location unchanged):  od [ somekey ]   =   MyNewObject ()   To change the location of an existing item:  t . link ( somekey ,   otherkey )", 
            "title": "OrderedDict"
        }, 
        {
            "location": "/extensions/api/#registerextension", 
            "text": "Some extensions may need to have their state reset between multiple runs of the\nMarkdown class. For example, consider the following use of the  Footnotes \nextension:  md   =   markdown . Markdown ( extensions = [ footnotes ])  html1   =   md . convert ( text_with_footnote )  md . reset ()  html2   =   md . convert ( text_without_footnote )   Without calling  reset , the footnote definitions from the first document will\nbe inserted into the second document as they are still stored within the class\ninstance. Therefore the  Extension  class needs to define a  reset  method\nthat will reset the state of the extension (i.e.:  self.footnotes = {} ).\nHowever, as many extensions do not have a need for  reset ,  reset  is only\ncalled on extensions that are registered.  To register an extension, call  md.registerExtension  from within your extendMarkdown  method:  def   extendMarkdown ( self ,   md ,   md_globals ): \n     md . registerExtension ( self ) \n     # insert processors and patterns here   Then, each time  reset  is called on the Markdown instance, the  reset \nmethod of each registered extension will be called as well. You should also\nnote that  reset  will be called on each registered extension after it is\ninitialized the first time. Keep that in mind when over-riding the extension s reset  method.", 
            "title": "registerExtension"
        }, 
        {
            "location": "/extensions/api/#configsettings", 
            "text": "If an extension uses any parameters that the user may want to change,\nthose parameters should be stored in  self.config  of your markdown.extensions.Extension  class in the following format:  class   MyExtension ( markdown . extensions . Extension ): \n     def   __init__ ( self ,   ** kwargs ): \n         self . config   =   { option1   :   [ value1 ,   description1 ], \n                        option2   :   [ value2 ,   description2 ]   } \n         super ( MyExtension ,   self ) . __init__ ( ** kwargs )   When implemented this way the configuration parameters can be over-ridden at\nrun time (thus the call to  super ). For example:  markdown . Markdown ( extensions = [ MyExtension ( option1 = other value ])   Note that if a keyword is passed in that is not already defined in self.config , then a  KeyError  is raised.  The  markdown.extensions.Extension  class and its subclasses have the\nfollowing methods available to assist in working with configuration settings:    getConfig(key [, default]) :  Returns the stored value for the given  key  or  default  if the  key \ndoes not exist. If not set,  default  returns an empty string.    getConfigs() :  Returns a dict of all key/value pairs.    getConfigInfo() :  Returns all configuration descriptions as a list of tuples.    setConfig(key, value) :  Sets a configuration setting for  key  with the given  value . If  key  is\nunknown, a  KeyError  is raised. If the previous value of  key  was\na Boolean value, then  value  is converted to a Boolean value. If\nthe previous value of  key  is  None , then  value  is converted to\na Boolean value except when it is  None . No conversion takes place\nwhen the previous value of  key  is a string.    setConfigs(items) :  Sets multiple configuration settings given a dict of key/value pairs.", 
            "title": "Configuration Settings"
        }, 
        {
            "location": "/extensions/api/#makeextension", 
            "text": "As noted in the  library reference  an instance of an extension can be passed\ndirectly to Markdown. In fact, this is the preferred way to use third-party\nextensions.  For example:  import   markdown  import   myextension  myext   =   myextension . MyExtension ( option = value )  md   =   markdown . Markdown ( extensions = [ myext ])   Markdown also accepts  named  third party extensions for those occasions when it\nis impractical to import an extension directly (from the command line or from\nwithin templates).  The  name  of your extension must be a string consisting of the importable path to\nyour module using Python s dot notation. Therefore, if you are providing a library\nto your users and would like to include a custom markdown extension within your\nlibrary, that extension would be named  \"mylib.mdext.myext\"  where  mylib/mdext/myext.py \ncontains the extension and the  mylib  directory is on the PYTHONPATH.  The string can also include the name of the class separated by a colon.\nTherefore, if you were to import the class like this:  from   path.to.module   import   SomeExtensionClass   Then the named extension would comprise this string:  path.to.module:SomeExtensionClass   You do not need to do anything special to support this feature. As long as your\nextension class is able to be imported, a user can include it with the above syntax.  The above two methods are especially useful if you need to implement a large\nnumber of extensions with more than one residing in a module. However, if you do\nnot want to require that your users include the class name in their string, you\nmust define only one extension per module and that module must contain a\nmodule-level function called  makeExtension  that accepts  **kwargs  and returns\nan extension instance.  For example:  class   MyExtension ( markdown . extensions . Extension ) \n     # Define extension here...  def   makeExtension ( ** kwargs ): \n     return   MyExtension ( ** kwargs )   When Markdown is passed the  name  of your extension as a dot notation string,\nit will import the module and call the  makeExtension  function to initiate your\nextension.", 
            "title": "makeExtension"
        }, 
        {
            "location": "/test_suite/", 
            "text": "Test Suite\n\n\nPython-Markdown comes with a test suite which uses the \nNose\n testing\nframework and \nYAML\n. The test suite primarily serves to ensure that new bugs\nare not introduced as existing bugs are patched or new features are added. It\nalso allows Python-Markdown to be tested with the tests from other\nimplementations such as John Gruber\ns \nPerl\n implementation or Michel\nFortin\ns \nPHP\n implementation.\n\n\nThe test suite can be run by calling the \nrun_tests.py\n command at the root of\nthe distribution tarball or by calling the \nnosetests\n command directly. Either\nway, Nose will need to be installed on your system first (run \neasy_install\nnose\n). Any standard nosetests configuration options can be passed in on the command\nline (i.e.: verbosity level or use of a plugin like coverage).\n\n\nAdditionally, a nicely formatted HTML report of all output is written to a\ntemporary file in \ntest-output.html\n. Open the file in a browser to view\nthe report.\n\n\nA \ntox.ini\n file is also provided, so \ntox\n can be used to automatically create\nvirtual environments, install all testing dependencies and run the tests on\neach supported Python version. See the wiki for instructions on\n\nsetting up a testing environment\n to use tox.\n\n\nThe test suite contains two kinds of tests: Markdown Syntax Tests and Unit\nTests.\n\n\nMarkdown Syntax Tests\n\n\nThe Syntax Tests are in the various directories contained within the \ntests\n\ndirectory of the packaged tarball. Each test consists of a matching pair of text\nand HTML files. The text file contains a snippet of Markdown source text\nformatted for a specific syntax feature and the HTML file contains the expected\nHTML output of that snippet. When the test suite is run, each text file is run\nthrough Markdown and the output is compared with the HTML file as a separate\nUnit Test.\n\n\nIn fact, this is the primary reason for using Nose, it gives us an easy way to\ntreat each of these tests as a separate unit test which is reported on\nseparately. Additionally, with the help of a couple custom Nose plugins which\nare included with the Markdown Test Suite, we are able to get back an easy to\nread diff of the actual output compared to expected output when a test fails.\n\n\nHere is some sample output with a test that is failing because of some\ninsignificant white space differences:\n\n\n$ ./run-tests.py\n..........................................................M...........\n............................SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\nSSSSSSSSSS.................S..........................................\n.........\n======================================================================\nMarkdownSyntaxError: TestSyntax: \nmisc/lists3\n\n----------------------------------------------------------------------\nMarkdownSyntaxError: Output from \n/home/waylan/code/python-markdown/te\nsts/misc/lists3.txt\n failed to match expected output.\n\n--- /home/waylan/code/python-markdown/tests/misc/lists3.html\n+++ actual_output.html\n@@ -1,5 +1,5 @@\n \nul\n\n \nli\nblah blah blah\n-sdf asdf asdf asdf asdf\n-asda asdf asdfasd\n/li\n\n+    sdf asdf asdf asdf asdf\n+    asda asdf asdfasd\n/li\n\n \n/ul\n\n\n----------------------------------------------------------------------\nRan 219 tests in 7.698s\n\nFAILED (MarkdownSyntaxError=1, SKIP=53)\n\n\n\n\n\nNote that 219 tests were run, one of which failed with a \nMarkdownSyntaxError\n.\nOnly Markdown Syntax Tests should fail with a \nMarkdownSyntaxError\n. Nose then\nformats the error reports for \nMarkdownSyntaxError\ns so that they only include\nuseful information. Namely the text file which failed and a unified diff showing\nthe failure. Without the plugin, you would also get a useless traceback showing\nhow the code stepped through the test framework, but nothing about how Markdown\nactually ran.\n\n\nIf, on the other hand, a Syntax Test failed because some other exception gets\nraised by either Markdown or the test suite, then that would be reported as per\na normal unit test failure with the appropriate traceback for debugging\npurposes.\n\n\nSyntax Test Configuration Settings\n\n\nThe other thing to note about the above example is that 53 tests were skipped.\nThose tests have been explicitly configured to be skipped as they are primarily\ntests from either PHP or Perl which are known to fail for various reasons. In\nfact, a number of different configuration settings can be set for any specific\ntest.\n\n\nEach Syntax Test directory contains a \ntest.cfg\n file in the \nYAML\n format. The\nfile may contain a separate section for each text file named exactly as the file\nis named minus the file extension (i.e.; the section for a test in \nfoo.txt\n\nwould be \nfoo\n). All settings are optional. Default settings for the entire\ndirectory can be set under the \nDEFAULT\n section (must be all caps). Any\nsettings under a specific file section will override anything in the\n\nDEFAULT\n section for that specific test only.\n\n\nBelow are the configuration options available and the defaults used when they\nare not explicitly set.\n\n\n\n\nnormalize\n: Switches white space normalization of the test output on or off.\n  Defaults to \nFalse\n (off). Note: This requires that \nPyTidyLib\n be installed\n  on the system. Otherwise the test will be skipped, regardless of any other\n  settings.\n\n\nskip\n: Switches skipping of the test on and off. Defaults to \nFalse\n (off).\n\n\ninput_ext\n: Extension of input file. Defaults to \n.txt\n. Useful for tests\n  from other implementations.\n\n\noutput_ext\n: Extension of output file. Defaults to \n.html\n. Useful for tests\n  from other implementations.\n\n\nAny keyword argument accepted by the Markdown class. If not set, Markdown\ns\n  defaults are used.\n\n\n\n\nUnit Tests\n\n\nUnit Tests are used as regression tests for Python-Markdown\ns API.\nAll Unit Tests shipped with Python-Markdown are standard Python Unit Tests and\nare all contained in \ntests/test_apis.py\n and \ntests/test_extensions.py\n.\nStandard discovery methods are used to find and run the tests. Therefore, when\nwriting new tests, those standards and naming conventions should be followed.", 
            "title": "Test Suite"
        }, 
        {
            "location": "/test_suite/#test-suite", 
            "text": "Python-Markdown comes with a test suite which uses the  Nose  testing\nframework and  YAML . The test suite primarily serves to ensure that new bugs\nare not introduced as existing bugs are patched or new features are added. It\nalso allows Python-Markdown to be tested with the tests from other\nimplementations such as John Gruber s  Perl  implementation or Michel\nFortin s  PHP  implementation.  The test suite can be run by calling the  run_tests.py  command at the root of\nthe distribution tarball or by calling the  nosetests  command directly. Either\nway, Nose will need to be installed on your system first (run  easy_install\nnose ). Any standard nosetests configuration options can be passed in on the command\nline (i.e.: verbosity level or use of a plugin like coverage).  Additionally, a nicely formatted HTML report of all output is written to a\ntemporary file in  test-output.html . Open the file in a browser to view\nthe report.  A  tox.ini  file is also provided, so  tox  can be used to automatically create\nvirtual environments, install all testing dependencies and run the tests on\neach supported Python version. See the wiki for instructions on setting up a testing environment  to use tox.  The test suite contains two kinds of tests: Markdown Syntax Tests and Unit\nTests.", 
            "title": "Test Suite"
        }, 
        {
            "location": "/test_suite/#markdown-syntax-tests", 
            "text": "The Syntax Tests are in the various directories contained within the  tests \ndirectory of the packaged tarball. Each test consists of a matching pair of text\nand HTML files. The text file contains a snippet of Markdown source text\nformatted for a specific syntax feature and the HTML file contains the expected\nHTML output of that snippet. When the test suite is run, each text file is run\nthrough Markdown and the output is compared with the HTML file as a separate\nUnit Test.  In fact, this is the primary reason for using Nose, it gives us an easy way to\ntreat each of these tests as a separate unit test which is reported on\nseparately. Additionally, with the help of a couple custom Nose plugins which\nare included with the Markdown Test Suite, we are able to get back an easy to\nread diff of the actual output compared to expected output when a test fails.  Here is some sample output with a test that is failing because of some\ninsignificant white space differences:  $ ./run-tests.py\n..........................................................M...........\n............................SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\nSSSSSSSSSS.................S..........................................\n.........\n======================================================================\nMarkdownSyntaxError: TestSyntax:  misc/lists3 \n----------------------------------------------------------------------\nMarkdownSyntaxError: Output from  /home/waylan/code/python-markdown/te\nsts/misc/lists3.txt  failed to match expected output.\n\n--- /home/waylan/code/python-markdown/tests/misc/lists3.html\n+++ actual_output.html\n@@ -1,5 +1,5 @@\n  ul \n  li blah blah blah\n-sdf asdf asdf asdf asdf\n-asda asdf asdfasd /li \n+    sdf asdf asdf asdf asdf\n+    asda asdf asdfasd /li \n  /ul \n\n----------------------------------------------------------------------\nRan 219 tests in 7.698s\n\nFAILED (MarkdownSyntaxError=1, SKIP=53)  Note that 219 tests were run, one of which failed with a  MarkdownSyntaxError .\nOnly Markdown Syntax Tests should fail with a  MarkdownSyntaxError . Nose then\nformats the error reports for  MarkdownSyntaxError s so that they only include\nuseful information. Namely the text file which failed and a unified diff showing\nthe failure. Without the plugin, you would also get a useless traceback showing\nhow the code stepped through the test framework, but nothing about how Markdown\nactually ran.  If, on the other hand, a Syntax Test failed because some other exception gets\nraised by either Markdown or the test suite, then that would be reported as per\na normal unit test failure with the appropriate traceback for debugging\npurposes.", 
            "title": "Markdown Syntax Tests"
        }, 
        {
            "location": "/test_suite/#syntax-test-configuration-settings", 
            "text": "The other thing to note about the above example is that 53 tests were skipped.\nThose tests have been explicitly configured to be skipped as they are primarily\ntests from either PHP or Perl which are known to fail for various reasons. In\nfact, a number of different configuration settings can be set for any specific\ntest.  Each Syntax Test directory contains a  test.cfg  file in the  YAML  format. The\nfile may contain a separate section for each text file named exactly as the file\nis named minus the file extension (i.e.; the section for a test in  foo.txt \nwould be  foo ). All settings are optional. Default settings for the entire\ndirectory can be set under the  DEFAULT  section (must be all caps). Any\nsettings under a specific file section will override anything in the DEFAULT  section for that specific test only.  Below are the configuration options available and the defaults used when they\nare not explicitly set.   normalize : Switches white space normalization of the test output on or off.\n  Defaults to  False  (off). Note: This requires that  PyTidyLib  be installed\n  on the system. Otherwise the test will be skipped, regardless of any other\n  settings.  skip : Switches skipping of the test on and off. Defaults to  False  (off).  input_ext : Extension of input file. Defaults to  .txt . Useful for tests\n  from other implementations.  output_ext : Extension of output file. Defaults to  .html . Useful for tests\n  from other implementations.  Any keyword argument accepted by the Markdown class. If not set, Markdown s\n  defaults are used.", 
            "title": "Syntax Test Configuration Settings"
        }, 
        {
            "location": "/test_suite/#unit-tests", 
            "text": "Unit Tests are used as regression tests for Python-Markdown s API.\nAll Unit Tests shipped with Python-Markdown are standard Python Unit Tests and\nare all contained in  tests/test_apis.py  and  tests/test_extensions.py .\nStandard discovery methods are used to find and run the tests. Therefore, when\nwriting new tests, those standards and naming conventions should be followed.", 
            "title": "Unit Tests"
        }, 
        {
            "location": "/change_log/", 
            "text": "Python-Markdown Change Log\n\n\nAug 17, 2017: Released version 2.6.9 (a bug-fix release).\n\n\nJan 25, 2017: Released version 2.6.8 (a bug-fix release).\n\n\nSept 23, 2016: Released version 2.6.7 (a bug-fix release).\n\n\nMar 20, 2016: Released version 2.6.6 (a bug-fix release).\n\n\nNov 24, 2015: Released version 2.6.5 (a bug-fix release).\n\n\nNov 6, 2015: Released version 2.6.4 (a bug-fix release).\n\n\nOct 26, 2015: Released version 2.6.3 (a bug-fix release).\n\n\nApr 20, 2015: Released version 2.6.2 (a bug-fix release).\n\n\nMar 8, 2015: Released version 2.6.1 (a bug-fix release). The (new)\n\nyaml\n option has been removed from the Meta-Data Extension as it was buggy\n(see \n#390\n).\n\n\nFeb 19, 2015: Released version 2.6 (\nNotes\n).\n\n\nNov 19, 2014: Released version 2.5.2 (a bug-fix release).\n\n\nSept 26, 2014: Released version 2.5.1 (a bug-fix release).\n\n\nSept 12, 2014: Released version 2.5.0 (\nNotes\n).\n\n\nFeb 16, 2014: Released version 2.4.0 (\nNotes\n).\n\n\nMar 22, 2013: Released version 2.3.1 (a bug-fix release).\n\n\nMar 14, 2013: Released version 2.3.0 (\nNotes\n)\n\n\nNov 4, 2012: Released version 2.2.1 (a bug-fix release).\n\n\nJul 5, 2012: Released version 2.2.0 (\nNotes\n).\n\n\nJan 22, 2012: Released version 2.1.1 (a bug-fix release).\n\n\nNov 24, 2011: Released version 2.1.0 (\nNotes\n).\n\n\nOct 7, 2009: Released version 2.0.3. (a bug-fix release).\n\n\nSept 28, 2009: Released version 2.0.2 (a bug-fix release).\n\n\nMay 20, 2009: Released version 2.0.1 (a bug-fix release).\n\n\nMar 30, 2009: Released version 2.0 (\nNotes\n).\n\n\nMar 8, 2009: Release Candidate 2.0-rc-1.\n\n\nFeb 2009: Added support for multi-level lists to new Blockprocessors.\n\n\nJan 2009: Added HTML 4 output as an option (thanks Eric Abrahamsen)\n\n\nNov 2008: Added Definition List ext. Replaced old core with Blockprocessors.\nBroken up into multiple files.\n\n\nOct 2008: Changed logging behavior to work better with other systems.\nRefactored tree traversing. Added \ntreap\n implementation, then replaced with\nOrderedDict. Renamed various processors to better reflect what they actually\ndo. Refactored footnote ext to match PHP Extra\ns output.\n\n\nSept 2008: Moved \nprettifyTree\n to a Postprocessor, replaced WikiLink ext\nwith WikiLinks (note the s) ext (uses bracketed links instead of CamelCase)\nand various bug fixes.\n\n\nAugust 18 2008: Reorganized directory structure. Added a \ndocs\n directory\nand moved all extensions into a \nmarkdown-extensions\n package.\nAdded additional documentation and a few bug fixes. (v2.0-beta)\n\n\nAugust 4 2008: Updated included extensions to ElementTree. Added a\nseparate command line script. (v2.0-alpha)\n\n\nJuly 2008: Switched from home-grown NanoDOM to ElementTree and\nvarious related bugs (thanks Artem Yunusov).\n\n\nJune 2008: Fixed issues with nested inline patterns and cleaned\nup testing framework (thanks Artem Yunusov).\n\n\nMay 2008: Added a number of additional extensions to the\ndistribution and other minor changes. Moved repository to git from svn.\n\n\nMar 2008: Refactored extension API to accept either an\nextension name (as a string) or an instance of an extension\n(Thanks David Wolever). Fixed various bugs and added doc strings.\n\n\nFeb 2008: Various bug-fixes mostly regarding extensions.\n\n\nFeb 18, 2008: Version 1.7.\n\n\nFeb 13, 2008: A little code cleanup and better documentation\nand inheritance for Preprocessors/Postprocessors.\n\n\nFeb 9, 2008: Double-quotes no longer HTML escaped and raw HTML\nhonors \n?foo\n, \n@foo\n, and \n%foo\n for those who run markdown on\ntemplate syntax.\n\n\nDec 12, 2007: Updated docs. Removed encoding argument from Markdown\nand markdown as per list discussion. Clean up in prep for 1.7.\n\n\nNov 29, 2007: Added support for images inside links. Also fixed\na few bugs in the footnote extension.\n\n\nNov 19, 2007: \nmessage\n now uses python\ns logging module. Also removed\nlimit imposed by recursion in \n_process_section()\n. You can now parse as\nlong of a document as your memory can handle.\n\n\nNov 5, 2007: Moved \nsafe_mode\n code to a \ntextPostprocessor\n and added\nescaping option.\n\n\nNov 3, 2007: Fixed convert method to accept empty strings.\n\n\nOct 30, 2007: Fixed \nBOM\n removal (thanks Malcolm Tredinnick). Fixed\ninfinite loop in bracket regular expression for inline links.\n\n\nOct 11, 2007: \nLineBreaks\n is now an \ninlinePattern\n. Fixed \nHR\n in\nblockquotes. Refactored \n_processSection\n method (see tracker #1793419).\n\n\nOct 9, 2007: Added \ntextPreprocessor\n (from 1.6b).\n\n\nOct 8, 2008: Fixed Lazy Blockquote. Fixed code block on first line.\nFixed empty inline image link.\n\n\nOct 7, 2007: Limit recursion on inline patterns. Added a \nsafe\n tag\nto \nhtmlStash\n.\n\n\nMarch 18, 2007: Fixed or merged a bunch of minor bugs, including\nmulti-line comments and markup inside links. (Tracker #s: 1683066,\n1671153, 1661751, 1627935, 1544371, 1458139.) -\n v. 1.6b\n\n\nOct 10, 2006: Fixed a bug that caused some text to be lost after\ncomments.  Added \nsafe mode\n (user\ns HTML tags are removed).\n\n\nSept 6, 2006: Added exception for PHP tags when handling HTML blocks.\n\n\nAugust 7, 2006: Incorporated Sergej Chodarev\ns patch to fix a problem\nwith ampersand normalization and HTML blocks.\n\n\nJuly 10, 2006: Switched to using \noptparse\n.  Added proper support for\nUnicode.\n\n\nJuly 9, 2006: Fixed the \n!--@address.com\n problem (Tracker #1501354).\n\n\nMay 18, 2006: Stopped catching unquoted titles in reference links.\nStopped creating blank headers.\n\n\nMay 15, 2006: A bug with lists, recursion on block-level elements,\nrun-in headers, spaces before headers, Unicode input (thanks to Aaron\nSwartz). Sourceforge tracker #s: 1489313, 1489312, 1489311, 1488370,\n1485178, 1485176. (v. 1.5)\n\n\nMar. 24, 2006: Switched to a not-so-recursive algorithm with\n\n_handleInline\n.  (Version 1.4)\n\n\nMar. 15, 2006: Replaced some instance variables with class variables\n(a patch from Stelios Xanthakis).  Chris Clark\ns new regexps that do\nnot trigger mid-word underlining.\n\n\nFeb. 28, 2006: Clean-up and command-line handling by Stewart\nMidwinter. (Version 1.3)\n\n\nFeb. 24, 2006: Fixed a bug with the last line of the list appearing\nagain as a separate paragraph.  Incorporated Chris Clark\ns \nmail-to\n\npatch.  Added support for \nbr /\n at the end of lines ending in two or\nmore spaces.  Fixed a crashing bug when using \nImageReferencePattern\n.\nAdded several utility methods to \nNanodom\n.  (Version 1.2)\n\n\nJan. 31, 2006: Added \nhr\n and \nhr/\n to BLOCK_LEVEL_ELEMENTS and\nchanged \nhr/\n to \nhr /\n.  (Thanks to Sergej Chodarev.)\n\n\nNov. 26, 2005: Fixed a bug with certain tabbed lines inside lists\ngetting wrapped in \npre\ncode\n.  (v. 1.1)\n\n\nNov. 19, 2005: Made \n!...\n, \n?...\n, etc. behave like block-level\nHTML tags.\n\n\nNov. 14, 2005: Added entity code and email auto-link fix by Tiago\nCogumbreiro.  Fixed some small issues with backticks to get 100%\ncompliance with John\ns test suite.  (v. 1.0)\n\n\nNov. 7, 2005: Added an \nunlink\n method for documents to aid with memory\ncollection (per Doug Sauder\ns suggestion).\n\n\nOct. 29, 2005: Restricted a set of HTML tags that get treated as\nblock-level elements.\n\n\nSept. 18, 2005: Refactored the whole script to make it easier to\ncustomize it and made footnote functionality into an extension.\n(v. 0.9)\n\n\nSept. 5, 2005: Fixed a bug with multi-paragraph footnotes.  Added\nattribute support.\n\n\nSept. 1, 2005: Changed the way headers are handled to allow inline\nsyntax in headers (e.g. links) and got the lists to use p-tags\ncorrectly (v. 0.8)\n\n\nAug. 29, 2005: Added flexible tabs, fixed a few small issues, added\nbasic support for footnotes.  Got rid of xml.dom.minidom and added\npretty-printing. (v. 0.7)\n\n\nAug. 13, 2005: Fixed a number of small bugs in order to conform to the\ntest suite.  (v. 0.6)\n\n\nAug. 11, 2005: Added support for inline HTML and entities, inline\nimages, auto-links, underscore emphasis. Cleaned up and refactored the\ncode, added some more comments.\n\n\nFeb. 19, 2005: Rewrote the handling of high-level elements to allow\nmulti-line list items and all sorts of nesting.\n\n\nFeb. 3, 2005: Reference-style links, single-line lists, backticks,\nescape, emphasis in the beginning of the paragraph.\n\n\nNov. 2004: Added links, blockquotes, HTML blocks to Manfred\nStienstra\ns code\n\n\nApr. 2004: Manfred\ns version at \nhttp://www.dwerg.net/projects/markdown/", 
            "title": "Change Log"
        }, 
        {
            "location": "/change_log/#python-markdown-change-log", 
            "text": "Aug 17, 2017: Released version 2.6.9 (a bug-fix release).  Jan 25, 2017: Released version 2.6.8 (a bug-fix release).  Sept 23, 2016: Released version 2.6.7 (a bug-fix release).  Mar 20, 2016: Released version 2.6.6 (a bug-fix release).  Nov 24, 2015: Released version 2.6.5 (a bug-fix release).  Nov 6, 2015: Released version 2.6.4 (a bug-fix release).  Oct 26, 2015: Released version 2.6.3 (a bug-fix release).  Apr 20, 2015: Released version 2.6.2 (a bug-fix release).  Mar 8, 2015: Released version 2.6.1 (a bug-fix release). The (new) yaml  option has been removed from the Meta-Data Extension as it was buggy\n(see  #390 ).  Feb 19, 2015: Released version 2.6 ( Notes ).  Nov 19, 2014: Released version 2.5.2 (a bug-fix release).  Sept 26, 2014: Released version 2.5.1 (a bug-fix release).  Sept 12, 2014: Released version 2.5.0 ( Notes ).  Feb 16, 2014: Released version 2.4.0 ( Notes ).  Mar 22, 2013: Released version 2.3.1 (a bug-fix release).  Mar 14, 2013: Released version 2.3.0 ( Notes )  Nov 4, 2012: Released version 2.2.1 (a bug-fix release).  Jul 5, 2012: Released version 2.2.0 ( Notes ).  Jan 22, 2012: Released version 2.1.1 (a bug-fix release).  Nov 24, 2011: Released version 2.1.0 ( Notes ).  Oct 7, 2009: Released version 2.0.3. (a bug-fix release).  Sept 28, 2009: Released version 2.0.2 (a bug-fix release).  May 20, 2009: Released version 2.0.1 (a bug-fix release).  Mar 30, 2009: Released version 2.0 ( Notes ).  Mar 8, 2009: Release Candidate 2.0-rc-1.  Feb 2009: Added support for multi-level lists to new Blockprocessors.  Jan 2009: Added HTML 4 output as an option (thanks Eric Abrahamsen)  Nov 2008: Added Definition List ext. Replaced old core with Blockprocessors.\nBroken up into multiple files.  Oct 2008: Changed logging behavior to work better with other systems.\nRefactored tree traversing. Added  treap  implementation, then replaced with\nOrderedDict. Renamed various processors to better reflect what they actually\ndo. Refactored footnote ext to match PHP Extra s output.  Sept 2008: Moved  prettifyTree  to a Postprocessor, replaced WikiLink ext\nwith WikiLinks (note the s) ext (uses bracketed links instead of CamelCase)\nand various bug fixes.  August 18 2008: Reorganized directory structure. Added a  docs  directory\nand moved all extensions into a  markdown-extensions  package.\nAdded additional documentation and a few bug fixes. (v2.0-beta)  August 4 2008: Updated included extensions to ElementTree. Added a\nseparate command line script. (v2.0-alpha)  July 2008: Switched from home-grown NanoDOM to ElementTree and\nvarious related bugs (thanks Artem Yunusov).  June 2008: Fixed issues with nested inline patterns and cleaned\nup testing framework (thanks Artem Yunusov).  May 2008: Added a number of additional extensions to the\ndistribution and other minor changes. Moved repository to git from svn.  Mar 2008: Refactored extension API to accept either an\nextension name (as a string) or an instance of an extension\n(Thanks David Wolever). Fixed various bugs and added doc strings.  Feb 2008: Various bug-fixes mostly regarding extensions.  Feb 18, 2008: Version 1.7.  Feb 13, 2008: A little code cleanup and better documentation\nand inheritance for Preprocessors/Postprocessors.  Feb 9, 2008: Double-quotes no longer HTML escaped and raw HTML\nhonors  ?foo ,  @foo , and  %foo  for those who run markdown on\ntemplate syntax.  Dec 12, 2007: Updated docs. Removed encoding argument from Markdown\nand markdown as per list discussion. Clean up in prep for 1.7.  Nov 29, 2007: Added support for images inside links. Also fixed\na few bugs in the footnote extension.  Nov 19, 2007:  message  now uses python s logging module. Also removed\nlimit imposed by recursion in  _process_section() . You can now parse as\nlong of a document as your memory can handle.  Nov 5, 2007: Moved  safe_mode  code to a  textPostprocessor  and added\nescaping option.  Nov 3, 2007: Fixed convert method to accept empty strings.  Oct 30, 2007: Fixed  BOM  removal (thanks Malcolm Tredinnick). Fixed\ninfinite loop in bracket regular expression for inline links.  Oct 11, 2007:  LineBreaks  is now an  inlinePattern . Fixed  HR  in\nblockquotes. Refactored  _processSection  method (see tracker #1793419).  Oct 9, 2007: Added  textPreprocessor  (from 1.6b).  Oct 8, 2008: Fixed Lazy Blockquote. Fixed code block on first line.\nFixed empty inline image link.  Oct 7, 2007: Limit recursion on inline patterns. Added a  safe  tag\nto  htmlStash .  March 18, 2007: Fixed or merged a bunch of minor bugs, including\nmulti-line comments and markup inside links. (Tracker #s: 1683066,\n1671153, 1661751, 1627935, 1544371, 1458139.) -  v. 1.6b  Oct 10, 2006: Fixed a bug that caused some text to be lost after\ncomments.  Added  safe mode  (user s HTML tags are removed).  Sept 6, 2006: Added exception for PHP tags when handling HTML blocks.  August 7, 2006: Incorporated Sergej Chodarev s patch to fix a problem\nwith ampersand normalization and HTML blocks.  July 10, 2006: Switched to using  optparse .  Added proper support for\nUnicode.  July 9, 2006: Fixed the  !--@address.com  problem (Tracker #1501354).  May 18, 2006: Stopped catching unquoted titles in reference links.\nStopped creating blank headers.  May 15, 2006: A bug with lists, recursion on block-level elements,\nrun-in headers, spaces before headers, Unicode input (thanks to Aaron\nSwartz). Sourceforge tracker #s: 1489313, 1489312, 1489311, 1488370,\n1485178, 1485176. (v. 1.5)  Mar. 24, 2006: Switched to a not-so-recursive algorithm with _handleInline .  (Version 1.4)  Mar. 15, 2006: Replaced some instance variables with class variables\n(a patch from Stelios Xanthakis).  Chris Clark s new regexps that do\nnot trigger mid-word underlining.  Feb. 28, 2006: Clean-up and command-line handling by Stewart\nMidwinter. (Version 1.3)  Feb. 24, 2006: Fixed a bug with the last line of the list appearing\nagain as a separate paragraph.  Incorporated Chris Clark s  mail-to \npatch.  Added support for  br /  at the end of lines ending in two or\nmore spaces.  Fixed a crashing bug when using  ImageReferencePattern .\nAdded several utility methods to  Nanodom .  (Version 1.2)  Jan. 31, 2006: Added  hr  and  hr/  to BLOCK_LEVEL_ELEMENTS and\nchanged  hr/  to  hr / .  (Thanks to Sergej Chodarev.)  Nov. 26, 2005: Fixed a bug with certain tabbed lines inside lists\ngetting wrapped in  pre code .  (v. 1.1)  Nov. 19, 2005: Made  !... ,  ?... , etc. behave like block-level\nHTML tags.  Nov. 14, 2005: Added entity code and email auto-link fix by Tiago\nCogumbreiro.  Fixed some small issues with backticks to get 100%\ncompliance with John s test suite.  (v. 1.0)  Nov. 7, 2005: Added an  unlink  method for documents to aid with memory\ncollection (per Doug Sauder s suggestion).  Oct. 29, 2005: Restricted a set of HTML tags that get treated as\nblock-level elements.  Sept. 18, 2005: Refactored the whole script to make it easier to\ncustomize it and made footnote functionality into an extension.\n(v. 0.9)  Sept. 5, 2005: Fixed a bug with multi-paragraph footnotes.  Added\nattribute support.  Sept. 1, 2005: Changed the way headers are handled to allow inline\nsyntax in headers (e.g. links) and got the lists to use p-tags\ncorrectly (v. 0.8)  Aug. 29, 2005: Added flexible tabs, fixed a few small issues, added\nbasic support for footnotes.  Got rid of xml.dom.minidom and added\npretty-printing. (v. 0.7)  Aug. 13, 2005: Fixed a number of small bugs in order to conform to the\ntest suite.  (v. 0.6)  Aug. 11, 2005: Added support for inline HTML and entities, inline\nimages, auto-links, underscore emphasis. Cleaned up and refactored the\ncode, added some more comments.  Feb. 19, 2005: Rewrote the handling of high-level elements to allow\nmulti-line list items and all sorts of nesting.  Feb. 3, 2005: Reference-style links, single-line lists, backticks,\nescape, emphasis in the beginning of the paragraph.  Nov. 2004: Added links, blockquotes, HTML blocks to Manfred\nStienstra s code  Apr. 2004: Manfred s version at  http://www.dwerg.net/projects/markdown/", 
            "title": "Python-Markdown Change Log"
        }, 
        {
            "location": "/change_log/release-2.6/", 
            "text": "Python-Markdown 2.6 Release Notes\n\n\nWe are pleased to release Python-Markdown 2.6 which adds a few new features\nand fixes various bugs. See the list of changes below for details.\n\n\nPython-Markdown version 2.6 supports Python versions 2.7, 3.2, 3.3, and 3.4 as\nwell as PyPy.\n\n\nBackwards-incompatible Changes\n\n\nsafe_mode\n Deprecated\n\n\nBoth \nsafe_mode\n and the associated \nhtml_replacement_text\n keywords are\ndeprecated in version 2.6 and will raise a \nDeprecationWarning\n. The\n\nsafe_mode\n and \nhtml_replacement_text\n keywords will be ignored in the next\nrelease. The so-called \nsafe mode\n was never actually \nsafe\n which has resulted\nin many people having a false sense of security when using it. As an\nalternative, the developers of Python-Markdown recommend that any untrusted\ncontent be passed through an HTML sanitizer (like \nBleach\n) after being\nconverted to HTML by markdown. In fact, \nBleach Whitelist\n provides a curated\nlist of tags, attributes, and styles suitable for filtering user-provided HTML\nusing bleach.\n\n\nIf your code previously looked like this:\n\n\nhtml\n \n=\n \nmarkdown\n.\nmarkdown\n(\ntext\n,\n \nsafe_mode\n=\nTrue\n)\n\n\n\n\n\n\nThen it is recommended that you change your code to read something like this:\n\n\nimport\n \nbleach\n\n\nfrom\n \nbleach_whitelist\n \nimport\n \nmarkdown_tags\n,\n \nmarkdown_attrs\n\n\nhtml\n \n=\n \nbleach\n.\nclean\n(\nmarkdown\n.\nmarkdown\n(\ntext\n),\n \nmarkdown_tags\n,\n \nmarkdown_attrs\n)\n\n\n\n\n\n\nIf you are not interested in sanitizing untrusted text, but simply desire to\nescape raw HTML, then that can be accomplished through an extension which\nremoves HTML parsing:\n\n\nfrom\n \nmarkdown.extensions\n \nimport\n \nExtension\n\n\n\nclass\n \nEscapeHtml\n(\nExtension\n):\n\n    \ndef\n \nextendMarkdown\n(\nself\n,\n \nmd\n,\n \nmd_globals\n):\n\n    \ndel\n \nmd\n.\npreprocessors\n[\nhtml_block\n]\n\n    \ndel\n \nmd\n.\ninlinePatterns\n[\nhtml\n]\n\n\n\nhtml\n \n=\n \nmarkdown\n.\nmarkdown\n(\ntext\n,\n \nextensions\n=\n[\nEscapeHtml\n()])\n\n\n\n\n\n\nAs the HTML would not be parsed with the above Extension, then the serializer\nwill escape the raw HTML, which is exactly what happens now when\n\nsafe_mode=\"escape\"\n.\n\n\nPositional Arguments Deprecated\n\n\nPositional arguments on the \nmarkdown.Markdown()\n class are deprecated as are\nall except the \ntext\n argument on the \nmarkdown.markdown()\n wrapper function.\nUsing positional arguments will raise a \nDeprecationWarning\n in 2.6 and an\nerror in the next release. Only keyword arguments should be used. For example,\nif your code previously looked like this:\n\n\nhtml\n \n=\n \nmarkdown\n.\nmarkdown\n(\ntext\n,\n \n[\nSomeExtension\n()])\n\n\n\n\n\n\nThen it is recommended that you change it to read something like this:\n\n\nhtml\n \n=\n \nmarkdown\n.\nmarkdown\n(\ntext\n,\n \nextensions\n=\n[\nSomeExtension\n()])\n\n\n\n\n\n\n\n\nNote\n\n\nThis change is being made as a result of deprecating \n\"safe_mode\"\n as the\n\nsafe_mode\n argument was one of the positional arguments. When that argument\nis removed, the two arguments following it will no longer be at the correct\nposition. It is recommended that you always use keywords when they are\nsupported for this reason.\n\n\n\n\nShortened\n Extension Names Deprecated\n\n\nIn previous versions of Python-Markdown, the built-in extensions received\nspecial status and did not require the full path to be provided. Additionally,\nthird party extensions whose name started with \n\"mdx_\"\n received the same\nspecial treatment. This behavior is deprecated and will raise a\n\nDeprecationWarning\n in version 2.6 and an error in the next release. Ensure\nthat you always use the full path to your extensions. For example, if you\npreviously did the following:\n\n\nmarkdown\n.\nmarkdown\n(\ntext\n,\n \nextensions\n=\n[\nextra\n])\n\n\n\n\n\n\nYou should change your code to the following:\n\n\nmarkdown\n.\nmarkdown\n(\ntext\n,\n \nextensions\n=\n[\nmarkdown.extensions.extra\n])\n\n\n\n\n\n\nThe same applies to the command line:\n\n\npython\n \n-\nm\n \nmarkdown\n \n-\nx\n \nmarkdown\n.\nextensions\n.\nextra\n \ninput\n.\ntxt\n\n\n\n\n\n\nSimilarly, if you have used a third party extension (for example \nmdx_math\n),\npreviously you might have called it like this:\n\n\nmarkdown\n.\nmarkdown\n(\ntext\n,\n \nextensions\n=\n[\nmath\n])\n\n\n\n\n\n\nAs the \n\"mdx\"\n prefix will no longer be appended, you will need to change your\ncode as follows (assuming the file \nmdx_math.py\n is installed at the root of\nyour PYTHONPATH):\n\n\nmarkdown\n.\nmarkdown\n(\ntext\n,\n \nextensions\n=\n[\nmdx_math\n])\n\n\n\n\n\n\nExtension authors will want to update their documentation to reflect the new\nbehavior.\n\n\nSee the \ndocumentation\n for a full explanation\nof the current behavior.\n\n\nExtension Configuration as Part of Extension Name Deprecated\n\n\nThe previously documented method of appending the extension configuration\noptions as a string to the extension name is deprecated and will raise a\n\nDeprecationWarning\n in version 2.6 and an error in 2.7. The\n\nextension_configs\n keyword should be used\ninstead. See the \ndocumentation\n for a full\nexplanation of the current behavior.\n\n\nHeaderId Extension Pending Deprecation\n\n\nThe \nHeaderId\n Extension is pending deprecation and will raise a\n\nPendingDeprecationWarning\n in version 2.6. The extension will be deprecated\nin the next release and raise an error in the release after that. Use the \nTable\nof Contents\n Extension instead, which offers most of the features of the\nHeaderId Extension and more (support for meta data is missing).\n\n\nExtension authors who have been using the \nslugify\n and \nunique\n functions\ndefined in the HeaderId Extension should note that those functions are now\ndefined in the Table of Contents extension and should adjust their import\nstatements accordingly (\nfrom markdown.extensions.toc import slugify, unique\n).\n\n\nThe \nconfigs\n Keyword is Deprecated\n\n\nPositional arguments and the \nconfigs\n keyword on the\n\nmarkdown.extension.Extension\n class (and its subclasses) are deprecated. Each\nindividual configuration option should be passed to the class as a keyword/value\npair. For example. one might have previously initiated an extension subclass\nlike this:\n\n\next\n \n=\n \nSomeExtension\n(\nconfigs\n=\n{\nsomekey\n:\n \nsomevalue\n})\n\n\n\n\n\n\nThat code should be updated to pass in the options directly:\n\n\next\n \n=\n \nSomeExtension\n(\nsomekey\n=\nsomevalue\n)\n\n\n\n\n\n\nExtension authors will want to note that this affects the \nmakeExtension\n\nfunction as well. Previously it was common for the function to be defined as\nfollows:\n\n\ndef\n \nmakeExtension\n(\nconfigs\n=\nNone\n):\n\n    \nreturn\n \nSomeExtension\n(\nconfigs\n=\nconfigs\n)\n\n\n\n\n\n\nExtension authors will want to update their code to the following instead:\n\n\ndef\n \nmakeExtension\n(\n**\nkwargs\n):\n\n    \nreturn\n \nSomeExtension\n(\n**\nkwargs\n)\n\n\n\n\n\n\nFailing to do so will result in a \nDeprecationWarning\n and will raise an\nerror in the next release. See the \nExtension API\n documentation for more\ninformation.\n\n\nIn the event that an \nmarkdown.extension.Extension\n subclass overrides the\n\n__init__\n method and implements its own configuration handling, then the above\nmay not apply. However, it is recommended that the subclass still calls the\nparent \n__init__\n method to handle configuration options like so:\n\n\nclass\n \nSomeExtension\n(\nmarkdown\n.\nextension\n.\nExtension\n):\n\n    \ndef\n \n__init__\n(\n**\nkwargs\n):\n\n        \n# Do pre-config stuff here\n\n        \n# Set config defaults\n\n        \nself\n.\nconfig\n \n=\n \n{\n\n            \noption1\n \n:\n \n[\nvalue1\n,\n \ndescription1\n],\n\n            \noption2\n \n:\n \n[\nvalue2\n,\n \ndescription2\n]\n\n        \n}\n\n        \n# Set user defined configs\n\n        \nsuper\n(\nMyExtension\n,\n \nself\n)\n.\n__init__\n(\n**\nkwargs\n)\n\n        \n# Do post-config stuff here\n\n\n\n\n\n\nNote the call to \nsuper\n to get the benefits of configuration handling from the\nparent class. See the \ndocumentation\n for more information.\n\n\nWhat\ns New in Python-Markdown 2.6\n\n\nOfficial Support for PyPy\n\n\nOfficial support for \nPyPy\n has been added. While Python-Markdown has most\nlikely worked on PyPy for some time, it is now officially supported and tested\non PyPy.\n\n\nYAML Style Meta-Data\n\n\nThe \nMeta-Data\n Extension now includes optional support for \nYAML\n style\nmeta-data.\n By default, the YAML deliminators are recognized, however, the\nactual data is parsed as previously. This follows the syntax of \nMultiMarkdown\n,\nwhich inspired this extension.\n\n\nAlternatively, if the \nyaml\n option is set, then the data is parsed as\nYAML.\n \nAs the \nyaml\n option was buggy, it was removed in 2.6.1. It is\nsuggested that a preprocessor (like \ndocdata\n) or a third party extension be\nused if you want true YAML support. See \nIssue #390\n for a full\nexplanation.\n\n\nTable of Contents Extension Refactored\n\n\nThe \nTable of Contents\n Extension has been refactored and some new features\nhave been added. See the documentation for a full explanation of each feature\nlisted below:\n\n\n\n\n\n\nThe extension now assigns the Table of Contents to the \ntoc\n attribute of\n  the Markdown class regardless of whether a \nmarker\n was found in the\n  document. Third party frameworks no longer need to insert a \nmarker,\n run\n  the document through Markdown, then extract the Table of Contents from the\n  document.\n\n\n\n\n\n\nThe Table of Contents Extension is now a \nregistered extension.\n Therefore,\n  when the \nreset\n method of the Markdown class is called, the \ntoc\n attribute\n  on the Markdown class is cleared (set to an empty string).\n\n\n\n\n\n\nWhen the \nmarker\n configuration option is set to an empty string, the parser\n  completely skips the process of searching the document for markers. This\n  should save parsing time when the Table of Contents Extension is being used\n  only to assign ids to headers.\n\n\n\n\n\n\nA \nseparator\n configuration option has been added allowing users to override\n  the separator character used by the slugify function.\n\n\n\n\n\n\nA \nbaselevel\n configuration option has been added allowing users to set the\n  base level of headers in their documents (h1-h6). This allows the header\n  levels to be automatically adjusted to fit within the hierarchy of an HTML\n  template.\n\n\n\n\n\n\nPygments can now be disabled\n\n\nThe \nCodeHilite\n Extension has gained a new configuration option:\n\nuse_pygments\n. The option is \nTrue\n by default, however, it allows one to turn\noff Pygments code highlighting (set to \nFalse\n) while preserving the language\ndetection features of the extension. Note that Pygments language guessing is not\nused as that would \nuse Pygments\n. If a language is defined for a code block, it\nwill be assigned to the \ncode\n tag as a class in the manner suggested by the\n\nHTML5 spec\n (alternate output will not be entertained) and could\npotentially be used by a JavaScript library in the browser to highlight the code\nblock.\n\n\nMiscellaneous\n\n\nTest coverage has been improved including running \nflake8\n. While those changes\nwill not directly effect end users, the code is being better tested which will\nbenefit everyone.\n\n\nVarious bug fixes have been made.  See the\n\ncommit log\n\nfor a complete history of the changes.", 
            "title": "Release Notes for v.2.6"
        }, 
        {
            "location": "/change_log/release-2.6/#python-markdown-26-release-notes", 
            "text": "We are pleased to release Python-Markdown 2.6 which adds a few new features\nand fixes various bugs. See the list of changes below for details.  Python-Markdown version 2.6 supports Python versions 2.7, 3.2, 3.3, and 3.4 as\nwell as PyPy.", 
            "title": "Python-Markdown 2.6 Release Notes"
        }, 
        {
            "location": "/change_log/release-2.6/#backwards-incompatible-changes", 
            "text": "", 
            "title": "Backwards-incompatible Changes"
        }, 
        {
            "location": "/change_log/release-2.6/#safe_mode-deprecated", 
            "text": "Both  safe_mode  and the associated  html_replacement_text  keywords are\ndeprecated in version 2.6 and will raise a  DeprecationWarning . The safe_mode  and  html_replacement_text  keywords will be ignored in the next\nrelease. The so-called  safe mode  was never actually  safe  which has resulted\nin many people having a false sense of security when using it. As an\nalternative, the developers of Python-Markdown recommend that any untrusted\ncontent be passed through an HTML sanitizer (like  Bleach ) after being\nconverted to HTML by markdown. In fact,  Bleach Whitelist  provides a curated\nlist of tags, attributes, and styles suitable for filtering user-provided HTML\nusing bleach.  If your code previously looked like this:  html   =   markdown . markdown ( text ,   safe_mode = True )   Then it is recommended that you change your code to read something like this:  import   bleach  from   bleach_whitelist   import   markdown_tags ,   markdown_attrs  html   =   bleach . clean ( markdown . markdown ( text ),   markdown_tags ,   markdown_attrs )   If you are not interested in sanitizing untrusted text, but simply desire to\nescape raw HTML, then that can be accomplished through an extension which\nremoves HTML parsing:  from   markdown.extensions   import   Extension  class   EscapeHtml ( Extension ): \n     def   extendMarkdown ( self ,   md ,   md_globals ): \n     del   md . preprocessors [ html_block ] \n     del   md . inlinePatterns [ html ]  html   =   markdown . markdown ( text ,   extensions = [ EscapeHtml ()])   As the HTML would not be parsed with the above Extension, then the serializer\nwill escape the raw HTML, which is exactly what happens now when safe_mode=\"escape\" .", 
            "title": "safe_mode Deprecated"
        }, 
        {
            "location": "/change_log/release-2.6/#positional-arguments-deprecated", 
            "text": "Positional arguments on the  markdown.Markdown()  class are deprecated as are\nall except the  text  argument on the  markdown.markdown()  wrapper function.\nUsing positional arguments will raise a  DeprecationWarning  in 2.6 and an\nerror in the next release. Only keyword arguments should be used. For example,\nif your code previously looked like this:  html   =   markdown . markdown ( text ,   [ SomeExtension ()])   Then it is recommended that you change it to read something like this:  html   =   markdown . markdown ( text ,   extensions = [ SomeExtension ()])    Note  This change is being made as a result of deprecating  \"safe_mode\"  as the safe_mode  argument was one of the positional arguments. When that argument\nis removed, the two arguments following it will no longer be at the correct\nposition. It is recommended that you always use keywords when they are\nsupported for this reason.", 
            "title": "Positional Arguments Deprecated"
        }, 
        {
            "location": "/change_log/release-2.6/#shortened-extension-names-deprecated", 
            "text": "In previous versions of Python-Markdown, the built-in extensions received\nspecial status and did not require the full path to be provided. Additionally,\nthird party extensions whose name started with  \"mdx_\"  received the same\nspecial treatment. This behavior is deprecated and will raise a DeprecationWarning  in version 2.6 and an error in the next release. Ensure\nthat you always use the full path to your extensions. For example, if you\npreviously did the following:  markdown . markdown ( text ,   extensions = [ extra ])   You should change your code to the following:  markdown . markdown ( text ,   extensions = [ markdown.extensions.extra ])   The same applies to the command line:  python   - m   markdown   - x   markdown . extensions . extra   input . txt   Similarly, if you have used a third party extension (for example  mdx_math ),\npreviously you might have called it like this:  markdown . markdown ( text ,   extensions = [ math ])   As the  \"mdx\"  prefix will no longer be appended, you will need to change your\ncode as follows (assuming the file  mdx_math.py  is installed at the root of\nyour PYTHONPATH):  markdown . markdown ( text ,   extensions = [ mdx_math ])   Extension authors will want to update their documentation to reflect the new\nbehavior.  See the  documentation  for a full explanation\nof the current behavior.", 
            "title": "\"Shortened\" Extension Names Deprecated"
        }, 
        {
            "location": "/change_log/release-2.6/#extension-configuration-as-part-of-extension-name-deprecated", 
            "text": "The previously documented method of appending the extension configuration\noptions as a string to the extension name is deprecated and will raise a DeprecationWarning  in version 2.6 and an error in 2.7. The extension_configs  keyword should be used\ninstead. See the  documentation  for a full\nexplanation of the current behavior.", 
            "title": "Extension Configuration as Part of Extension Name Deprecated"
        }, 
        {
            "location": "/change_log/release-2.6/#headerid-extension-pending-deprecation", 
            "text": "The  HeaderId  Extension is pending deprecation and will raise a PendingDeprecationWarning  in version 2.6. The extension will be deprecated\nin the next release and raise an error in the release after that. Use the  Table\nof Contents  Extension instead, which offers most of the features of the\nHeaderId Extension and more (support for meta data is missing).  Extension authors who have been using the  slugify  and  unique  functions\ndefined in the HeaderId Extension should note that those functions are now\ndefined in the Table of Contents extension and should adjust their import\nstatements accordingly ( from markdown.extensions.toc import slugify, unique ).", 
            "title": "HeaderId Extension Pending Deprecation"
        }, 
        {
            "location": "/change_log/release-2.6/#the-configs-keyword-is-deprecated", 
            "text": "Positional arguments and the  configs  keyword on the markdown.extension.Extension  class (and its subclasses) are deprecated. Each\nindividual configuration option should be passed to the class as a keyword/value\npair. For example. one might have previously initiated an extension subclass\nlike this:  ext   =   SomeExtension ( configs = { somekey :   somevalue })   That code should be updated to pass in the options directly:  ext   =   SomeExtension ( somekey = somevalue )   Extension authors will want to note that this affects the  makeExtension \nfunction as well. Previously it was common for the function to be defined as\nfollows:  def   makeExtension ( configs = None ): \n     return   SomeExtension ( configs = configs )   Extension authors will want to update their code to the following instead:  def   makeExtension ( ** kwargs ): \n     return   SomeExtension ( ** kwargs )   Failing to do so will result in a  DeprecationWarning  and will raise an\nerror in the next release. See the  Extension API  documentation for more\ninformation.  In the event that an  markdown.extension.Extension  subclass overrides the __init__  method and implements its own configuration handling, then the above\nmay not apply. However, it is recommended that the subclass still calls the\nparent  __init__  method to handle configuration options like so:  class   SomeExtension ( markdown . extension . Extension ): \n     def   __init__ ( ** kwargs ): \n         # Do pre-config stuff here \n         # Set config defaults \n         self . config   =   { \n             option1   :   [ value1 ,   description1 ], \n             option2   :   [ value2 ,   description2 ] \n         } \n         # Set user defined configs \n         super ( MyExtension ,   self ) . __init__ ( ** kwargs ) \n         # Do post-config stuff here   Note the call to  super  to get the benefits of configuration handling from the\nparent class. See the  documentation  for more information.", 
            "title": "The configs Keyword is Deprecated"
        }, 
        {
            "location": "/change_log/release-2.6/#whats-new-in-python-markdown-26", 
            "text": "", 
            "title": "What's New in Python-Markdown 2.6"
        }, 
        {
            "location": "/change_log/release-2.6/#official-support-for-pypy", 
            "text": "Official support for  PyPy  has been added. While Python-Markdown has most\nlikely worked on PyPy for some time, it is now officially supported and tested\non PyPy.", 
            "title": "Official Support for PyPy"
        }, 
        {
            "location": "/change_log/release-2.6/#yaml-style-meta-data", 
            "text": "The  Meta-Data  Extension now includes optional support for  YAML  style\nmeta-data.  By default, the YAML deliminators are recognized, however, the\nactual data is parsed as previously. This follows the syntax of  MultiMarkdown ,\nwhich inspired this extension.  Alternatively, if the  yaml  option is set, then the data is parsed as\nYAML.   As the  yaml  option was buggy, it was removed in 2.6.1. It is\nsuggested that a preprocessor (like  docdata ) or a third party extension be\nused if you want true YAML support. See  Issue #390  for a full\nexplanation.", 
            "title": "YAML Style Meta-Data"
        }, 
        {
            "location": "/change_log/release-2.6/#table-of-contents-extension-refactored", 
            "text": "The  Table of Contents  Extension has been refactored and some new features\nhave been added. See the documentation for a full explanation of each feature\nlisted below:    The extension now assigns the Table of Contents to the  toc  attribute of\n  the Markdown class regardless of whether a  marker  was found in the\n  document. Third party frameworks no longer need to insert a  marker,  run\n  the document through Markdown, then extract the Table of Contents from the\n  document.    The Table of Contents Extension is now a  registered extension.  Therefore,\n  when the  reset  method of the Markdown class is called, the  toc  attribute\n  on the Markdown class is cleared (set to an empty string).    When the  marker  configuration option is set to an empty string, the parser\n  completely skips the process of searching the document for markers. This\n  should save parsing time when the Table of Contents Extension is being used\n  only to assign ids to headers.    A  separator  configuration option has been added allowing users to override\n  the separator character used by the slugify function.    A  baselevel  configuration option has been added allowing users to set the\n  base level of headers in their documents (h1-h6). This allows the header\n  levels to be automatically adjusted to fit within the hierarchy of an HTML\n  template.", 
            "title": "Table of Contents Extension Refactored"
        }, 
        {
            "location": "/change_log/release-2.6/#pygments-can-now-be-disabled", 
            "text": "The  CodeHilite  Extension has gained a new configuration option: use_pygments . The option is  True  by default, however, it allows one to turn\noff Pygments code highlighting (set to  False ) while preserving the language\ndetection features of the extension. Note that Pygments language guessing is not\nused as that would  use Pygments . If a language is defined for a code block, it\nwill be assigned to the  code  tag as a class in the manner suggested by the HTML5 spec  (alternate output will not be entertained) and could\npotentially be used by a JavaScript library in the browser to highlight the code\nblock.", 
            "title": "Pygments can now be disabled"
        }, 
        {
            "location": "/change_log/release-2.6/#miscellaneous", 
            "text": "Test coverage has been improved including running  flake8 . While those changes\nwill not directly effect end users, the code is being better tested which will\nbenefit everyone.  Various bug fixes have been made.  See the commit log \nfor a complete history of the changes.", 
            "title": "Miscellaneous"
        }, 
        {
            "location": "/change_log/release-2.5/", 
            "text": "Python-Markdown 2.5 Release Notes\n\n\nWe are pleased to release Python-Markdown 2.5 which adds a few new features\nand fixes various bugs. See the list of changes below for details.\n\n\nPython-Markdown version 2.5 supports Python versions 2.7, 3.2, 3.3, and 3.4.\n\n\nBackwards-incompatible Changes\n\n\n\n\n\n\nPython-Markdown no longer supports Python version 2.6. You must be using Python\n  versions 2.7, 3.2, 3.3, or 3.4.\n\n\n\n\n\n\nThe \nforce_linenos\n configuration key on the \nCodeHilite Extension\n has been \ndeprecated\n\n  and will raise a \nKeyError\n if provided. In the previous release (2.4), it was\n  issuing a \nDeprecationWarning\n. The \nlinenums\n keyword should be used\n  instead, which provides more control of the output.\n\n\n\n\n\n\nBoth \nsafe_mode\n and the associated \nhtml_replacement_text\n keywords will be\n  deprecated in version 2.6 and will raise a \nPendingDeprecationWarning\n in\n  2.5. The so-called \nsafe mode\n was never actually \nsafe\n which has resulted in\n  many people having a false sense of security when using it. As an alternative,\n  the developers of Python-Markdown recommend that any untrusted content be\n  passed through an HTML sanitizer (like \nBleach\n) after being converted to HTML\n  by markdown.\n\n\nIf your code previously looked like this:\n\n\nhtml = markdown.markdown(text, same_mode=True)\n\n\n\n\n\nThen it is recommended that you change your code to read something like this:\n\n\nimport\n \nbleach\n\n\nhtml\n \n=\n \nbleach\n.\nclean\n(\nmarkdown\n.\nmarkdown\n(\ntext\n))\n\n\n\n\n\n\nIf you are not interested in sanitizing untrusted text, but simply desire to\nescape raw HTML, then that can be accomplished through an extension which\nremoves HTML parsing:\n\n\nfrom\n \nmarkdown.extensions\n \nimport\n \nExtension\n\n\n\nclass\n \nEscapeHtml\n(\nExtension\n):\n\n    \ndef\n \nextendMarkdown\n(\nself\n,\n \nmd\n,\n \nmd_globals\n):\n\n        \ndel\n \nmd\n.\npreprocessors\n[\nhtml_block\n]\n\n        \ndel\n \nmd\n.\ninlinePatterns\n[\nhtml\n]\n\n\n\nhtml\n \n=\n \nmarkdown\n.\nmarkdown\n(\ntext\n,\n \nextensions\n=\n[\nEscapeHtml\n()])\n\n\n\n\n\n\nAs the HTML would not be parsed with the above Extension, then the\nserializer will escape the raw HTML, which is exactly what happens now when\n\nsafe_mode=\"escape\"\n.\n\n\n\n\n\n\nPositional arguments on the \nmarkdown.Markdown()\n are pending deprecation as are\n  all except the \ntext\n argument on the \nmarkdown.markdown()\n wrapper function.\n  Only keyword arguments should be used. For example, if your code previously\n  looked like this:\n\n\n html = markdown.markdown(text, [\nextra\n])\n\n\n\n\n\nThen it is recommended that you change it to read something like this:\n\n\nhtml = markdown.markdown(text, extensions=[\nextra\n])\n\n\n\n\n\n\n\nNote\n\n\nThis change is being made as a result of deprecating \n\"safe_mode\"\n as the\n\nsafe_mode\n argument was one of the positional arguments. When that argument\nis removed, the two arguments following it will no longer be at the correct\nposition. It is recommended that you always use keywords when they are supported\nfor this reason.\n\n\n\n\n\n\n\n\nIn previous versions of Python-Markdown, the built-in extensions received\n  special status and did not require the full path to be provided. Additionally,\n  third party extensions whose name started with \n\"mdx_\"\n received the same\n  special treatment. This behavior will be deprecated in version 2.6 and will\n  raise a \nPendingDeprecationWarning\n in 2.5. Ensure that you always use the\n  full path to your extensions. For example, if you previously did the\n  following:\n\n\nmarkdown.markdown(text, extensions=[\nextra\n])\n\n\n\n\n\nYou should change your code to the following:\n\n\nmarkdown.markdown(text, extensions=[\nmarkdown.extensions.extra\n])\n\n\n\n\n\nThe same applies to the command line:\n\n\n$ python -m markdown -x markdown.extensions.extra input.txt\n\n\n\n\n\nSee the \ndocumentation\n for a full explanation\nof the current behavior.\n\n\n\n\n\n\nThe previously documented method of appending the extension configuration as\n  a string to the extension name will be deprecated in Python-Markdown\n  version 2.6 and will raise a \nPendingDeprecationWarning\n in 2.5. The\n  \nextension_configs\n keyword should\n  be used instead. See the \ndocumentation\n\n  for a full explanation of the current behavior.\n\n\n\n\n\n\nWhat\ns New in Python-Markdown 2.5\n\n\n\n\n\n\nThe \nSmarty Extension\n has had a number of additional configuration settings\n  added, which allows one to define their own substitutions to better support\n  languages other than English. Thanks to \nMartin Altmayer\n for implementing this\n  feature.\n\n\n\n\n\n\nNamed Extensions (strings passed to the \nextensions\n keyword of\n  \nmarkdown.Markdown\n) can now point to any module and/or Class on your\n  PYTHONPATH. While dot notation was previously supported, a module could not\n  be at the root of your PYTHONPATH. The name had to contain at least one dot\n  (requiring it to be a sub-module). This restriction no longer exists.\n\n\nAdditionally, a Class may be specified in the name. The class must be at the\nend of the name (which uses dot notation from PYTHONPATH) and be separated\nby a colon from the module.\n\n\nTherefore, if you were to import the class like this:\n\n\nfrom\n \npath.to.module\n \nimport\n \nSomeExtensionClass\n\n\n\n\n\n\nThen the named extension would comprise this string:\n\n\npath.to.module:SomeExtensionClass\n\n\n\n\n\n\nThis allows multiple extensions to be implemented within the same module and\nstill accessible when the user is not able to import the extension directly\n(perhaps from a template filter or the command line).\n\n\nThis also means that extension modules are no longer required to include the\n\nmakeExtension\n function which returns an instance of the extension class.\nHowever, if the user does not specify the class name (she only provides\n\n\"path.to.module\"\n) the extension will fail to load without the\n\nmakeExtension\n function included in the module. Extension authors will want\nto document carefully what is required to load their extensions.\n\n\n\n\n\n\nThe Extension Configuration code has been refactored to make it a little\n  easier for extension authors to work with configuration settings. As a\n  result, the \nextension_configs\n keyword now accepts a dictionary\n  rather than requiring a list of tuples. A list of tuples is still supported\n  so no one needs to change their existing code. This should also simplify the\n  learning curve for new users.\n\n\nExtension authors are encouraged to review the new methods available on the\n\nmarkdown.extnesions.Extension\n class for handling configuration and adjust\ntheir code going forward. The included extensions provide a model for best\npractices. See the \nAPI\n documentation for a full explanation.\n\n\n\n\n\n\nThe \nCommand Line Interface\n now accepts a \n--extensions_config\n (or\n  \n-c\n) option which accepts a file name and passes the parsed content of a\n  \nYAML\n or \nJSON\n file to the \nextension_configs\n keyword of the\n  \nmarkdown.Markdown\n class. The contents of the YAML or JSON must map to a\n  Python Dictionary which matches the format required by the\n  \nextension_configs\n keyword. Note that \nPyYAML\n is required to parse YAML\n  files.\n\n\n\n\n\n\nThe \nAdmonition Extension\n is no longer considered \nexperimental.\n\n\n\n\n\n\nThere have been various refactors of the testing framework. While those\n  changes will not directly effect end users, the code is being better tested\n  which will benefit everyone.\n\n\n\n\n\n\nVarious bug fixes have been made. See the \ncommit\n  log\n for a\n  complete history of the changes.", 
            "title": "Release Notes for v.2.5"
        }, 
        {
            "location": "/change_log/release-2.5/#python-markdown-25-release-notes", 
            "text": "We are pleased to release Python-Markdown 2.5 which adds a few new features\nand fixes various bugs. See the list of changes below for details.  Python-Markdown version 2.5 supports Python versions 2.7, 3.2, 3.3, and 3.4.", 
            "title": "Python-Markdown 2.5 Release Notes"
        }, 
        {
            "location": "/change_log/release-2.5/#backwards-incompatible-changes", 
            "text": "Python-Markdown no longer supports Python version 2.6. You must be using Python\n  versions 2.7, 3.2, 3.3, or 3.4.    The  force_linenos  configuration key on the  CodeHilite Extension  has been  deprecated \n  and will raise a  KeyError  if provided. In the previous release (2.4), it was\n  issuing a  DeprecationWarning . The  linenums  keyword should be used\n  instead, which provides more control of the output.    Both  safe_mode  and the associated  html_replacement_text  keywords will be\n  deprecated in version 2.6 and will raise a  PendingDeprecationWarning  in\n  2.5. The so-called  safe mode  was never actually  safe  which has resulted in\n  many people having a false sense of security when using it. As an alternative,\n  the developers of Python-Markdown recommend that any untrusted content be\n  passed through an HTML sanitizer (like  Bleach ) after being converted to HTML\n  by markdown.  If your code previously looked like this:  html = markdown.markdown(text, same_mode=True)  Then it is recommended that you change your code to read something like this:  import   bleach  html   =   bleach . clean ( markdown . markdown ( text ))   If you are not interested in sanitizing untrusted text, but simply desire to\nescape raw HTML, then that can be accomplished through an extension which\nremoves HTML parsing:  from   markdown.extensions   import   Extension  class   EscapeHtml ( Extension ): \n     def   extendMarkdown ( self ,   md ,   md_globals ): \n         del   md . preprocessors [ html_block ] \n         del   md . inlinePatterns [ html ]  html   =   markdown . markdown ( text ,   extensions = [ EscapeHtml ()])   As the HTML would not be parsed with the above Extension, then the\nserializer will escape the raw HTML, which is exactly what happens now when safe_mode=\"escape\" .    Positional arguments on the  markdown.Markdown()  are pending deprecation as are\n  all except the  text  argument on the  markdown.markdown()  wrapper function.\n  Only keyword arguments should be used. For example, if your code previously\n  looked like this:   html = markdown.markdown(text, [ extra ])  Then it is recommended that you change it to read something like this:  html = markdown.markdown(text, extensions=[ extra ])   Note  This change is being made as a result of deprecating  \"safe_mode\"  as the safe_mode  argument was one of the positional arguments. When that argument\nis removed, the two arguments following it will no longer be at the correct\nposition. It is recommended that you always use keywords when they are supported\nfor this reason.     In previous versions of Python-Markdown, the built-in extensions received\n  special status and did not require the full path to be provided. Additionally,\n  third party extensions whose name started with  \"mdx_\"  received the same\n  special treatment. This behavior will be deprecated in version 2.6 and will\n  raise a  PendingDeprecationWarning  in 2.5. Ensure that you always use the\n  full path to your extensions. For example, if you previously did the\n  following:  markdown.markdown(text, extensions=[ extra ])  You should change your code to the following:  markdown.markdown(text, extensions=[ markdown.extensions.extra ])  The same applies to the command line:  $ python -m markdown -x markdown.extensions.extra input.txt  See the  documentation  for a full explanation\nof the current behavior.    The previously documented method of appending the extension configuration as\n  a string to the extension name will be deprecated in Python-Markdown\n  version 2.6 and will raise a  PendingDeprecationWarning  in 2.5. The\n   extension_configs  keyword should\n  be used instead. See the  documentation \n  for a full explanation of the current behavior.", 
            "title": "Backwards-incompatible Changes"
        }, 
        {
            "location": "/change_log/release-2.5/#whats-new-in-python-markdown-25", 
            "text": "The  Smarty Extension  has had a number of additional configuration settings\n  added, which allows one to define their own substitutions to better support\n  languages other than English. Thanks to  Martin Altmayer  for implementing this\n  feature.    Named Extensions (strings passed to the  extensions  keyword of\n   markdown.Markdown ) can now point to any module and/or Class on your\n  PYTHONPATH. While dot notation was previously supported, a module could not\n  be at the root of your PYTHONPATH. The name had to contain at least one dot\n  (requiring it to be a sub-module). This restriction no longer exists.  Additionally, a Class may be specified in the name. The class must be at the\nend of the name (which uses dot notation from PYTHONPATH) and be separated\nby a colon from the module.  Therefore, if you were to import the class like this:  from   path.to.module   import   SomeExtensionClass   Then the named extension would comprise this string:  path.to.module:SomeExtensionClass   This allows multiple extensions to be implemented within the same module and\nstill accessible when the user is not able to import the extension directly\n(perhaps from a template filter or the command line).  This also means that extension modules are no longer required to include the makeExtension  function which returns an instance of the extension class.\nHowever, if the user does not specify the class name (she only provides \"path.to.module\" ) the extension will fail to load without the makeExtension  function included in the module. Extension authors will want\nto document carefully what is required to load their extensions.    The Extension Configuration code has been refactored to make it a little\n  easier for extension authors to work with configuration settings. As a\n  result, the  extension_configs  keyword now accepts a dictionary\n  rather than requiring a list of tuples. A list of tuples is still supported\n  so no one needs to change their existing code. This should also simplify the\n  learning curve for new users.  Extension authors are encouraged to review the new methods available on the markdown.extnesions.Extension  class for handling configuration and adjust\ntheir code going forward. The included extensions provide a model for best\npractices. See the  API  documentation for a full explanation.    The  Command Line Interface  now accepts a  --extensions_config  (or\n   -c ) option which accepts a file name and passes the parsed content of a\n   YAML  or  JSON  file to the  extension_configs  keyword of the\n   markdown.Markdown  class. The contents of the YAML or JSON must map to a\n  Python Dictionary which matches the format required by the\n   extension_configs  keyword. Note that  PyYAML  is required to parse YAML\n  files.    The  Admonition Extension  is no longer considered  experimental.    There have been various refactors of the testing framework. While those\n  changes will not directly effect end users, the code is being better tested\n  which will benefit everyone.    Various bug fixes have been made. See the  commit\n  log  for a\n  complete history of the changes.", 
            "title": "What's New in Python-Markdown 2.5"
        }, 
        {
            "location": "/change_log/release-2.4/", 
            "text": "Python-Markdown 2.4 Release Notes\n\n\nWe are pleased to release Python-Markdown 2.4 which adds one new extension\nand fixes various bugs. See the list of changes below for details.\n\n\nPython-Markdown supports Python versions 2.6, 2.7, 3.1, 3.2, and 3.3.\n\n\nBackwards-incompatible Changes\n\n\n\n\n\n\nThe \nforce_linenos\n configuration setting of the CodeHilite extension has been\n  marked as \nDeprecated\n. It had previously been marked as \nPending\n  Deprecation\n in version 2.3 when a new setting \nlinenums\n was added to replace\n  it. See documentation for the \nCodeHilite Extension\n for an explanation of the\n  new \nlinenums\n setting. The new setting will honor the old \nforce_linenos\n if\n  it is set, but \nforce_linenos\n will raise a \nDeprecationWarning\n and will\n  likely be removed in a future version of Python-Markdown.\n\n\n\n\n\n\nURLs are no longer percent-encoded. This improves compatibility with the\n  original (written in Perl) Markdown implementation. Please percent-encode your\n  URLs manually when needed.\n\n\n\n\n\n\nWhat\ns New in Python-Markdown 2.4\n\n\n\n\n\n\nThanks to the hard work of \nDmitry Shachnev\n the \nSmarty Extension\n has been\n  added, which implements \nSmartyPants\n using Python-Markdown\ns Extension API.\n  This offers a few benefits over a third party script. The HTML does not need\n  to be \ntokenized\n twice, no hacks are required to combine SmartyPants and code\n  highlighting, and we get markdown\ns escaping feature for free. Please try it\n  out and report bugs and/or improvements.\n\n\n\n\n\n\nThe \nTable of Contents Extension\n now supports new \npermalink\n option for\n  creating \nSphinx\n-style anchor links.\n\n\n\n\n\n\nIt is now possible to enable Markdown formatting inside HTML blocks by\n  appending \nmarkdown=1\n to opening tag attributes. See [Markdown Inside HTML\n  Blocks] section for details. Thanks to \nryneeverett\n for implementing this\n  feature.\n\n\n\n\n\n\nThe code blocks now support emphasizing some of the code lines. To use this\n  feature, specify \nhl_lines\n option after language name, for example (using the\n  \nFenced Code Extension\n):\n\n\n```.python hl_lines=\n1 3\n\n# This line will be emphasized.\n# This one won\nt.\n# This one will be also emphasized.\n```\n\n\n\n\n\nThanks to \nA. Jesse Jiryu Davis\n for implementing this feature.\n\n\n\n\n\n\nVarious bug fixes have been made. See the \ncommit\n  log\n for a\n  complete history of the changes.", 
            "title": "Release Notes for v.2.4"
        }, 
        {
            "location": "/change_log/release-2.4/#python-markdown-24-release-notes", 
            "text": "We are pleased to release Python-Markdown 2.4 which adds one new extension\nand fixes various bugs. See the list of changes below for details.  Python-Markdown supports Python versions 2.6, 2.7, 3.1, 3.2, and 3.3.", 
            "title": "Python-Markdown 2.4 Release Notes"
        }, 
        {
            "location": "/change_log/release-2.4/#backwards-incompatible-changes", 
            "text": "The  force_linenos  configuration setting of the CodeHilite extension has been\n  marked as  Deprecated . It had previously been marked as  Pending\n  Deprecation  in version 2.3 when a new setting  linenums  was added to replace\n  it. See documentation for the  CodeHilite Extension  for an explanation of the\n  new  linenums  setting. The new setting will honor the old  force_linenos  if\n  it is set, but  force_linenos  will raise a  DeprecationWarning  and will\n  likely be removed in a future version of Python-Markdown.    URLs are no longer percent-encoded. This improves compatibility with the\n  original (written in Perl) Markdown implementation. Please percent-encode your\n  URLs manually when needed.", 
            "title": "Backwards-incompatible Changes"
        }, 
        {
            "location": "/change_log/release-2.4/#whats-new-in-python-markdown-24", 
            "text": "Thanks to the hard work of  Dmitry Shachnev  the  Smarty Extension  has been\n  added, which implements  SmartyPants  using Python-Markdown s Extension API.\n  This offers a few benefits over a third party script. The HTML does not need\n  to be  tokenized  twice, no hacks are required to combine SmartyPants and code\n  highlighting, and we get markdown s escaping feature for free. Please try it\n  out and report bugs and/or improvements.    The  Table of Contents Extension  now supports new  permalink  option for\n  creating  Sphinx -style anchor links.    It is now possible to enable Markdown formatting inside HTML blocks by\n  appending  markdown=1  to opening tag attributes. See [Markdown Inside HTML\n  Blocks] section for details. Thanks to  ryneeverett  for implementing this\n  feature.    The code blocks now support emphasizing some of the code lines. To use this\n  feature, specify  hl_lines  option after language name, for example (using the\n   Fenced Code Extension ):  ```.python hl_lines= 1 3 \n# This line will be emphasized.\n# This one won t.\n# This one will be also emphasized.\n```  Thanks to  A. Jesse Jiryu Davis  for implementing this feature.    Various bug fixes have been made. See the  commit\n  log  for a\n  complete history of the changes.", 
            "title": "What's New in Python-Markdown 2.4"
        }, 
        {
            "location": "/change_log/release-2.3/", 
            "text": "Python-Markdown 2.3 Release Notes\n\n\nWe are pleased to release Python-Markdown 2.3 which adds one new extension,\nremoves a few old (obsolete) extensions, and now runs on both Python 2 and\nPython 3 without running the 2to3 conversion tool. See the list of changes\nbelow for details.\n\n\nPython-Markdown supports Python versions 2.6, 2.7, 3.1, 3.2, and 3.3.\n\n\nBackwards-incompatible Changes\n\n\n\n\n\n\nSupport has been dropped for Python 2.5. No guarantees are made that the\n  library will work in any version of Python lower than 2.6. As all supported\n  Python versions include the ElementTree library, Python-Markdown will no\n  longer try to import a third-party installation of ElementTree.\n\n\n\n\n\n\nAll classes are now \nnew-style\n classes. In other words, all classes subclass\n  from \nobject\n. While this is not likely to affect most users, extension\n  authors may need to make a few minor adjustments to their code.\n\n\n\n\n\n\nsafe_mode\n has been further restricted. Markdown formatted links must be of a\n  known white-listed scheme when in \nsafe_mode\n or the URL is discarded. The\n  white-listed schemes are: \nHTTP\n, \nHTTPS\n, \nFTP\n, \nFTPS\n, \nMAILTO\n, and\n  \nnews\n. Schemeless URLs are also permitted, but are checked in other ways - as\n  they have been for some time.\n\n\n\n\n\n\nThe ids assigned to footnotes now contain a dash (\n-\n) rather than a colon\n  (\n:\n) when \noutput_format\n it set to \n\"html5\"\n or \n\"xhtml5\"\n. If you are\n  making reference to those ids in your JavaScript or CSS and using the HTML5\n  output, you will need to update your code accordingly. No changes are\n  necessary if you are outputting XHTML (the default) or HTML4.\n\n\n\n\n\n\nThe \nforce_linenos\n configuration setting of the CodeHilite extension has been\n  marked as \nPending Deprecation\n and a new setting \nlinenums\n has been added\n  to replace it. See documentation for the \nCodeHilite Extension\n for an\n  explanation of the new \nlinenums\n setting. The new setting will honor the old\n  \nforce_linenos\n if it is set, but it will raise a \nPendingDeprecationWarning\n\n  and will likely be removed in a future version of Python-Markdown.\n\n\n\n\n\n\nThe \nRSS\n extension has been removed and no longer ships with Python-Markdown.\n  If you would like to continue using the extension (not recommended), it is\n  archived on \nGitHub\n.\n\n\n\n\n\n\nThe \nHTML Tidy\n Extension has been removed and no longer ships with\n  Python-Markdown. If you would like to continue using the extension (not\n  recommended), it is archived on\n  \nGitHub\n. Note that the underlying\n  library, uTidylib, is not Python 3 compatible. Instead, it is recommended that\n  the newer \nPyTidyLib\n (version 0.2.2+ for Python 3 comparability - install\n  from GitHub not PyPI) be used. As the API for that library is rather simple,\n  it is recommended that the output of Markdown be wrapped in a call to\n  PyTidyLib rather than using an extension (for example:\n  \ntidylib.tidy_fragment(markdown.markdown(source), options={...})\n).\n\n\n\n\n\n\nWhat\ns New in Python-Markdown 2.3\n\n\n\n\n\n\nThe entire code base now universally runs in Python 2 and Python 3 without any\n  need for running the 2to3 conversion tool. This not only simplifies testing,\n  but by using Unicode_literals, results in more consistent behavior across\n  Python versions. Additionally, the relative imports (made possible in Python 2\n  via absolute_import) allows the entire library to more easily be embedded in a\n  sub-directory of another project. The various files within the library will\n  still import each other properly even though \nmarkdown\n may not be in Python\ns\n  root namespace.\n\n\n\n\n\n\nThe \nAdmonition Extension\n has been added, which implements \nrST-style\n\n  admonitions in the Markdown syntax. However, be warned that this extension is\n  experimental and the syntax and behavior is still subject to change. Please\n  try it out and report bugs and/or improvements.\n\n\n\n\n\n\nVarious bug fixes have been made. See the \ncommit\n  log\n for a\n  complete history of the changes.", 
            "title": "Release Notes for v.2.3"
        }, 
        {
            "location": "/change_log/release-2.3/#python-markdown-23-release-notes", 
            "text": "We are pleased to release Python-Markdown 2.3 which adds one new extension,\nremoves a few old (obsolete) extensions, and now runs on both Python 2 and\nPython 3 without running the 2to3 conversion tool. See the list of changes\nbelow for details.  Python-Markdown supports Python versions 2.6, 2.7, 3.1, 3.2, and 3.3.", 
            "title": "Python-Markdown 2.3 Release Notes"
        }, 
        {
            "location": "/change_log/release-2.3/#backwards-incompatible-changes", 
            "text": "Support has been dropped for Python 2.5. No guarantees are made that the\n  library will work in any version of Python lower than 2.6. As all supported\n  Python versions include the ElementTree library, Python-Markdown will no\n  longer try to import a third-party installation of ElementTree.    All classes are now  new-style  classes. In other words, all classes subclass\n  from  object . While this is not likely to affect most users, extension\n  authors may need to make a few minor adjustments to their code.    safe_mode  has been further restricted. Markdown formatted links must be of a\n  known white-listed scheme when in  safe_mode  or the URL is discarded. The\n  white-listed schemes are:  HTTP ,  HTTPS ,  FTP ,  FTPS ,  MAILTO , and\n   news . Schemeless URLs are also permitted, but are checked in other ways - as\n  they have been for some time.    The ids assigned to footnotes now contain a dash ( - ) rather than a colon\n  ( : ) when  output_format  it set to  \"html5\"  or  \"xhtml5\" . If you are\n  making reference to those ids in your JavaScript or CSS and using the HTML5\n  output, you will need to update your code accordingly. No changes are\n  necessary if you are outputting XHTML (the default) or HTML4.    The  force_linenos  configuration setting of the CodeHilite extension has been\n  marked as  Pending Deprecation  and a new setting  linenums  has been added\n  to replace it. See documentation for the  CodeHilite Extension  for an\n  explanation of the new  linenums  setting. The new setting will honor the old\n   force_linenos  if it is set, but it will raise a  PendingDeprecationWarning \n  and will likely be removed in a future version of Python-Markdown.    The  RSS  extension has been removed and no longer ships with Python-Markdown.\n  If you would like to continue using the extension (not recommended), it is\n  archived on  GitHub .    The  HTML Tidy  Extension has been removed and no longer ships with\n  Python-Markdown. If you would like to continue using the extension (not\n  recommended), it is archived on\n   GitHub . Note that the underlying\n  library, uTidylib, is not Python 3 compatible. Instead, it is recommended that\n  the newer  PyTidyLib  (version 0.2.2+ for Python 3 comparability - install\n  from GitHub not PyPI) be used. As the API for that library is rather simple,\n  it is recommended that the output of Markdown be wrapped in a call to\n  PyTidyLib rather than using an extension (for example:\n   tidylib.tidy_fragment(markdown.markdown(source), options={...}) ).", 
            "title": "Backwards-incompatible Changes"
        }, 
        {
            "location": "/change_log/release-2.3/#whats-new-in-python-markdown-23", 
            "text": "The entire code base now universally runs in Python 2 and Python 3 without any\n  need for running the 2to3 conversion tool. This not only simplifies testing,\n  but by using Unicode_literals, results in more consistent behavior across\n  Python versions. Additionally, the relative imports (made possible in Python 2\n  via absolute_import) allows the entire library to more easily be embedded in a\n  sub-directory of another project. The various files within the library will\n  still import each other properly even though  markdown  may not be in Python s\n  root namespace.    The  Admonition Extension  has been added, which implements  rST-style \n  admonitions in the Markdown syntax. However, be warned that this extension is\n  experimental and the syntax and behavior is still subject to change. Please\n  try it out and report bugs and/or improvements.    Various bug fixes have been made. See the  commit\n  log  for a\n  complete history of the changes.", 
            "title": "What's New in Python-Markdown 2.3"
        }, 
        {
            "location": "/change_log/release-2.2/", 
            "text": "Python-Markdown 2.2 Release Notes\n\n\nWe are pleased to release Python-Markdown 2.2 which makes improvements on 2.1.\nWhile 2.2 is primarily a bug fix release, some internal improvements were made\nto the parser, and a few security issues were resolved.\n\n\nPython-Markdown supports Python versions 2.5, 2.6, 2.7, 3.1, and 3.2 out\nof the box.\n\n\nBackwards-incompatible Changes\n\n\nWhile Python-Markdown has received only minor internal changes since the last\nrelease, there are a few backward-incompatible changes to note:\n\n\n\n\n\n\nSupport had been dropped for Python 2.4. No guarantees are made that the\n  library will work in any version of Python lower than 2.5. Additionally, while\n  the library had been tested with Python 2.5, consider Python 2.5 support to be\n  depreciated. It is not likely that any future versions will continue to\n  support any version of Python less than 2.6.\n\n\n\n\n\n\nFor many years Python-Markdown has identified \nins\n and \ndel\n tags in raw\n  HTML input as block level tags. As they are actually inline level tags, this\n  behavior has been changed. This may result in slightly different output. While\n  in most cases, the new output is more correct, there may be a few edge cases\n  where a document author has relied on the previous incorrect behavior. It is\n  likely that a few adjustments may need to be made to those documents.\n\n\n\n\n\n\nThe behavior of the \nenable_attributes\n keyword has been slightly altered. If\n  authors have been using attributes in documents with \nsafe_mode\n on, those\n  attributes will no longer be parsed unless \nenable_attributes\n is explicitly\n  set to \nTrue\n. This change was made to prevent untrusted authors from\n  injecting potentially harmful JavaScript in documents. This change had no\n  effect when not in \nsafe_mode\n.\n\n\n\n\n\n\nWhat\ns New in Python-Markdown 2.2\n\n\nThe docs were refactored and can now be found at\n\nhttp://packages.python.org/Markdown/\n. The docs are now maintained in the\nRepository and are generated by the \nsetup.py build_docs\n command.\n\n\nThe \nSane_Lists\n\nextension was added. The Sane Lists Extension alters the behavior of the\nMarkdown List syntax to be less surprising by not allowing the mixing of list\ntypes. In other words, an ordered list will not continue when an unordered list\nitem is encountered and vice versa.\n\n\nMarkdown now excepts a full path to an extension module. In other words, your\nextensions no longer need to be in the primary namespace (and start with \nmdx_\n)\nfor Markdown to find them. Just do \nMarkdown(extension=['path.to.some.module'])\n.\nAs long as the provided module contains a compatible extension, the extension\nwill be loaded.\n\n\nThe BlockParser API was slightly altered to allow \nblockprocessor.run\n to return\n\nTrue\n or \nFalse\n which provides more control to the block processor loop from\nwithin any Blockprocessor instance.\n\n\nVarious bug fixes have been made. See the\n\ncommit log\n\nfor a complete history of the changes.", 
            "title": "Release Notes for v.2.2"
        }, 
        {
            "location": "/change_log/release-2.2/#python-markdown-22-release-notes", 
            "text": "We are pleased to release Python-Markdown 2.2 which makes improvements on 2.1.\nWhile 2.2 is primarily a bug fix release, some internal improvements were made\nto the parser, and a few security issues were resolved.  Python-Markdown supports Python versions 2.5, 2.6, 2.7, 3.1, and 3.2 out\nof the box.", 
            "title": "Python-Markdown 2.2 Release Notes"
        }, 
        {
            "location": "/change_log/release-2.2/#backwards-incompatible-changes", 
            "text": "While Python-Markdown has received only minor internal changes since the last\nrelease, there are a few backward-incompatible changes to note:    Support had been dropped for Python 2.4. No guarantees are made that the\n  library will work in any version of Python lower than 2.5. Additionally, while\n  the library had been tested with Python 2.5, consider Python 2.5 support to be\n  depreciated. It is not likely that any future versions will continue to\n  support any version of Python less than 2.6.    For many years Python-Markdown has identified  ins  and  del  tags in raw\n  HTML input as block level tags. As they are actually inline level tags, this\n  behavior has been changed. This may result in slightly different output. While\n  in most cases, the new output is more correct, there may be a few edge cases\n  where a document author has relied on the previous incorrect behavior. It is\n  likely that a few adjustments may need to be made to those documents.    The behavior of the  enable_attributes  keyword has been slightly altered. If\n  authors have been using attributes in documents with  safe_mode  on, those\n  attributes will no longer be parsed unless  enable_attributes  is explicitly\n  set to  True . This change was made to prevent untrusted authors from\n  injecting potentially harmful JavaScript in documents. This change had no\n  effect when not in  safe_mode .", 
            "title": "Backwards-incompatible Changes"
        }, 
        {
            "location": "/change_log/release-2.2/#whats-new-in-python-markdown-22", 
            "text": "The docs were refactored and can now be found at http://packages.python.org/Markdown/ . The docs are now maintained in the\nRepository and are generated by the  setup.py build_docs  command.  The  Sane_Lists \nextension was added. The Sane Lists Extension alters the behavior of the\nMarkdown List syntax to be less surprising by not allowing the mixing of list\ntypes. In other words, an ordered list will not continue when an unordered list\nitem is encountered and vice versa.  Markdown now excepts a full path to an extension module. In other words, your\nextensions no longer need to be in the primary namespace (and start with  mdx_ )\nfor Markdown to find them. Just do  Markdown(extension=['path.to.some.module']) .\nAs long as the provided module contains a compatible extension, the extension\nwill be loaded.  The BlockParser API was slightly altered to allow  blockprocessor.run  to return True  or  False  which provides more control to the block processor loop from\nwithin any Blockprocessor instance.  Various bug fixes have been made. See the commit log \nfor a complete history of the changes.", 
            "title": "What's New in Python-Markdown 2.2"
        }, 
        {
            "location": "/change_log/release-2.1/", 
            "text": "Python-Markdown 2.1 Release Notes\n\n\nWe are pleased to release Python-Markdown 2.1 which makes many\nimprovements on 2.0. In fact, we consider 2.1 to be what 2.0 should have been.\nWhile 2.1 consists mostly of bug fixes, bringing Python-Markdown more inline\nwith other implementations, some internal improvements were made to the parser,\na few new built-in extensions were added, and HTML5 support was added.\n\n\nPython-Markdown supports Python versions 2.4, 2.5, 2.6, 2.7, 3.1, and 3.2 out\nof the box. In fact, the same code base installs on Python 3.1 and 3.2 with no\nextra work by the end user.\n\n\nBackwards-incompatible Changes\n\n\nWhile Python-Markdown has received only minor internal changes since the last\nrelease, there are a few backward-incompatible changes to note:\n\n\n\n\n\n\nSupport had been dropped for Python 2.3. No guarantees are made that the\n  library will work in any version of Python lower than 2.4. Additionally, while\n  the library had been tested with Python 2.4, consider Python 2.4 support to be\n  depreciated. It is not likely that any future versions will continue to\n  support any version of Python less than 2.5. Note that Python 3.0 is not\n  supported due to a bug in its 2to3 tool. If you must use Python-Markdown with\n  Python 3.0, it is suggested you manually use Python 3.1\ns 2to3 tool to do a\n  conversion.\n\n\n\n\n\n\nPython-Markdown previously accepted positional arguments on its class and\n  wrapper methods. It now expects keyword arguments. Currently, the positional\n  arguments should continue to work, but the solution feels hacky and may be\n  removed in a future version. All users are encouraged to use keyword arguments\n  as documented in the \nLibrary Reference\n.\n\n\n\n\n\n\nPast versions of Python-Markdown provided module level Global variables which\n  controlled the behavior of a few different aspects of the parser. Those global\n  variables have been replaced with attributes on the Markdown class.\n  Additionally, those attributes are settable as keyword arguments when\n  initializing a class instance. Therefore, if you were editing the global\n  variables (either by editing the source or by overriding them in your code),\n  you should now set them on the class. See the \nLibrary\n  Reference\n for the options available.\n\n\n\n\n\n\nIf you have been using the \nHeaderId\n extension to\n  define custom ids on headers, you will want to switch to using the new\n  \nAttribute List\n extension. The HeaderId extension\n  now only auto-generates ids on headers which have not already had ids defined.\n  Note that the \nExtra\n extension has been switched to\n  use Attribute Lists instead of HeaderId as it did previously.\n\n\n\n\n\n\nSome code was moved into the \nmarkdown.util\n namespace which was previously in\n  the \nmarkdown\n namespace. Extension authors may need to adjust a few import\n  statements in their extensions to work with the changes.\n\n\n\n\n\n\nThe command line script name was changed to \nmarkdown_py\n. The previous name\n  (\nmarkdown\n) was conflicting with people (and Linux package systems) who also\n  had markdown.pl installed on there system as markdown.pl\ns command line script\n  was also named \nmarkdown\n. Be aware that installing Python-Markdown 2.1 will\n  not remove the old versions of the script with different names. You may want\n  to remove them yourself as they are unlikely to work properly.\n\n\n\n\n\n\nWhat\ns New in Python-Markdown 2.1\n\n\nThree new extensions were added. \nAttribute Lists\n,\nwhich was inspired by Maruku\ns feature of the same name,\n\nNewline to Break\n, which was inspired by GitHub\nFlavored Markdown, and \nSmart Strong\n, which\nfills a hole in the Extra extension.\n\n\nHTML5 is now supported. All this really means is that new block level elements\nintroduced in the HTML5 spec are now properly recognized as raw HTML. As\nvalid  HTML5 can consist of either HTML4 or XHTML1, there is no need to add a\nnew HTML5  serializers. That said, \nhtml5\n and \nxhtml5\n have been added as\naliases of the \nhtml4\n and \nxhtml1\n serializers respectively.\n\n\nAn XHTML serializer has been added. Previously, ElementTree\ns XML serializer\nwas being used for XHTML output. With the new serializer we are able to avoid\nmore invalid output like empty elements (i.e., \np /\n) which can choke\nbrowsers.\n\n\nImproved support for Python 3.x. Now when running \nsetupy.py install\n in\nPython 3.1 or greater the 2to3 tool is run automatically. Note that Python 3.0\nis not supported due to a bug in its 2to3 tool. If you must use Python-Markdown\nwith Python 3.0, it is suggested you manually use Python 3.1\ns 2to3 tool to\ndo a conversion.\n\n\nMethods on instances of the Markdown class that do not return results can now\nbe changed allowing one to do \nmd.reset().convert(moretext)\n.\n\n\nThe Markdown class was refactored so that a subclass could define it\ns own\n\nbuild_parser\n method which would build a completely different parser. In\nother words, one could use the basic machinery in the markdown library to\nbuild a parser of a different markup language without the overhead of building\nthe markdown parser and throwing it away.\n\n\nImport statements within markdown have been improved so that third party\nlibraries can embed the markdown library if they desire (licensing permitting).\n\n\nAdded support for Python\ns \n-m\n command line option. You can run the markdown\npackage as a command line script. Do \npython -m markdown [options] [args]\n.\nNote that this is only fully supported in Python 2.7+. Python 2.5 \n 2.6\nrequire you to call the module directly (\nmarkdown.__main__\n) rather than\nthe package (\nmarkdown\n). This does not work in Python 2.4.\n\n\nThe command line script has been renamed to \nmarkdown_py\n which avoids all the\nvarious problems we had with previous names.  Also improved the command line\nscript to accept input on \nstdin\n.\n\n\nThe testing framework has been completely rebuilt using the Nose testing\nframework. This provides a number of benefits including the ability to better\ntest the built-in extensions and other options available to change the parsing\nbehavior. See the \nTest Suite\n documentation for details.\n\n\nVarious bug fixes have been made, which are too numerous to list here. See the\n\ncommit log\n for a\ncomplete history of the changes.", 
            "title": "Release Notes for v.2.1"
        }, 
        {
            "location": "/change_log/release-2.1/#python-markdown-21-release-notes", 
            "text": "We are pleased to release Python-Markdown 2.1 which makes many\nimprovements on 2.0. In fact, we consider 2.1 to be what 2.0 should have been.\nWhile 2.1 consists mostly of bug fixes, bringing Python-Markdown more inline\nwith other implementations, some internal improvements were made to the parser,\na few new built-in extensions were added, and HTML5 support was added.  Python-Markdown supports Python versions 2.4, 2.5, 2.6, 2.7, 3.1, and 3.2 out\nof the box. In fact, the same code base installs on Python 3.1 and 3.2 with no\nextra work by the end user.", 
            "title": "Python-Markdown 2.1 Release Notes"
        }, 
        {
            "location": "/change_log/release-2.1/#backwards-incompatible-changes", 
            "text": "While Python-Markdown has received only minor internal changes since the last\nrelease, there are a few backward-incompatible changes to note:    Support had been dropped for Python 2.3. No guarantees are made that the\n  library will work in any version of Python lower than 2.4. Additionally, while\n  the library had been tested with Python 2.4, consider Python 2.4 support to be\n  depreciated. It is not likely that any future versions will continue to\n  support any version of Python less than 2.5. Note that Python 3.0 is not\n  supported due to a bug in its 2to3 tool. If you must use Python-Markdown with\n  Python 3.0, it is suggested you manually use Python 3.1 s 2to3 tool to do a\n  conversion.    Python-Markdown previously accepted positional arguments on its class and\n  wrapper methods. It now expects keyword arguments. Currently, the positional\n  arguments should continue to work, but the solution feels hacky and may be\n  removed in a future version. All users are encouraged to use keyword arguments\n  as documented in the  Library Reference .    Past versions of Python-Markdown provided module level Global variables which\n  controlled the behavior of a few different aspects of the parser. Those global\n  variables have been replaced with attributes on the Markdown class.\n  Additionally, those attributes are settable as keyword arguments when\n  initializing a class instance. Therefore, if you were editing the global\n  variables (either by editing the source or by overriding them in your code),\n  you should now set them on the class. See the  Library\n  Reference  for the options available.    If you have been using the  HeaderId  extension to\n  define custom ids on headers, you will want to switch to using the new\n   Attribute List  extension. The HeaderId extension\n  now only auto-generates ids on headers which have not already had ids defined.\n  Note that the  Extra  extension has been switched to\n  use Attribute Lists instead of HeaderId as it did previously.    Some code was moved into the  markdown.util  namespace which was previously in\n  the  markdown  namespace. Extension authors may need to adjust a few import\n  statements in their extensions to work with the changes.    The command line script name was changed to  markdown_py . The previous name\n  ( markdown ) was conflicting with people (and Linux package systems) who also\n  had markdown.pl installed on there system as markdown.pl s command line script\n  was also named  markdown . Be aware that installing Python-Markdown 2.1 will\n  not remove the old versions of the script with different names. You may want\n  to remove them yourself as they are unlikely to work properly.", 
            "title": "Backwards-incompatible Changes"
        }, 
        {
            "location": "/change_log/release-2.1/#whats-new-in-python-markdown-21", 
            "text": "Three new extensions were added.  Attribute Lists ,\nwhich was inspired by Maruku s feature of the same name, Newline to Break , which was inspired by GitHub\nFlavored Markdown, and  Smart Strong , which\nfills a hole in the Extra extension.  HTML5 is now supported. All this really means is that new block level elements\nintroduced in the HTML5 spec are now properly recognized as raw HTML. As\nvalid  HTML5 can consist of either HTML4 or XHTML1, there is no need to add a\nnew HTML5  serializers. That said,  html5  and  xhtml5  have been added as\naliases of the  html4  and  xhtml1  serializers respectively.  An XHTML serializer has been added. Previously, ElementTree s XML serializer\nwas being used for XHTML output. With the new serializer we are able to avoid\nmore invalid output like empty elements (i.e.,  p / ) which can choke\nbrowsers.  Improved support for Python 3.x. Now when running  setupy.py install  in\nPython 3.1 or greater the 2to3 tool is run automatically. Note that Python 3.0\nis not supported due to a bug in its 2to3 tool. If you must use Python-Markdown\nwith Python 3.0, it is suggested you manually use Python 3.1 s 2to3 tool to\ndo a conversion.  Methods on instances of the Markdown class that do not return results can now\nbe changed allowing one to do  md.reset().convert(moretext) .  The Markdown class was refactored so that a subclass could define it s own build_parser  method which would build a completely different parser. In\nother words, one could use the basic machinery in the markdown library to\nbuild a parser of a different markup language without the overhead of building\nthe markdown parser and throwing it away.  Import statements within markdown have been improved so that third party\nlibraries can embed the markdown library if they desire (licensing permitting).  Added support for Python s  -m  command line option. You can run the markdown\npackage as a command line script. Do  python -m markdown [options] [args] .\nNote that this is only fully supported in Python 2.7+. Python 2.5   2.6\nrequire you to call the module directly ( markdown.__main__ ) rather than\nthe package ( markdown ). This does not work in Python 2.4.  The command line script has been renamed to  markdown_py  which avoids all the\nvarious problems we had with previous names.  Also improved the command line\nscript to accept input on  stdin .  The testing framework has been completely rebuilt using the Nose testing\nframework. This provides a number of benefits including the ability to better\ntest the built-in extensions and other options available to change the parsing\nbehavior. See the  Test Suite  documentation for details.  Various bug fixes have been made, which are too numerous to list here. See the commit log  for a\ncomplete history of the changes.", 
            "title": "What's New in Python-Markdown 2.1"
        }, 
        {
            "location": "/change_log/release-2.0/", 
            "text": "Python-Markdown 2.0 Release Notes\n\n\nWe are happy to release Python-Markdown 2.0, which has been over a year in the\nmaking. We have rewritten significant portions of the code, dramatically\nextending the extension API, increased performance, and added numerous\nextensions to the distribution (including an extension that mimics PHP Markdown\nExtra), all while maintaining backward compatibility with the end user API in\nversion 1.7.\n\n\nPython-Markdown supports Python versions 2.3, 2.4, 2.5, and 2.6. We have even\nreleased a version converted to Python 3.0!\n\n\nBackwards-incompatible Changes\n\n\nWhile Python-Markdown has experienced numerous internal changes, those changes\nshould only affect extension authors. If you have not written your own\nextensions, then you should not need to make any changes to your code.\nHowever, you may want to ensure that any third party extensions you are using\nare compatible with the new API.\n\n\nThe new extension API is fully \ndocumented\n in the docs.\nBelow is a summary of the significant changes:\n\n\n\n\nThe old home-grown NanoDOM has been replaced with ElementTree. Therefore all\n  extensions must use ElementTree rather than the old NanoDOM.\n\n\nThe various processors and patterns are now stored with OrderedDicts rather\n  than lists. Any code adding processors and/or patterns into Python-Markdown\n  will need to be adjusted to use the new API using OrderedDicts.\n\n\nThe various types of processors available have been either combined, added,\n  or removed. Ensure that your processors match the currently supported types.\n\n\n\n\nWhat\ns New in Python-Markdown 2.0\n\n\nThanks to the work of Artem Yunusov as part of GSoC 2008, Python-Markdown uses\nElementTree internally to build the (X)HTML document from markdown source text.\nThis has resolved various issues with the older home-grown NanoDOM and made\nnotable increases in performance.\n\n\nArtem also refactored the Inline Patterns to better support nested patterns\nwhich has resolved many inconsistencies in Python-Markdown\ns parsing of the\nmarkdown syntax.\n\n\nThe core parser had been completely rewritten, increasing performance and, for\nthe first time, making it possible to override/add/change the way block level\ncontent is parsed.\n\n\nPython-Markdown now parses markdown source text more closely to the other\npopular implementations (Perl, PHP, etc.) than it ever has before. With the\nexception of a few minor insignificant differences, any difference should be\nconsidered a bug, rather than a limitation of the parser.\n\n\nThe option to return HTML4 output as apposed to XHTML has been added. In\naddition, extensions should be able to easily add additional output formats.\n\n\nAs part of implementing markdown in the Dr. Project project (a Trac fork), among\nother things, David Wolever refactored the \nextension\n keyword so that it\naccepts either the extension names as strings or instances of extensions. This\nmakes it possible to include multiple extensions in a single module.\n\n\nNumerous extensions are included in the distribution by default. See\n\navailable_extensions\n for a complete list.\n\n\nSee the \nChange Log\n for a full list of changes.", 
            "title": "Release Notes for v.2.0"
        }, 
        {
            "location": "/change_log/release-2.0/#python-markdown-20-release-notes", 
            "text": "We are happy to release Python-Markdown 2.0, which has been over a year in the\nmaking. We have rewritten significant portions of the code, dramatically\nextending the extension API, increased performance, and added numerous\nextensions to the distribution (including an extension that mimics PHP Markdown\nExtra), all while maintaining backward compatibility with the end user API in\nversion 1.7.  Python-Markdown supports Python versions 2.3, 2.4, 2.5, and 2.6. We have even\nreleased a version converted to Python 3.0!", 
            "title": "Python-Markdown 2.0 Release Notes"
        }, 
        {
            "location": "/change_log/release-2.0/#backwards-incompatible-changes", 
            "text": "While Python-Markdown has experienced numerous internal changes, those changes\nshould only affect extension authors. If you have not written your own\nextensions, then you should not need to make any changes to your code.\nHowever, you may want to ensure that any third party extensions you are using\nare compatible with the new API.  The new extension API is fully  documented  in the docs.\nBelow is a summary of the significant changes:   The old home-grown NanoDOM has been replaced with ElementTree. Therefore all\n  extensions must use ElementTree rather than the old NanoDOM.  The various processors and patterns are now stored with OrderedDicts rather\n  than lists. Any code adding processors and/or patterns into Python-Markdown\n  will need to be adjusted to use the new API using OrderedDicts.  The various types of processors available have been either combined, added,\n  or removed. Ensure that your processors match the currently supported types.", 
            "title": "Backwards-incompatible Changes"
        }, 
        {
            "location": "/change_log/release-2.0/#whats-new-in-python-markdown-20", 
            "text": "Thanks to the work of Artem Yunusov as part of GSoC 2008, Python-Markdown uses\nElementTree internally to build the (X)HTML document from markdown source text.\nThis has resolved various issues with the older home-grown NanoDOM and made\nnotable increases in performance.  Artem also refactored the Inline Patterns to better support nested patterns\nwhich has resolved many inconsistencies in Python-Markdown s parsing of the\nmarkdown syntax.  The core parser had been completely rewritten, increasing performance and, for\nthe first time, making it possible to override/add/change the way block level\ncontent is parsed.  Python-Markdown now parses markdown source text more closely to the other\npopular implementations (Perl, PHP, etc.) than it ever has before. With the\nexception of a few minor insignificant differences, any difference should be\nconsidered a bug, rather than a limitation of the parser.  The option to return HTML4 output as apposed to XHTML has been added. In\naddition, extensions should be able to easily add additional output formats.  As part of implementing markdown in the Dr. Project project (a Trac fork), among\nother things, David Wolever refactored the  extension  keyword so that it\naccepts either the extension names as strings or instances of extensions. This\nmakes it possible to include multiple extensions in a single module.  Numerous extensions are included in the distribution by default. See available_extensions  for a complete list.  See the  Change Log  for a full list of changes.", 
            "title": "What's New in Python-Markdown 2.0"
        }, 
        {
            "location": "/authors/", 
            "text": "Primary Authors\n\n\n\n\n\n\nWaylan Limberg\n\n\nWaylan is the current maintainer of the code and has written much of the\ncurrent code base, included a complete refactor of the core. He started out\nby authoring many of the available extensions and later was asked to join\nYuri, where he began fixing numerous bugs, adding documentation and making\ngeneral improvements to the existing code base.\n\n\n\n\n\n\nYuri Takteyev\n\n\nYuri wrote most of the code found in version 1.x while procrastinating his\nPh.D. Various pieces of his code still exist, most notably the basic\nstructure.\n\n\n\n\n\n\nManfed Stienstra\n\n\nManfed wrote the original version of the script and is responsible for\nvarious parts of the existing code base.\n\n\n\n\n\n\nArtem Yunusov\n\n\nArtem, who as part of a 2008 GSoC project, refactored inline patterns,\nreplaced the NanoDOM with ElementTree support and made various other\nimprovements.\n\n\n\n\n\n\nDavid Wolever\n\n\nDavid refactored the extension API and made other improvements\nas he helped to integrate Markdown into Dr.Project.\n\n\n\n\n\n\nOther Contributors\n\n\nThe incomplete list of individuals below have provided patches or otherwise\ncontributed to the project in various ways. We would like to thank everyone\nwho has contributed to the project in any way.\n\n\n\n\nEric Abrahamsen\n\n\nJeff Balogh\n\n\nSergej Chodarev\n\n\nChris Clark\n\n\nTiago Cogumbreiro\n\n\nKjell Magne Fauske\n\n\nG. Clark Haynes\n\n\nDaniel Krech\n\n\nSteward Midwinter\n\n\nJack Miller\n\n\nNeale Pickett\n\n\nPaul Stansifer\n\n\nJohn Szakmeister\n\n\nMalcolm Tredinnick\n\n\nBen Wilson\n\n\nand many others who helped by reporting bugs", 
            "title": "Authors"
        }, 
        {
            "location": "/authors/#primary-authors", 
            "text": "Waylan Limberg  Waylan is the current maintainer of the code and has written much of the\ncurrent code base, included a complete refactor of the core. He started out\nby authoring many of the available extensions and later was asked to join\nYuri, where he began fixing numerous bugs, adding documentation and making\ngeneral improvements to the existing code base.    Yuri Takteyev  Yuri wrote most of the code found in version 1.x while procrastinating his\nPh.D. Various pieces of his code still exist, most notably the basic\nstructure.    Manfed Stienstra  Manfed wrote the original version of the script and is responsible for\nvarious parts of the existing code base.    Artem Yunusov  Artem, who as part of a 2008 GSoC project, refactored inline patterns,\nreplaced the NanoDOM with ElementTree support and made various other\nimprovements.    David Wolever  David refactored the extension API and made other improvements\nas he helped to integrate Markdown into Dr.Project.", 
            "title": "Primary Authors"
        }, 
        {
            "location": "/authors/#other-contributors", 
            "text": "The incomplete list of individuals below have provided patches or otherwise\ncontributed to the project in various ways. We would like to thank everyone\nwho has contributed to the project in any way.   Eric Abrahamsen  Jeff Balogh  Sergej Chodarev  Chris Clark  Tiago Cogumbreiro  Kjell Magne Fauske  G. Clark Haynes  Daniel Krech  Steward Midwinter  Jack Miller  Neale Pickett  Paul Stansifer  John Szakmeister  Malcolm Tredinnick  Ben Wilson  and many others who helped by reporting bugs", 
            "title": "Other Contributors"
        }
    ]
}